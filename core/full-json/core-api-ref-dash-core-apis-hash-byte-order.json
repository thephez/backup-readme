{
 "metadata": {
  "image": [],
  "title": "Hash Byte Order",
  "description": "Dash Core RPCs accept and return the byte-wise reverse of computed SHA-256 hash values.",
  "keywords": "",
  "robots": "index"
 },
 "api": {
  "method": "get",
  "url": "",
  "auth": "required",
  "results": {
   "codes": [
    {
     "status": 200,
     "language": "json",
     "code": "{}",
     "name": ""
    },
    {
     "status": 400,
     "language": "json",
     "code": "{}",
     "name": ""
    }
   ]
  },
  "params": []
 },
 "next": {
  "description": "",
  "pages": [
   {
    "category": "Core API Reference",
    "slug": "core-api-ref-remote-procedure-calls",
    "name": "Remote Procedure Calls",
    "icon": "file-text-o",
    "type": "doc"
   },
   {
    "type": "doc",
    "icon": "file-text-o",
    "name": "HTTP REST",
    "slug": "core-api-ref-http-rest",
    "category": "Core API Reference"
   }
  ]
 },
 "algolia": {
  "recordCount": 1,
  "publishPending": false,
  "translationFailure": false,
  "updatedAt": "2023-02-21T19:15:43.723Z"
 },
 "title": "Hash Byte Order",
 "icon": "",
 "updates": [
  "60d4cc4d0abc5c00411db953"
 ],
 "type": "basic",
 "slug": "core-api-ref-dash-core-apis-hash-byte-order",
 "excerpt": "",
 "body": "Dash Core RPCs accept and return the byte-wise reverse of computed SHA-256 hash values. For example, the Unix `sha256sum` command displays the SHA256(SHA256()) hash of mainnet block 300,000's header as:\n\n``` shell\n> /bin/echo -n '020000007ef055e1674d2e6551dba41cd214debbee34aeb544c7ec670000000000000000d3998963f80c5bab43fe8c26228e98d030edf4dcbe48a666f5c39e2d7a885c9102c86d536c890019593a470d' \\\n    | xxd -r -p \\\n    | sha256sum -b \\\n    | xxd -r -p \\\n    | sha256sum -b\n\n5472ac8b1187bfcf91d6d218bbda1eb2405d7c55f1f8cc820000000000000000 (Resulting hash)\n```\n\nThe result above is also how the hash appears in the previous-header-hash part of <<glossary:block>> 300,001's header:\n\n<pre>02000000<b>5472ac8b1187bfcf91d6d218bbda1eb2405d7c55f1f8cc82000\\\n0000000000000</b>ab0aaa377ca3f49b1545e2ae6b0667a08f42e72d8c24ae\\\n237140e28f14f3bb7c6bcc6d536c890019edd83ccf</pre>\n\nHowever, Dash Core's RPCs use the byte-wise reverse for hashes, so if you want to get information about block 675,776 using the [`getblock` RPC](core-api-ref-remote-procedure-calls-blockchain#getblock), you need to reverse the requested hash:\n\n``` shell\n> dash-cli getblock \\\n    000000000000327a66cd1011b2d1defd1417b7d9e39b439e8e67ba996ee92602\n```\n\n> \ud83d\udcd8\n>\n> Note: hex representation uses two characters to display each byte of data, which is why the reversed string looks somewhat mangled.\n\nThe rationale for the reversal is unknown, but it likely stems from Dash Core's use of hashes (which are byte arrays in C++) as integers for the purpose of determining whether the hash is below the network target. Whatever the reason for reversing header hashes, the reversal also extends to other hashes used in RPCs, such as <<glossary:TXIDs>> and merkle roots.\n\nAs header hashes and TXIDs are widely used as global identifiers in other Dash software, this reversal of hashes has become the standard way to refer to certain objects. The table below should make clear where each byte order is used.\n\n| Data | Internal Byte Order | RPC Byte Order |\n|---------------|---------------------|-----------------|\n| Example: SHA256(SHA256(0x00))  | Hash: 1406...539a         | Hash: 9a53...0614     |\n|---------------|---------------------|-----------------|\n| Header Hashes: SHA256(SHA256(block header))  | Used when constructing block headers  | Used by RPCs such as `getblock`; widely used in block explorers |\n|---------------|---------------------|-----------------|\n| Merkle Roots: SHA256(SHA256(TXIDs and merkle rows))  | Used when constructing block headers  | Returned by RPCs such as `getblock` |\n|---------------|---------------------|-----------------|\n| TXIDs: SHA256(SHA256(transaction))  | Used in transaction inputs | Used by RPCs such as `gettransaction` and transaction data parts of `getblock`; widely used in wallet programs |\n|---------------|---------------------|-----------------|\n| P2PKH Hashes: RIPEMD160(SHA256(pubkey))  | Used in both addresses and pubkey scripts  | **N/A:** RPCs use addresses which use internal byte order |\n|---------------|---------------------|-----------------|\n| P2SH Hashes: RIPEMD160(SHA256(redeem script))  | Used in both addresses and pubkey scripts | **N/A:** RPCs use addresses which use internal byte order |\n|---------------|---------------------|-----------------|\n\n> \ud83d\udcd8\n>\n> Note: RPCs which return raw results, such as `getrawtransaction` or the raw mode of `getblock`, always display hashes as they appear in blocks (<<glossary:internal byte order>>).\n\nThe code below may help you check byte order by generating hashes from raw hex.\n\n``` python\nfrom sys import byteorder\nfrom hashlib import sha256\nimport codecs\n\ndecode_hex = codecs.getdecoder('hex_codec')\nencode_hex = codecs.getencoder('hex_codec')\n\n# You can put in $data an 80-byte block header to get its header hash,\n# or a raw transaction to get its txid\ndata = decode_hex('00')[0]\ndata_hash = sha256(sha256(data).digest()).digest()\n\nprint(\"Warning: this code only tested on a little-endian x86_64 arch\")\nprint()\nprint(\"System byte order:        \", byteorder)\nprint(\"Internal-Byte-Order Hash: \", encode_hex(data_hash)[0])\nprint(\"RPC-Byte-Order Hash:      \", encode_hex(data_hash[::-1])[0])\n```",
 "order": 0,
 "isReference": false,
 "deprecated": false,
 "hidden": false,
 "sync_unique": "",
 "link_url": "",
 "link_external": false,
 "reusableContent": [],
 "previousSlug": "core-ref-dash-core-apis-hash-byte-order",
 "slugUpdatedAt": "2023-01-04T21:24:09.205Z",
 "revision": 5,
 "_id": "63f5176df91c7700118e77b1",
 "version": "63f5176df91c7700118e7825",
 "updatedAt": "2023-01-12T21:32:03.942Z",
 "createdAt": "2019-10-23T16:07:29.672Z",
 "project": "5daf2e65f4109c0040fd51e1",
 "user": "62b2101422da70001ee51d95",
 "parentDoc": null,
 "category": "63f5176df91c7700118e77a1",
 "__v": 3,
 "pendingAlgoliaPublish": false,
 "isApi": false,
 "id": "63f5176df91c7700118e77b1",
 "body_html": "Dash Core RPCs accept and return the byte-wise reverse of computed SHA-256 hash values. For example, the Unix `sha256sum` command displays the SHA256(SHA256()) hash of mainnet block 300,000's header as:\n\n``` shell\n> /bin/echo -n '020000007ef055e1674d2e6551dba41cd214debbee34aeb544c7ec670000000000000000d3998963f80c5bab43fe8c26228e98d030edf4dcbe48a666f5c39e2d7a885c9102c86d536c890019593a470d' \\\n    | xxd -r -p \\\n    | sha256sum -b \\\n    | xxd -r -p \\\n    | sha256sum -b\n\n5472ac8b1187bfcf91d6d218bbda1eb2405d7c55f1f8cc820000000000000000 (Resulting hash)\n```\n\nThe result above is also how the hash appears in the previous-header-hash part of <<glossary:block>> 300,001's header:\n\n<pre>02000000<b>5472ac8b1187bfcf91d6d218bbda1eb2405d7c55f1f8cc82000\\\n0000000000000</b>ab0aaa377ca3f49b1545e2ae6b0667a08f42e72d8c24ae\\\n237140e28f14f3bb7c6bcc6d536c890019edd83ccf</pre>\n\nHowever, Dash Core's RPCs use the byte-wise reverse for hashes, so if you want to get information about block 675,776 using the [`getblock` RPC](core-api-ref-remote-procedure-calls-blockchain#getblock), you need to reverse the requested hash:\n\n``` shell\n> dash-cli getblock \\\n    000000000000327a66cd1011b2d1defd1417b7d9e39b439e8e67ba996ee92602\n```\n\n> \ud83d\udcd8\n>\n> Note: hex representation uses two characters to display each byte of data, which is why the reversed string looks somewhat mangled.\n\nThe rationale for the reversal is unknown, but it likely stems from Dash Core's use of hashes (which are byte arrays in C++) as integers for the purpose of determining whether the hash is below the network target. Whatever the reason for reversing header hashes, the reversal also extends to other hashes used in RPCs, such as <<glossary:TXIDs>> and merkle roots.\n\nAs header hashes and TXIDs are widely used as global identifiers in other Dash software, this reversal of hashes has become the standard way to refer to certain objects. The table below should make clear where each byte order is used.\n\n| Data | Internal Byte Order | RPC Byte Order |\n|---------------|---------------------|-----------------|\n| Example: SHA256(SHA256(0x00))  | Hash: 1406...539a         | Hash: 9a53...0614     |\n|---------------|---------------------|-----------------|\n| Header Hashes: SHA256(SHA256(block header))  | Used when constructing block headers  | Used by RPCs such as `getblock`; widely used in block explorers |\n|---------------|---------------------|-----------------|\n| Merkle Roots: SHA256(SHA256(TXIDs and merkle rows))  | Used when constructing block headers  | Returned by RPCs such as `getblock` |\n|---------------|---------------------|-----------------|\n| TXIDs: SHA256(SHA256(transaction))  | Used in transaction inputs | Used by RPCs such as `gettransaction` and transaction data parts of `getblock`; widely used in wallet programs |\n|---------------|---------------------|-----------------|\n| P2PKH Hashes: RIPEMD160(SHA256(pubkey))  | Used in both addresses and pubkey scripts  | **N/A:** RPCs use addresses which use internal byte order |\n|---------------|---------------------|-----------------|\n| P2SH Hashes: RIPEMD160(SHA256(redeem script))  | Used in both addresses and pubkey scripts | **N/A:** RPCs use addresses which use internal byte order |\n|---------------|---------------------|-----------------|\n\n> \ud83d\udcd8\n>\n> Note: RPCs which return raw results, such as `getrawtransaction` or the raw mode of `getblock`, always display hashes as they appear in blocks (<<glossary:internal byte order>>).\n\nThe code below may help you check byte order by generating hashes from raw hex.\n\n``` python\nfrom sys import byteorder\nfrom hashlib import sha256\nimport codecs\n\ndecode_hex = codecs.getdecoder('hex_codec')\nencode_hex = codecs.getencoder('hex_codec')\n\n# You can put in $data an 80-byte block header to get its header hash,\n# or a raw transaction to get its txid\ndata = decode_hex('00')[0]\ndata_hash = sha256(sha256(data).digest()).digest()\n\nprint(\"Warning: this code only tested on a little-endian x86_64 arch\")\nprint()\nprint(\"System byte order:        \", byteorder)\nprint(\"Internal-Byte-Order Hash: \", encode_hex(data_hash)[0])\nprint(\"RPC-Byte-Order Hash:      \", encode_hex(data_hash[::-1])[0])\n```"
}