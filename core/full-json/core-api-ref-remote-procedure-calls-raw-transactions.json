{
 "metadata": {
  "image": [],
  "title": "Dash Raw Transaction RPC",
  "description": "This subsection covers all the raw transaction RPCs in Dash.",
  "keywords": "",
  "robots": "index"
 },
 "mdx": {
  "altBody": "",
  "status": "rdmd"
 },
 "api": {
  "method": "get",
  "url": "",
  "auth": "required",
  "results": {
   "codes": [
    {
     "status": 200,
     "language": "json",
     "code": "{}",
     "name": ""
    },
    {
     "status": 400,
     "language": "json",
     "code": "{}",
     "name": ""
    }
   ]
  },
  "params": []
 },
 "next": {
  "description": "",
  "pages": [
   {
    "type": "doc",
    "icon": "file-text-o",
    "name": "Util RPCs",
    "slug": "core-api-ref-remote-procedure-calls-util",
    "category": "Core API Reference"
   }
  ]
 },
 "algolia": {
  "recordCount": 17,
  "publishPending": false,
  "translationFailure": false,
  "updatedAt": "2023-03-29T18:39:46.221Z"
 },
 "title": "Raw Transaction RPCs",
 "icon": "",
 "updates": [],
 "type": "basic",
 "slug": "core-api-ref-remote-procedure-calls-raw-transactions",
 "excerpt": "",
 "body": "# AnalyzePSBT\n\nThe analyzepsbt RPC analyzes and provides information about the current status of a PSBT and its inputs.\n\n_Parameter #1---psbt_\n\n| Name   | Type   | Presence                | Description                                     |\n| ------ | ------ | ----------------------- | ----------------------------------------------- |\n| `psbt` | string | Required<br>(Exactly 1) | The base64-encoded partially signed transaction |\n\n_Result:_\n\n| Name                         | Type    | Presence                 | Description                                                                                                              |\n| ---------------------------- | ------- | ------------------------ | ------------------------------------------------------------------------------------------------------------------------ |\n| `result`                     | object  | Required<br>(exactly 1)  | A JSON object                                                                                                            |\n| \u2192 `inputs`                   | array   | Required<br>(exactly 1 ) | An array that contains main details about the PSBT.                                                                      |\n| \u2192\u2192`has_utxo`                 | boolean | Required (exactly 1)     | Whether a UTXO is provided                                                                                               |\n| \u2192\u2192`is_final`                 | boolean | Required (exactly 1)     | Whether the input is finalized                                                                                           |\n| \u2192\u2192`missing`                  | object  | Optional (0 or 1)        | A JSON object that includes the data missing to complete the input.                                                      |\n| \u2192\u2192\u2192`pubkeys`                 | array   | Optional (0 or 1)        | Array containing public key data.                                                                                        |\n| \u2192\u2192\u2192\u2192`hex`                    | string  | Required<br>(0 or more)  | Public key ID, hash160 of the public key, of a public key whose BIP 32 derivation path is missing.                       |\n| \u2192\u2192\u2192`signatures`              | array   | Optional (0 or 1)        | Array containing public key data                                                                                         |\n| \u2192\u2192\u2192\u2192`hex`                    | string  | Required<br>(0 or more)  | Public key ID, hash160 of the public key, of a public key whose signature is missing.                                    |\n| \u2192\u2192\u2192 `\"redeemscript\" : \"hex\"` | string  | Optional<br>(0 or 1)     | Hash160 of the redeemScript that is missing.                                                                             |\n| \u2192\u2192 `\"next\" : \"str\"`          | string  | Optional<br>(0 or 1)     | Role of the next person that this input needs to go to                                                                   |\n| \u2192 `estimated_vsize`          | numeric | Optional (0 or 1)        | Estimated vsize of the final signed transaction                                                                          |\n| \u2192 `estimated_feerate`        | numeric | Optional (0 or 1)        | Estimated feerate of the final signed transaction in DASH/kB. Shown only if all UTXO slots in the PSBT have been filled. |\n| \u2192 `fee`                      | numeric | Optional (0 or 1)        | The transaction fee paid. Shown only if all UTXO slots in the PSBT have been filled.                                     |\n| \u2192 `\"next\" : \"str\"`           | string  | Required<br>(exactly 1)  | Role of the next person that this psbt needs to go to                                                                    |\n| \u2192 `\"error\" : \"str\"`          | string  | Required<br>(exactly 1)  | Error message if there is one                                                                                            |\n\n_Example from Dash Core 18.2.0_\n\n```bash\ndash-cli -testnet analyzepsbt cHNidP8BAHcCAAAAAWtJCIbAGYsCjGxcsUXE6zsQVaIkp6EFqt7/QbaeyR4GAQAAAAD/////AgAgX6ASAAAAGXapFEhUhUJfqZUE7BY4rEIT88/J8y7ziKzAqPm+AQAAABl2qRSBHqzBTbjrtbZEhtxDQAwCJrQopIisAAAAAAAAAAA=\n```\n\n\n\nResult:\n\n```\n{\n  \"inputs\": [\n    {\n      \"has_utxo\": false,\n      \"is_final\": false,\n      \"next\": \"updater\"\n    }\n  ],\n  \"next\": \"updater\"\n}\n```\n\n\n\n_See also:_\n\n- [CombinePSBT](core-api-ref-remote-procedure-calls-raw-transactions#combinepsbt): combines multiple partially-signed Dash transactions into one transaction.\n- [CreatePSBT](/docs/core-api-ref-remote-procedure-calls-raw-transactions#createpsbt): creates a transaction in the Partially Signed Transaction (PST) format.\n- [DecodePSBT](/docs/core-api-ref-remote-procedure-calls-raw-transactions#decodepsbt): returns a JSON object representing the serialized, base64-encoded partially signed Dash transaction.\n- [FinalizePSBT](/docs/core-api-ref-remote-procedure-calls-raw-transactions#finalizepsbt): finalizes the inputs of a PSBT.\n- [WalletProcessPSBT](/docs/core-api-ref-remote-procedure-calls-wallet#walletprocesspsbt): updates a PSBT with input information from a wallet and then allows the signing of inputs.\n\n# CombinePSBT\n\nThe [`combinepsbt` RPC](core-api-ref-remote-procedure-calls-raw-transactions#combinepsbt) combines multiple partially-signed Dash transactions into one transaction. Implements the Combiner role. This should be used only with `createrawtransaction` and `fundrawtransaction`.  \n`createpsbt` and `walletcreatefundedpsbt` should be used for new applications.\n\n_Parameter #1---txs_\n\n| Name         | Type   | Presence                | Description                                                 |\n| ------------ | ------ | ----------------------- | ----------------------------------------------------------- |\n| Transactions | string | Required<br>(exactly 1) | An array of base64 strings of partially signed transactions |\n| \u2192 psbt       | string | Required<br>(exactly 1) | A base64 string of a PSBT                                   |\n\n_Result---psbt_\n\n| Name     | Type   | Presence                | Description                                     |\n| -------- | ------ | ----------------------- | ----------------------------------------------- |\n| `result` | string | Required<br>(Exactly 1) | The base64-encoded partially signed transaction |\n\n_Example from Dash Core 18.0.0_\n\n```bash\ndash-cli -testnet combinepsbt '[\"cHNidP8BAFUCAAAAAQcxBA7Cdee2EvS1IyiRPzCVxbt9wFnrqry3AMUBOYvqAAAAAAD/////AQDh9QUAAAAAGXapFLBKVDBt/eE2UU3EUaAiMeuIUMC1iKwAAAAAAAEA3wIAAAAB9LcsqdmAuKwHgkt0HMpJuSx8RnBxL73+ORGz4ogdt+gBAAAAakcwRAIgJR7zIP4o/GRTAyvswKmdFDx+PBO/tB24s0ydQcRpOZECIAvm3Q2xMIpdAAhl17yQAkQjElRbZEIbcr7pGCpNbzqsASEDIcX0+C0b8ib3pvxlx809S7xOmAj0NH3i9vFe8pUTvHX+////AgBlzR0AAAAAF6kUJOSskBQ3xyDtInRjI2eW1QraJ9eHIcmaOwAAAAAZdqkUPU2zmkAo79MmS8yW1oYUjb7jz0qIrOosCQAiAgN+48COTyy1UqO7c63g5A9YEMnBIiYF+FcREEaGgxAHukcwRAIgfwcMEFPrmy81y5NWFj8M0CHUBlzzQxr4RoxSmzvmVIQCIH22f9/A/K0keQ7rKcya0E5zTlnYDnly8VJIrj2yUgflAQEER1IhA37jwI5PLLVSo7tzreDkD1gQycEiJgX4VxEQRoaDEAe6IQK1B5TV+2qTmU+/c3Pzl61bklYbfj9yg+jbdGyMoKE/vFKuAAA=\", \"cHNidP8BAFUCAAAAAQcxBA7Cdee2EvS1IyiRPzCVxbt9wFnrqry3AMUBOYvqAAAAAAD/////AQDh9QUAAAAAGXapFLBKVDBt/eE2UU3EUaAiMeuIUMC1iKwAAAAAAAEA3wIAAAAB9LcsqdmAuKwHgkt0HMpJuSx8RnBxL73+ORGz4ogdt+gBAAAAakcwRAIgJR7zIP4o/GRTAyvswKmdFDx+PBO/tB24s0ydQcRpOZECIAvm3Q2xMIpdAAhl17yQAkQjElRbZEIbcr7pGCpNbzqsASEDIcX0+C0b8ib3pvxlx809S7xOmAj0NH3i9vFe8pUTvHX+////AgBlzR0AAAAAF6kUJOSskBQ3xyDtInRjI2eW1QraJ9eHIcmaOwAAAAAZdqkUPU2zmkAo79MmS8yW1oYUjb7jz0qIrOosCQAiAgK1B5TV+2qTmU+/c3Pzl61bklYbfj9yg+jbdGyMoKE/vEcwRAIgP3PuTCqVSU0Cx5UDknTwmAFJ6N80sV+YiUmy392/4BUCIEB6QOZe3SJeJ3OVmBCmoEPWcHqbstIvxhCxJ2h+fkSZAQEER1IhA37jwI5PLLVSo7tzreDkD1gQycEiJgX4VxEQRoaDEAe6IQK1B5TV+2qTmU+/c3Pzl61bklYbfj9yg+jbdGyMoKE/vFKuAAA=\"]'\n```\n\n\n\nResult:\n\n```\ncHNidP8BAFUCAAAAAQcxBA7Cdee2EvS1IyiRPzCVxbt9wFnrqry3AMUBOYvqAAAAAAD/////AQDh9QUAAAAAGXapFLBKVDBt/eE2UU3EUaAiMeuIUMC1iKwAAAAAAAEA3wIAAAAB9LcsqdmAuKwHgkt0HMpJuSx8RnBxL73+ORGz4ogdt+gBAAAAakcwRAIgJR7zIP4o/GRTAyvswKmdFDx+PBO/tB24s0ydQcRpOZECIAvm3Q2xMIpdAAhl17yQAkQjElRbZEIbcr7pGCpNbzqsASEDIcX0+C0b8ib3pvxlx809S7xOmAj0NH3i9vFe8pUTvHX+////AgBlzR0AAAAAF6kUJOSskBQ3xyDtInRjI2eW1QraJ9eHIcmaOwAAAAAZdqkUPU2zmkAo79MmS8yW1oYUjb7jz0qIrOosCQAiAgN+48COTyy1UqO7c63g5A9YEMnBIiYF+FcREEaGgxAHukcwRAIgfwcMEFPrmy81y5NWFj8M0CHUBlzzQxr4RoxSmzvmVIQCIH22f9/A/K0keQ7rKcya0E5zTlnYDnly8VJIrj2yUgflASICArUHlNX7apOZT79zc/OXrVuSVht+P3KD6Nt0bIygoT+8RzBEAiA/c+5MKpVJTQLHlQOSdPCYAUno3zSxX5iJSbLf3b/gFQIgQHpA5l7dIl4nc5WYEKagQ9Zwepuy0i/GELEnaH5+RJkBAQRHUiEDfuPAjk8stVKju3Ot4OQPWBDJwSImBfhXERBGhoMQB7ohArUHlNX7apOZT79zc/OXrVuSVht+P3KD6Nt0bIygoT+8Uq4AAA==\n```\n\n\n\n_See also:_\n\n- [CreatePSBT](/docs/core-api-ref-remote-procedure-calls-raw-transactions#createpsbt): creates a transaction in the Partially Signed Transaction (PST) format.\n- [DecodePSBT](/docs/core-api-ref-remote-procedure-calls-raw-transactions#decodepsbt): returns a JSON object representing the serialized, base64-encoded partially signed Dash transaction.\n- [FinalizePSBT](/docs/core-api-ref-remote-procedure-calls-raw-transactions#finalizepsbt): finalizes the inputs of a PSBT.\n- [WalletProcessPSBT](/docs/core-api-ref-remote-procedure-calls-wallet#walletprocesspsbt): updates a PSBT with input information from a wallet and then allows the signing of inputs.\n\n# CombineRawTransaction\n\nThe [`combinerawtransaction` RPC](core-api-ref-remote-procedure-calls-raw-transactions#combinerawtransaction) combine multiple partially signed transactions into one transaction.\n\nThe combined transaction may be another partially signed transaction or a  \nfully signed transaction.\n\n_Parameter #1---txs_\n\n| Name | Type   | Presence | Description                                                  |\n| ---- | ------ | -------- | ------------------------------------------------------------ |\n| txs  | string | Required | A json array of hex strings of partially signed transactions |\n\n_Result---hex-encoded raw transaction with signature(s)_\n\n| Name     | Type   | Presence                | Description                                                                    |\n| -------- | ------ | ----------------------- | ------------------------------------------------------------------------------ |\n| `result` | string | Required<br>(Exactly 1) | The resulting raw transaction in serialized transaction format encoded as hex. |\n\n_Example from Dash Core 0.15.0_\n\nThe following example shows a fully signed two input transaction being assembled  \nby combining two partially signed transactions. The first hex-encoded string is  \nthe transaction with only the first input signed. The second hex-encoded string is  \nthe transaction with only the second input signed.\n\n```bash\ndash-cli -testnet combinerawtransaction '[\n \"0200000002fdb27b4f2b80a5fd3b96602618a6ccf7bdde504bf90989610b19ed6ecd769520010000006b483045022100f8770316327966fb1972338d14db8d38048455da8b62f6350b117c797cea459e02206c63c103cf53ce1d24a313b3e6853913fa14febafd733e683b6eb46a7beec0fa012103c67d86944315838aea7ec80d390b5d09b91b62483370d4979da5ccf7a7df77a9ffffffff0d052e9b13c53bb342d772767732ffe4fa9f1c150629d3fa79655267baa7c86a0100000000ffffffff0200ca9a3b000000001976a9144139b147b5cef5fef5bcdb02fcdf55e426f74dbb88ac00daf89a000000001976a91465f53f2095c99ce152ff3bc8a8f027d8a77cbdcb88ac00000000\",\n \"0200000002fdb27b4f2b80a5fd3b96602618a6ccf7bdde504bf90989610b19ed6ecd7695200100000000ffffffff0d052e9b13c53bb342d772767732ffe4fa9f1c150629d3fa79655267baa7c86a010000006b4830450221008c3abc11ea84cc98cf674afc5b6d3d078d672768d289f2ab976ea4b2a49129fc022008470458b1b179800e7f5348196d510d2f147e69fe836c94135fc5c620312acd012102912ba98d6641f79864d04d41523167f5db267e45d1633e9243a0be7efb675719ffffffff0200ca9a3b000000001976a9144139b147b5cef5fef5bcdb02fcdf55e426f74dbb88ac00daf89a000000001976a91465f53f2095c99ce152ff3bc8a8f027d8a77cbdcb88ac00000000\"\n]'\n```\n\n\n\nResult:\n\n```bash\n0200000002fdb27b4f2b80a5fd3b96602618a6ccf7bdde504bf90989610b19ed6ecd7695\\\n20010000006b483045022100f8770316327966fb1972338d14db8d38048455da8b62f635\\\n0b117c797cea459e02206c63c103cf53ce1d24a313b3e6853913fa14febafd733e683b6e\\\nb46a7beec0fa012103c67d86944315838aea7ec80d390b5d09b91b62483370d4979da5cc\\\nf7a7df77a9ffffffff0d052e9b13c53bb342d772767732ffe4fa9f1c150629d3fa796552\\\n67baa7c86a010000006b4830450221008c3abc11ea84cc98cf674afc5b6d3d078d672768\\\nd289f2ab976ea4b2a49129fc022008470458b1b179800e7f5348196d510d2f147e69fe83\\\n6c94135fc5c620312acd012102912ba98d6641f79864d04d41523167f5db267e45d1633e\\\n9243a0be7efb675719ffffffff0200ca9a3b000000001976a9144139b147b5cef5fef5bc\\\ndb02fcdf55e426f74dbb88ac00daf89a000000001976a91465f53f2095c99ce152ff3bc8\\\na8f027d8a77cbdcb88ac00000000\n```\n\n\n\n_See also:_\n\n- [AnalyzePSBT](core-api-ref-remote-procedure-calls-raw-transactions#analyzepsbt): analyzes and provides information about the current status of a PSBT and its inputs.\n- [CreateRawTransaction](/docs/core-api-ref-remote-procedure-calls-raw-transactions#createrawtransaction): creates an unsigned serialized transaction that spends a previous output to a new output with a P2PKH or P2SH address. The transaction is not stored in the wallet or transmitted to the network.\n- [DecodeRawTransaction](/docs/core-api-ref-remote-procedure-calls-raw-transactions#decoderawtransaction): decodes a serialized transaction hex string into a JSON object describing the transaction.\n- [SignRawTransactionWithKey](#signrawtransactionwithkey): signs inputs for a transaction in the serialized transaction format using private keys provided in the call.\n- [SendRawTransaction](/docs/core-api-ref-remote-procedure-calls-raw-transactions#sendrawtransaction): validates a transaction and broadcasts it to the peer-to-peer network.\n- [Serialized Transaction Format](core-ref-transactions-raw-transaction-format)\n\n# ConvertToPSBT\n\nThe [`converttopsbt` RPC](core-api-ref-remote-procedure-calls-raw-transactions#converttopsbt) converts a network serialized transaction to a PSBT. This should be used only with `createrawtransaction` and `fundrawtransaction`. `createpsbt` and `walletcreatefundedpsbt` should be used for new applications.\n\n_Parameter #1---hexstring_\n\n| Name | Type   | Presence | Description                         |\n| ---- | ------ | -------- | ----------------------------------- |\n| hex  | string | Required | The hex string of a raw transaction |\n\n_Parameter #2---permitsigdata_\n\n| Name | Type | Presence | Description                                                                                                                                 |\n| ---- | ---- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------- |\n| data | bool | Optional | If true, any signatures in the input will be discarded and conversion will continue. If false, RPC will fail if any signatures are present. |\n\n_Result---psbt_\n\n| Name     | Type   | Presence                | Description                                       |\n| -------- | ------ | ----------------------- | ------------------------------------------------- |\n| `result` | string | Required<br>(Exactly 1) | The resulting raw transaction is a base64-encoded |\n\n_Example from Dash Core 18.0.0_\n\n```bash\ndash-cli -testnet converttopsbt 02000000016b490886c0198b028c6c5cb145c4eb3b1055a224a7a105aadeff41b69ec91e060100000000ffffffff0200205fa0120000001976a914485485425fa99504ec1638ac4213f3cfc9f32ef388acc0a8f9be010000001976a914811eacc14db8ebb5b64486dc43400c0226b428a488ac00000000\n```\n\n\n\nResult:\n\n```\ncHNidP8BAHcCAAAAAWtJCIbAGYsCjGxcsUXE6zsQVaIkp6EFqt7/QbaeyR4GAQAAAAD/////AgAgX6ASAAAAGXapFEhUhUJfqZUE7BY4rEIT88/J8y7ziKzAqPm+AQAAABl2qRSBHqzBTbjrtbZEhtxDQAwCJrQopIisAAAAAAAAAAA=\n```\n\n\n\n_See also:_\n\n- [CreateRawTransaction](/docs/core-api-ref-remote-procedure-calls-raw-transactions#createrawtransaction): creates an unsigned serialized transaction that spends a previous output to a new output with a P2PKH or P2SH address. The transaction is not stored in the wallet or transmitted to the network.\n- [CreatePSBT](/docs/core-api-ref-remote-procedure-calls-raw-transactions#createpsbt): creates a transaction in the Partially Signed Transaction (PST) format.\n- [CombinePSBT](/docs/core-api-ref-remote-procedure-calls-raw-transactions#combinepsbt): combine multiple partially-signed Dash transactions into one transaction.\n- [DecodePSBT](/docs/core-api-ref-remote-procedure-calls-raw-transactions#decodepsbt): returns a JSON object representing the serialized, base64-encoded partially signed Dash transaction.\n- [FinalizePSBT](/docs/core-api-ref-remote-procedure-calls-raw-transactions#finalizepsbt): finalizes the inputs of a PSBT.\n- [SignRawTransactionWithKey](#signrawtransactionwithkey): signs inputs for a transaction in the serialized transaction format using private keys provided in the call.\n- [Serialized Transaction Format](core-ref-transactions-raw-transaction-format)\n- [WalletCreateFundedPSBT](/docs/core-api-ref-remote-procedure-calls-wallet#walletcreatefundedpsbt): creates and funds a transaction in the Partially Signed Transaction (PST) format.\n- [WalletProcessPSBT](/docs/core-api-ref-remote-procedure-calls-wallet#walletprocesspsbt): updates a PSBT with input information from a wallet and then allows the signing of inputs.\n\n# CreatePSBT\n\nThe [`createpsbt` RPC](core-api-ref-remote-procedure-calls-raw-transactions#createpsbt) creates a transaction in the Partially Signed Transaction (PST) format.\n\nImplements the Creator role.\n\n_Parameter #1---Inputs_\n\n| Name              | Type         | Presence                | Description                                                                                                |\n| ----------------- | ------------ | ----------------------- | ---------------------------------------------------------------------------------------------------------- |\n| Transactions      | array        | Required<br>(exactly 1) | An array of objects, each one to be used as an input to the transaction                                    |\n| \u2192 Input           | object       | Required<br>(1 or more) | An object describing a particular input                                                                    |\n| \u2192 \u2192<br>`txid`     | string (hex) | Required<br>(exactly 1) | The TXID of the outpoint to be spent encoded as hex in RPC byte order                                      |\n| \u2192 \u2192<br>`vout`     | number (int) | Required<br>(exactly 1) | The output index number (vout) of the outpoint to be spent; the first output in a transaction is index `0` |\n| \u2192 \u2192<br>`Sequence` | number (int) | Optional<br>(0 or 1)    | The sequence number to use for the input                                                                   |\n\n_Parameter #2---Outputs_\n\n| Name           | Type                   | Presence                | Description                                                                                               |\n| -------------- | ---------------------- | ----------------------- | --------------------------------------------------------------------------------------------------------- |\n| Outputs        | array                  | Required<br>(exactly 1) | A JSON array with outputs as key-value pairs                                                              |\n| \u2192 Output       | object                 | Required<br>(1 or more) | An object describing a particular output                                                                  |\n| \u2192 \u2192<br>Address | string : number (Dash) | Optional<br>(0 or 1)    | A key-value pair. The key (string) is the Dash address, the value (float or string) is the amount in DASH |\n| \u2192 \u2192<br>Data    | `data` : string (hex)  | Optional<br>(0 or 1)    | A key-value pair. The key must be `data`, the value is hex encoded data                                   |\n\n_Parameter #3---locktime_\n\n| Name     | Type          | Presence             | Description                                                                                                            |\n| -------- | ------------- | -------------------- | ---------------------------------------------------------------------------------------------------------------------- |\n| Locktime | numeric (int) | Optional<br>(0 or 1) | Indicates the earliest time a transaction can be added to the block chain. Non-0 value also locktime-activates inputs. |\n\n_Result---the raw transaction in base64_\n\n| Name   | Type   | Presence                | Description                                           |\n| ------ | ------ | ----------------------- | ----------------------------------------------------- |\n| Result | string | Required<br>(Exactly 1) | The resulting raw transaction (base64-encoded string) |\n\n_Example from Dash Core 18.0.0_\n\n```bash\ndash-cli -testnet createpsbt \"[{\\\"txid\\\":\\\"2662c87e1761ed5f4e98a0640b2608114d86f282824a51bd624985d236c71178\\\",\\\"vout\\\":0}]\" \"[{\\\"data\\\":\\\"00010203\\\"}]\"\n```\n\n\n\nResult:\n\n```\ncHNidP8BAEICAAAAAXgRxzbShUlivVFKgoLyhk0RCCYLZKCYTl/tYRd+yGImAAAAAAD/////AQAAAAAAAAAABmoEAAECAwAAAAAAAAA=\n```\n\n\n\n_See also_\n\n- [CombinePSBT](/docs/core-api-ref-remote-procedure-calls-raw-transactions#combinepsbt): combine multiple partially-signed Dash transactions into one transaction.\n- [ConvertToPSBT](/docs/core-api-ref-remote-procedure-calls-raw-transactions#converttopsbt): converts a network serialized transaction to a PSBT.\n- [DecodePSBT](/docs/core-api-ref-remote-procedure-calls-raw-transactions#decodepsbt): returns a JSON object representing the serialized, base64-encoded partially signed Dash transaction.\n- [FinalizePSBT](/docs/core-api-ref-remote-procedure-calls-raw-transactions#finalizepsbt): finalizes the inputs of a PSBT.\n- [WalletCreateFundedPSBT](/docs/core-api-ref-remote-procedure-calls-wallet#walletcreatefundedpsbt): creates and funds a transaction in the Partially Signed Transaction (PST) format.\n- [WalletProcessPSBT](/docs/core-api-ref-remote-procedure-calls-wallet#walletprocesspsbt): updates a PSBT with input information from a wallet and then allows the signing of inputs.\n\n# CreateRawTransaction\n\nThe [`createrawtransaction` RPC](core-api-ref-remote-procedure-calls-raw-transactions#createrawtransaction) creates an unsigned serialized transaction that spends a previous output to a new output with a P2PKH or P2SH address. The transaction is not stored in the wallet or transmitted to the network.\n\n_Parameter #1---Inputs_\n\n| Name              | Type         | Presence                | Description                                                                                                |\n| ----------------- | ------------ | ----------------------- | ---------------------------------------------------------------------------------------------------------- |\n| Transactions      | array        | Required<br>(exactly 1) | An array of objects, each one to be used as an input to the transaction                                    |\n| \u2192 Input           | object       | Required<br>(1 or more) | An object describing a particular input                                                                    |\n| \u2192 \u2192<br>`txid`     | string (hex) | Required<br>(exactly 1) | The TXID of the outpoint to be spent encoded as hex in RPC byte order                                      |\n| \u2192 \u2192<br>`vout`     | number (int) | Required<br>(exactly 1) | The output index number (vout) of the outpoint to be spent; the first output in a transaction is index `0` |\n| \u2192 \u2192<br>`Sequence` | number (int) | Optional<br>(0 or 1)    | Added in Dash Core 0.12.3.0.<br><br>The sequence number to use for the input                               |\n\n_Parameter #2---Outputs_\n\n| Name           | Type                   | Presence                | Description                                                                                               |\n| -------------- | ---------------------- | ----------------------- | --------------------------------------------------------------------------------------------------------- |\n| Outputs        | array                  | Required<br>(exactly 1) | A JSON array with outputs as key-value pairs                                                              |\n| \u2192 Output       | object                 | Required<br>(1 or more) | An object describing a particular output                                                                  |\n| \u2192 \u2192<br>Address | string : number (Dash) | Optional<br>(0 or 1)    | A key-value pair. The key (string) is the Dash address, the value (float or string) is the amount in DASH |\n| \u2192 \u2192<br>Data    | `data` : string (hex)  | Optional<br>(0 or 1)    | A key-value pair. The key must be `data`, the value is hex encoded data                                   |\n\n_Parameter #3---locktime_\n\n| Name     | Type          | Presence             | Description                                                               |\n| -------- | ------------- | -------------------- | ------------------------------------------------------------------------- |\n| Locktime | numeric (int) | Optional<br>(0 or 1) | Indicates the earliest time a transaction can be added to the block chain |\n\n_Result---the unsigned raw transaction in hex_\n\n| Name     | Type   | Presence                | Description                                                                                                                                                                                                                      |\n| -------- | ------ | ----------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `result` | string | Required<br>(Exactly 1) | The resulting unsigned raw transaction in serialized transaction format encoded as base-64.  If the transaction couldn't be generated, this will be set to JSON `null` and the JSON-RPC error field may contain an error message |\n\n_Example from Dash Core 18.0.0_\n\n```bash\ndash-cli -testnet createrawtransaction '''\n  [\n    {\n      \"txid\": \"061ec99eb641ffdeaa05a1a724a255103bebc445b15c6c8c028b19c08608496b\",\n      \"vout\" : 1\n    }\n  ]''' \\\n  '''\n  [\n    {\n      \"ySutkc49Khpz1HQN8AfWNitVBLwqtyaxvv\": 800\n    },\n    {\n      \"yY6AmGopsZS31wy1JLHR9P6AC6owFaXwuh\": 74.99\n    }\n  ]''' \\\n  0\n```\n\n\n\nResult:\n\n```text\n02000000016b490886c0198b028c6c5cb145c4eb3b1055a224a7a105aadeff41b69ec91e06010000\\\n0000ffffffff0200205fa0120000001976a914485485425fa99504ec1638ac4213f3cfc9f32ef388\\\nacc0a8f9be010000001976a914811eacc14db8ebb5b64486dc43400c0226b428a488ac00000000\n```\n\n\n\n_See also_\n\n- [CombineRawTransaction](/docs/core-api-ref-remote-procedure-calls-raw-transactions#combinerawtransaction): combine multiple partially signed transactions into one transaction.\n- [DecodeRawTransaction](/docs/core-api-ref-remote-procedure-calls-raw-transactions#decoderawtransaction): decodes a serialized transaction hex string into a JSON object describing the transaction.\n- [SignRawTransactionWithKey](#signrawtransactionwithkey): signs inputs for a transaction in the serialized transaction format using private keys provided in the call.\n- [SendRawTransaction](/docs/core-api-ref-remote-procedure-calls-raw-transactions#sendrawtransaction): validates a transaction and broadcasts it to the peer-to-peer network.\n- [Serialized Transaction Format](core-ref-transactions-raw-transaction-format)\n\n# DecodePSBT\n\nThe [`decodepsbt` RPC](core-api-ref-remote-procedure-calls-raw-transactions#decodepsbt) returns a JSON object representing the serialized, base64-encoded partially signed Dash transaction.\n\n_Parameter #1---The PSBT base64 string_\n\n| Name   | Type   | Presence                | Description            |\n| ------ | ------ | ----------------------- | ---------------------- |\n| `psbt` | string | Required<br>(exactly 1) | The PSBT base64 string |\n\n_Result---the decoded transaction_\n\n| Name                             | Type         | Presence                | Description                                                                                                                                                                                                                                                                             |\n| -------------------------------- | ------------ | ----------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `result`                         | object       | Required<br>(exactly 1) | An object describing the decoded transaction, or JSON `null` if the transaction could not be decoded                                                                                                                                                                                    |\n| \u2192<br>`tx`                        | string (hex) | Required<br>(exactly 1) | The decoded network-serialized unsigned transaction. The layout is the same as the output of [decoderawtransaction](#decoderawtransaction).                                                                                                                                             |\n| \u2192<br>`unknown`                   | object       | Required<br>(exactly 1) | The unknown global fields                                                                                                                                                                                                                                                               |\n| \u2192\u2192<br>Unknown                    | object       | Required<br>(0 or more) | An unknown key-value pair                                                                                                                                                                                                                                                               |\n| \u2192<br>`inputs`                    | array        | Required<br>(exactly 1) | An array of objects with each object being an input vector (vin) for this transaction                                                                                                                                                                                                   |\n| \u2192 \u2192<br>Input                     | object       | Required<br>(1 or more) | An object describing one of this transaction's inputs.  May be a regular input or a coinbase                                                                                                                                                                                            |\n| \u2192 \u2192 \u2192<br>`non_witness_utxo`      | object       | Optional<br>(0 or more) | Decoded network transaction for non-witness UTXOs                                                                                                                                                                                                                                       |\n| \u2192 \u2192 \u2192<br>`partial_signatures`    | object       | Optional<br>(0 or more) | An object containing partial signatures                                                                                                                                                                                                                                                 |\n| \u2192 \u2192 \u2192\u2192<br>`pubkey`               | string       | Required<br>(1 or more) | The public key and signature that corresponds to it                                                                                                                                                                                                                                     |\n| \u2192 \u2192 \u2192<br>`sighash`               | string       | Optional<br>(0 or 1)    | The sighash type to be used                                                                                                                                                                                                                                                             |\n| \u2192 \u2192 \u2192<br>`redeem_script`         | object       | Optional<br>(0 or more) |                                                                                                                                                                                                                                                                                         |\n| \u2192 \u2192 \u2192 \u2192<br>`asm`                 | string       | Required<br>(exactly 1) | The signature script in decoded form with non-data-pushing opcodes listed                                                                                                                                                                                                               |\n| \u2192 \u2192 \u2192 \u2192<br>`hex`                 | string (hex) | Required<br>(exactly 1) | The signature script encoded as hex                                                                                                                                                                                                                                                     |\n| \u2192 \u2192 \u2192 \u2192<br>`type`                | string       | Optional<br>(0 or 1)    | The type of script.  This will be one of the following:<br>\u2022 `pubkey` for a P2PK script<br>\u2022 `pubkeyhash` for a P2PKH script<br>\u2022 `scripthash` for a P2SH script<br>\u2022 `multisig` for a bare multisig script<br>\u2022 `nulldata` for nulldata scripts<br>\u2022 `nonstandard` for unknown scripts |\n| \u2192 \u2192 \u2192<br>`bip32_derivs`          | object       | Optional<br>(0 or more) |                                                                                                                                                                                                                                                                                         |\n| \u2192 \u2192 \u2192\u2192<br>`pubkey`               | object       | Optional<br>(0 or more) | The public key with the derivation path as the value.                                                                                                                                                                                                                                   |\n| \u2192 \u2192 \u2192\u2192\u2192<br>`master_fingerprint`  | object       | Optional<br>(0 or more) | The fingerprint of the master key                                                                                                                                                                                                                                                       |\n| \u2192 \u2192 \u2192\u2192\u2192<br>`path`                | object       | Optional<br>(0 or more) | The public key's path                                                                                                                                                                                                                                                                   |\n| \u2192 \u2192 \u2192<br>`final_scriptsig`       | object       | Optional<br>(0 or more) |                                                                                                                                                                                                                                                                                         |\n| \u2192 \u2192 \u2192 \u2192<br>`asm`                 | string       | Required<br>(exactly 1) | The signature script in decoded form with non-data-pushing opcodes listed                                                                                                                                                                                                               |\n| \u2192 \u2192 \u2192 \u2192<br>`hex`                 | string (hex) | Required<br>(exactly 1) | The signature script encoded as hex                                                                                                                                                                                                                                                     |\n| \u2192 \u2192 \u2192<br>`unknown`               | object       | Optional<br>(0 or more) | The unknown global fields                                                                                                                                                                                                                                                               |\n| \u2192 \u2192 \u2192 \u2192<br>Unknown               | object       | Required<br>(0 or more) | An unknown key-value pair                                                                                                                                                                                                                                                               |\n| \u2192<br>`vout`                      | array        | Required<br>(exactly 1) | An array of objects each describing an output vector (vout) for this transaction.  Output objects will have the same order within the array as they have in the transaction, so the first output listed will be output 0                                                                |\n| \u2192 \u2192<br>Output                    | object       | Required<br>(1 or more) | An object describing one of this transaction's outputs                                                                                                                                                                                                                                  |\n| \u2192 \u2192 \u2192<br>`redeem_script`         | object       | Required<br>(exactly 1) | An object describing the pubkey script                                                                                                                                                                                                                                                  |\n| \u2192 \u2192 \u2192 \u2192<br>`asm`                 | string       | Required<br>(exactly 1) | The pubkey script in decoded form with non-data-pushing opcodes listed                                                                                                                                                                                                                  |\n| \u2192 \u2192 \u2192 \u2192<br>`hex`                 | string (hex) | Required<br>(exactly 1) | The pubkey script encoded as hex                                                                                                                                                                                                                                                        |\n| \u2192 \u2192 \u2192 \u2192<br>`type`                | string       | Optional<br>(0 or 1)    | The type of script.  This will be one of the following:<br>\u2022 `pubkey` for a P2PK script<br>\u2022 `pubkeyhash` for a P2PKH script<br>\u2022 `scripthash` for a P2SH script<br>\u2022 `multisig` for a bare multisig script<br>\u2022 `nulldata` for nulldata scripts<br>\u2022 `nonstandard` for unknown scripts |\n| \u2192 \u2192 \u2192<br>`bip32_derivs`          | array        | Optional<br>(0 or more) | Array of JSON objects                                                                                                                                                                                                                                                                   |\n| \u2192 \u2192 \u2192\u2192<br>BIP32 Deriv            | object       | Optional<br>(0 or more) | An object containing BIP32 derivation infomation                                                                                                                                                                                                                                        |\n| \u2192\u2192  \u2192 \u2192\u2192<br>`pubkey`             | object       | Optional<br>(0 or more) | The public key this path corresponds to                                                                                                                                                                                                                                                 |\n| \u2192 \u2192 \u2192 \u2192\u2192<br>`master_fingerprint` | object       | Optional<br>(0 or more) | The fingerprint of the master key                                                                                                                                                                                                                                                       |\n| \u2192 \u2192 \u2192\u2192\u2192<br>`path`                | object       | Optional<br>(0 or more) | The public key's path                                                                                                                                                                                                                                                                   |\n| \u2192<br>`fee`                       | number (int) | Optional<br>(0 or 1)    | The transaction fee paid if all UTXOs slots in the PSBT have been filled                                                                                                                                                                                                                |\n\n_Example from Dash Core 18.0.0_\n\nDecode a one-input, one-output transaction:\n\n```bash\ndash-cli -testnet decodepsbt cHNidP8BAEICAAAAAXgRxzbShUlivVFKgoLyhk0RCCYLZKCYTl/tYRd+yGImAAAAAAD/////AQAAAAAAAAAABmoEAAECAwAAAAAAAAA=\n```\n\n\n\nResult:\n\n```json\n{\n  \"tx\": {\n    \"txid\": \"5954a007baf3f012af1484b42d24057f9b1541dd65003bababb1a53c9f7eabe4\",\n    \"version\": 2,\n    \"type\": 0,\n    \"size\": 66,\n    \"locktime\": 0,\n    \"vin\": [\n      {\n        \"txid\": \"2662c87e1761ed5f4e98a0640b2608114d86f282824a51bd624985d236c71178\",\n        \"vout\": 0,\n        \"scriptSig\": {\n          \"asm\": \"\",\n          \"hex\": \"\"\n        },\n        \"sequence\": 4294967295\n      }\n    ],\n    \"vout\": [\n      {\n        \"value\": 0.00000000,\n        \"valueSat\": 0,\n        \"n\": 0,\n        \"scriptPubKey\": {\n          \"asm\": \"OP_RETURN 50462976\",\n          \"hex\": \"6a0400010203\",\n          \"type\": \"nulldata\"\n        }\n      }\n    ]\n  },\n  \"unknown\": {\n  },\n  \"inputs\": [\n    {\n      \"non_witness_utxo\": {\n        \"txid\": \"2662c87e1761ed5f4e98a0640b2608114d86f282824a51bd624985d236c71178\",\n        \"version\": 2,\n        \"type\": 0,\n        \"size\": 225,\n        \"locktime\": 542805,\n        \"vin\": [\n          {\n            \"txid\": \"427c8d2f712b72150496d53b67403a984b6fb41f37f6c0a85115d12c50b78b94\",\n            \"vout\": 1,\n            \"scriptSig\": {\n              \"asm\": \"304402204fe4fc488c955f286c52c848ec7950b40ec476e1b434c6add686b474bdde09a902206222d291fd9da341408aa8a4720f5a6959997715a1ddf8187e75277b6bfcae7e[ALL] 03c67d86944315838aea7ec80d390b5d09b91b62483370d4979da5ccf7a7df77a9\",\n              \"hex\": \"47304402204fe4fc488c955f286c52c848ec7950b40ec476e1b434c6add686b474bdde09a902206222d291fd9da341408aa8a4720f5a6959997715a1ddf8187e75277b6bfcae7e012103c67d86944315838aea7ec80d390b5d09b91b62483370d4979da5ccf7a7df77a9\"\n            },\n            \"sequence\": 4294967294\n          }\n        ],\n        \"vout\": [\n          {\n            \"value\": 1.64030388,\n            \"valueSat\": 164030388,\n            \"n\": 0,\n            \"scriptPubKey\": {\n              \"asm\": \"OP_DUP OP_HASH160 cefc464904c03814c01906e197dc759a745e47ee OP_EQUALVERIFY OP_CHECKSIG\",\n              \"hex\": \"76a914cefc464904c03814c01906e197dc759a745e47ee88ac\",\n              \"reqSigs\": 1,\n              \"type\": \"pubkeyhash\",\n              \"addresses\": [\n                \"yfBtG4d5ZRWXWo8JQrbVcCzpKyJRhcGyYk\"\n              ]\n            }\n          },\n          {\n            \"value\": 10.00000000,\n            \"valueSat\": 1000000000,\n            \"n\": 1,\n            \"scriptPubKey\": {\n              \"asm\": \"OP_DUP OP_HASH160 3ef9bcbe92f77c8fadd0566eea7ff8d47f22bde0 OP_EQUALVERIFY OP_CHECKSIG\",\n              \"hex\": \"76a9143ef9bcbe92f77c8fadd0566eea7ff8d47f22bde088ac\",\n              \"reqSigs\": 1,\n              \"type\": \"pubkeyhash\",\n              \"addresses\": [\n                \"yS4Rv9VJnUvwcwggLzi88pu6jTPVya52Ba\"\n              ]\n            }\n          }\n        ]\n      },\n      \"final_scriptSig\": {\n        \"asm\": \"3044022005d5f8010e0d8cfd601e6136330a4122492ac3573718a1ef30c2bc3f31b760390220273a18050f61026ea3aa4d9c2c58ad51dd7f88bd64bbcc3dba769d8cd7ec09da[ALL] 0267da91139a4f14d97eaf7800ea9e7cb9ffa8fc232ece8b38a3d127891e6f71e8\",\n        \"hex\": \"473044022005d5f8010e0d8cfd601e6136330a4122492ac3573718a1ef30c2bc3f31b760390220273a18050f61026ea3aa4d9c2c58ad51dd7f88bd64bbcc3dba769d8cd7ec09da01210267da91139a4f14d97eaf7800ea9e7cb9ffa8fc232ece8b38a3d127891e6f71e8\"\n      }\n    }\n  ],\n  \"outputs\": [\n    {\n    }\n  ],\n  \"fee\": 1.64030388\n}\n```\n\n\n\n# DecodeRawTransaction\n\nThe [`decoderawtransaction` RPC](core-api-ref-remote-procedure-calls-raw-transactions#decoderawtransaction) decodes a serialized transaction hex string into a JSON object describing the transaction.\n\n_Parameter #1---serialized transaction in hex_\n\n| Name                   | Type         | Presence                | Description                                                |\n| ---------------------- | ------------ | ----------------------- | ---------------------------------------------------------- |\n| Serialized Transaction | string (hex) | Required<br>(exactly 1) | The transaction to decode in serialized transaction format |\n\n_Result---the decoded transaction_\n\n| Name                    | Type           | Presence                | Description                                                                                                                                                                                                                                                                                                                      |\n| ----------------------- | -------------- | ----------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `result`                | object         | Required<br>(exactly 1) | An object describing the decoded transaction, or JSON `null` if the transaction could not be decoded                                                                                                                                                                                                                             |\n| \u2192<br>`txid`             | string (hex)   | Required<br>(exactly 1) | The transaction's TXID encoded as hex in RPC byte order                                                                                                                                                                                                                                                                          |\n| \u2192<br>`version`          | number (int)   | Required<br>(exactly 1) | The transaction format version number                                                                                                                                                                                                                                                                                            |\n| \u2192<br>`type`             | number (int)   | Required<br>(exactly 1) | _Added in Dash Core 0.13.0.0_<br><br>The transaction format type                                                                                                                                                                                                                                                                 |\n| \u2192<br>`size`             | number (int)   | Required<br>(exactly 1) | _Added in Bitcoin Core 0.12.0_<br><br>The serialized transaction size                                                                                                                                                                                                                                                            |\n| \u2192<br>`locktime`         | number (int)   | Required<br>(exactly 1) | The transaction's locktime: either a Unix epoch date or block height; see the [locktime parsing rules](core-guide-transactions-locktime-and-sequence-number#locktime-parsing-rules)                                                                                                                                              |\n| \u2192<br>`vin`              | array          | Required<br>(exactly 1) | An array of objects with each object being an input vector (vin) for this transaction.  Input objects will have the same order within the array as they have in the transaction, so the first input listed will be input 0                                                                                                       |\n| \u2192 \u2192<br>Input            | object         | Required<br>(1 or more) | An object describing one of this transaction's inputs.  May be a regular input or a coinbase                                                                                                                                                                                                                                     |\n| \u2192 \u2192 \u2192<br>`txid`         | string         | Optional<br>(0 or 1)    | The TXID of the outpoint being spent, encoded as hex in RPC byte order.  Not present if this is a coinbase transaction                                                                                                                                                                                                           |\n| \u2192 \u2192 \u2192<br>`vout`         | number (int)   | Optional<br>(0 or 1)    | The output index number (vout) of the outpoint being spent.  The first output in a transaction has an index of `0`.  Not present if this is a coinbase transaction                                                                                                                                                               |\n| \u2192 \u2192 \u2192<br>`scriptSig`    | object         | Optional<br>(0 or 1)    | An object describing the signature script of this input.  Not present if this is a coinbase transaction                                                                                                                                                                                                                          |\n| \u2192 \u2192 \u2192 \u2192<br>`asm`        | string         | Required<br>(exactly 1) | The signature script in decoded form with non-data-pushing opcodes listed                                                                                                                                                                                                                                                        |\n| \u2192 \u2192 \u2192 \u2192<br>`hex`        | string (hex)   | Required<br>(exactly 1) | The signature script encoded as hex                                                                                                                                                                                                                                                                                              |\n| \u2192 \u2192 \u2192<br>`coinbase`     | string (hex)   | Optional<br>(0 or 1)    | The coinbase (similar to the hex field of a scriptSig) encoded as hex.  Only present if this is a coinbase transaction                                                                                                                                                                                                           |\n| \u2192 \u2192 \u2192<br>`value`        | number (Dash)  | Optional<br>(exactly 1) | The number of Dash paid to this output.  May be `0`.<br><br>Only present if `spentindex` enabled                                                                                                                                                                                                                                 |\n| \u2192 \u2192 \u2192<br>`valueSat`     | number (duffs) | Optional<br>(exactly 1) | The number of duffs paid to this output.  May be `0`.<br><br>Only present if `spentindex` enabled                                                                                                                                                                                                                                |\n| \u2192 \u2192 \u2192 \u2192<br>`addresses`  | string : array | Optional<br>(0 or 1)    | The P2PKH or P2SH addresses used in this transaction, or the computed P2PKH address of any pubkeys in this transaction.  This array will not be returned for `nulldata` or `nonstandard` script types.<br><br>Only present if `spentindex` enabled                                                                               |\n| \u2192 \u2192 \u2192 \u2192 \u2192<br>Address    | string         | Required<br>(1 or more) | A P2PKH or P2SH address                                                                                                                                                                                                                                                                                                          |\n| \u2192 \u2192 \u2192<br>`sequence`     | number (int)   | Required<br>(exactly 1) | The input sequence number                                                                                                                                                                                                                                                                                                        |\n| \u2192<br>`vout`             | array          | Required<br>(exactly 1) | An array of objects each describing an output vector (vout) for this transaction.  Output objects will have the same order within the array as they have in the transaction, so the first output listed will be output 0                                                                                                         |\n| \u2192 \u2192<br>Output           | object         | Required<br>(1 or more) | An object describing one of this transaction's outputs                                                                                                                                                                                                                                                                           |\n| \u2192 \u2192 \u2192<br>`value`        | number (Dash)  | Required<br>(exactly 1) | The number of Dash paid to this output.  May be `0`                                                                                                                                                                                                                                                                              |\n| \u2192 \u2192 \u2192<br>`valueSat`     | number (duffs) | Required<br>(exactly 1) | The number of duffs paid to this output.  May be `0`                                                                                                                                                                                                                                                                             |\n| \u2192 \u2192 \u2192<br>`n`            | number (int)   | Required<br>(exactly 1) | The output index number of this output within this transaction                                                                                                                                                                                                                                                                   |\n| \u2192 \u2192 \u2192<br>`scriptPubKey` | object         | Required<br>(exactly 1) | An object describing the pubkey script                                                                                                                                                                                                                                                                                           |\n| \u2192 \u2192 \u2192 \u2192<br>`asm`        | string         | Required<br>(exactly 1) | The pubkey script in decoded form with non-data-pushing opcodes listed                                                                                                                                                                                                                                                           |\n| \u2192 \u2192 \u2192 \u2192<br>`hex`        | string (hex)   | Required<br>(exactly 1) | The pubkey script encoded as hex                                                                                                                                                                                                                                                                                                 |\n| \u2192 \u2192 \u2192 \u2192<br>`reqSigs`    | number (int)   | Optional<br>(0 or 1)    | The number of signatures required; this is always `1` for P2PK, P2PKH, and P2SH (including P2SH multisig because the redeem script is not available in the pubkey script).  It may be greater than 1 for bare multisig.  This value will not be returned for `nulldata` or `nonstandard` script types (see the `type` key below) |\n| \u2192 \u2192 \u2192 \u2192<br>`type`       | string         | Optional<br>(0 or 1)    | The type of script.  This will be one of the following:<br>\u2022 `pubkey` for a P2PK script<br>\u2022 `pubkeyhash` for a P2PKH script<br>\u2022 `scripthash` for a P2SH script<br>\u2022 `multisig` for a bare multisig script<br>\u2022 `nulldata` for nulldata scripts<br>\u2022 `nonstandard` for unknown scripts                                          |\n| \u2192 \u2192 \u2192 \u2192<br>`addresses`  | string : array | Optional<br>(0 or 1)    | The P2PKH or P2SH addresses used in this transaction, or the computed P2PKH address of any pubkeys in this transaction.  This array will not be returned for `nulldata` or `nonstandard` script types                                                                                                                            |\n| \u2192 \u2192 \u2192 \u2192 \u2192<br>Address    | string         | Required<br>(1 or more) | A P2PKH or P2SH address                                                                                                                                                                                                                                                                                                          |\n| \u2192<br>`extraPayloadSize` | number (int)   | Optional<br>(0 or 1)    | _Added in Dash Core 0.13.0.0_<br><br>Size of the DIP2 extra payload. Only present if it's a DIP2 special transaction                                                                                                                                                                                                             |\n| \u2192<br>`extraPayload`     | string (hex)   | Optional<br>(0 or 1)    | _Added in Dash Core 0.13.0.0_<br><br>Hex encoded DIP2 extra payload data. Only present if it's a DIP2 special transaction                                                                                                                                                                                                        |\n\n_Example from Dash Core 0.13.0_\n\nDecode a signed one-input, two-output transaction:\n\n```bash\ndash-cli -testnet decoderawtransaction 02000000015d0b26079696875e9fc3cb480420aae3c8\\\nb1da628fbb14cc718066df7fe7c5fd010000006a47304402202cfa683981898ad9adb89534\\\n23a38f7185ed41e163aa195d608fbe5bc3034910022034e2376aaed1c6576c0dad79d626ee\\\n27f706baaed86dabb105979c3e6f6e1cb9012103d14eb001cf0908f3a2333d171f6236497a\\\n82318a6a6f649b4d7fd8e5c8922e08feffffff021e3f4b4c000000001976a914b02ae52066\\\n542b4aec5cf45c7cae3183d7bd322788ac00f90295000000001976a914252c9de3a0ebd5c9\\\n5886187b24969d4ccdb5576e88ac943d0000\n```\n\n\n\nResult:\n\n```json\n{\n  \"txid\": \"f4de3be04efa18e203c9d0b7ad11bb2517f5889338918ed300a374f5bd736ed7\",\n  \"version\": 2,\n  \"type\": 0,\n  \"size\": 225,\n  \"locktime\": 15764,\n  \"vin\": [\n    {\n      \"txid\": \"fdc5e77fdf668071cc14bb8f62dab1c8e3aa200448cbc39f5e87969607260b5d\",\n      \"vout\": 1,\n      \"scriptSig\": {\n        \"asm\": \"304402202cfa683981898ad9adb8953423a38f7185ed41e163aa195d608fbe5bc3034910022034e2376aaed1c6576c0dad79d626ee27f706baaed86dabb105979c3e6f6e1cb9[ALL] 03d14eb001cf0908f3a2333d171f6236497a82318a6a6f649b4d7fd8e5c8922e08\",\n        \"hex\": \"47304402202cfa683981898ad9adb8953423a38f7185ed41e163aa195d608fbe5bc3034910022034e2376aaed1c6576c0dad79d626ee27f706baaed86dabb105979c3e6f6e1cb9012103d14eb001cf0908f3a2333d171f6236497a82318a6a6f649b4d7fd8e5c8922e08\"\n      },\n      \"sequence\": 4294967294\n    }\n  ],\n  \"vout\": [\n    {\n      \"value\": 12.79999774,\n      \"valueSat\": 1279999774,\n      \"n\": 0,\n      \"scriptPubKey\": {\n        \"asm\": \"OP_DUP OP_HASH160 b02ae52066542b4aec5cf45c7cae3183d7bd3227 OP_EQUALVERIFY OP_CHECKSIG\",\n        \"hex\": \"76a914b02ae52066542b4aec5cf45c7cae3183d7bd322788ac\",\n        \"reqSigs\": 1,\n        \"type\": \"pubkeyhash\",\n        \"addresses\": [\n          \"ycNwAN4DQ7Xnw5XLKg84SR4U1GE22FfLNQ\"\n        ]\n      }\n    },\n    {\n      \"value\": 25.00000000,\n      \"valueSat\": 2500000000,\n      \"n\": 1,\n      \"scriptPubKey\": {\n        \"asm\": \"OP_DUP OP_HASH160 252c9de3a0ebd5c95886187b24969d4ccdb5576e OP_EQUALVERIFY OP_CHECKSIG\",\n        \"hex\": \"76a914252c9de3a0ebd5c95886187b24969d4ccdb5576e88ac\",\n        \"reqSigs\": 1,\n        \"type\": \"pubkeyhash\",\n        \"addresses\": [\n          \"yPi1JKw5fn8bMFsCCtnkGagogW6GXwGktZ\"\n        ]\n      }\n    }\n  ]\n}\n```\n\n\n\nDecode a coinbase special transaction (CbTx):\n\n```bash\ndash-cli -testnet decoderawtransaction 03000500010000000000000000000000000000000000\\\n000000000000000000000000000000ffffffff2703ae50011a4d696e656420627920416e74\\\n506f6f6c2021000b01201da9196f0000000007000000ffffffff02809e4730000000001976\\\na914cbd7bfcc50351180132b2c0698cb90ad74c473c788ac809e4730000000001976a91488\\\na060bc2dfe05780ae4dcb6c98b12436c35a93988ac00000000460200ae50010078e5c08b39\\\n960887bf95185c381bdb719e60b6925fa12af78a8824fade927387c757acb6bac63da84f92\\\n45e20cfd5d830382ac634d434725ca6349ab5db920a3\n```\n\n\n\nResult:\n\n```json\n{\n  \"txid\": \"25632685ed0d7286901a80961c924c1ddd952e764754dbd8b40d0956413c8b56\",\n  \"version\": 3,\n  \"type\": 5,\n  \"size\": 229,\n  \"locktime\": 0,\n  \"vin\": [\n    {\n      \"coinbase\": \"03ae50011a4d696e656420627920416e74506f6f6c2021000b01201da9196f0000000007000000\",\n      \"sequence\": 4294967295\n    }\n  ],\n  \"vout\": [\n    {\n      \"value\": 8.10000000,\n      \"valueSat\": 810000000,\n      \"n\": 0,\n      \"scriptPubKey\": {\n        \"asm\": \"OP_DUP OP_HASH160 cbd7bfcc50351180132b2c0698cb90ad74c473c7 OP_EQUALVERIFY OP_CHECKSIG\",\n        \"hex\": \"76a914cbd7bfcc50351180132b2c0698cb90ad74c473c788ac\",\n        \"reqSigs\": 1,\n        \"type\": \"pubkeyhash\",\n        \"addresses\": [\n          \"yeuGUfPMrbEqAS2Pw1wonYgEPbM4LAA9LK\"\n        ]\n      }\n    },\n    {\n      \"value\": 8.10000000,\n      \"valueSat\": 810000000,\n      \"n\": 1,\n      \"scriptPubKey\": {\n        \"asm\": \"OP_DUP OP_HASH160 88a060bc2dfe05780ae4dcb6c98b12436c35a939 OP_EQUALVERIFY OP_CHECKSIG\",\n        \"hex\": \"76a91488a060bc2dfe05780ae4dcb6c98b12436c35a93988ac\",\n        \"reqSigs\": 1,\n        \"type\": \"pubkeyhash\",\n        \"addresses\": [\n          \"yYmrsYP3XYMZr1cGtha3QzmuNB1C7CfyhV\"\n        ]\n      }\n    }\n  ],\n  \"extraPayloadSize\": 70,\n  \"extraPayload\": \"0200ae50010078e5c08b39960887bf95185c381bdb719e60b6925fa12af78a8824fade927387c757acb6bac63da84f9245e20cfd5d830382ac634d434725ca6349ab5db920a3\",\n  \"cbTx\": {\n    \"version\": 2,\n    \"height\": 86190,\n    \"merkleRootMNList\": \"877392defa24888af72aa15f92b6609e71db1b385c1895bf870896398bc0e578\",\n    \"merkleRootQuorums\": \"a320b95dab4963ca2547434d63ac8203835dfd0ce245924fa83dc6bab6ac57c7\"\n  }\n}\n```\n\n\n\n_See also_\n\n- [CombineRawTransaction](/docs/core-api-ref-remote-procedure-calls-raw-transactions#combinerawtransaction): combine multiple partially signed transactions into one transaction.\n- [CreateRawTransaction](/docs/core-api-ref-remote-procedure-calls-raw-transactions#createrawtransaction): creates an unsigned serialized transaction that spends a previous output to a new output with a P2PKH or P2SH address. The transaction is not stored in the wallet or transmitted to the network.\n- [SignRawTransactionWithKey](#signrawtransactionwithkey): signs inputs for a transaction in the serialized transaction format using private keys provided in the call.\n- [SendRawTransaction](/docs/core-api-ref-remote-procedure-calls-raw-transactions#sendrawtransaction): validates a transaction and broadcasts it to the peer-to-peer network.\n\n# DecodeScript\n\nThe [`decodescript` RPC](core-api-ref-remote-procedure-calls-raw-transactions#decodescript) decodes a hex-encoded P2SH redeem script.\n\n_Parameter #1---a hex-encoded redeem script_\n\n| Name          | Type         | Presence                | Description                                                    |\n| ------------- | ------------ | ----------------------- | -------------------------------------------------------------- |\n| Redeem Script | string (hex) | Required<br>(exactly 1) | The redeem script to decode as a hex-encoded serialized script |\n\n_Result---the decoded script_\n\n| Name             | Type         | Presence                | Description                                                                                                                                                                                                                                   |\n| ---------------- | ------------ | ----------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `result`         | object       | Required<br>(exactly 1) | An object describing the decoded script, or JSON `null` if the script could not be decoded                                                                                                                                                    |\n| \u2192<br>`asm`       | string       | Required<br>(exactly 1) | The redeem script in decoded form with non-data-pushing opcodes listed.  May be empty                                                                                                                                                         |\n| \u2192<br>`reqSigs`   | number (int) | Optional<br>(0 or 1)    | The number of signatures required; this is always `1` for P2PK or P2PKH within P2SH.  It may be greater than 1 for P2SH multisig.  This value will not be returned for `nonstandard` script types (see the `type` key above)                  |\n| \u2192<br>`type`      | string       | Optional<br>(0 or 1)    | The type of script.  This will be one of the following:<br>\u2022 `pubkey` for a P2PK script inside P2SH<br>\u2022 `pubkeyhash` for a P2PKH script inside P2SH<br>\u2022 `multisig` for a multisig script inside P2SH<br>\u2022 `nonstandard` for unknown scripts |\n| \u2192<br>`addresses` | array        | Optional<br>(0 or 1)    | A P2PKH addresses used in this script, or the computed P2PKH addresses of any pubkeys in this script.  This array will not be returned for `nonstandard` script types                                                                         |\n| \u2192 \u2192<br>Address   | string       | Required<br>(1 or more) | A P2PKH address                                                                                                                                                                                                                               |\n| \u2192<br>`p2sh`      | string (hex) | Required<br>(exactly 1) | The P2SH address of this redeem script                                                                                                                                                                                                        |\n\n_Example from Dash Core 18.0.0_\n\nA 2-of-3 P2SH multisig pubkey script:\n\n```bash\ndash-cli -testnet decodescript 522102eacba539d92eb88d4e73bb32\\\n749d79f53f6e8d7947ac40a71bd4b26c13b6ec29210311f97539724e0de38fb1\\\nff79f5148e5202459d06ed07193ab18c730274fd0d882103251f25a5c0291446\\\nd801ba6df122f67a7dd06c60a9b332b7b29cc94f3b8f57d053ae\n```\n\n\n\nResult:\n\n```json\n{\n  \"asm\": \"2 02eacba539d92eb88d4e73bb32749d79f53f6e8d7947ac40a71bd4b26c13b6ec29 0311f97539724e0de38fb1ff79f5148e5202459d06ed07193ab18c730274fd0d88 03251f25a5c0291446d801ba6df122f67a7dd06c60a9b332b7b29cc94f3b8f57d0 3 OP_CHECKMULTISIG\",\n  \"reqSigs\": 2,\n  \"type\": \"multisig\",\n  \"addresses\": [\n    \"yNpezfFDfoikDuT1f4iK75AiLp2YLPsGAb\",\n    \"yWAk1cDVvsRdPYjnzcFkySJux75yaCE7xz\",\n    \"yVJj7TB3ZhMcSP2wo65ZFNqy23BQH9tT87\"\n  ],\n  \"p2sh\": \"8uJLxDxk2gEMbidF5vT8XLS2UCgQmVcroW\"\n}\n```\n\n\n\n_See also_\n\n- [CreateMultiSig](/docs/core-api-ref-remote-procedure-calls-util#createmultisig): creates a P2SH multi-signature address.\n\n# FinalizePSBT\n\nThe [`finalizepsbt` RPC](core-api-ref-remote-procedure-calls-raw-transactions#finalizepsbt) finalizes the inputs of a PSBT. The PSBT produces a network serialized transaction if the transaction is fully signed. This can broadcast with `sendrawtransaction`. Otherwise, a PSBT will be created which has the `final_scriptSig` fields filled for inputs that are complete.  \nImplements the Finalizer and Extractor roles.\n\n_Parameter #1---psbt_\n\n| Name | Type   | Presence | Description               |\n| ---- | ------ | -------- | ------------------------- |\n| psbt | string | Required | A base64 string of a PSBT |\n\n_Parameter #2---extract_\n\n| Name | Type | Presence | Description                                                                                                                                |\n| ---- | ---- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------ |\n| data | bool | Optional | If true, and the transaction is complete, extract and return the complete transaction in normal network serialization instead of the PSBT. |\n\n_Result---psbt_\n\n| Name           | Type         | Presence                | Description                                                      |\n| -------------- | ------------ | ----------------------- | ---------------------------------------------------------------- |\n| \u2192 <br>psbt     | string       | Required<br>(Exactly 1) | The base64-encoded partially signed transaction if not extracted |\n| \u2192 <br>hex      | string (hex) | Required<br>(Exactly 1) | The hex-encoded network transaction if extracted                 |\n| \u2192 <br>complete | bool         | Required<br>(Exactly 1) | If the transaction has a complete set of signatures              |\n\n_Example from Dash Core 18.0.0_\n\n```bash\ndash-cli -testnet finalizepsbt cHNidP8BAEICAAAAAXgRxzbShUlivVFKgoLyhk0RCCYLZKCYTl/tYRd+yGImAAAAAAD/////AQAAAAAAAAAABmoEAAECAwAAAAAAAQDhAgAAAAGUi7dQLNEVUajA9jcftG9LmDpAZzvVlgQVcitxL418QgEAAABqRzBEAiBP5PxIjJVfKGxSyEjseVC0DsR24bQ0xq3WhrR0vd4JqQIgYiLSkf2do0FAiqikcg9aaVmZdxWh3fgYfnUne2v8rn4BIQPGfYaUQxWDiup+yA05C10JuRtiSDNw1Jedpcz3p993qf7///8CtOfGCQAAAAAZdqkUzvxGSQTAOBTAGQbhl9x1mnReR+6IrADKmjsAAAAAGXapFD75vL6S93yPrdBWbup/+NR/Ir3giKxVSAgAAQdqRzBEAiAF1fgBDg2M/WAeYTYzCkEiSSrDVzcYoe8wwrw/MbdgOQIgJzoYBQ9hAm6jqk2cLFitUd1/iL1ku8w9unadjNfsCdoBIQJn2pETmk8U2X6veADqnny5/6j8Iy7Oizij0SeJHm9x6AAA\n```\n\n\n\nResult:\n\n```json\n{\n  \"hex\": \"02000000017811c736d2854962bd514a8282f2864d1108260b64a0984e5fed61177ec86226000000006a473044022005d5f8010e0d8cfd601e6136330a4122492ac3573718a1ef30c2bc3f31b760390220273a18050f61026ea3aa4d9c2c58ad51dd7f88bd64bbcc3dba769d8cd7ec09da01210267da91139a4f14d97eaf7800ea9e7cb9ffa8fc232ece8b38a3d127891e6f71e8ffffffff010000000000000000066a040001020300000000\",\n  \"complete\": true\n}\n```\n\n\n\n_See also:_\n\n- [CreatePSBT](/docs/core-api-ref-remote-procedure-calls-raw-transactions#createpsbt): creates a transaction in the Partially Signed Transaction (PST) format.\n- [CombinePSBT](/docs/core-api-ref-remote-procedure-calls-raw-transactions#combinepsbt): combine multiple partially-signed Dash transactions into one transaction.\n- [ConvertToPSBT](/docs/core-api-ref-remote-procedure-calls-raw-transactions#converttopsbt): converts a network serialized transaction to a PSBT.\n- [DecodePSBT](/docs/core-api-ref-remote-procedure-calls-raw-transactions#decodepsbt): returns a JSON object representing the serialized, base64-encoded partially signed Dash transaction.\n- [WalletCreateFundedPSBT](/docs/core-api-ref-remote-procedure-calls-wallet#walletcreatefundedpsbt): creates and funds a transaction in the Partially Signed Transaction (PST) format.\n- [WalletProcessPSBT](/docs/core-api-ref-remote-procedure-calls-wallet#walletprocesspsbt): updates a PSBT with input information from a wallet and then allows the signing of inputs.\n\n# FundRawTransaction\n\n> \ud83d\udcd8 \n> \n> Requires <<glossary:wallet>> support (**unavailable on masternodes**).\n\nThe [`fundrawtransaction` RPC](core-api-ref-remote-procedure-calls-raw-transactions#fundrawtransaction) adds inputs to a transaction until it has enough in value to meet its out value.  This will not modify existing inputs, and will add one change output to the outputs.  \nNote that inputs which were signed may need to be resigned after completion since in/outputs have been added.  The inputs added will not be signed, use signrawtransaction for that.  \nAll existing inputs must have their previous output transaction be in the wallet.\n\n_Parameter #1---The hex string of the raw transaction_\n\n| Name       | Type         | Presence                | Description                           |\n| ---------- | ------------ | ----------------------- | ------------------------------------- |\n| Hex string | string (hex) | Required<br>(exactly 1) | The hex string of the raw transaction |\n\n_Parameter #2---Additional options_\n\nNote: For backwards compatibility, passing in a `true` instead of an object will result in `{\"includeWatching\": true}`.\n\n| Name                           | Type               | Presence                | Description                                                                                                                                                                                                               |\n| ------------------------------ | ------------------ | ----------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Options                        | Object             | Optional<br>(0 or 1)    | Additional options                                                                                                                                                                                                        |\n| \u2192 <br>`changeAddress`          | string             | Optional<br>(0 or 1)    | The address to receive the change. If not set, the address is chosen from address pool                                                                                                                                    |\n| \u2192 <br>`changePosition`         | nummeric (int)     | Optional<br>(0 or 1)    | The index of the change output. If not set, the change position is randomly chosen                                                                                                                                        |\n| `includeWatching`              | bool               | Optional<br>(0 or 1)    | Inputs from watch-only addresses are also considered. The default is `false` for non-watching-only wallets and `true` for watching-only wallets                                                                           |\n| \u2192 <br>`lockUnspent`            | bool               | Optional<br>(0 or 1)    | The selected outputs are locked after running the rpc call. The default is `false`                                                                                                                                        |\n| \u2192 <br>`reserveChangeKey`       | bool               | Optional<br>(0 or 1)    | **Removed in Dash Core 0.17.0**                                                                                                                                                                                           |\n| \u2192 <br>`feeRate`                | numeric (bitcoins) | Optional<br>(0 or 1)    | The specific feerate  you are willing to pay (BTC per KB). If not set, the wallet determines the fee                                                                                                                      |\n| \u2192 <br>`subtractFeeFromOutputs` | array              | Optional<br>(0 or 1)    | A json array of integers. The fee will be equally deducted from the amount of each specified output. The outputs are specified by their zero-based index, before any change output is added.                              |\n| \u2192 \u2192<br>Output index            | numeric (int)      | Optional<br>(0 or more) | A output index number (vout) from which the fee should be subtracted. If multiple vouts are provided, the total fee will be divided by the number of vouts listed and each vout will have that amount subtracted from it. |\n\n_Result---information about the created transaction_\n\n| Name            | Type               | Presence                | Description                                                                            |\n| --------------- | ------------------ | ----------------------- | -------------------------------------------------------------------------------------- |\n| `result`        | object             | Required<br>(exactly 1) | An object including information about the created transaction                          |\n| \u2192 <br>hex       | string (hex)       | Required<br>(Exactly 1) | The resulting unsigned raw transaction in serialized transaction format encoded as hex |\n| \u2192 <br>fee       | numeric (bitcoins) | Required<br>(Exactly 1) | Fee in BTC the resulting transaction pays                                              |\n| \u2192 <br>changepos | numeric (int)      | Required<br>(Exactly 1) | The position of the added change output, or `-1` if no change output was added         |\n\n_Example from Dash Core 0.12.2_\n\n```bash\ndash-cli -testnet fundrawtransaction 01000000000100205fa012000000\\\n1976a914485485425fa99504ec1638ac4213f3cfc9f32ef388ac00000000\n```\n\n\n\nResult:\n\n```text\n{\n  \"hex\": \"01000000016b490886c0198b028c6c5cb145c4eb3b1055a224a7a105aadeff41b69ec91e060100000000feffffff023e1207bf010000001976a914bd652a167e7ad674f7815dc549bea9c57a7f919b88ac00205fa0120000001976a914485485425fa99504ec1638ac4213f3cfc9f32ef388ac00000000\",\n  \"changepos\": 0,\n  \"fee\": 0.00000226\n}\n```\n\n\n\n_See also_\n\n- [CreateRawTransaction](/docs/core-api-ref-remote-procedure-calls-raw-transactions#createrawtransaction): creates an unsigned serialized transaction that spends a previous output to a new output with a P2PKH or P2SH address. The transaction is not stored in the wallet or transmitted to the network.\n- [DecodeRawTransaction](/docs/core-api-ref-remote-procedure-calls-raw-transactions#decoderawtransaction): decodes a serialized transaction hex string into a JSON object describing the transaction.\n- [SignRawTransactionWithKey](#signrawtransactionwithkey): signs inputs for a transaction in the serialized transaction format using private keys provided in the call.\n- [SendRawTransaction](/docs/core-api-ref-remote-procedure-calls-raw-transactions#sendrawtransaction): validates a transaction and broadcasts it to the peer-to-peer network.\n- [Serialized Transaction Format](core-ref-transactions-raw-transaction-format)\n\n# GetRawTransaction\n\nThe [`getrawtransaction` RPC](core-api-ref-remote-procedure-calls-raw-transactions#getrawtransaction) gets a hex-encoded serialized transaction or a JSON object describing the transaction. By default, Dash Core only stores complete transaction data for UTXOs and your own transactions, so the RPC may fail on historic transactions unless you use the non-default `txindex=1` in your Dash Core startup settings.\n\nNote: By default this function only works for mempool transactions. When called with a blockhash argument, getrawtransaction will return the transaction if the specified block is available and the transaction is found in that block. When called without a blockhash argument, getrawtransaction will return the transaction if it is in the mempool, or if `-txindex` is enabled and the transaction is in a block in the blockchain. Use the [`gettransaction` RPC](core-api-ref-remote-procedure-calls-wallet#gettransaction) for wallet transactions.\n\nAs of Dash Core 18.0.0, transactions with unspent outputs will no longer be included unless `-txindex` is enabled.\n\n> \ud83d\udea7 Reindex note\n> \n> If you begin using `txindex=1` after downloading the block chain, you must rebuild your indexes by starting Dash Core with the option  `-reindex`.  This may take several hours to complete, during which time your node will not process new blocks or transactions. This reindex only needs to be done once.\n\n_Parameter #1---the TXID of the transaction to get_\n\n| Name | Type         | Presence                | Description                                                          |\n| ---- | ------------ | ----------------------- | -------------------------------------------------------------------- |\n| TXID | string (hex) | Required<br>(exactly 1) | The TXID of the transaction to get, encoded as hex in RPC byte order |\n\n_Parameter #2---whether to get the serialized or decoded transaction_\n\n| Name    | Type | Presence             | Description                                                                                                                                                                                                                                |\n| ------- | ---- | -------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| Verbose | bool | Optional<br>(0 or 1) | _Updated in Dash Core 0.12.3 / Bitcoin Core 0.14.0_<br><br>Set to `false` (the default) to return the serialized transaction as hex.  Set to `true` to return a decoded transaction in JSON.  Before 0.12.3, use `0` and `1`, respectively |\n\n_Parameter #3---hash of a block to look in for the transaction_\n\n| Name       | Type | Presence             | Description                                                                                   |\n| ---------- | ---- | -------------------- | --------------------------------------------------------------------------------------------- |\n| Block Hash | bool | Optional<br>(0 or 1) | _Added in Dash Core 0.16.0_<br><br>The hash of the block in which to look for the transaction |\n\n_Result (if transaction not found)---`null`_\n\n| Name     | Type | Presence                | Description                                                                                                                                                                                                                                                  |\n| -------- | ---- | ----------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| `result` | null | Required<br>(exactly 1) | If the transaction wasn't found, the result will be JSON `null`.  This can occur because the transaction doesn't exist in the block chain or memory pool, or because it isn't part of the transaction index.  See the Dash Core `-help` entry for `-txindex` |\n\n_Result (if verbose=`false`)---the serialized transaction_\n\n| Name     | Type         | Presence                | Description                                                                          |\n| -------- | ------------ | ----------------------- | ------------------------------------------------------------------------------------ |\n| `result` | string (hex) | Required<br>(exactly 1) | If the transaction was found, this will be the serialized transaction encoded as hex |\n\n_Result (if verbose=`true`)---the decoded transaction_\n\n| Name                        | Type           | Presence                | Description                                                                                                                                                                                                                                                                                                                      |\n| --------------------------- | -------------- | ----------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `result`                    | object         | Required<br>(exactly 1) | If the transaction was found, this will be an object describing it                                                                                                                                                                                                                                                               |\n| \u2192<br>`in_active_chain`      | bool           | Required<br>(exactly 1) | ) Whether specified block is in the active chain or not (only present with explicit `blockhash` argument)                                                                                                                                                                                                                        |\n| \u2192<br>`txid`                 | string (hex)   | Required<br>(exactly 1) | The transaction's TXID encoded as hex in RPC byte order                                                                                                                                                                                                                                                                          |\n| \u2192<br>`size`                 | number (int)   | Required<br>(exactly 1) | _Added in Bitcoin Core 0.12.0_<br><br>The serialized transaction size                                                                                                                                                                                                                                                            |\n| \u2192<br>`version`              | number (int)   | Required<br>(exactly 1) | The transaction format version number                                                                                                                                                                                                                                                                                            |\n| \u2192<br>`type`                 | number (int)   | Required<br>(exactly 1) | _Added in Dash Core 0.13.0.0_<br><br>The transaction format type                                                                                                                                                                                                                                                                 |\n| \u2192<br>`locktime`             | number (int)   | Required<br>(exactly 1) | The transaction's locktime: either a Unix epoch date or block height; see the [locktime parsing rules](core-guide-transactions-locktime-and-sequence-number#locktime-parsing-rules)                                                                                                                                              |\n| \u2192<br>`vin`                  | array          | Required<br>(exactly 1) | An array of objects with each object being an input vector (vin) for this transaction.  Input objects will have the same order within the array as they have in the transaction, so the first input listed will be input 0                                                                                                       |\n| \u2192 \u2192<br>Input                | object         | Required<br>(1 or more) | An object describing one of this transaction's inputs.  May be a regular input or a coinbase                                                                                                                                                                                                                                     |\n| \u2192 \u2192 \u2192<br>`txid`             | string         | Optional<br>(0 or 1)    | The TXID of the outpoint being spent, encoded as hex in RPC byte order.  Not present if this is a coinbase transaction                                                                                                                                                                                                           |\n| \u2192 \u2192 \u2192<br>`vout`             | number (int)   | Optional<br>(0 or 1)    | The output index number (vout) of the outpoint being spent.  The first output in a transaction has an index of `0`.  Not present if this is a coinbase transaction                                                                                                                                                               |\n| \u2192 \u2192 \u2192<br>`scriptSig`        | object         | Optional<br>(0 or 1)    | An object describing the signature script of this input.  Not present if this is a coinbase transaction                                                                                                                                                                                                                          |\n| \u2192 \u2192 \u2192 \u2192<br>`asm`            | string         | Required<br>(exactly 1) | The signature script in decoded form with non-data-pushing opcodes listed                                                                                                                                                                                                                                                        |\n| \u2192 \u2192 \u2192 \u2192<br>`hex`            | string (hex)   | Required<br>(exactly 1) | The signature script encoded as hex                                                                                                                                                                                                                                                                                              |\n| \u2192 \u2192 \u2192<br>`coinbase`         | string (hex)   | Optional<br>(0 or 1)    | The coinbase (similar to the hex field of a scriptSig) encoded as hex.  Only present if this is a coinbase transaction                                                                                                                                                                                                           |\n| \u2192 \u2192 \u2192<br>`value`            | number (Dash)  | Optional<br>(exactly 1) | The number of Dash paid to this output.  May be `0`.<br><br>Only present if `spentindex` enabled                                                                                                                                                                                                                                 |\n| \u2192 \u2192 \u2192<br>`valueSat`         | number (duffs) | Optional<br>(exactly 1) | The number of duffs paid to this output.  May be `0`.<br><br>Only present if `spentindex` enabled                                                                                                                                                                                                                                |\n| \u2192 \u2192 \u2192 \u2192<br>`addresses`      | string : array | Optional<br>(0 or 1)    | The P2PKH or P2SH addresses used in this transaction, or the computed P2PKH address of any pubkeys in this transaction.  This array will not be returned for `nulldata` or `nonstandard` script types.<br><br>Only present if `spentindex` enabled                                                                               |\n| \u2192 \u2192 \u2192 \u2192 \u2192<br>Address        | string         | Required<br>(1 or more) | A P2PKH or P2SH address                                                                                                                                                                                                                                                                                                          |\n| \u2192 \u2192 \u2192<br>`sequence`         | number (int)   | Required<br>(exactly 1) | The input sequence number                                                                                                                                                                                                                                                                                                        |\n| \u2192<br>`vout`                 | array          | Required<br>(exactly 1) | An array of objects each describing an output vector (vout) for this transaction.  Output objects will have the same order within the array as they have in the transaction, so the first output listed will be output 0                                                                                                         |\n| \u2192 \u2192<br>Output               | object         | Required<br>(1 or more) | An object describing one of this transaction's outputs                                                                                                                                                                                                                                                                           |\n| \u2192 \u2192 \u2192<br>`value`            | number (Dash)  | Required<br>(exactly 1) | The number of Dash paid to this output.  May be `0`                                                                                                                                                                                                                                                                              |\n| \u2192 \u2192 \u2192<br>`valueSat`         | number (duffs) | Required<br>(exactly 1) | The number of duffs paid to this output.  May be `0`                                                                                                                                                                                                                                                                             |\n| \u2192 \u2192 \u2192<br>`n`                | number (int)   | Required<br>(exactly 1) | The output index number of this output within this transaction                                                                                                                                                                                                                                                                   |\n| \u2192 \u2192 \u2192<br>`scriptPubKey`     | object         | Required<br>(exactly 1) | An object describing the pubkey script                                                                                                                                                                                                                                                                                           |\n| \u2192 \u2192 \u2192 \u2192<br>`asm`            | string         | Required<br>(exactly 1) | The pubkey script in decoded form with non-data-pushing opcodes listed                                                                                                                                                                                                                                                           |\n| \u2192 \u2192 \u2192 \u2192<br>`hex`            | string (hex)   | Required<br>(exactly 1) | The pubkey script encoded as hex                                                                                                                                                                                                                                                                                                 |\n| \u2192 \u2192 \u2192 \u2192<br>`reqSigs`        | number (int)   | Optional<br>(0 or 1)    | The number of signatures required; this is always `1` for P2PK, P2PKH, and P2SH (including P2SH multisig because the redeem script is not available in the pubkey script).  It may be greater than 1 for bare multisig.  This value will not be returned for `nulldata` or `nonstandard` script types (see the `type` key below) |\n| \u2192 \u2192 \u2192 \u2192<br>`type`           | string         | Optional<br>(0 or 1)    | The type of script.  This will be one of the following:<br>\u2022 `pubkey` for a P2PK script<br>\u2022 `pubkeyhash` for a P2PKH script<br>\u2022 `scripthash` for a P2SH script<br>\u2022 `multisig` for a bare multisig script<br>\u2022 `nulldata` for nulldata scripts<br>\u2022 `nonstandard` for unknown scripts                                          |\n| \u2192 \u2192 \u2192 \u2192<br>`addresses`      | string : array | Optional<br>(0 or 1)    | The P2PKH or P2SH addresses used in this transaction, or the computed P2PKH address of any pubkeys in this transaction.  This array will not be returned for `nulldata` or `nonstandard` script types                                                                                                                            |\n| \u2192 \u2192 \u2192 \u2192 \u2192<br>Address        | string         | Required<br>(1 or more) | A P2PKH or P2SH address                                                                                                                                                                                                                                                                                                          |\n| \u2192<br>`extraPayloadSize`     | number (int)   | Optional<br>(0 or 1)    | _Added in Dash Core 0.13.0.0_<br><br>Size of the DIP2 extra payload. Only present if it's a DIP2 special transaction                                                                                                                                                                                                             |\n| \u2192<br>`extraPayload`         | string (hex)   | Optional<br>(0 or 1)    | _Added in Dash Core 0.13.0.0_<br><br>Hex encoded DIP2 extra payload data. Only present if it's a DIP2 special transaction                                                                                                                                                                                                        |\n| \u2192<br>`hex`                  | string (hex)   | Required<br>(exactly 1) | The serialized, hex-encoded data for the provided `txid`                                                                                                                                                                                                                                                                         |\n| \u2192<br>`blockhash`            | string (hex)   | Optional<br>(0 or 1)    | If the transaction has been included in a block on the local best block chain, this is the hash of that block encoded as hex in RPC byte order                                                                                                                                                                                   |\n| \u2192<br>`height`               | number (int)   | Optional<br>(0 or 1)    | The block height where the transaction was mined                                                                                                                                                                                                                                                                                 |\n| \u2192<br>`confirmations`        | number (int)   | Required<br>(exactly 1) | If the transaction has been included in a block on the local best block chain, this is how many confirmations it has.  Otherwise, this is `0`                                                                                                                                                                                    |\n| \u2192<br>`time`                 | number (int)   | Optional<br>(0 or 1)    | If the transaction has been included in a block on the local best block chain, this is the block header time of that block (may be in the future)                                                                                                                                                                                |\n| \u2192<br>`blocktime`            | number (int)   | Optional<br>(0 or 1)    | This field is currently identical to the time field described above                                                                                                                                                                                                                                                              |\n| \u2192<br>`instantlock`          | bool           | Required<br>(exactly 1) | If set to `true`, this transaction is locked (by InstantSend or a ChainLock)                                                                                                                                                                                                                                                     |\n| \u2192<br>`instantlock_internal` | bool           | Required<br>(exactly 1) | If set to `true`, this transaction has an InstantSend lock                                                                                                                                                                                                                                                                       |\n| \u2192<br>`chainlock`            | bool           | Required<br>(exactly 1) | _Added in Dash Core 0.14.0_<br><br>If set to `true`, this transaction is in a block that is locked (not susceptible to a chain re-org)                                                                                                                                                                                           |\n\n_Examples from Dash Core 0.14.0_\n\nA classical transaction in serialized transaction format:\n\n```bash\ndash-cli getrawtransaction \\\n  f4de3be04efa18e203c9d0b7ad11bb2517f5889338918ed300a374f5bd736ed7\n```\n\n\n\nResult (wrapped):\n\n```text\n02000000015d0b26079696875e9fc3cb480420aae3c8b1da628fbb14cc718066\\\ndf7fe7c5fd010000006a47304402202cfa683981898ad9adb8953423a38f7185\\\ned41e163aa195d608fbe5bc3034910022034e2376aaed1c6576c0dad79d626ee\\\n27f706baaed86dabb105979c3e6f6e1cb9012103d14eb001cf0908f3a2333d17\\\n1f6236497a82318a6a6f649b4d7fd8e5c8922e08feffffff021e3f4b4c000000\\\n001976a914b02ae52066542b4aec5cf45c7cae3183d7bd322788ac00f9029500\\\n0000001976a914252c9de3a0ebd5c95886187b24969d4ccdb5576e88ac943d0000\n```\n\n\n\nGet the same transaction in JSON:\n\n```bash\ndash-cli getrawtransaction \\\nf4de3be04efa18e203c9d0b7ad11bb2517f5889338918ed300a374f5bd736ed7 \\\n1\n```\n\n\n\nResult:\n\n```json\n{\n  \"txid\": \"f4de3be04efa18e203c9d0b7ad11bb2517f5889338918ed300a374f5bd736ed7\",\n  \"version\": 2,\n  \"type\": 0,\n  \"size\": 225,\n  \"locktime\": 15764,\n  \"vin\": [\n    {\n      \"txid\": \"fdc5e77fdf668071cc14bb8f62dab1c8e3aa200448cbc39f5e87969607260b5d\",\n      \"vout\": 1,\n      \"scriptSig\": {\n        \"asm\": \"304402202cfa683981898ad9adb8953423a38f7185ed41e163aa195d608fbe5bc3034910022034e2376aaed1c6576c0dad79d626ee27f706baaed86dabb105979c3e6f6e1cb9[ALL] 03d14eb001cf0908f3a2333d171f6236497a82318a6a6f649b4d7fd8e5c8922e08\",\n        \"hex\": \"47304402202cfa683981898ad9adb8953423a38f7185ed41e163aa195d608fbe5bc3034910022034e2376aaed1c6576c0dad79d626ee27f706baaed86dabb105979c3e6f6e1cb9012103d14eb001cf0908f3a2333d171f6236497a82318a6a6f649b4d7fd8e5c8922e08\"\n      },\n      \"value\": 37.80000000,\n      \"valueSat\": 3780000000,\n      \"address\": \"yTsGq4wV8WF5GKLaYV2C43zrkr2sfTtysT\",\n      \"sequence\": 4294967294\n    }\n  ],\n  \"vout\": [\n    {\n      \"value\": 12.79999774,\n      \"valueSat\": 1279999774,\n      \"n\": 0,\n      \"scriptPubKey\": {\n        \"asm\": \"OP_DUP OP_HASH160 b02ae52066542b4aec5cf45c7cae3183d7bd3227 OP_EQUALVERIFY OP_CHECKSIG\",\n        \"hex\": \"76a914b02ae52066542b4aec5cf45c7cae3183d7bd322788ac\",\n        \"reqSigs\": 1,\n        \"type\": \"pubkeyhash\",\n        \"addresses\": [\n          \"ycNwAN4DQ7Xnw5XLKg84SR4U1GE22FfLNQ\"\n        ]\n      },\n      \"spentTxId\": \"85b40136f077cded9587022645fde82389e2f01b0bec697d8cd22ccab930f3d3\",\n      \"spentIndex\": 19,\n      \"spentHeight\": 20631\n    },\n    {\n      \"value\": 25.00000000,\n      \"valueSat\": 2500000000,\n      \"n\": 1,\n      \"scriptPubKey\": {\n        \"asm\": \"OP_DUP OP_HASH160 252c9de3a0ebd5c95886187b24969d4ccdb5576e OP_EQUALVERIFY OP_CHECKSIG\",\n        \"hex\": \"76a914252c9de3a0ebd5c95886187b24969d4ccdb5576e88ac\",\n        \"reqSigs\": 1,\n        \"type\": \"pubkeyhash\",\n        \"addresses\": [\n          \"yPi1JKw5fn8bMFsCCtnkGagogW6GXwGktZ\"\n        ]\n      },\n      \"spentTxId\": \"90aa8902dbab71c07a5ac06dfe45c5e5fa1f032788b5f916951d0969c9feef39\",\n      \"spentIndex\": 1,\n      \"spentHeight\": 24630\n    }\n  ],\n  \"hex\": \"02000000015d0b26079696875e9fc3cb480420aae3c8b1da628fbb14cc718066df7fe7c5fd010000006a47304402202cfa683981898ad9adb8953423a38f7185ed41e163aa195d608fbe5bc3034910022034e2376aaed1c6576c0dad79d626ee27f706baaed86dabb105979c3e6f6e1cb9012103d14eb001cf0908f3a2333d171f6236497a82318a6a6f649b4d7fd8e5c8922e08feffffff021e3f4b4c000000001976a914b02ae52066542b4aec5cf45c7cae3183d7bd322788ac00f90295000000001976a914252c9de3a0ebd5c95886187b24969d4ccdb5576e88ac943d0000\",\n  \"blockhash\": \"0000000005f395d62a40ef9f2a13000bd4076e2131c8671db8333a5b31e4403f\",\n  \"height\": 15765,\n  \"confirmations\": 153657,\n  \"time\": 1546278750,\n  \"blocktime\": 1546278750,\n  \"instantlock\": true,\n  \"instantlock_internal\": false,\n  \"chainlock\": true\n}\n```\n\n\n\nA special transaction (CbTx) in serialized transaction format:\n\n```bash\ndash-cli getrawtransaction \\\n  25632685ed0d7286901a80961c924c1ddd952e764754dbd8b40d0956413c8b56\n```\n\n\n\nResult (wrapped):\n\n```text\n030005000100000000000000000000000000000000000000000000000000000000000\\\n00000ffffffff2703ae50011a4d696e656420627920416e74506f6f6c2021000b0120\\\n1da9196f0000000007000000ffffffff02809e4730000000001976a914cbd7bfcc503\\\n51180132b2c0698cb90ad74c473c788ac809e4730000000001976a91488a060bc2dfe\\\n05780ae4dcb6c98b12436c35a93988ac00000000460200ae50010078e5c08b3996088\\\n7bf95185c381bdb719e60b6925fa12af78a8824fade927387c757acb6bac63da84f92\\\n45e20cfd5d830382ac634d434725ca6349ab5db920a3\n```\n\n\n\nGet the same transaction in JSON:\n\n```bash\ndash-cli getrawtransaction \\\n25632685ed0d7286901a80961c924c1ddd952e764754dbd8b40d0956413c8b56 \\\n1\n```\n\n\n\nResult:\n\n```json\n{\n  \"txid\": \"25632685ed0d7286901a80961c924c1ddd952e764754dbd8b40d0956413c8b56\",\n  \"version\": 3,\n  \"type\": 5,\n  \"size\": 229,\n  \"locktime\": 0,\n  \"vin\": [\n    {\n      \"coinbase\": \"03ae50011a4d696e656420627920416e74506f6f6c2021000b01201da9196f0000000007000000\",\n      \"sequence\": 4294967295\n    }\n  ],\n  \"vout\": [\n    {\n      \"value\": 8.10000000,\n      \"valueSat\": 810000000,\n      \"n\": 0,\n      \"scriptPubKey\": {\n        \"asm\": \"OP_DUP OP_HASH160 cbd7bfcc50351180132b2c0698cb90ad74c473c7 OP_EQUALVERIFY OP_CHECKSIG\",\n        \"hex\": \"76a914cbd7bfcc50351180132b2c0698cb90ad74c473c788ac\",\n        \"reqSigs\": 1,\n        \"type\": \"pubkeyhash\",\n        \"addresses\": [\n          \"yeuGUfPMrbEqAS2Pw1wonYgEPbM4LAA9LK\"\n        ]\n      },\n      \"spentTxId\": \"1790b286922d1a439bdc056939bc902a222f9d66ee63d8427805617eedf835bd\",\n      \"spentIndex\": 83,\n      \"spentHeight\": 94680\n    },\n    {\n      \"value\": 8.10000000,\n      \"valueSat\": 810000000,\n      \"n\": 1,\n      \"scriptPubKey\": {\n        \"asm\": \"OP_DUP OP_HASH160 88a060bc2dfe05780ae4dcb6c98b12436c35a939 OP_EQUALVERIFY OP_CHECKSIG\",\n        \"hex\": \"76a91488a060bc2dfe05780ae4dcb6c98b12436c35a93988ac\",\n        \"reqSigs\": 1,\n        \"type\": \"pubkeyhash\",\n        \"addresses\": [\n          \"yYmrsYP3XYMZr1cGtha3QzmuNB1C7CfyhV\"\n        ]\n      }\n    }\n  ],\n  \"extraPayloadSize\": 70,\n  \"extraPayload\": \"0200ae50010078e5c08b39960887bf95185c381bdb719e60b6925fa12af78a8824fade927387c757acb6bac63da84f9245e20cfd5d830382ac634d434725ca6349ab5db920a3\",\n  \"cbTx\": {\n    \"version\": 2,\n    \"height\": 86190,\n    \"merkleRootMNList\": \"877392defa24888af72aa15f92b6609e71db1b385c1895bf870896398bc0e578\",\n    \"merkleRootQuorums\": \"a320b95dab4963ca2547434d63ac8203835dfd0ce245924fa83dc6bab6ac57c7\"\n  },\n  \"hex\": \"03000500010000000000000000000000000000000000000000000000000000000000000000ffffffff2703ae50011a4d696e656420627920416e74506f6f6c2021000b01201da9196f0000000007000000ffffffff02809e4730000000001976a914cbd7bfcc50351180132b2c0698cb90ad74c473c788ac809e4730000000001976a91488a060bc2dfe05780ae4dcb6c98b12436c35a93988ac00000000460200ae50010078e5c08b39960887bf95185c381bdb719e60b6925fa12af78a8824fade927387c757acb6bac63da84f9245e20cfd5d830382ac634d434725ca6349ab5db920a3\",\n  \"blockhash\": \"00000000007b0fb99e36713cf08012482478ee496e6dcb4007ad2e806306e62b\",\n  \"height\": 86190,\n  \"confirmations\": 83233,\n  \"time\": 1556114577,\n  \"blocktime\": 1556114577,\n  \"instantlock\": true,\n  \"instantlock_internal\": false,\n  \"chainlock\": true\n}\n```\n\n\n\n_See also_\n\n- [GetSpecialTxes](/docs/core-api-ref-remote-procedure-calls-blockchain#getspecialtxes): returns an array of special transactions found in the specified block\n- [GetTransaction](/docs/core-api-ref-remote-procedure-calls-wallet#gettransaction): gets detailed information about an in-wallet transaction.\n\n# JoinPSBTs\n\nThe [`joinpsbts` RPC](core-api-ref-remote-procedure-calls-raw-transactions#joinpsbts) joins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs. No input in any of the PSBTs can be in more than one of the PSBTs.\n\n_Parameter #1---Transactions_\n\n| Name   | Type   | Presence                | Description                                                     |\n| ------ | ------ | ----------------------- | --------------------------------------------------------------- |\n| `txs`  | array  | Required<br>(exactly 1) | A JSON array of base64 strings of partially signed transactions |\n| \u2192 PSBT | string | Required<br>(1 or more) | A PSBT base64 string                                            |\n\n_Result---the combined raw transaction in base64_\n\n| Name   | Type   | Presence                | Description                                           |\n| ------ | ------ | ----------------------- | ----------------------------------------------------- |\n| Result | string | Required<br>(Exactly 1) | The resulting raw transaction (base64-encoded string) |\n\n_Example from Dash Core 18.0.0_\n\n```bash\ndash-cli -testnet joinpsbts \"[\\\"cHNidP8BAEICAAAAAfisRhf3kqdGJdB8vKvQz81ze9cH6bh0RKZfFTMsXatUAAAAAAD/////AQAAAAAAAAAABmoEAAECAwAAAAAAAAA=\\\", \\\"cHNidP8BAEICAAAAAXgRxzbShUlivVFKgoLyhk0RCCYLZKCYTl/tYRd+yGImAAAAAAD/////AQAAAAAAAAAABmoEAAECAwAAAAAAAAA=\\\"]\"\n```\n\n\n\nResult:\n\n```\ncHNidP8BAHoCAAAAAvisRhf3kqdGJdB8vKvQz81ze9cH6bh0RKZfFTMsXatUAAAAAAD/////eBHHNtKFSWK9UUqCgvKGTREIJgtkoJhOX+1hF37IYiYAAAAAAP////8CAAAAAAAAAAAGagQAAQIDAAAAAAAAAAAGagQAAQIDAAAAAAAAAAAA\n```\n\n\n\n_See also_\n\n- [CombinePSBT](/docs/core-api-ref-remote-procedure-calls-raw-transactions#combinepsbt): combine multiple partially-signed Dash transactions into one transaction.\n- [ConvertToPSBT](/docs/core-api-ref-remote-procedure-calls-raw-transactions#converttopsbt): converts a network serialized transaction to a PSBT.\n- [DecodePSBT](/docs/core-api-ref-remote-procedure-calls-raw-transactions#decodepsbt): returns a JSON object representing the serialized, base64-encoded partially signed Dash transaction.\n- [FinalizePSBT](/docs/core-api-ref-remote-procedure-calls-raw-transactions#finalizepsbt): finalizes the inputs of a PSBT.\n- [WalletCreateFundedPSBT](/docs/core-api-ref-remote-procedure-calls-wallet#walletcreatefundedpsbt): creates and funds a transaction in the Partially Signed Transaction (PST) format.\n- [WalletProcessPSBT](/docs/core-api-ref-remote-procedure-calls-wallet#walletprocesspsbt): updates a PSBT with input information from a wallet and then allows the signing of inputs.\n\n# SendRawTransaction\n\nThe [`sendrawtransaction` RPC](core-api-ref-remote-procedure-calls-raw-transactions#sendrawtransaction) validates a transaction and broadcasts it to the peer-to-peer network.\n\n> \u2757\ufe0f \n> \n> Breaking change(s) in Dash Core 18.0. See parameter and/or response information for details.\n\n_Parameter #1---a serialized transaction to broadcast_\n\n| Name        | Type         | Presence                | Description                                            |\n| ----------- | ------------ | ----------------------- | ------------------------------------------------------ |\n| Transaction | string (hex) | Required<br>(exactly 1) | The serialized transaction to broadcast encoded as hex |\n\n_Parameter #2--whether to allow high fees_\n\n| Name         | Type   | Presence             | Description                                                                                                                                                                                                                                                                                                                            |\n| ------------ | ------ | -------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `maxfeerate` | number | Optional<br>(0 or 1) | Reject transactions whose fee rate is higher than the specified value, expressed in DASH/kB. **Breaking change: parameter changed from `allowhighfees` to `maxfeerate` in Dash Core 18.0.0. See [previous version](https://dashcore.readme.io/v0.17.0/docs/core-api-ref-remote-procedure-calls-raw-transactions#sendrawtransaction).** |\n\n_Parameter #3--whether to use InstantSend_\n\n| Name            | Type | Presence             | Description                                     |\n| --------------- | ---- | -------------------- | ----------------------------------------------- |\n| Use InstantSend | bool | Optional<br>(0 or 1) | _Deprecated and ignored since Dash Core 0.15.0_ |\n\n_Parameter #4--whether to bypass policy limits_\n\n| Name          | Type | Presence             | Description                      |\n| ------------- | ---- | -------------------- | -------------------------------- |\n| Bypass Limits | bool | Optional<br>(0 or 1) | Bypass transaction policy limits |\n\n_Result---a TXID or error message_\n\n| Name     | Type              | Presence                | Description                                                                                                                                                                                                                                                                                                                          |\n| -------- | ----------------- | ----------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| `result` | null/string (hex) | Required<br>(exactly 1) | If the transaction was accepted by the node for broadcast, this will be the TXID of the transaction encoded as hex in RPC byte order.  If the transaction was rejected by the node, this will set to `null`, the JSON-RPC error field will be set to a code, and the JSON-RPC message field may contain an informative error message |\n\n_Examples from Dash Core 0.12.2_\n\nBroadcast a signed transaction:\n\n```bash\ndash-cli -testnet sendrawtransaction 01000000016b490886c0198b\\\n028c6c5cb145c4eb3b1055a224a7a105aadeff41b69ec91e0601000000694630\\\n43022033a61c56fa0867ed67b76b023204a9dc0ee6b0d63305dc5f65fe943354\\\n45ff2f021f712f55399d5238fc7146497c431fc4182a1de0b96fc22716e0845f\\\n561d542e012102eacba539d92eb88d4e73bb32749d79f53f6e8d7947ac40a71b\\\nd4b26c13b6ec29ffffffff0200205fa0120000001976a914485485425fa99504\\\nec1638ac4213f3cfc9f32ef388acc0a8f9be010000001976a914811eacc14db8\\\nebb5b64486dc43400c0226b428a488ac00000000\n```\n\n\n\nResult:\n\n```text\n2f124cb550d9967b81914b544dea3783de23e85d67a9816f9bada665ecfe1cd5\n```\n\n\n\n_See also_\n\n- [CombineRawTransaction](/docs/core-api-ref-remote-procedure-calls-raw-transactions#combinerawtransaction): combine multiple partially signed transactions into one transaction.\n- [CreateRawTransaction](/docs/core-api-ref-remote-procedure-calls-raw-transactions#createrawtransaction): creates an unsigned serialized transaction that spends a previous output to a new output with a P2PKH or P2SH address. The transaction is not stored in the wallet or transmitted to the network.\n- [DecodeRawTransaction](/docs/core-api-ref-remote-procedure-calls-raw-transactions#decoderawtransaction): decodes a serialized transaction hex string into a JSON object describing the transaction.\n- [SignRawTransactionWithKey](#signrawtransactionwithkey): signs inputs for a transaction in the serialized transaction format using private keys provided in the call.\n\n# SignRawTransactionWithKey\n\n> \ud83d\udc4d \n> \n> Added in Dash Core 0.17.0\n\nThe [`signrawtransactionwithkey` RPC](#signrawtransactionwithkey) signs inputs for a transaction in the serialized transaction format using private keys provided in the call.\n\n_Parameter #1---the transaction to sign_\n\n| Name        | Type         | Presence                | Description                                         |\n| ----------- | ------------ | ----------------------- | --------------------------------------------------- |\n| Transaction | string (hex) | Required<br>(exactly 1) | The transaction to sign as a serialized transaction |\n\n_Parameter #2---private keys for signing_\n\n| Name         | Type            | Presence                | Description                                                                                                                                                                                                                                                  |\n| ------------ | --------------- | ----------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| Private Keys | array           | Required<br>(exactly 1) | An array holding private keys.  If any keys are provided, only they will be used to sign the transaction (even if the wallet has other matching keys).  If this array is empty or not used, and wallet support is enabled, keys from the wallet will be used |\n| \u2192<br>Key     | string (base58) | Required<br>(1 or more) | A private key in base58check format to use to create a signature for this transaction                                                                                                                                                                        |\n\n_Parameter #3---unspent transaction output details_\n\n| Name                  | Type         | Presence                | Description                                                                                            |\n| --------------------- | ------------ | ----------------------- | ------------------------------------------------------------------------------------------------------ |\n| Dependencies          | array        | Optional<br>(0 or 1)    | The previous outputs being spent by this transaction                                                   |\n| \u2192<br>Output           | object       | Optional<br>(0 or more) | An output being spent                                                                                  |\n| \u2192 \u2192<br>`txid`         | string (hex) | Required<br>(exactly 1) | The TXID of the transaction the output appeared in.  The TXID must be encoded in hex in RPC byte order |\n| \u2192 \u2192<br>`vout`         | number (int) | Required<br>(exactly 1) | The index number of the output (vout) as it appeared in its transaction, with the first output being 0 |\n| \u2192 \u2192<br>`scriptPubKey` | string (hex) | Required<br>(exactly 1) | The output's pubkey script encoded as hex                                                              |\n| \u2192 \u2192<br>`redeemScript` | string (hex) | Optional<br>(0 or 1)    | If the pubkey script was a script hash, this must be the corresponding redeem script                   |\n| \u2192 \u2192<br>`amount`       | numeric      | Required<br>(exactly 1) | The amount of Dash spent                                                                               |\n\n_Parameter #4---signature hash type_\n\n| Name    | Type   | Presence             | Description                                                                                                                                                                                                                                                                                                                                                |                      |                            |                |\n| :------ | :----- | :------------------- | :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | :------------------- | :------------------------- | :------------- |\n| SigHash | string | Optional<br>(0 or 1) | The type of signature hash to use for all of the signatures performed.  (You must use separate calls to the [`signrawtransaction` RPC](core-api-ref-remote-procedure-calls-raw-transactions#signrawtransactionwithkey) if you want to use different signature hash types for different signatures.  The allowed values are: `ALL`, `NONE`, `SINGLE`, \\`ALL | ANYONECANPAY`, `NONE | ANYONECANPAY`, and `SINGLE | ANYONECANPAY\\` |\n\n_Result---the transaction with any signatures made_\n\n| Name            | Type         | Presence                | Description                                                                                                                                                                                            |\n| --------------- | ------------ | ----------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| `result`        | object       | Required<br>(exactly 1) | The results of the signature                                                                                                                                                                           |\n| \u2192<br>`hex`      | string (hex) | Required<br>(exactly 1) | The resulting serialized transaction encoded as hex with any signatures made inserted.  If no signatures were made, this will be the same transaction provided in parameter #1                         |\n| \u2192<br>`complete` | bool         | Required<br>(exactly 1) | The value `true` if transaction is fully signed; the value `false` if more signatures are required. Once `true` the transaction can be sent using the [`sendrawtransaction` RPC](#sendrawtransaction). |\n\n_Example from Dash Core 0.17.0_\n\nSign the raw transaction hex generated from the [`createrawtransaction` RPC](#createrawtransaction):\n\n```bash\ndash-cli -testnet signrawtransactionwithkey 020000000121f39228a11ddf197ac3658e\\\n93bd264d0afd927f0cdfc7caeb760537e529c94a0100000000ffffffff01809698000000000019\\\n76a914fe64a96d6660e30c433e1189082466a95bdf9ceb88ac00000000 \\\n[\\\"cSxm6ji1SQ7vF1r8QhcsE1AZ42ZJqs5CEAAnD18iV18ZCQ2u3gGa\\\"]\n```\n\n\n\nResult:\n\n```json\n{\n  \"hex\": \"020000000121f39228a11ddf197ac3658e93bd264d0afd927f0cdfc7caeb760537e529c94a010000006b483045022100811c5679ef097b0e5a338fc3cd05ee50e1802680ea8a172d0fd3a81da3c1fc2002204804b18a44e888ac1ee9b6a7cbadc211ecdc30f8c889938c95125206e39554220121025d81ce6581e547dd34194385352053abb17f0246768d75443b25ded5e37d594fffffffff0180969800000000001976a914fe64a96d6660e30c433e1189082466a95bdf9ceb88ac00000000\",\n  \"complete\": true\n}\n```\n\n\n\n_See also_\n\n- [CombineRawTransaction](/docs/core-api-ref-remote-procedure-calls-raw-transactions#combinerawtransaction): combine multiple partially signed transactions into one transaction.\n- [CreateRawTransaction](/docs/core-api-ref-remote-procedure-calls-raw-transactions#createrawtransaction): creates an unsigned serialized transaction that spends a previous output to a new output with a P2PKH or P2SH address. The transaction is not stored in the wallet or transmitted to the network.\n- [DecodeRawTransaction](/docs/core-api-ref-remote-procedure-calls-raw-transactions#decoderawtransaction): decodes a serialized transaction hex string into a JSON object describing the transaction.\n- [SendRawTransaction](/docs/core-api-ref-remote-procedure-calls-raw-transactions#sendrawtransaction): validates a transaction and broadcasts it to the peer-to-peer network.\n\n# TestMemPoolAccept\n\nThe [`testmempoolaccept` RPC](core-api-ref-remote-procedure-calls-raw-transactions#testmempoolaccept) returns the results of mempool acceptance tests indicating if raw transaction (serialized, hex-encoded) would be accepted by mempool.\n\n_Parameter #1---raw txs_\n\n| Name     | Type  | Presence                | Description                                                                  |\n| -------- | ----- | ----------------------- | ---------------------------------------------------------------------------- |\n| `rawtxs` | array | Required<br>(exactly 1) | An array of hex strings of raw transactions (the length must be one for now) |\n\n_Parameter #2---set max fee rate_\n\n| Name         | Type   | Presence             | Description                                                                                                                                                                                                                                                                             |\n| ------------ | ------ | -------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `maxfeerate` | number | Optional<br>(0 or 1) | Reject transactions whose fee rate is higher than the specified value, expressed in DASH/kB. Changed from `allowhighfees` in Dash Core 18.0.0. See [previous version](https://dashcore.readme.io/v0.17.0/docs/core-api-ref-remote-procedure-calls-raw-transactions#sendrawtransaction). |\n\n_Result---mempool acceptance test results_\n\n| Name                 | Type         | Presence                | Description                                                                                            |\n| -------------------- | ------------ | ----------------------- | ------------------------------------------------------------------------------------------------------ |\n| `result`             | array        | Required<br>(exactly 1) | The result of the mempool acceptance test for each raw transaction in the input array.                 |\n| \u2192<br>`txid`          | string (hex) | Required<br>(exactly 1) | The TXID of the transaction the output appeared in.  The TXID must be encoded in hex in RPC byte order |\n| \u2192<br>`allowed`       | bool         | Required<br>(exactly 1) | If the mempool allows this tx to be inserted                                                           |\n| \u2192<br>`reject-reason` | string       | Required<br>(exactly 1) | A rejection string that is only present when 'allowed' is false.                                       |\n\n_Example from Dash Core 18.0.0_\n\n```bash\ndash-cli -testnet testmempoolaccept [\\\"020000000234a2863f9781a7200330e700e684804bb2407d225c4e940c9cfb772f22fc0748000000006a47304402203b5a7899b6be2f33d30c1a71940c51f38074f4224a1ad6dee03dcc65f8646072022050d711115cd7291c2f094e3a3cfda14441721b1438e406b963b5660274ba4475012103e2fe477e31365d784d98514c7c9294283620d4a9775f01da5d3ba52f4c7286f5feffffff34a2863f9781a7200330e700e684804bb2407d225c4e940c9cfb772f22fc0748010000006a473044022018901985d2c94492111a45ed51bac88e02f1bb4a8382eacf5f474d70878c19f4022046e309e548f95a64b05e8ef70fae0ff86bf83cbed3055591580e0b5f5597c3a2012103109325a92f9e6d31d2ebd0595d471275ae8d635db2a0c42358f387e1af69c14dfeffffff020f530f00000000001976a9145799a5df43d34b05cdf03347af9102b67a6d154a88ac00e1f505000000001976a91464d51a27c8b8434458bac0193039bae55ca023c388ac151c0900\\\"]\n```\n\n\n\nResult:\n\n```json\n[\n  {\n    \"txid\": \"06464b9c80413a49ab3c618f769a11647b6011f9ad15094eb423916ae5bc0c23\",\n    \"allowed\": false,\n    \"reject-reason\": \"18: txn-already-in-mempool\"\n  }\n]\n```\n\n\n\n_See also_\n\n- [CombineRawTransaction](/docs/core-api-ref-remote-procedure-calls-raw-transactions#combinerawtransaction): combine multiple partially signed transactions into one transaction.\n- [CreateRawTransaction](/docs/core-api-ref-remote-procedure-calls-raw-transactions#createrawtransaction): creates an unsigned serialized transaction that spends a previous output to a new output with a P2PKH or P2SH address. The transaction is not stored in the wallet or transmitted to the network.\n- [DecodeRawTransaction](/docs/core-api-ref-remote-procedure-calls-raw-transactions#decoderawtransaction): decodes a serialized transaction hex string into a JSON object describing the transaction.\n- [SendRawTransaction](/docs/core-api-ref-remote-procedure-calls-raw-transactions#sendrawtransaction): validates a transaction and broadcasts it to the peer-to-peer network.\n- [SignRawTransactionWithKey](#signrawtransactionwithkey): signs inputs for a transaction in the serialized transaction format using private keys provided in the call.\n\n# UTXOUpdatePSBT\n\nThe [`utxoupdatepsbt` RPC](core-api-ref-remote-procedure-calls-raw-transactions#utxoupdatepsbt) updates a PSBT with  data from output descriptors, UTXOs retrieved from the UTXO set or the mempool.\n\n_Parameter #1---psbt_\n\n| Name | Type   | Presence | Description               |\n| ---- | ------ | -------- | ------------------------- |\n| psbt | string | Required | A base64 string of a PSBT |\n\n_Parameter #2---descriptors_\n\n| Name                               | Type             | Presence                | Description                                                                              |\n| ---------------------------------- | ---------------- | ----------------------- | ---------------------------------------------------------------------------------------- |\n| psbt                               | array            | Optional<br>(0 or 1)    | An array of either strings or objects                                                    |\n| \u2192<br>Output descriptor             | string           | Optional<br>(0 or 1)    | An output descriptor                                                                     |\n| \u2192<br>Output object                 | object           | Optional<br>(0 or 1)    | An object with an output descriptor and extra information                                |\n| \u2192 \u2192<br>`desc`                      | string           | Required<br>(exactly 1) | An output descriptor                                                                     |\n| \u2192 \u2192<br>`range`<br>(`n` or `[n,n]`) | numeric or array | Optional<br>(0 or 1)    | Up to what index HD chains should be explored (either end or [begin,end]) (default=1000) |\n\n_Result---the raw transaction in base64_\n\n| Name   | Type   | Presence                | Description                                           |\n| ------ | ------ | ----------------------- | ----------------------------------------------------- |\n| Result | string | Required<br>(Exactly 1) | The resulting raw transaction (base64-encoded string) |\n\n_Example from Dash Core 18.0.0_\n\n```bash\ndash-cli -testnet utxoupdatepsbt cHNidP8BAEICAAAAAXgRxzbShUlivVFKgoLyhk0RCCYLZKCYTl/tYRd+yGImAAAAAAD/////AQAAAAAAAAAABmoEAAECAwAAAAAAAAA=\n```\n\n\n\nResult:\n\n```\ncHNidP8BAEICAAAAAXgRxzbShUlivVFKgoLyhk0RCCYLZKCYTl/tYRd+yGImAAAAAAD/////AQAAAAAAAAAABmoEAAECAwAAAAAAAAA=\n```\n\n\n\n_See also_\n\n- [CombinePSBT](/docs/core-api-ref-remote-procedure-calls-raw-transactions#combinepsbt): combine multiple partially-signed Dash transactions into one transaction.\n- [ConvertToPSBT](/docs/core-api-ref-remote-procedure-calls-raw-transactions#converttopsbt): converts a network serialized transaction to a PSBT.\n- [DecodePSBT](/docs/core-api-ref-remote-procedure-calls-raw-transactions#decodepsbt): returns a JSON object representing the serialized, base64-encoded partially signed Dash transaction.\n- [FinalizePSBT](/docs/core-api-ref-remote-procedure-calls-raw-transactions#finalizepsbt): finalizes the inputs of a PSBT.\n- [WalletCreateFundedPSBT](/docs/core-api-ref-remote-procedure-calls-wallet#walletcreatefundedpsbt): creates and funds a transaction in the Partially Signed Transaction (PST) format.\n- [WalletProcessPSBT](/docs/core-api-ref-remote-procedure-calls-wallet#walletprocesspsbt): updates a PSBT with input information from a wallet and then allows the signing of inputs.",
 "order": 9,
 "isReference": false,
 "deprecated": false,
 "hidden": false,
 "sync_unique": "",
 "link_url": "",
 "link_external": false,
 "reusableContent": [],
 "previousSlug": "",
 "slugUpdatedAt": "2020-12-09T02:11:35.683Z",
 "revision": 45,
 "_id": "63f5176df91c7700118e77e5",
 "version": "63f5176df91c7700118e7825",
 "updatedAt": "2023-03-29T18:39:45.517Z",
 "createdAt": "2019-10-24T19:42:03.054Z",
 "project": "5daf2e65f4109c0040fd51e1",
 "user": "5b8400d7185d5e00036dcc3b",
 "parentDoc": "63f5176df91c7700118e77dc",
 "category": "63f5176df91c7700118e77a1",
 "__v": 1,
 "pendingAlgoliaPublish": false,
 "isApi": false,
 "id": "63f5176df91c7700118e77e5",
 "body_html": "<h1 class=\"heading heading-1 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"analyzepsbt\"></div><div class=\"heading-text\"><div id=\"section-analyze-psbt\" class=\"heading-anchor_backwardsCompatibility\"></div>AnalyzePSBT</div><a aria-label=\"Skip link to AnalyzePSBT\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#analyzepsbt\"></a></h1>\n<p>The analyzepsbt RPC analyzes and provides information about the current status of a PSBT and its inputs.</p>\n<p><em>Parameter #1---psbt</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">psbt</code></td><td>string</td><td>Required<br/>(Exactly 1)</td><td>The base64-encoded partially signed transaction</td></tr></tbody></table></div></div>\n<p><em>Result:</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">result</code></td><td>object</td><td>Required<br/>(exactly 1)</td><td>A JSON object</td></tr><tr><td>\u2192 <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">inputs</code></td><td>array</td><td>Required<br/>(exactly 1 )</td><td>An array that contains main details about the PSBT.</td></tr><tr><td>\u2192\u2192<button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">has_utxo</code></td><td>boolean</td><td>Required (exactly 1)</td><td>Whether a UTXO is provided</td></tr><tr><td>\u2192\u2192<button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">is_final</code></td><td>boolean</td><td>Required (exactly 1)</td><td>Whether the input is finalized</td></tr><tr><td>\u2192\u2192<button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">missing</code></td><td>object</td><td>Optional (0 or 1)</td><td>A JSON object that includes the data missing to complete the input.</td></tr><tr><td>\u2192\u2192\u2192<button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">pubkeys</code></td><td>array</td><td>Optional (0 or 1)</td><td>Array containing public key data.</td></tr><tr><td>\u2192\u2192\u2192\u2192<button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">hex</code></td><td>string</td><td>Required<br/>(0 or more)</td><td>Public key ID, hash160 of the public key, of a public key whose BIP 32 derivation path is missing.</td></tr><tr><td>\u2192\u2192\u2192<button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">signatures</code></td><td>array</td><td>Optional (0 or 1)</td><td>Array containing public key data</td></tr><tr><td>\u2192\u2192\u2192\u2192<button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">hex</code></td><td>string</td><td>Required<br/>(0 or more)</td><td>Public key ID, hash160 of the public key, of a public key whose signature is missing.</td></tr><tr><td>\u2192\u2192\u2192 <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">&quot;redeemscript&quot; : &quot;hex&quot;</code></td><td>string</td><td>Optional<br/>(0 or 1)</td><td>Hash160 of the redeemScript that is missing.</td></tr><tr><td>\u2192\u2192 <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">&quot;next&quot; : &quot;str&quot;</code></td><td>string</td><td>Optional<br/>(0 or 1)</td><td>Role of the next person that this input needs to go to</td></tr><tr><td>\u2192 <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">estimated_vsize</code></td><td>numeric</td><td>Optional (0 or 1)</td><td>Estimated vsize of the final signed transaction</td></tr><tr><td>\u2192 <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">estimated_feerate</code></td><td>numeric</td><td>Optional (0 or 1)</td><td>Estimated feerate of the final signed transaction in DASH/kB. Shown only if all UTXO slots in the PSBT have been filled.</td></tr><tr><td>\u2192 <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">fee</code></td><td>numeric</td><td>Optional (0 or 1)</td><td>The transaction fee paid. Shown only if all UTXO slots in the PSBT have been filled.</td></tr><tr><td>\u2192 <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">&quot;next&quot; : &quot;str&quot;</code></td><td>string</td><td>Required<br/>(exactly 1)</td><td>Role of the next person that this psbt needs to go to</td></tr><tr><td>\u2192 <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">&quot;error&quot; : &quot;str&quot;</code></td><td>string</td><td>Required<br/>(exactly 1)</td><td>Error message if there is one</td></tr></tbody></table></div></div>\n<p><em>Example from Dash Core 18.2.0</em></p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Bash</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-bash theme-light\" data-lang=\"bash\" name=\"\" tabindex=\"0\">dash-cli -testnet analyzepsbt cHNidP8BAHcCAAAAAWtJCIbAGYsCjGxcsUXE6zsQVaIkp6EFqt7/QbaeyR4GAQAAAAD/////AgAgX6ASAAAAGXapFEhUhUJfqZUE7BY4rEIT88/J8y7ziKzAqPm+AQAAABl2qRSBHqzBTbjrtbZEhtxDQAwCJrQopIisAAAAAAAAAAA=\n</code></pre></div></div>\n<p>Result:</p>\n<pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">{\n  &quot;inputs&quot;: [\n    {\n      &quot;has_utxo&quot;: false,\n      &quot;is_final&quot;: false,\n      &quot;next&quot;: &quot;updater&quot;\n    }\n  ],\n  &quot;next&quot;: &quot;updater&quot;\n}\n</code></pre>\n<p><em>See also:</em></p>\n<ul>\n<li><a href=\"core-api-ref-remote-procedure-calls-raw-transactions#combinepsbt\" target=\"\" title=\"\">CombinePSBT</a>: combines multiple partially-signed Dash transactions into one transaction.</li>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-raw-transactions#createpsbt\" target=\"\" title=\"\">CreatePSBT</a>: creates a transaction in the Partially Signed Transaction (PST) format.</li>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-raw-transactions#decodepsbt\" target=\"\" title=\"\">DecodePSBT</a>: returns a JSON object representing the serialized, base64-encoded partially signed Dash transaction.</li>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-raw-transactions#finalizepsbt\" target=\"\" title=\"\">FinalizePSBT</a>: finalizes the inputs of a PSBT.</li>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-wallet#walletprocesspsbt\" target=\"\" title=\"\">WalletProcessPSBT</a>: updates a PSBT with input information from a wallet and then allows the signing of inputs.</li>\n</ul>\n<h1 class=\"heading heading-1 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"combinepsbt\"></div><div class=\"heading-text\"><div id=\"section-combine-psbt\" class=\"heading-anchor_backwardsCompatibility\"></div>CombinePSBT</div><a aria-label=\"Skip link to CombinePSBT\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#combinepsbt\"></a></h1>\n<p>The <a href=\"core-api-ref-remote-procedure-calls-raw-transactions#combinepsbt\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">combinepsbt</code> RPC</a> combines multiple partially-signed Dash transactions into one transaction. Implements the Combiner role. This should be used only with <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">createrawtransaction</code> and <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">fundrawtransaction</code>.<br/>\n<button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">createpsbt</code> and <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">walletcreatefundedpsbt</code> should be used for new applications.</p>\n<p><em>Parameter #1---txs</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td>Transactions</td><td>string</td><td>Required<br/>(exactly 1)</td><td>An array of base64 strings of partially signed transactions</td></tr><tr><td>\u2192 psbt</td><td>string</td><td>Required<br/>(exactly 1)</td><td>A base64 string of a PSBT</td></tr></tbody></table></div></div>\n<p><em>Result---psbt</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">result</code></td><td>string</td><td>Required<br/>(Exactly 1)</td><td>The base64-encoded partially signed transaction</td></tr></tbody></table></div></div>\n<p><em>Example from Dash Core 18.0.0</em></p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Bash</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-bash theme-light\" data-lang=\"bash\" name=\"\" tabindex=\"0\">dash-cli -testnet combinepsbt &#x27;[&quot;cHNidP8BAFUCAAAAAQcxBA7Cdee2EvS1IyiRPzCVxbt9wFnrqry3AMUBOYvqAAAAAAD/////AQDh9QUAAAAAGXapFLBKVDBt/eE2UU3EUaAiMeuIUMC1iKwAAAAAAAEA3wIAAAAB9LcsqdmAuKwHgkt0HMpJuSx8RnBxL73+ORGz4ogdt+gBAAAAakcwRAIgJR7zIP4o/GRTAyvswKmdFDx+PBO/tB24s0ydQcRpOZECIAvm3Q2xMIpdAAhl17yQAkQjElRbZEIbcr7pGCpNbzqsASEDIcX0+C0b8ib3pvxlx809S7xOmAj0NH3i9vFe8pUTvHX+////AgBlzR0AAAAAF6kUJOSskBQ3xyDtInRjI2eW1QraJ9eHIcmaOwAAAAAZdqkUPU2zmkAo79MmS8yW1oYUjb7jz0qIrOosCQAiAgN+48COTyy1UqO7c63g5A9YEMnBIiYF+FcREEaGgxAHukcwRAIgfwcMEFPrmy81y5NWFj8M0CHUBlzzQxr4RoxSmzvmVIQCIH22f9/A/K0keQ7rKcya0E5zTlnYDnly8VJIrj2yUgflAQEER1IhA37jwI5PLLVSo7tzreDkD1gQycEiJgX4VxEQRoaDEAe6IQK1B5TV+2qTmU+/c3Pzl61bklYbfj9yg+jbdGyMoKE/vFKuAAA=&quot;, &quot;cHNidP8BAFUCAAAAAQcxBA7Cdee2EvS1IyiRPzCVxbt9wFnrqry3AMUBOYvqAAAAAAD/////AQDh9QUAAAAAGXapFLBKVDBt/eE2UU3EUaAiMeuIUMC1iKwAAAAAAAEA3wIAAAAB9LcsqdmAuKwHgkt0HMpJuSx8RnBxL73+ORGz4ogdt+gBAAAAakcwRAIgJR7zIP4o/GRTAyvswKmdFDx+PBO/tB24s0ydQcRpOZECIAvm3Q2xMIpdAAhl17yQAkQjElRbZEIbcr7pGCpNbzqsASEDIcX0+C0b8ib3pvxlx809S7xOmAj0NH3i9vFe8pUTvHX+////AgBlzR0AAAAAF6kUJOSskBQ3xyDtInRjI2eW1QraJ9eHIcmaOwAAAAAZdqkUPU2zmkAo79MmS8yW1oYUjb7jz0qIrOosCQAiAgK1B5TV+2qTmU+/c3Pzl61bklYbfj9yg+jbdGyMoKE/vEcwRAIgP3PuTCqVSU0Cx5UDknTwmAFJ6N80sV+YiUmy392/4BUCIEB6QOZe3SJeJ3OVmBCmoEPWcHqbstIvxhCxJ2h+fkSZAQEER1IhA37jwI5PLLVSo7tzreDkD1gQycEiJgX4VxEQRoaDEAe6IQK1B5TV+2qTmU+/c3Pzl61bklYbfj9yg+jbdGyMoKE/vFKuAAA=&quot;]&#x27;\n</code></pre></div></div>\n<p>Result:</p>\n<pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">cHNidP8BAFUCAAAAAQcxBA7Cdee2EvS1IyiRPzCVxbt9wFnrqry3AMUBOYvqAAAAAAD/////AQDh9QUAAAAAGXapFLBKVDBt/eE2UU3EUaAiMeuIUMC1iKwAAAAAAAEA3wIAAAAB9LcsqdmAuKwHgkt0HMpJuSx8RnBxL73+ORGz4ogdt+gBAAAAakcwRAIgJR7zIP4o/GRTAyvswKmdFDx+PBO/tB24s0ydQcRpOZECIAvm3Q2xMIpdAAhl17yQAkQjElRbZEIbcr7pGCpNbzqsASEDIcX0+C0b8ib3pvxlx809S7xOmAj0NH3i9vFe8pUTvHX+////AgBlzR0AAAAAF6kUJOSskBQ3xyDtInRjI2eW1QraJ9eHIcmaOwAAAAAZdqkUPU2zmkAo79MmS8yW1oYUjb7jz0qIrOosCQAiAgN+48COTyy1UqO7c63g5A9YEMnBIiYF+FcREEaGgxAHukcwRAIgfwcMEFPrmy81y5NWFj8M0CHUBlzzQxr4RoxSmzvmVIQCIH22f9/A/K0keQ7rKcya0E5zTlnYDnly8VJIrj2yUgflASICArUHlNX7apOZT79zc/OXrVuSVht+P3KD6Nt0bIygoT+8RzBEAiA/c+5MKpVJTQLHlQOSdPCYAUno3zSxX5iJSbLf3b/gFQIgQHpA5l7dIl4nc5WYEKagQ9Zwepuy0i/GELEnaH5+RJkBAQRHUiEDfuPAjk8stVKju3Ot4OQPWBDJwSImBfhXERBGhoMQB7ohArUHlNX7apOZT79zc/OXrVuSVht+P3KD6Nt0bIygoT+8Uq4AAA==\n</code></pre>\n<p><em>See also:</em></p>\n<ul>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-raw-transactions#createpsbt\" target=\"\" title=\"\">CreatePSBT</a>: creates a transaction in the Partially Signed Transaction (PST) format.</li>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-raw-transactions#decodepsbt\" target=\"\" title=\"\">DecodePSBT</a>: returns a JSON object representing the serialized, base64-encoded partially signed Dash transaction.</li>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-raw-transactions#finalizepsbt\" target=\"\" title=\"\">FinalizePSBT</a>: finalizes the inputs of a PSBT.</li>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-wallet#walletprocesspsbt\" target=\"\" title=\"\">WalletProcessPSBT</a>: updates a PSBT with input information from a wallet and then allows the signing of inputs.</li>\n</ul>\n<h1 class=\"heading heading-1 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"combinerawtransaction\"></div><div class=\"heading-text\"><div id=\"section-combine-raw-transaction\" class=\"heading-anchor_backwardsCompatibility\"></div>CombineRawTransaction</div><a aria-label=\"Skip link to CombineRawTransaction\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#combinerawtransaction\"></a></h1>\n<p>The <a href=\"core-api-ref-remote-procedure-calls-raw-transactions#combinerawtransaction\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">combinerawtransaction</code> RPC</a> combine multiple partially signed transactions into one transaction.</p>\n<p>The combined transaction may be another partially signed transaction or a<br/>\nfully signed transaction.</p>\n<p><em>Parameter #1---txs</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td>txs</td><td>string</td><td>Required</td><td>A json array of hex strings of partially signed transactions</td></tr></tbody></table></div></div>\n<p><em>Result---hex-encoded raw transaction with signature(s)</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">result</code></td><td>string</td><td>Required<br/>(Exactly 1)</td><td>The resulting raw transaction in serialized transaction format encoded as hex.</td></tr></tbody></table></div></div>\n<p><em>Example from Dash Core 0.15.0</em></p>\n<p>The following example shows a fully signed two input transaction being assembled<br/>\nby combining two partially signed transactions. The first hex-encoded string is<br/>\nthe transaction with only the first input signed. The second hex-encoded string is<br/>\nthe transaction with only the second input signed.</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Bash</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-bash theme-light\" data-lang=\"bash\" name=\"\" tabindex=\"0\">dash-cli -testnet combinerawtransaction &#x27;[\n &quot;0200000002fdb27b4f2b80a5fd3b96602618a6ccf7bdde504bf90989610b19ed6ecd769520010000006b483045022100f8770316327966fb1972338d14db8d38048455da8b62f6350b117c797cea459e02206c63c103cf53ce1d24a313b3e6853913fa14febafd733e683b6eb46a7beec0fa012103c67d86944315838aea7ec80d390b5d09b91b62483370d4979da5ccf7a7df77a9ffffffff0d052e9b13c53bb342d772767732ffe4fa9f1c150629d3fa79655267baa7c86a0100000000ffffffff0200ca9a3b000000001976a9144139b147b5cef5fef5bcdb02fcdf55e426f74dbb88ac00daf89a000000001976a91465f53f2095c99ce152ff3bc8a8f027d8a77cbdcb88ac00000000&quot;,\n &quot;0200000002fdb27b4f2b80a5fd3b96602618a6ccf7bdde504bf90989610b19ed6ecd7695200100000000ffffffff0d052e9b13c53bb342d772767732ffe4fa9f1c150629d3fa79655267baa7c86a010000006b4830450221008c3abc11ea84cc98cf674afc5b6d3d078d672768d289f2ab976ea4b2a49129fc022008470458b1b179800e7f5348196d510d2f147e69fe836c94135fc5c620312acd012102912ba98d6641f79864d04d41523167f5db267e45d1633e9243a0be7efb675719ffffffff0200ca9a3b000000001976a9144139b147b5cef5fef5bcdb02fcdf55e426f74dbb88ac00daf89a000000001976a91465f53f2095c99ce152ff3bc8a8f027d8a77cbdcb88ac00000000&quot;\n]&#x27;\n</code></pre></div></div>\n<p>Result:</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Bash</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-bash theme-light\" data-lang=\"bash\" name=\"\" tabindex=\"0\">0200000002fdb27b4f2b80a5fd3b96602618a6ccf7bdde504bf90989610b19ed6ecd7695\\\n20010000006b483045022100f8770316327966fb1972338d14db8d38048455da8b62f635\\\n0b117c797cea459e02206c63c103cf53ce1d24a313b3e6853913fa14febafd733e683b6e\\\nb46a7beec0fa012103c67d86944315838aea7ec80d390b5d09b91b62483370d4979da5cc\\\nf7a7df77a9ffffffff0d052e9b13c53bb342d772767732ffe4fa9f1c150629d3fa796552\\\n67baa7c86a010000006b4830450221008c3abc11ea84cc98cf674afc5b6d3d078d672768\\\nd289f2ab976ea4b2a49129fc022008470458b1b179800e7f5348196d510d2f147e69fe83\\\n6c94135fc5c620312acd012102912ba98d6641f79864d04d41523167f5db267e45d1633e\\\n9243a0be7efb675719ffffffff0200ca9a3b000000001976a9144139b147b5cef5fef5bc\\\ndb02fcdf55e426f74dbb88ac00daf89a000000001976a91465f53f2095c99ce152ff3bc8\\\na8f027d8a77cbdcb88ac00000000\n</code></pre></div></div>\n<p><em>See also:</em></p>\n<ul>\n<li><a href=\"core-api-ref-remote-procedure-calls-raw-transactions#analyzepsbt\" target=\"\" title=\"\">AnalyzePSBT</a>: analyzes and provides information about the current status of a PSBT and its inputs.</li>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-raw-transactions#createrawtransaction\" target=\"\" title=\"\">CreateRawTransaction</a>: creates an unsigned serialized transaction that spends a previous output to a new output with a P2PKH or P2SH address. The transaction is not stored in the wallet or transmitted to the network.</li>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-raw-transactions#decoderawtransaction\" target=\"\" title=\"\">DecodeRawTransaction</a>: decodes a serialized transaction hex string into a JSON object describing the transaction.</li>\n<li><a href=\"#signrawtransactionwithkey\" target=\"\" title=\"\">SignRawTransactionWithKey</a>: signs inputs for a transaction in the serialized transaction format using private keys provided in the call.</li>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-raw-transactions#sendrawtransaction\" target=\"\" title=\"\">SendRawTransaction</a>: validates a transaction and broadcasts it to the peer-to-peer network.</li>\n<li><a href=\"core-ref-transactions-raw-transaction-format\" target=\"\" title=\"\">Serialized Transaction Format</a></li>\n</ul>\n<h1 class=\"heading heading-1 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"converttopsbt\"></div><div class=\"heading-text\"><div id=\"section-convert-to-psbt\" class=\"heading-anchor_backwardsCompatibility\"></div>ConvertToPSBT</div><a aria-label=\"Skip link to ConvertToPSBT\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#converttopsbt\"></a></h1>\n<p>The <a href=\"core-api-ref-remote-procedure-calls-raw-transactions#converttopsbt\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">converttopsbt</code> RPC</a> converts a network serialized transaction to a PSBT. This should be used only with <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">createrawtransaction</code> and <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">fundrawtransaction</code>. <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">createpsbt</code> and <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">walletcreatefundedpsbt</code> should be used for new applications.</p>\n<p><em>Parameter #1---hexstring</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td>hex</td><td>string</td><td>Required</td><td>The hex string of a raw transaction</td></tr></tbody></table></div></div>\n<p><em>Parameter #2---permitsigdata</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td>data</td><td>bool</td><td>Optional</td><td>If true, any signatures in the input will be discarded and conversion will continue. If false, RPC will fail if any signatures are present.</td></tr></tbody></table></div></div>\n<p><em>Result---psbt</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">result</code></td><td>string</td><td>Required<br/>(Exactly 1)</td><td>The resulting raw transaction is a base64-encoded</td></tr></tbody></table></div></div>\n<p><em>Example from Dash Core 18.0.0</em></p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Bash</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-bash theme-light\" data-lang=\"bash\" name=\"\" tabindex=\"0\">dash-cli -testnet converttopsbt 02000000016b490886c0198b028c6c5cb145c4eb3b1055a224a7a105aadeff41b69ec91e060100000000ffffffff0200205fa0120000001976a914485485425fa99504ec1638ac4213f3cfc9f32ef388acc0a8f9be010000001976a914811eacc14db8ebb5b64486dc43400c0226b428a488ac00000000\n</code></pre></div></div>\n<p>Result:</p>\n<pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">cHNidP8BAHcCAAAAAWtJCIbAGYsCjGxcsUXE6zsQVaIkp6EFqt7/QbaeyR4GAQAAAAD/////AgAgX6ASAAAAGXapFEhUhUJfqZUE7BY4rEIT88/J8y7ziKzAqPm+AQAAABl2qRSBHqzBTbjrtbZEhtxDQAwCJrQopIisAAAAAAAAAAA=\n</code></pre>\n<p><em>See also:</em></p>\n<ul>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-raw-transactions#createrawtransaction\" target=\"\" title=\"\">CreateRawTransaction</a>: creates an unsigned serialized transaction that spends a previous output to a new output with a P2PKH or P2SH address. The transaction is not stored in the wallet or transmitted to the network.</li>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-raw-transactions#createpsbt\" target=\"\" title=\"\">CreatePSBT</a>: creates a transaction in the Partially Signed Transaction (PST) format.</li>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-raw-transactions#combinepsbt\" target=\"\" title=\"\">CombinePSBT</a>: combine multiple partially-signed Dash transactions into one transaction.</li>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-raw-transactions#decodepsbt\" target=\"\" title=\"\">DecodePSBT</a>: returns a JSON object representing the serialized, base64-encoded partially signed Dash transaction.</li>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-raw-transactions#finalizepsbt\" target=\"\" title=\"\">FinalizePSBT</a>: finalizes the inputs of a PSBT.</li>\n<li><a href=\"#signrawtransactionwithkey\" target=\"\" title=\"\">SignRawTransactionWithKey</a>: signs inputs for a transaction in the serialized transaction format using private keys provided in the call.</li>\n<li><a href=\"core-ref-transactions-raw-transaction-format\" target=\"\" title=\"\">Serialized Transaction Format</a></li>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-wallet#walletcreatefundedpsbt\" target=\"\" title=\"\">WalletCreateFundedPSBT</a>: creates and funds a transaction in the Partially Signed Transaction (PST) format.</li>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-wallet#walletprocesspsbt\" target=\"\" title=\"\">WalletProcessPSBT</a>: updates a PSBT with input information from a wallet and then allows the signing of inputs.</li>\n</ul>\n<h1 class=\"heading heading-1 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"createpsbt\"></div><div class=\"heading-text\"><div id=\"section-create-psbt\" class=\"heading-anchor_backwardsCompatibility\"></div>CreatePSBT</div><a aria-label=\"Skip link to CreatePSBT\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#createpsbt\"></a></h1>\n<p>The <a href=\"core-api-ref-remote-procedure-calls-raw-transactions#createpsbt\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">createpsbt</code> RPC</a> creates a transaction in the Partially Signed Transaction (PST) format.</p>\n<p>Implements the Creator role.</p>\n<p><em>Parameter #1---Inputs</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td>Transactions</td><td>array</td><td>Required<br/>(exactly 1)</td><td>An array of objects, each one to be used as an input to the transaction</td></tr><tr><td>\u2192 Input</td><td>object</td><td>Required<br/>(1 or more)</td><td>An object describing a particular input</td></tr><tr><td>\u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">txid</code></td><td>string (hex)</td><td>Required<br/>(exactly 1)</td><td>The TXID of the outpoint to be spent encoded as hex in RPC byte order</td></tr><tr><td>\u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">vout</code></td><td>number (int)</td><td>Required<br/>(exactly 1)</td><td>The output index number (vout) of the outpoint to be spent; the first output in a transaction is index <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">0</code></td></tr><tr><td>\u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">Sequence</code></td><td>number (int)</td><td>Optional<br/>(0 or 1)</td><td>The sequence number to use for the input</td></tr></tbody></table></div></div>\n<p><em>Parameter #2---Outputs</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td>Outputs</td><td>array</td><td>Required<br/>(exactly 1)</td><td>A JSON array with outputs as key-value pairs</td></tr><tr><td>\u2192 Output</td><td>object</td><td>Required<br/>(1 or more)</td><td>An object describing a particular output</td></tr><tr><td>\u2192 \u2192<br/>Address</td><td>string : number (Dash)</td><td>Optional<br/>(0 or 1)</td><td>A key-value pair. The key (string) is the Dash address, the value (float or string) is the amount in DASH</td></tr><tr><td>\u2192 \u2192<br/>Data</td><td><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">data</code> : string (hex)</td><td>Optional<br/>(0 or 1)</td><td>A key-value pair. The key must be <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">data</code>, the value is hex encoded data</td></tr></tbody></table></div></div>\n<p><em>Parameter #3---locktime</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td>Locktime</td><td>numeric (int)</td><td>Optional<br/>(0 or 1)</td><td>Indicates the earliest time a transaction can be added to the block chain. Non-0 value also locktime-activates inputs.</td></tr></tbody></table></div></div>\n<p><em>Result---the raw transaction in base64</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td>Result</td><td>string</td><td>Required<br/>(Exactly 1)</td><td>The resulting raw transaction (base64-encoded string)</td></tr></tbody></table></div></div>\n<p><em>Example from Dash Core 18.0.0</em></p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Bash</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-bash theme-light\" data-lang=\"bash\" name=\"\" tabindex=\"0\">dash-cli -testnet createpsbt &quot;[{\\&quot;txid\\&quot;:\\&quot;2662c87e1761ed5f4e98a0640b2608114d86f282824a51bd624985d236c71178\\&quot;,\\&quot;vout\\&quot;:0}]&quot; &quot;[{\\&quot;data\\&quot;:\\&quot;00010203\\&quot;}]&quot;\n</code></pre></div></div>\n<p>Result:</p>\n<pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">cHNidP8BAEICAAAAAXgRxzbShUlivVFKgoLyhk0RCCYLZKCYTl/tYRd+yGImAAAAAAD/////AQAAAAAAAAAABmoEAAECAwAAAAAAAAA=\n</code></pre>\n<p><em>See also</em></p>\n<ul>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-raw-transactions#combinepsbt\" target=\"\" title=\"\">CombinePSBT</a>: combine multiple partially-signed Dash transactions into one transaction.</li>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-raw-transactions#converttopsbt\" target=\"\" title=\"\">ConvertToPSBT</a>: converts a network serialized transaction to a PSBT.</li>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-raw-transactions#decodepsbt\" target=\"\" title=\"\">DecodePSBT</a>: returns a JSON object representing the serialized, base64-encoded partially signed Dash transaction.</li>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-raw-transactions#finalizepsbt\" target=\"\" title=\"\">FinalizePSBT</a>: finalizes the inputs of a PSBT.</li>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-wallet#walletcreatefundedpsbt\" target=\"\" title=\"\">WalletCreateFundedPSBT</a>: creates and funds a transaction in the Partially Signed Transaction (PST) format.</li>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-wallet#walletprocesspsbt\" target=\"\" title=\"\">WalletProcessPSBT</a>: updates a PSBT with input information from a wallet and then allows the signing of inputs.</li>\n</ul>\n<h1 class=\"heading heading-1 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"createrawtransaction\"></div><div class=\"heading-text\"><div id=\"section-create-raw-transaction\" class=\"heading-anchor_backwardsCompatibility\"></div>CreateRawTransaction</div><a aria-label=\"Skip link to CreateRawTransaction\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#createrawtransaction\"></a></h1>\n<p>The <a href=\"core-api-ref-remote-procedure-calls-raw-transactions#createrawtransaction\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">createrawtransaction</code> RPC</a> creates an unsigned serialized transaction that spends a previous output to a new output with a P2PKH or P2SH address. The transaction is not stored in the wallet or transmitted to the network.</p>\n<p><em>Parameter #1---Inputs</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td>Transactions</td><td>array</td><td>Required<br/>(exactly 1)</td><td>An array of objects, each one to be used as an input to the transaction</td></tr><tr><td>\u2192 Input</td><td>object</td><td>Required<br/>(1 or more)</td><td>An object describing a particular input</td></tr><tr><td>\u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">txid</code></td><td>string (hex)</td><td>Required<br/>(exactly 1)</td><td>The TXID of the outpoint to be spent encoded as hex in RPC byte order</td></tr><tr><td>\u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">vout</code></td><td>number (int)</td><td>Required<br/>(exactly 1)</td><td>The output index number (vout) of the outpoint to be spent; the first output in a transaction is index <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">0</code></td></tr><tr><td>\u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">Sequence</code></td><td>number (int)</td><td>Optional<br/>(0 or 1)</td><td>Added in Dash Core 0.12.3.0.<br/><br/>The sequence number to use for the input</td></tr></tbody></table></div></div>\n<p><em>Parameter #2---Outputs</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td>Outputs</td><td>array</td><td>Required<br/>(exactly 1)</td><td>A JSON array with outputs as key-value pairs</td></tr><tr><td>\u2192 Output</td><td>object</td><td>Required<br/>(1 or more)</td><td>An object describing a particular output</td></tr><tr><td>\u2192 \u2192<br/>Address</td><td>string : number (Dash)</td><td>Optional<br/>(0 or 1)</td><td>A key-value pair. The key (string) is the Dash address, the value (float or string) is the amount in DASH</td></tr><tr><td>\u2192 \u2192<br/>Data</td><td><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">data</code> : string (hex)</td><td>Optional<br/>(0 or 1)</td><td>A key-value pair. The key must be <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">data</code>, the value is hex encoded data</td></tr></tbody></table></div></div>\n<p><em>Parameter #3---locktime</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td>Locktime</td><td>numeric (int)</td><td>Optional<br/>(0 or 1)</td><td>Indicates the earliest time a transaction can be added to the block chain</td></tr></tbody></table></div></div>\n<p><em>Result---the unsigned raw transaction in hex</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">result</code></td><td>string</td><td>Required<br/>(Exactly 1)</td><td>The resulting unsigned raw transaction in serialized transaction format encoded as base-64.  If the transaction couldn&#x27;t be generated, this will be set to JSON <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">null</code> and the JSON-RPC error field may contain an error message</td></tr></tbody></table></div></div>\n<p><em>Example from Dash Core 18.0.0</em></p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Bash</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-bash theme-light\" data-lang=\"bash\" name=\"\" tabindex=\"0\">dash-cli -testnet createrawtransaction &#x27;&#x27;&#x27;\n  [\n    {\n      &quot;txid&quot;: &quot;061ec99eb641ffdeaa05a1a724a255103bebc445b15c6c8c028b19c08608496b&quot;,\n      &quot;vout&quot; : 1\n    }\n  ]&#x27;&#x27;&#x27; \\\n  &#x27;&#x27;&#x27;\n  [\n    {\n      &quot;ySutkc49Khpz1HQN8AfWNitVBLwqtyaxvv&quot;: 800\n    },\n    {\n      &quot;yY6AmGopsZS31wy1JLHR9P6AC6owFaXwuh&quot;: 74.99\n    }\n  ]&#x27;&#x27;&#x27; \\\n  0\n</code></pre></div></div>\n<p>Result:</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Text</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-text theme-light\" data-lang=\"text\" name=\"\" tabindex=\"0\">02000000016b490886c0198b028c6c5cb145c4eb3b1055a224a7a105aadeff41b69ec91e06010000\\\n0000ffffffff0200205fa0120000001976a914485485425fa99504ec1638ac4213f3cfc9f32ef388\\\nacc0a8f9be010000001976a914811eacc14db8ebb5b64486dc43400c0226b428a488ac00000000\n</code></pre></div></div>\n<p><em>See also</em></p>\n<ul>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-raw-transactions#combinerawtransaction\" target=\"\" title=\"\">CombineRawTransaction</a>: combine multiple partially signed transactions into one transaction.</li>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-raw-transactions#decoderawtransaction\" target=\"\" title=\"\">DecodeRawTransaction</a>: decodes a serialized transaction hex string into a JSON object describing the transaction.</li>\n<li><a href=\"#signrawtransactionwithkey\" target=\"\" title=\"\">SignRawTransactionWithKey</a>: signs inputs for a transaction in the serialized transaction format using private keys provided in the call.</li>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-raw-transactions#sendrawtransaction\" target=\"\" title=\"\">SendRawTransaction</a>: validates a transaction and broadcasts it to the peer-to-peer network.</li>\n<li><a href=\"core-ref-transactions-raw-transaction-format\" target=\"\" title=\"\">Serialized Transaction Format</a></li>\n</ul>\n<h1 class=\"heading heading-1 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"decodepsbt\"></div><div class=\"heading-text\"><div id=\"section-decode-psbt\" class=\"heading-anchor_backwardsCompatibility\"></div>DecodePSBT</div><a aria-label=\"Skip link to DecodePSBT\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#decodepsbt\"></a></h1>\n<p>The <a href=\"core-api-ref-remote-procedure-calls-raw-transactions#decodepsbt\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">decodepsbt</code> RPC</a> returns a JSON object representing the serialized, base64-encoded partially signed Dash transaction.</p>\n<p><em>Parameter #1---The PSBT base64 string</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">psbt</code></td><td>string</td><td>Required<br/>(exactly 1)</td><td>The PSBT base64 string</td></tr></tbody></table></div></div>\n<p><em>Result---the decoded transaction</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">result</code></td><td>object</td><td>Required<br/>(exactly 1)</td><td>An object describing the decoded transaction, or JSON <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">null</code> if the transaction could not be decoded</td></tr><tr><td>\u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">tx</code></td><td>string (hex)</td><td>Required<br/>(exactly 1)</td><td>The decoded network-serialized unsigned transaction. The layout is the same as the output of <a href=\"#decoderawtransaction\" target=\"\" title=\"\">decoderawtransaction</a>.</td></tr><tr><td>\u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">unknown</code></td><td>object</td><td>Required<br/>(exactly 1)</td><td>The unknown global fields</td></tr><tr><td>\u2192\u2192<br/>Unknown</td><td>object</td><td>Required<br/>(0 or more)</td><td>An unknown key-value pair</td></tr><tr><td>\u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">inputs</code></td><td>array</td><td>Required<br/>(exactly 1)</td><td>An array of objects with each object being an input vector (vin) for this transaction</td></tr><tr><td>\u2192 \u2192<br/>Input</td><td>object</td><td>Required<br/>(1 or more)</td><td>An object describing one of this transaction&#x27;s inputs.  May be a regular input or a coinbase</td></tr><tr><td>\u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">non_witness_utxo</code></td><td>object</td><td>Optional<br/>(0 or more)</td><td>Decoded network transaction for non-witness UTXOs</td></tr><tr><td>\u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">partial_signatures</code></td><td>object</td><td>Optional<br/>(0 or more)</td><td>An object containing partial signatures</td></tr><tr><td>\u2192 \u2192 \u2192\u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">pubkey</code></td><td>string</td><td>Required<br/>(1 or more)</td><td>The public key and signature that corresponds to it</td></tr><tr><td>\u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">sighash</code></td><td>string</td><td>Optional<br/>(0 or 1)</td><td>The sighash type to be used</td></tr><tr><td>\u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">redeem_script</code></td><td>object</td><td>Optional<br/>(0 or more)</td><td></td></tr><tr><td>\u2192 \u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">asm</code></td><td>string</td><td>Required<br/>(exactly 1)</td><td>The signature script in decoded form with non-data-pushing opcodes listed</td></tr><tr><td>\u2192 \u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">hex</code></td><td>string (hex)</td><td>Required<br/>(exactly 1)</td><td>The signature script encoded as hex</td></tr><tr><td>\u2192 \u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">type</code></td><td>string</td><td>Optional<br/>(0 or 1)</td><td>The type of script.  This will be one of the following:<br/>\u2022 <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">pubkey</code> for a P2PK script<br/>\u2022 <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">pubkeyhash</code> for a P2PKH script<br/>\u2022 <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">scripthash</code> for a P2SH script<br/>\u2022 <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">multisig</code> for a bare multisig script<br/>\u2022 <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">nulldata</code> for nulldata scripts<br/>\u2022 <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">nonstandard</code> for unknown scripts</td></tr><tr><td>\u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">bip32_derivs</code></td><td>object</td><td>Optional<br/>(0 or more)</td><td></td></tr><tr><td>\u2192 \u2192 \u2192\u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">pubkey</code></td><td>object</td><td>Optional<br/>(0 or more)</td><td>The public key with the derivation path as the value.</td></tr><tr><td>\u2192 \u2192 \u2192\u2192\u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">master_fingerprint</code></td><td>object</td><td>Optional<br/>(0 or more)</td><td>The fingerprint of the master key</td></tr><tr><td>\u2192 \u2192 \u2192\u2192\u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">path</code></td><td>object</td><td>Optional<br/>(0 or more)</td><td>The public key&#x27;s path</td></tr><tr><td>\u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">final_scriptsig</code></td><td>object</td><td>Optional<br/>(0 or more)</td><td></td></tr><tr><td>\u2192 \u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">asm</code></td><td>string</td><td>Required<br/>(exactly 1)</td><td>The signature script in decoded form with non-data-pushing opcodes listed</td></tr><tr><td>\u2192 \u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">hex</code></td><td>string (hex)</td><td>Required<br/>(exactly 1)</td><td>The signature script encoded as hex</td></tr><tr><td>\u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">unknown</code></td><td>object</td><td>Optional<br/>(0 or more)</td><td>The unknown global fields</td></tr><tr><td>\u2192 \u2192 \u2192 \u2192<br/>Unknown</td><td>object</td><td>Required<br/>(0 or more)</td><td>An unknown key-value pair</td></tr><tr><td>\u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">vout</code></td><td>array</td><td>Required<br/>(exactly 1)</td><td>An array of objects each describing an output vector (vout) for this transaction.  Output objects will have the same order within the array as they have in the transaction, so the first output listed will be output 0</td></tr><tr><td>\u2192 \u2192<br/>Output</td><td>object</td><td>Required<br/>(1 or more)</td><td>An object describing one of this transaction&#x27;s outputs</td></tr><tr><td>\u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">redeem_script</code></td><td>object</td><td>Required<br/>(exactly 1)</td><td>An object describing the pubkey script</td></tr><tr><td>\u2192 \u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">asm</code></td><td>string</td><td>Required<br/>(exactly 1)</td><td>The pubkey script in decoded form with non-data-pushing opcodes listed</td></tr><tr><td>\u2192 \u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">hex</code></td><td>string (hex)</td><td>Required<br/>(exactly 1)</td><td>The pubkey script encoded as hex</td></tr><tr><td>\u2192 \u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">type</code></td><td>string</td><td>Optional<br/>(0 or 1)</td><td>The type of script.  This will be one of the following:<br/>\u2022 <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">pubkey</code> for a P2PK script<br/>\u2022 <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">pubkeyhash</code> for a P2PKH script<br/>\u2022 <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">scripthash</code> for a P2SH script<br/>\u2022 <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">multisig</code> for a bare multisig script<br/>\u2022 <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">nulldata</code> for nulldata scripts<br/>\u2022 <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">nonstandard</code> for unknown scripts</td></tr><tr><td>\u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">bip32_derivs</code></td><td>array</td><td>Optional<br/>(0 or more)</td><td>Array of JSON objects</td></tr><tr><td>\u2192 \u2192 \u2192\u2192<br/>BIP32 Deriv</td><td>object</td><td>Optional<br/>(0 or more)</td><td>An object containing BIP32 derivation infomation</td></tr><tr><td>\u2192\u2192  \u2192 \u2192\u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">pubkey</code></td><td>object</td><td>Optional<br/>(0 or more)</td><td>The public key this path corresponds to</td></tr><tr><td>\u2192 \u2192 \u2192 \u2192\u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">master_fingerprint</code></td><td>object</td><td>Optional<br/>(0 or more)</td><td>The fingerprint of the master key</td></tr><tr><td>\u2192 \u2192 \u2192\u2192\u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">path</code></td><td>object</td><td>Optional<br/>(0 or more)</td><td>The public key&#x27;s path</td></tr><tr><td>\u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">fee</code></td><td>number (int)</td><td>Optional<br/>(0 or 1)</td><td>The transaction fee paid if all UTXOs slots in the PSBT have been filled</td></tr></tbody></table></div></div>\n<p><em>Example from Dash Core 18.0.0</em></p>\n<p>Decode a one-input, one-output transaction:</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Bash</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-bash theme-light\" data-lang=\"bash\" name=\"\" tabindex=\"0\">dash-cli -testnet decodepsbt cHNidP8BAEICAAAAAXgRxzbShUlivVFKgoLyhk0RCCYLZKCYTl/tYRd+yGImAAAAAAD/////AQAAAAAAAAAABmoEAAECAwAAAAAAAAA=\n</code></pre></div></div>\n<p>Result:</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">JSON</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-json theme-light\" data-lang=\"json\" name=\"\" tabindex=\"0\">{\n  &quot;tx&quot;: {\n    &quot;txid&quot;: &quot;5954a007baf3f012af1484b42d24057f9b1541dd65003bababb1a53c9f7eabe4&quot;,\n    &quot;version&quot;: 2,\n    &quot;type&quot;: 0,\n    &quot;size&quot;: 66,\n    &quot;locktime&quot;: 0,\n    &quot;vin&quot;: [\n      {\n        &quot;txid&quot;: &quot;2662c87e1761ed5f4e98a0640b2608114d86f282824a51bd624985d236c71178&quot;,\n        &quot;vout&quot;: 0,\n        &quot;scriptSig&quot;: {\n          &quot;asm&quot;: &quot;&quot;,\n          &quot;hex&quot;: &quot;&quot;\n        },\n        &quot;sequence&quot;: 4294967295\n      }\n    ],\n    &quot;vout&quot;: [\n      {\n        &quot;value&quot;: 0.00000000,\n        &quot;valueSat&quot;: 0,\n        &quot;n&quot;: 0,\n        &quot;scriptPubKey&quot;: {\n          &quot;asm&quot;: &quot;OP_RETURN 50462976&quot;,\n          &quot;hex&quot;: &quot;6a0400010203&quot;,\n          &quot;type&quot;: &quot;nulldata&quot;\n        }\n      }\n    ]\n  },\n  &quot;unknown&quot;: {\n  },\n  &quot;inputs&quot;: [\n    {\n      &quot;non_witness_utxo&quot;: {\n        &quot;txid&quot;: &quot;2662c87e1761ed5f4e98a0640b2608114d86f282824a51bd624985d236c71178&quot;,\n        &quot;version&quot;: 2,\n        &quot;type&quot;: 0,\n        &quot;size&quot;: 225,\n        &quot;locktime&quot;: 542805,\n        &quot;vin&quot;: [\n          {\n            &quot;txid&quot;: &quot;427c8d2f712b72150496d53b67403a984b6fb41f37f6c0a85115d12c50b78b94&quot;,\n            &quot;vout&quot;: 1,\n            &quot;scriptSig&quot;: {\n              &quot;asm&quot;: &quot;304402204fe4fc488c955f286c52c848ec7950b40ec476e1b434c6add686b474bdde09a902206222d291fd9da341408aa8a4720f5a6959997715a1ddf8187e75277b6bfcae7e[ALL] 03c67d86944315838aea7ec80d390b5d09b91b62483370d4979da5ccf7a7df77a9&quot;,\n              &quot;hex&quot;: &quot;47304402204fe4fc488c955f286c52c848ec7950b40ec476e1b434c6add686b474bdde09a902206222d291fd9da341408aa8a4720f5a6959997715a1ddf8187e75277b6bfcae7e012103c67d86944315838aea7ec80d390b5d09b91b62483370d4979da5ccf7a7df77a9&quot;\n            },\n            &quot;sequence&quot;: 4294967294\n          }\n        ],\n        &quot;vout&quot;: [\n          {\n            &quot;value&quot;: 1.64030388,\n            &quot;valueSat&quot;: 164030388,\n            &quot;n&quot;: 0,\n            &quot;scriptPubKey&quot;: {\n              &quot;asm&quot;: &quot;OP_DUP OP_HASH160 cefc464904c03814c01906e197dc759a745e47ee OP_EQUALVERIFY OP_CHECKSIG&quot;,\n              &quot;hex&quot;: &quot;76a914cefc464904c03814c01906e197dc759a745e47ee88ac&quot;,\n              &quot;reqSigs&quot;: 1,\n              &quot;type&quot;: &quot;pubkeyhash&quot;,\n              &quot;addresses&quot;: [\n                &quot;yfBtG4d5ZRWXWo8JQrbVcCzpKyJRhcGyYk&quot;\n              ]\n            }\n          },\n          {\n            &quot;value&quot;: 10.00000000,\n            &quot;valueSat&quot;: 1000000000,\n            &quot;n&quot;: 1,\n            &quot;scriptPubKey&quot;: {\n              &quot;asm&quot;: &quot;OP_DUP OP_HASH160 3ef9bcbe92f77c8fadd0566eea7ff8d47f22bde0 OP_EQUALVERIFY OP_CHECKSIG&quot;,\n              &quot;hex&quot;: &quot;76a9143ef9bcbe92f77c8fadd0566eea7ff8d47f22bde088ac&quot;,\n              &quot;reqSigs&quot;: 1,\n              &quot;type&quot;: &quot;pubkeyhash&quot;,\n              &quot;addresses&quot;: [\n                &quot;yS4Rv9VJnUvwcwggLzi88pu6jTPVya52Ba&quot;\n              ]\n            }\n          }\n        ]\n      },\n      &quot;final_scriptSig&quot;: {\n        &quot;asm&quot;: &quot;3044022005d5f8010e0d8cfd601e6136330a4122492ac3573718a1ef30c2bc3f31b760390220273a18050f61026ea3aa4d9c2c58ad51dd7f88bd64bbcc3dba769d8cd7ec09da[ALL] 0267da91139a4f14d97eaf7800ea9e7cb9ffa8fc232ece8b38a3d127891e6f71e8&quot;,\n        &quot;hex&quot;: &quot;473044022005d5f8010e0d8cfd601e6136330a4122492ac3573718a1ef30c2bc3f31b760390220273a18050f61026ea3aa4d9c2c58ad51dd7f88bd64bbcc3dba769d8cd7ec09da01210267da91139a4f14d97eaf7800ea9e7cb9ffa8fc232ece8b38a3d127891e6f71e8&quot;\n      }\n    }\n  ],\n  &quot;outputs&quot;: [\n    {\n    }\n  ],\n  &quot;fee&quot;: 1.64030388\n}\n</code></pre></div></div>\n<h1 class=\"heading heading-1 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"decoderawtransaction\"></div><div class=\"heading-text\"><div id=\"section-decode-raw-transaction\" class=\"heading-anchor_backwardsCompatibility\"></div>DecodeRawTransaction</div><a aria-label=\"Skip link to DecodeRawTransaction\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#decoderawtransaction\"></a></h1>\n<p>The <a href=\"core-api-ref-remote-procedure-calls-raw-transactions#decoderawtransaction\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">decoderawtransaction</code> RPC</a> decodes a serialized transaction hex string into a JSON object describing the transaction.</p>\n<p><em>Parameter #1---serialized transaction in hex</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td>Serialized Transaction</td><td>string (hex)</td><td>Required<br/>(exactly 1)</td><td>The transaction to decode in serialized transaction format</td></tr></tbody></table></div></div>\n<p><em>Result---the decoded transaction</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">result</code></td><td>object</td><td>Required<br/>(exactly 1)</td><td>An object describing the decoded transaction, or JSON <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">null</code> if the transaction could not be decoded</td></tr><tr><td>\u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">txid</code></td><td>string (hex)</td><td>Required<br/>(exactly 1)</td><td>The transaction&#x27;s TXID encoded as hex in RPC byte order</td></tr><tr><td>\u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">version</code></td><td>number (int)</td><td>Required<br/>(exactly 1)</td><td>The transaction format version number</td></tr><tr><td>\u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">type</code></td><td>number (int)</td><td>Required<br/>(exactly 1)</td><td><em>Added in Dash Core 0.13.0.0</em><br/><br/>The transaction format type</td></tr><tr><td>\u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">size</code></td><td>number (int)</td><td>Required<br/>(exactly 1)</td><td><em>Added in Bitcoin Core 0.12.0</em><br/><br/>The serialized transaction size</td></tr><tr><td>\u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">locktime</code></td><td>number (int)</td><td>Required<br/>(exactly 1)</td><td>The transaction&#x27;s locktime: either a Unix epoch date or block height; see the <a href=\"core-guide-transactions-locktime-and-sequence-number#locktime-parsing-rules\" target=\"\" title=\"\">locktime parsing rules</a></td></tr><tr><td>\u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">vin</code></td><td>array</td><td>Required<br/>(exactly 1)</td><td>An array of objects with each object being an input vector (vin) for this transaction.  Input objects will have the same order within the array as they have in the transaction, so the first input listed will be input 0</td></tr><tr><td>\u2192 \u2192<br/>Input</td><td>object</td><td>Required<br/>(1 or more)</td><td>An object describing one of this transaction&#x27;s inputs.  May be a regular input or a coinbase</td></tr><tr><td>\u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">txid</code></td><td>string</td><td>Optional<br/>(0 or 1)</td><td>The TXID of the outpoint being spent, encoded as hex in RPC byte order.  Not present if this is a coinbase transaction</td></tr><tr><td>\u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">vout</code></td><td>number (int)</td><td>Optional<br/>(0 or 1)</td><td>The output index number (vout) of the outpoint being spent.  The first output in a transaction has an index of <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">0</code>.  Not present if this is a coinbase transaction</td></tr><tr><td>\u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">scriptSig</code></td><td>object</td><td>Optional<br/>(0 or 1)</td><td>An object describing the signature script of this input.  Not present if this is a coinbase transaction</td></tr><tr><td>\u2192 \u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">asm</code></td><td>string</td><td>Required<br/>(exactly 1)</td><td>The signature script in decoded form with non-data-pushing opcodes listed</td></tr><tr><td>\u2192 \u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">hex</code></td><td>string (hex)</td><td>Required<br/>(exactly 1)</td><td>The signature script encoded as hex</td></tr><tr><td>\u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">coinbase</code></td><td>string (hex)</td><td>Optional<br/>(0 or 1)</td><td>The coinbase (similar to the hex field of a scriptSig) encoded as hex.  Only present if this is a coinbase transaction</td></tr><tr><td>\u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">value</code></td><td>number (Dash)</td><td>Optional<br/>(exactly 1)</td><td>The number of Dash paid to this output.  May be <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">0</code>.<br/><br/>Only present if <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">spentindex</code> enabled</td></tr><tr><td>\u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">valueSat</code></td><td>number (duffs)</td><td>Optional<br/>(exactly 1)</td><td>The number of duffs paid to this output.  May be <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">0</code>.<br/><br/>Only present if <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">spentindex</code> enabled</td></tr><tr><td>\u2192 \u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">addresses</code></td><td>string : array</td><td>Optional<br/>(0 or 1)</td><td>The P2PKH or P2SH addresses used in this transaction, or the computed P2PKH address of any pubkeys in this transaction.  This array will not be returned for <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">nulldata</code> or <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">nonstandard</code> script types.<br/><br/>Only present if <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">spentindex</code> enabled</td></tr><tr><td>\u2192 \u2192 \u2192 \u2192 \u2192<br/>Address</td><td>string</td><td>Required<br/>(1 or more)</td><td>A P2PKH or P2SH address</td></tr><tr><td>\u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">sequence</code></td><td>number (int)</td><td>Required<br/>(exactly 1)</td><td>The input sequence number</td></tr><tr><td>\u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">vout</code></td><td>array</td><td>Required<br/>(exactly 1)</td><td>An array of objects each describing an output vector (vout) for this transaction.  Output objects will have the same order within the array as they have in the transaction, so the first output listed will be output 0</td></tr><tr><td>\u2192 \u2192<br/>Output</td><td>object</td><td>Required<br/>(1 or more)</td><td>An object describing one of this transaction&#x27;s outputs</td></tr><tr><td>\u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">value</code></td><td>number (Dash)</td><td>Required<br/>(exactly 1)</td><td>The number of Dash paid to this output.  May be <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">0</code></td></tr><tr><td>\u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">valueSat</code></td><td>number (duffs)</td><td>Required<br/>(exactly 1)</td><td>The number of duffs paid to this output.  May be <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">0</code></td></tr><tr><td>\u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">n</code></td><td>number (int)</td><td>Required<br/>(exactly 1)</td><td>The output index number of this output within this transaction</td></tr><tr><td>\u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">scriptPubKey</code></td><td>object</td><td>Required<br/>(exactly 1)</td><td>An object describing the pubkey script</td></tr><tr><td>\u2192 \u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">asm</code></td><td>string</td><td>Required<br/>(exactly 1)</td><td>The pubkey script in decoded form with non-data-pushing opcodes listed</td></tr><tr><td>\u2192 \u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">hex</code></td><td>string (hex)</td><td>Required<br/>(exactly 1)</td><td>The pubkey script encoded as hex</td></tr><tr><td>\u2192 \u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">reqSigs</code></td><td>number (int)</td><td>Optional<br/>(0 or 1)</td><td>The number of signatures required; this is always <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">1</code> for P2PK, P2PKH, and P2SH (including P2SH multisig because the redeem script is not available in the pubkey script).  It may be greater than 1 for bare multisig.  This value will not be returned for <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">nulldata</code> or <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">nonstandard</code> script types (see the <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">type</code> key below)</td></tr><tr><td>\u2192 \u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">type</code></td><td>string</td><td>Optional<br/>(0 or 1)</td><td>The type of script.  This will be one of the following:<br/>\u2022 <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">pubkey</code> for a P2PK script<br/>\u2022 <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">pubkeyhash</code> for a P2PKH script<br/>\u2022 <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">scripthash</code> for a P2SH script<br/>\u2022 <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">multisig</code> for a bare multisig script<br/>\u2022 <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">nulldata</code> for nulldata scripts<br/>\u2022 <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">nonstandard</code> for unknown scripts</td></tr><tr><td>\u2192 \u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">addresses</code></td><td>string : array</td><td>Optional<br/>(0 or 1)</td><td>The P2PKH or P2SH addresses used in this transaction, or the computed P2PKH address of any pubkeys in this transaction.  This array will not be returned for <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">nulldata</code> or <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">nonstandard</code> script types</td></tr><tr><td>\u2192 \u2192 \u2192 \u2192 \u2192<br/>Address</td><td>string</td><td>Required<br/>(1 or more)</td><td>A P2PKH or P2SH address</td></tr><tr><td>\u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">extraPayloadSize</code></td><td>number (int)</td><td>Optional<br/>(0 or 1)</td><td><em>Added in Dash Core 0.13.0.0</em><br/><br/>Size of the DIP2 extra payload. Only present if it&#x27;s a DIP2 special transaction</td></tr><tr><td>\u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">extraPayload</code></td><td>string (hex)</td><td>Optional<br/>(0 or 1)</td><td><em>Added in Dash Core 0.13.0.0</em><br/><br/>Hex encoded DIP2 extra payload data. Only present if it&#x27;s a DIP2 special transaction</td></tr></tbody></table></div></div>\n<p><em>Example from Dash Core 0.13.0</em></p>\n<p>Decode a signed one-input, two-output transaction:</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Bash</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-bash theme-light\" data-lang=\"bash\" name=\"\" tabindex=\"0\">dash-cli -testnet decoderawtransaction 02000000015d0b26079696875e9fc3cb480420aae3c8\\\nb1da628fbb14cc718066df7fe7c5fd010000006a47304402202cfa683981898ad9adb89534\\\n23a38f7185ed41e163aa195d608fbe5bc3034910022034e2376aaed1c6576c0dad79d626ee\\\n27f706baaed86dabb105979c3e6f6e1cb9012103d14eb001cf0908f3a2333d171f6236497a\\\n82318a6a6f649b4d7fd8e5c8922e08feffffff021e3f4b4c000000001976a914b02ae52066\\\n542b4aec5cf45c7cae3183d7bd322788ac00f90295000000001976a914252c9de3a0ebd5c9\\\n5886187b24969d4ccdb5576e88ac943d0000\n</code></pre></div></div>\n<p>Result:</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">JSON</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-json theme-light\" data-lang=\"json\" name=\"\" tabindex=\"0\">{\n  &quot;txid&quot;: &quot;f4de3be04efa18e203c9d0b7ad11bb2517f5889338918ed300a374f5bd736ed7&quot;,\n  &quot;version&quot;: 2,\n  &quot;type&quot;: 0,\n  &quot;size&quot;: 225,\n  &quot;locktime&quot;: 15764,\n  &quot;vin&quot;: [\n    {\n      &quot;txid&quot;: &quot;fdc5e77fdf668071cc14bb8f62dab1c8e3aa200448cbc39f5e87969607260b5d&quot;,\n      &quot;vout&quot;: 1,\n      &quot;scriptSig&quot;: {\n        &quot;asm&quot;: &quot;304402202cfa683981898ad9adb8953423a38f7185ed41e163aa195d608fbe5bc3034910022034e2376aaed1c6576c0dad79d626ee27f706baaed86dabb105979c3e6f6e1cb9[ALL] 03d14eb001cf0908f3a2333d171f6236497a82318a6a6f649b4d7fd8e5c8922e08&quot;,\n        &quot;hex&quot;: &quot;47304402202cfa683981898ad9adb8953423a38f7185ed41e163aa195d608fbe5bc3034910022034e2376aaed1c6576c0dad79d626ee27f706baaed86dabb105979c3e6f6e1cb9012103d14eb001cf0908f3a2333d171f6236497a82318a6a6f649b4d7fd8e5c8922e08&quot;\n      },\n      &quot;sequence&quot;: 4294967294\n    }\n  ],\n  &quot;vout&quot;: [\n    {\n      &quot;value&quot;: 12.79999774,\n      &quot;valueSat&quot;: 1279999774,\n      &quot;n&quot;: 0,\n      &quot;scriptPubKey&quot;: {\n        &quot;asm&quot;: &quot;OP_DUP OP_HASH160 b02ae52066542b4aec5cf45c7cae3183d7bd3227 OP_EQUALVERIFY OP_CHECKSIG&quot;,\n        &quot;hex&quot;: &quot;76a914b02ae52066542b4aec5cf45c7cae3183d7bd322788ac&quot;,\n        &quot;reqSigs&quot;: 1,\n        &quot;type&quot;: &quot;pubkeyhash&quot;,\n        &quot;addresses&quot;: [\n          &quot;ycNwAN4DQ7Xnw5XLKg84SR4U1GE22FfLNQ&quot;\n        ]\n      }\n    },\n    {\n      &quot;value&quot;: 25.00000000,\n      &quot;valueSat&quot;: 2500000000,\n      &quot;n&quot;: 1,\n      &quot;scriptPubKey&quot;: {\n        &quot;asm&quot;: &quot;OP_DUP OP_HASH160 252c9de3a0ebd5c95886187b24969d4ccdb5576e OP_EQUALVERIFY OP_CHECKSIG&quot;,\n        &quot;hex&quot;: &quot;76a914252c9de3a0ebd5c95886187b24969d4ccdb5576e88ac&quot;,\n        &quot;reqSigs&quot;: 1,\n        &quot;type&quot;: &quot;pubkeyhash&quot;,\n        &quot;addresses&quot;: [\n          &quot;yPi1JKw5fn8bMFsCCtnkGagogW6GXwGktZ&quot;\n        ]\n      }\n    }\n  ]\n}\n</code></pre></div></div>\n<p>Decode a coinbase special transaction (CbTx):</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Bash</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-bash theme-light\" data-lang=\"bash\" name=\"\" tabindex=\"0\">dash-cli -testnet decoderawtransaction 03000500010000000000000000000000000000000000\\\n000000000000000000000000000000ffffffff2703ae50011a4d696e656420627920416e74\\\n506f6f6c2021000b01201da9196f0000000007000000ffffffff02809e4730000000001976\\\na914cbd7bfcc50351180132b2c0698cb90ad74c473c788ac809e4730000000001976a91488\\\na060bc2dfe05780ae4dcb6c98b12436c35a93988ac00000000460200ae50010078e5c08b39\\\n960887bf95185c381bdb719e60b6925fa12af78a8824fade927387c757acb6bac63da84f92\\\n45e20cfd5d830382ac634d434725ca6349ab5db920a3\n</code></pre></div></div>\n<p>Result:</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">JSON</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-json theme-light\" data-lang=\"json\" name=\"\" tabindex=\"0\">{\n  &quot;txid&quot;: &quot;25632685ed0d7286901a80961c924c1ddd952e764754dbd8b40d0956413c8b56&quot;,\n  &quot;version&quot;: 3,\n  &quot;type&quot;: 5,\n  &quot;size&quot;: 229,\n  &quot;locktime&quot;: 0,\n  &quot;vin&quot;: [\n    {\n      &quot;coinbase&quot;: &quot;03ae50011a4d696e656420627920416e74506f6f6c2021000b01201da9196f0000000007000000&quot;,\n      &quot;sequence&quot;: 4294967295\n    }\n  ],\n  &quot;vout&quot;: [\n    {\n      &quot;value&quot;: 8.10000000,\n      &quot;valueSat&quot;: 810000000,\n      &quot;n&quot;: 0,\n      &quot;scriptPubKey&quot;: {\n        &quot;asm&quot;: &quot;OP_DUP OP_HASH160 cbd7bfcc50351180132b2c0698cb90ad74c473c7 OP_EQUALVERIFY OP_CHECKSIG&quot;,\n        &quot;hex&quot;: &quot;76a914cbd7bfcc50351180132b2c0698cb90ad74c473c788ac&quot;,\n        &quot;reqSigs&quot;: 1,\n        &quot;type&quot;: &quot;pubkeyhash&quot;,\n        &quot;addresses&quot;: [\n          &quot;yeuGUfPMrbEqAS2Pw1wonYgEPbM4LAA9LK&quot;\n        ]\n      }\n    },\n    {\n      &quot;value&quot;: 8.10000000,\n      &quot;valueSat&quot;: 810000000,\n      &quot;n&quot;: 1,\n      &quot;scriptPubKey&quot;: {\n        &quot;asm&quot;: &quot;OP_DUP OP_HASH160 88a060bc2dfe05780ae4dcb6c98b12436c35a939 OP_EQUALVERIFY OP_CHECKSIG&quot;,\n        &quot;hex&quot;: &quot;76a91488a060bc2dfe05780ae4dcb6c98b12436c35a93988ac&quot;,\n        &quot;reqSigs&quot;: 1,\n        &quot;type&quot;: &quot;pubkeyhash&quot;,\n        &quot;addresses&quot;: [\n          &quot;yYmrsYP3XYMZr1cGtha3QzmuNB1C7CfyhV&quot;\n        ]\n      }\n    }\n  ],\n  &quot;extraPayloadSize&quot;: 70,\n  &quot;extraPayload&quot;: &quot;0200ae50010078e5c08b39960887bf95185c381bdb719e60b6925fa12af78a8824fade927387c757acb6bac63da84f9245e20cfd5d830382ac634d434725ca6349ab5db920a3&quot;,\n  &quot;cbTx&quot;: {\n    &quot;version&quot;: 2,\n    &quot;height&quot;: 86190,\n    &quot;merkleRootMNList&quot;: &quot;877392defa24888af72aa15f92b6609e71db1b385c1895bf870896398bc0e578&quot;,\n    &quot;merkleRootQuorums&quot;: &quot;a320b95dab4963ca2547434d63ac8203835dfd0ce245924fa83dc6bab6ac57c7&quot;\n  }\n}\n</code></pre></div></div>\n<p><em>See also</em></p>\n<ul>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-raw-transactions#combinerawtransaction\" target=\"\" title=\"\">CombineRawTransaction</a>: combine multiple partially signed transactions into one transaction.</li>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-raw-transactions#createrawtransaction\" target=\"\" title=\"\">CreateRawTransaction</a>: creates an unsigned serialized transaction that spends a previous output to a new output with a P2PKH or P2SH address. The transaction is not stored in the wallet or transmitted to the network.</li>\n<li><a href=\"#signrawtransactionwithkey\" target=\"\" title=\"\">SignRawTransactionWithKey</a>: signs inputs for a transaction in the serialized transaction format using private keys provided in the call.</li>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-raw-transactions#sendrawtransaction\" target=\"\" title=\"\">SendRawTransaction</a>: validates a transaction and broadcasts it to the peer-to-peer network.</li>\n</ul>\n<h1 class=\"heading heading-1 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"decodescript\"></div><div class=\"heading-text\"><div id=\"section-decode-script\" class=\"heading-anchor_backwardsCompatibility\"></div>DecodeScript</div><a aria-label=\"Skip link to DecodeScript\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#decodescript\"></a></h1>\n<p>The <a href=\"core-api-ref-remote-procedure-calls-raw-transactions#decodescript\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">decodescript</code> RPC</a> decodes a hex-encoded P2SH redeem script.</p>\n<p><em>Parameter #1---a hex-encoded redeem script</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td>Redeem Script</td><td>string (hex)</td><td>Required<br/>(exactly 1)</td><td>The redeem script to decode as a hex-encoded serialized script</td></tr></tbody></table></div></div>\n<p><em>Result---the decoded script</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">result</code></td><td>object</td><td>Required<br/>(exactly 1)</td><td>An object describing the decoded script, or JSON <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">null</code> if the script could not be decoded</td></tr><tr><td>\u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">asm</code></td><td>string</td><td>Required<br/>(exactly 1)</td><td>The redeem script in decoded form with non-data-pushing opcodes listed.  May be empty</td></tr><tr><td>\u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">reqSigs</code></td><td>number (int)</td><td>Optional<br/>(0 or 1)</td><td>The number of signatures required; this is always <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">1</code> for P2PK or P2PKH within P2SH.  It may be greater than 1 for P2SH multisig.  This value will not be returned for <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">nonstandard</code> script types (see the <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">type</code> key above)</td></tr><tr><td>\u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">type</code></td><td>string</td><td>Optional<br/>(0 or 1)</td><td>The type of script.  This will be one of the following:<br/>\u2022 <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">pubkey</code> for a P2PK script inside P2SH<br/>\u2022 <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">pubkeyhash</code> for a P2PKH script inside P2SH<br/>\u2022 <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">multisig</code> for a multisig script inside P2SH<br/>\u2022 <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">nonstandard</code> for unknown scripts</td></tr><tr><td>\u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">addresses</code></td><td>array</td><td>Optional<br/>(0 or 1)</td><td>A P2PKH addresses used in this script, or the computed P2PKH addresses of any pubkeys in this script.  This array will not be returned for <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">nonstandard</code> script types</td></tr><tr><td>\u2192 \u2192<br/>Address</td><td>string</td><td>Required<br/>(1 or more)</td><td>A P2PKH address</td></tr><tr><td>\u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">p2sh</code></td><td>string (hex)</td><td>Required<br/>(exactly 1)</td><td>The P2SH address of this redeem script</td></tr></tbody></table></div></div>\n<p><em>Example from Dash Core 18.0.0</em></p>\n<p>A 2-of-3 P2SH multisig pubkey script:</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Bash</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-bash theme-light\" data-lang=\"bash\" name=\"\" tabindex=\"0\">dash-cli -testnet decodescript 522102eacba539d92eb88d4e73bb32\\\n749d79f53f6e8d7947ac40a71bd4b26c13b6ec29210311f97539724e0de38fb1\\\nff79f5148e5202459d06ed07193ab18c730274fd0d882103251f25a5c0291446\\\nd801ba6df122f67a7dd06c60a9b332b7b29cc94f3b8f57d053ae\n</code></pre></div></div>\n<p>Result:</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">JSON</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-json theme-light\" data-lang=\"json\" name=\"\" tabindex=\"0\">{\n  &quot;asm&quot;: &quot;2 02eacba539d92eb88d4e73bb32749d79f53f6e8d7947ac40a71bd4b26c13b6ec29 0311f97539724e0de38fb1ff79f5148e5202459d06ed07193ab18c730274fd0d88 03251f25a5c0291446d801ba6df122f67a7dd06c60a9b332b7b29cc94f3b8f57d0 3 OP_CHECKMULTISIG&quot;,\n  &quot;reqSigs&quot;: 2,\n  &quot;type&quot;: &quot;multisig&quot;,\n  &quot;addresses&quot;: [\n    &quot;yNpezfFDfoikDuT1f4iK75AiLp2YLPsGAb&quot;,\n    &quot;yWAk1cDVvsRdPYjnzcFkySJux75yaCE7xz&quot;,\n    &quot;yVJj7TB3ZhMcSP2wo65ZFNqy23BQH9tT87&quot;\n  ],\n  &quot;p2sh&quot;: &quot;8uJLxDxk2gEMbidF5vT8XLS2UCgQmVcroW&quot;\n}\n</code></pre></div></div>\n<p><em>See also</em></p>\n<ul>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-util#createmultisig\" target=\"\" title=\"\">CreateMultiSig</a>: creates a P2SH multi-signature address.</li>\n</ul>\n<h1 class=\"heading heading-1 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"finalizepsbt\"></div><div class=\"heading-text\"><div id=\"section-finalize-psbt\" class=\"heading-anchor_backwardsCompatibility\"></div>FinalizePSBT</div><a aria-label=\"Skip link to FinalizePSBT\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#finalizepsbt\"></a></h1>\n<p>The <a href=\"core-api-ref-remote-procedure-calls-raw-transactions#finalizepsbt\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">finalizepsbt</code> RPC</a> finalizes the inputs of a PSBT. The PSBT produces a network serialized transaction if the transaction is fully signed. This can broadcast with <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">sendrawtransaction</code>. Otherwise, a PSBT will be created which has the <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">final_scriptSig</code> fields filled for inputs that are complete.<br/>\nImplements the Finalizer and Extractor roles.</p>\n<p><em>Parameter #1---psbt</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td>psbt</td><td>string</td><td>Required</td><td>A base64 string of a PSBT</td></tr></tbody></table></div></div>\n<p><em>Parameter #2---extract</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td>data</td><td>bool</td><td>Optional</td><td>If true, and the transaction is complete, extract and return the complete transaction in normal network serialization instead of the PSBT.</td></tr></tbody></table></div></div>\n<p><em>Result---psbt</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td>\u2192 <br/>psbt</td><td>string</td><td>Required<br/>(Exactly 1)</td><td>The base64-encoded partially signed transaction if not extracted</td></tr><tr><td>\u2192 <br/>hex</td><td>string (hex)</td><td>Required<br/>(Exactly 1)</td><td>The hex-encoded network transaction if extracted</td></tr><tr><td>\u2192 <br/>complete</td><td>bool</td><td>Required<br/>(Exactly 1)</td><td>If the transaction has a complete set of signatures</td></tr></tbody></table></div></div>\n<p><em>Example from Dash Core 18.0.0</em></p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Bash</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-bash theme-light\" data-lang=\"bash\" name=\"\" tabindex=\"0\">dash-cli -testnet finalizepsbt cHNidP8BAEICAAAAAXgRxzbShUlivVFKgoLyhk0RCCYLZKCYTl/tYRd+yGImAAAAAAD/////AQAAAAAAAAAABmoEAAECAwAAAAAAAQDhAgAAAAGUi7dQLNEVUajA9jcftG9LmDpAZzvVlgQVcitxL418QgEAAABqRzBEAiBP5PxIjJVfKGxSyEjseVC0DsR24bQ0xq3WhrR0vd4JqQIgYiLSkf2do0FAiqikcg9aaVmZdxWh3fgYfnUne2v8rn4BIQPGfYaUQxWDiup+yA05C10JuRtiSDNw1Jedpcz3p993qf7///8CtOfGCQAAAAAZdqkUzvxGSQTAOBTAGQbhl9x1mnReR+6IrADKmjsAAAAAGXapFD75vL6S93yPrdBWbup/+NR/Ir3giKxVSAgAAQdqRzBEAiAF1fgBDg2M/WAeYTYzCkEiSSrDVzcYoe8wwrw/MbdgOQIgJzoYBQ9hAm6jqk2cLFitUd1/iL1ku8w9unadjNfsCdoBIQJn2pETmk8U2X6veADqnny5/6j8Iy7Oizij0SeJHm9x6AAA\n</code></pre></div></div>\n<p>Result:</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">JSON</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-json theme-light\" data-lang=\"json\" name=\"\" tabindex=\"0\">{\n  &quot;hex&quot;: &quot;02000000017811c736d2854962bd514a8282f2864d1108260b64a0984e5fed61177ec86226000000006a473044022005d5f8010e0d8cfd601e6136330a4122492ac3573718a1ef30c2bc3f31b760390220273a18050f61026ea3aa4d9c2c58ad51dd7f88bd64bbcc3dba769d8cd7ec09da01210267da91139a4f14d97eaf7800ea9e7cb9ffa8fc232ece8b38a3d127891e6f71e8ffffffff010000000000000000066a040001020300000000&quot;,\n  &quot;complete&quot;: true\n}\n</code></pre></div></div>\n<p><em>See also:</em></p>\n<ul>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-raw-transactions#createpsbt\" target=\"\" title=\"\">CreatePSBT</a>: creates a transaction in the Partially Signed Transaction (PST) format.</li>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-raw-transactions#combinepsbt\" target=\"\" title=\"\">CombinePSBT</a>: combine multiple partially-signed Dash transactions into one transaction.</li>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-raw-transactions#converttopsbt\" target=\"\" title=\"\">ConvertToPSBT</a>: converts a network serialized transaction to a PSBT.</li>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-raw-transactions#decodepsbt\" target=\"\" title=\"\">DecodePSBT</a>: returns a JSON object representing the serialized, base64-encoded partially signed Dash transaction.</li>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-wallet#walletcreatefundedpsbt\" target=\"\" title=\"\">WalletCreateFundedPSBT</a>: creates and funds a transaction in the Partially Signed Transaction (PST) format.</li>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-wallet#walletprocesspsbt\" target=\"\" title=\"\">WalletProcessPSBT</a>: updates a PSBT with input information from a wallet and then allows the signing of inputs.</li>\n</ul>\n<h1 class=\"heading heading-1 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"fundrawtransaction\"></div><div class=\"heading-text\"><div id=\"section-fund-raw-transaction\" class=\"heading-anchor_backwardsCompatibility\"></div>FundRawTransaction</div><a aria-label=\"Skip link to FundRawTransaction\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#fundrawtransaction\"></a></h1>\n<blockquote class=\"callout callout_info\" theme=\"\ud83d\udcd8\"><h2 class=\"callout-heading empty\"><span class=\"callout-icon\">\ud83d\udcd8</span></h2><p>Requires <span class=\"GlossaryItem-trigger\">wallet</span> support (<strong>unavailable on masternodes</strong>).</p></blockquote>\n<p>The <a href=\"core-api-ref-remote-procedure-calls-raw-transactions#fundrawtransaction\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">fundrawtransaction</code> RPC</a> adds inputs to a transaction until it has enough in value to meet its out value.  This will not modify existing inputs, and will add one change output to the outputs.<br/>\nNote that inputs which were signed may need to be resigned after completion since in/outputs have been added.  The inputs added will not be signed, use signrawtransaction for that.<br/>\nAll existing inputs must have their previous output transaction be in the wallet.</p>\n<p><em>Parameter #1---The hex string of the raw transaction</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td>Hex string</td><td>string (hex)</td><td>Required<br/>(exactly 1)</td><td>The hex string of the raw transaction</td></tr></tbody></table></div></div>\n<p><em>Parameter #2---Additional options</em></p>\n<p>Note: For backwards compatibility, passing in a <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">true</code> instead of an object will result in <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">{&quot;includeWatching&quot;: true}</code>.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td>Options</td><td>Object</td><td>Optional<br/>(0 or 1)</td><td>Additional options</td></tr><tr><td>\u2192 <br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">changeAddress</code></td><td>string</td><td>Optional<br/>(0 or 1)</td><td>The address to receive the change. If not set, the address is chosen from address pool</td></tr><tr><td>\u2192 <br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">changePosition</code></td><td>nummeric (int)</td><td>Optional<br/>(0 or 1)</td><td>The index of the change output. If not set, the change position is randomly chosen</td></tr><tr><td><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">includeWatching</code></td><td>bool</td><td>Optional<br/>(0 or 1)</td><td>Inputs from watch-only addresses are also considered. The default is <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">false</code> for non-watching-only wallets and <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">true</code> for watching-only wallets</td></tr><tr><td>\u2192 <br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">lockUnspent</code></td><td>bool</td><td>Optional<br/>(0 or 1)</td><td>The selected outputs are locked after running the rpc call. The default is <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">false</code></td></tr><tr><td>\u2192 <br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">reserveChangeKey</code></td><td>bool</td><td>Optional<br/>(0 or 1)</td><td><strong>Removed in Dash Core 0.17.0</strong></td></tr><tr><td>\u2192 <br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">feeRate</code></td><td>numeric (bitcoins)</td><td>Optional<br/>(0 or 1)</td><td>The specific feerate  you are willing to pay (BTC per KB). If not set, the wallet determines the fee</td></tr><tr><td>\u2192 <br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">subtractFeeFromOutputs</code></td><td>array</td><td>Optional<br/>(0 or 1)</td><td>A json array of integers. The fee will be equally deducted from the amount of each specified output. The outputs are specified by their zero-based index, before any change output is added.</td></tr><tr><td>\u2192 \u2192<br/>Output index</td><td>numeric (int)</td><td>Optional<br/>(0 or more)</td><td>A output index number (vout) from which the fee should be subtracted. If multiple vouts are provided, the total fee will be divided by the number of vouts listed and each vout will have that amount subtracted from it.</td></tr></tbody></table></div></div>\n<p><em>Result---information about the created transaction</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">result</code></td><td>object</td><td>Required<br/>(exactly 1)</td><td>An object including information about the created transaction</td></tr><tr><td>\u2192 <br/>hex</td><td>string (hex)</td><td>Required<br/>(Exactly 1)</td><td>The resulting unsigned raw transaction in serialized transaction format encoded as hex</td></tr><tr><td>\u2192 <br/>fee</td><td>numeric (bitcoins)</td><td>Required<br/>(Exactly 1)</td><td>Fee in BTC the resulting transaction pays</td></tr><tr><td>\u2192 <br/>changepos</td><td>numeric (int)</td><td>Required<br/>(Exactly 1)</td><td>The position of the added change output, or <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">-1</code> if no change output was added</td></tr></tbody></table></div></div>\n<p><em>Example from Dash Core 0.12.2</em></p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Bash</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-bash theme-light\" data-lang=\"bash\" name=\"\" tabindex=\"0\">dash-cli -testnet fundrawtransaction 01000000000100205fa012000000\\\n1976a914485485425fa99504ec1638ac4213f3cfc9f32ef388ac00000000\n</code></pre></div></div>\n<p>Result:</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Text</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-text theme-light\" data-lang=\"text\" name=\"\" tabindex=\"0\">{\n  &quot;hex&quot;: &quot;01000000016b490886c0198b028c6c5cb145c4eb3b1055a224a7a105aadeff41b69ec91e060100000000feffffff023e1207bf010000001976a914bd652a167e7ad674f7815dc549bea9c57a7f919b88ac00205fa0120000001976a914485485425fa99504ec1638ac4213f3cfc9f32ef388ac00000000&quot;,\n  &quot;changepos&quot;: 0,\n  &quot;fee&quot;: 0.00000226\n}\n</code></pre></div></div>\n<p><em>See also</em></p>\n<ul>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-raw-transactions#createrawtransaction\" target=\"\" title=\"\">CreateRawTransaction</a>: creates an unsigned serialized transaction that spends a previous output to a new output with a P2PKH or P2SH address. The transaction is not stored in the wallet or transmitted to the network.</li>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-raw-transactions#decoderawtransaction\" target=\"\" title=\"\">DecodeRawTransaction</a>: decodes a serialized transaction hex string into a JSON object describing the transaction.</li>\n<li><a href=\"#signrawtransactionwithkey\" target=\"\" title=\"\">SignRawTransactionWithKey</a>: signs inputs for a transaction in the serialized transaction format using private keys provided in the call.</li>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-raw-transactions#sendrawtransaction\" target=\"\" title=\"\">SendRawTransaction</a>: validates a transaction and broadcasts it to the peer-to-peer network.</li>\n<li><a href=\"core-ref-transactions-raw-transaction-format\" target=\"\" title=\"\">Serialized Transaction Format</a></li>\n</ul>\n<h1 class=\"heading heading-1 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"getrawtransaction\"></div><div class=\"heading-text\"><div id=\"section-get-raw-transaction\" class=\"heading-anchor_backwardsCompatibility\"></div>GetRawTransaction</div><a aria-label=\"Skip link to GetRawTransaction\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#getrawtransaction\"></a></h1>\n<p>The <a href=\"core-api-ref-remote-procedure-calls-raw-transactions#getrawtransaction\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">getrawtransaction</code> RPC</a> gets a hex-encoded serialized transaction or a JSON object describing the transaction. By default, Dash Core only stores complete transaction data for UTXOs and your own transactions, so the RPC may fail on historic transactions unless you use the non-default <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">txindex=1</code> in your Dash Core startup settings.</p>\n<p>Note: By default this function only works for mempool transactions. When called with a blockhash argument, getrawtransaction will return the transaction if the specified block is available and the transaction is found in that block. When called without a blockhash argument, getrawtransaction will return the transaction if it is in the mempool, or if <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">-txindex</code> is enabled and the transaction is in a block in the blockchain. Use the <a href=\"core-api-ref-remote-procedure-calls-wallet#gettransaction\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">gettransaction</code> RPC</a> for wallet transactions.</p>\n<p>As of Dash Core 18.0.0, transactions with unspent outputs will no longer be included unless <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">-txindex</code> is enabled.</p>\n<blockquote class=\"callout callout_warn\" theme=\"\ud83d\udea7\"><h2 class=\"callout-heading\"><span class=\"callout-icon\">\ud83d\udea7</span><p>Reindex note</p></h2><p>If you begin using <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">txindex=1</code> after downloading the block chain, you must rebuild your indexes by starting Dash Core with the option  <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">-reindex</code>.  This may take several hours to complete, during which time your node will not process new blocks or transactions. This reindex only needs to be done once.</p></blockquote>\n<p><em>Parameter #1---the TXID of the transaction to get</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td>TXID</td><td>string (hex)</td><td>Required<br/>(exactly 1)</td><td>The TXID of the transaction to get, encoded as hex in RPC byte order</td></tr></tbody></table></div></div>\n<p><em>Parameter #2---whether to get the serialized or decoded transaction</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td>Verbose</td><td>bool</td><td>Optional<br/>(0 or 1)</td><td><em>Updated in Dash Core 0.12.3 / Bitcoin Core 0.14.0</em><br/><br/>Set to <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">false</code> (the default) to return the serialized transaction as hex.  Set to <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">true</code> to return a decoded transaction in JSON.  Before 0.12.3, use <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">0</code> and <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">1</code>, respectively</td></tr></tbody></table></div></div>\n<p><em>Parameter #3---hash of a block to look in for the transaction</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td>Block Hash</td><td>bool</td><td>Optional<br/>(0 or 1)</td><td><em>Added in Dash Core 0.16.0</em><br/><br/>The hash of the block in which to look for the transaction</td></tr></tbody></table></div></div>\n<p><em>Result (if transaction not found)---<button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">null</code></em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">result</code></td><td>null</td><td>Required<br/>(exactly 1)</td><td>If the transaction wasn&#x27;t found, the result will be JSON <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">null</code>.  This can occur because the transaction doesn&#x27;t exist in the block chain or memory pool, or because it isn&#x27;t part of the transaction index.  See the Dash Core <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">-help</code> entry for <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">-txindex</code></td></tr></tbody></table></div></div>\n<p><em>Result (if verbose=<button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">false</code>)---the serialized transaction</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">result</code></td><td>string (hex)</td><td>Required<br/>(exactly 1)</td><td>If the transaction was found, this will be the serialized transaction encoded as hex</td></tr></tbody></table></div></div>\n<p><em>Result (if verbose=<button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">true</code>)---the decoded transaction</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">result</code></td><td>object</td><td>Required<br/>(exactly 1)</td><td>If the transaction was found, this will be an object describing it</td></tr><tr><td>\u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">in_active_chain</code></td><td>bool</td><td>Required<br/>(exactly 1)</td><td>) Whether specified block is in the active chain or not (only present with explicit <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">blockhash</code> argument)</td></tr><tr><td>\u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">txid</code></td><td>string (hex)</td><td>Required<br/>(exactly 1)</td><td>The transaction&#x27;s TXID encoded as hex in RPC byte order</td></tr><tr><td>\u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">size</code></td><td>number (int)</td><td>Required<br/>(exactly 1)</td><td><em>Added in Bitcoin Core 0.12.0</em><br/><br/>The serialized transaction size</td></tr><tr><td>\u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">version</code></td><td>number (int)</td><td>Required<br/>(exactly 1)</td><td>The transaction format version number</td></tr><tr><td>\u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">type</code></td><td>number (int)</td><td>Required<br/>(exactly 1)</td><td><em>Added in Dash Core 0.13.0.0</em><br/><br/>The transaction format type</td></tr><tr><td>\u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">locktime</code></td><td>number (int)</td><td>Required<br/>(exactly 1)</td><td>The transaction&#x27;s locktime: either a Unix epoch date or block height; see the <a href=\"core-guide-transactions-locktime-and-sequence-number#locktime-parsing-rules\" target=\"\" title=\"\">locktime parsing rules</a></td></tr><tr><td>\u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">vin</code></td><td>array</td><td>Required<br/>(exactly 1)</td><td>An array of objects with each object being an input vector (vin) for this transaction.  Input objects will have the same order within the array as they have in the transaction, so the first input listed will be input 0</td></tr><tr><td>\u2192 \u2192<br/>Input</td><td>object</td><td>Required<br/>(1 or more)</td><td>An object describing one of this transaction&#x27;s inputs.  May be a regular input or a coinbase</td></tr><tr><td>\u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">txid</code></td><td>string</td><td>Optional<br/>(0 or 1)</td><td>The TXID of the outpoint being spent, encoded as hex in RPC byte order.  Not present if this is a coinbase transaction</td></tr><tr><td>\u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">vout</code></td><td>number (int)</td><td>Optional<br/>(0 or 1)</td><td>The output index number (vout) of the outpoint being spent.  The first output in a transaction has an index of <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">0</code>.  Not present if this is a coinbase transaction</td></tr><tr><td>\u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">scriptSig</code></td><td>object</td><td>Optional<br/>(0 or 1)</td><td>An object describing the signature script of this input.  Not present if this is a coinbase transaction</td></tr><tr><td>\u2192 \u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">asm</code></td><td>string</td><td>Required<br/>(exactly 1)</td><td>The signature script in decoded form with non-data-pushing opcodes listed</td></tr><tr><td>\u2192 \u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">hex</code></td><td>string (hex)</td><td>Required<br/>(exactly 1)</td><td>The signature script encoded as hex</td></tr><tr><td>\u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">coinbase</code></td><td>string (hex)</td><td>Optional<br/>(0 or 1)</td><td>The coinbase (similar to the hex field of a scriptSig) encoded as hex.  Only present if this is a coinbase transaction</td></tr><tr><td>\u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">value</code></td><td>number (Dash)</td><td>Optional<br/>(exactly 1)</td><td>The number of Dash paid to this output.  May be <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">0</code>.<br/><br/>Only present if <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">spentindex</code> enabled</td></tr><tr><td>\u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">valueSat</code></td><td>number (duffs)</td><td>Optional<br/>(exactly 1)</td><td>The number of duffs paid to this output.  May be <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">0</code>.<br/><br/>Only present if <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">spentindex</code> enabled</td></tr><tr><td>\u2192 \u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">addresses</code></td><td>string : array</td><td>Optional<br/>(0 or 1)</td><td>The P2PKH or P2SH addresses used in this transaction, or the computed P2PKH address of any pubkeys in this transaction.  This array will not be returned for <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">nulldata</code> or <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">nonstandard</code> script types.<br/><br/>Only present if <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">spentindex</code> enabled</td></tr><tr><td>\u2192 \u2192 \u2192 \u2192 \u2192<br/>Address</td><td>string</td><td>Required<br/>(1 or more)</td><td>A P2PKH or P2SH address</td></tr><tr><td>\u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">sequence</code></td><td>number (int)</td><td>Required<br/>(exactly 1)</td><td>The input sequence number</td></tr><tr><td>\u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">vout</code></td><td>array</td><td>Required<br/>(exactly 1)</td><td>An array of objects each describing an output vector (vout) for this transaction.  Output objects will have the same order within the array as they have in the transaction, so the first output listed will be output 0</td></tr><tr><td>\u2192 \u2192<br/>Output</td><td>object</td><td>Required<br/>(1 or more)</td><td>An object describing one of this transaction&#x27;s outputs</td></tr><tr><td>\u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">value</code></td><td>number (Dash)</td><td>Required<br/>(exactly 1)</td><td>The number of Dash paid to this output.  May be <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">0</code></td></tr><tr><td>\u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">valueSat</code></td><td>number (duffs)</td><td>Required<br/>(exactly 1)</td><td>The number of duffs paid to this output.  May be <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">0</code></td></tr><tr><td>\u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">n</code></td><td>number (int)</td><td>Required<br/>(exactly 1)</td><td>The output index number of this output within this transaction</td></tr><tr><td>\u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">scriptPubKey</code></td><td>object</td><td>Required<br/>(exactly 1)</td><td>An object describing the pubkey script</td></tr><tr><td>\u2192 \u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">asm</code></td><td>string</td><td>Required<br/>(exactly 1)</td><td>The pubkey script in decoded form with non-data-pushing opcodes listed</td></tr><tr><td>\u2192 \u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">hex</code></td><td>string (hex)</td><td>Required<br/>(exactly 1)</td><td>The pubkey script encoded as hex</td></tr><tr><td>\u2192 \u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">reqSigs</code></td><td>number (int)</td><td>Optional<br/>(0 or 1)</td><td>The number of signatures required; this is always <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">1</code> for P2PK, P2PKH, and P2SH (including P2SH multisig because the redeem script is not available in the pubkey script).  It may be greater than 1 for bare multisig.  This value will not be returned for <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">nulldata</code> or <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">nonstandard</code> script types (see the <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">type</code> key below)</td></tr><tr><td>\u2192 \u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">type</code></td><td>string</td><td>Optional<br/>(0 or 1)</td><td>The type of script.  This will be one of the following:<br/>\u2022 <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">pubkey</code> for a P2PK script<br/>\u2022 <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">pubkeyhash</code> for a P2PKH script<br/>\u2022 <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">scripthash</code> for a P2SH script<br/>\u2022 <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">multisig</code> for a bare multisig script<br/>\u2022 <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">nulldata</code> for nulldata scripts<br/>\u2022 <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">nonstandard</code> for unknown scripts</td></tr><tr><td>\u2192 \u2192 \u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">addresses</code></td><td>string : array</td><td>Optional<br/>(0 or 1)</td><td>The P2PKH or P2SH addresses used in this transaction, or the computed P2PKH address of any pubkeys in this transaction.  This array will not be returned for <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">nulldata</code> or <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">nonstandard</code> script types</td></tr><tr><td>\u2192 \u2192 \u2192 \u2192 \u2192<br/>Address</td><td>string</td><td>Required<br/>(1 or more)</td><td>A P2PKH or P2SH address</td></tr><tr><td>\u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">extraPayloadSize</code></td><td>number (int)</td><td>Optional<br/>(0 or 1)</td><td><em>Added in Dash Core 0.13.0.0</em><br/><br/>Size of the DIP2 extra payload. Only present if it&#x27;s a DIP2 special transaction</td></tr><tr><td>\u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">extraPayload</code></td><td>string (hex)</td><td>Optional<br/>(0 or 1)</td><td><em>Added in Dash Core 0.13.0.0</em><br/><br/>Hex encoded DIP2 extra payload data. Only present if it&#x27;s a DIP2 special transaction</td></tr><tr><td>\u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">hex</code></td><td>string (hex)</td><td>Required<br/>(exactly 1)</td><td>The serialized, hex-encoded data for the provided <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">txid</code></td></tr><tr><td>\u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">blockhash</code></td><td>string (hex)</td><td>Optional<br/>(0 or 1)</td><td>If the transaction has been included in a block on the local best block chain, this is the hash of that block encoded as hex in RPC byte order</td></tr><tr><td>\u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">height</code></td><td>number (int)</td><td>Optional<br/>(0 or 1)</td><td>The block height where the transaction was mined</td></tr><tr><td>\u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">confirmations</code></td><td>number (int)</td><td>Required<br/>(exactly 1)</td><td>If the transaction has been included in a block on the local best block chain, this is how many confirmations it has.  Otherwise, this is <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">0</code></td></tr><tr><td>\u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">time</code></td><td>number (int)</td><td>Optional<br/>(0 or 1)</td><td>If the transaction has been included in a block on the local best block chain, this is the block header time of that block (may be in the future)</td></tr><tr><td>\u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">blocktime</code></td><td>number (int)</td><td>Optional<br/>(0 or 1)</td><td>This field is currently identical to the time field described above</td></tr><tr><td>\u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">instantlock</code></td><td>bool</td><td>Required<br/>(exactly 1)</td><td>If set to <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">true</code>, this transaction is locked (by InstantSend or a ChainLock)</td></tr><tr><td>\u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">instantlock_internal</code></td><td>bool</td><td>Required<br/>(exactly 1)</td><td>If set to <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">true</code>, this transaction has an InstantSend lock</td></tr><tr><td>\u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">chainlock</code></td><td>bool</td><td>Required<br/>(exactly 1)</td><td><em>Added in Dash Core 0.14.0</em><br/><br/>If set to <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">true</code>, this transaction is in a block that is locked (not susceptible to a chain re-org)</td></tr></tbody></table></div></div>\n<p><em>Examples from Dash Core 0.14.0</em></p>\n<p>A classical transaction in serialized transaction format:</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Bash</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-bash theme-light\" data-lang=\"bash\" name=\"\" tabindex=\"0\">dash-cli getrawtransaction \\\n  f4de3be04efa18e203c9d0b7ad11bb2517f5889338918ed300a374f5bd736ed7\n</code></pre></div></div>\n<p>Result (wrapped):</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Text</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-text theme-light\" data-lang=\"text\" name=\"\" tabindex=\"0\">02000000015d0b26079696875e9fc3cb480420aae3c8b1da628fbb14cc718066\\\ndf7fe7c5fd010000006a47304402202cfa683981898ad9adb8953423a38f7185\\\ned41e163aa195d608fbe5bc3034910022034e2376aaed1c6576c0dad79d626ee\\\n27f706baaed86dabb105979c3e6f6e1cb9012103d14eb001cf0908f3a2333d17\\\n1f6236497a82318a6a6f649b4d7fd8e5c8922e08feffffff021e3f4b4c000000\\\n001976a914b02ae52066542b4aec5cf45c7cae3183d7bd322788ac00f9029500\\\n0000001976a914252c9de3a0ebd5c95886187b24969d4ccdb5576e88ac943d0000\n</code></pre></div></div>\n<p>Get the same transaction in JSON:</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Bash</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-bash theme-light\" data-lang=\"bash\" name=\"\" tabindex=\"0\">dash-cli getrawtransaction \\\nf4de3be04efa18e203c9d0b7ad11bb2517f5889338918ed300a374f5bd736ed7 \\\n1\n</code></pre></div></div>\n<p>Result:</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">JSON</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-json theme-light\" data-lang=\"json\" name=\"\" tabindex=\"0\">{\n  &quot;txid&quot;: &quot;f4de3be04efa18e203c9d0b7ad11bb2517f5889338918ed300a374f5bd736ed7&quot;,\n  &quot;version&quot;: 2,\n  &quot;type&quot;: 0,\n  &quot;size&quot;: 225,\n  &quot;locktime&quot;: 15764,\n  &quot;vin&quot;: [\n    {\n      &quot;txid&quot;: &quot;fdc5e77fdf668071cc14bb8f62dab1c8e3aa200448cbc39f5e87969607260b5d&quot;,\n      &quot;vout&quot;: 1,\n      &quot;scriptSig&quot;: {\n        &quot;asm&quot;: &quot;304402202cfa683981898ad9adb8953423a38f7185ed41e163aa195d608fbe5bc3034910022034e2376aaed1c6576c0dad79d626ee27f706baaed86dabb105979c3e6f6e1cb9[ALL] 03d14eb001cf0908f3a2333d171f6236497a82318a6a6f649b4d7fd8e5c8922e08&quot;,\n        &quot;hex&quot;: &quot;47304402202cfa683981898ad9adb8953423a38f7185ed41e163aa195d608fbe5bc3034910022034e2376aaed1c6576c0dad79d626ee27f706baaed86dabb105979c3e6f6e1cb9012103d14eb001cf0908f3a2333d171f6236497a82318a6a6f649b4d7fd8e5c8922e08&quot;\n      },\n      &quot;value&quot;: 37.80000000,\n      &quot;valueSat&quot;: 3780000000,\n      &quot;address&quot;: &quot;yTsGq4wV8WF5GKLaYV2C43zrkr2sfTtysT&quot;,\n      &quot;sequence&quot;: 4294967294\n    }\n  ],\n  &quot;vout&quot;: [\n    {\n      &quot;value&quot;: 12.79999774,\n      &quot;valueSat&quot;: 1279999774,\n      &quot;n&quot;: 0,\n      &quot;scriptPubKey&quot;: {\n        &quot;asm&quot;: &quot;OP_DUP OP_HASH160 b02ae52066542b4aec5cf45c7cae3183d7bd3227 OP_EQUALVERIFY OP_CHECKSIG&quot;,\n        &quot;hex&quot;: &quot;76a914b02ae52066542b4aec5cf45c7cae3183d7bd322788ac&quot;,\n        &quot;reqSigs&quot;: 1,\n        &quot;type&quot;: &quot;pubkeyhash&quot;,\n        &quot;addresses&quot;: [\n          &quot;ycNwAN4DQ7Xnw5XLKg84SR4U1GE22FfLNQ&quot;\n        ]\n      },\n      &quot;spentTxId&quot;: &quot;85b40136f077cded9587022645fde82389e2f01b0bec697d8cd22ccab930f3d3&quot;,\n      &quot;spentIndex&quot;: 19,\n      &quot;spentHeight&quot;: 20631\n    },\n    {\n      &quot;value&quot;: 25.00000000,\n      &quot;valueSat&quot;: 2500000000,\n      &quot;n&quot;: 1,\n      &quot;scriptPubKey&quot;: {\n        &quot;asm&quot;: &quot;OP_DUP OP_HASH160 252c9de3a0ebd5c95886187b24969d4ccdb5576e OP_EQUALVERIFY OP_CHECKSIG&quot;,\n        &quot;hex&quot;: &quot;76a914252c9de3a0ebd5c95886187b24969d4ccdb5576e88ac&quot;,\n        &quot;reqSigs&quot;: 1,\n        &quot;type&quot;: &quot;pubkeyhash&quot;,\n        &quot;addresses&quot;: [\n          &quot;yPi1JKw5fn8bMFsCCtnkGagogW6GXwGktZ&quot;\n        ]\n      },\n      &quot;spentTxId&quot;: &quot;90aa8902dbab71c07a5ac06dfe45c5e5fa1f032788b5f916951d0969c9feef39&quot;,\n      &quot;spentIndex&quot;: 1,\n      &quot;spentHeight&quot;: 24630\n    }\n  ],\n  &quot;hex&quot;: &quot;02000000015d0b26079696875e9fc3cb480420aae3c8b1da628fbb14cc718066df7fe7c5fd010000006a47304402202cfa683981898ad9adb8953423a38f7185ed41e163aa195d608fbe5bc3034910022034e2376aaed1c6576c0dad79d626ee27f706baaed86dabb105979c3e6f6e1cb9012103d14eb001cf0908f3a2333d171f6236497a82318a6a6f649b4d7fd8e5c8922e08feffffff021e3f4b4c000000001976a914b02ae52066542b4aec5cf45c7cae3183d7bd322788ac00f90295000000001976a914252c9de3a0ebd5c95886187b24969d4ccdb5576e88ac943d0000&quot;,\n  &quot;blockhash&quot;: &quot;0000000005f395d62a40ef9f2a13000bd4076e2131c8671db8333a5b31e4403f&quot;,\n  &quot;height&quot;: 15765,\n  &quot;confirmations&quot;: 153657,\n  &quot;time&quot;: 1546278750,\n  &quot;blocktime&quot;: 1546278750,\n  &quot;instantlock&quot;: true,\n  &quot;instantlock_internal&quot;: false,\n  &quot;chainlock&quot;: true\n}\n</code></pre></div></div>\n<p>A special transaction (CbTx) in serialized transaction format:</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Bash</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-bash theme-light\" data-lang=\"bash\" name=\"\" tabindex=\"0\">dash-cli getrawtransaction \\\n  25632685ed0d7286901a80961c924c1ddd952e764754dbd8b40d0956413c8b56\n</code></pre></div></div>\n<p>Result (wrapped):</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Text</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-text theme-light\" data-lang=\"text\" name=\"\" tabindex=\"0\">030005000100000000000000000000000000000000000000000000000000000000000\\\n00000ffffffff2703ae50011a4d696e656420627920416e74506f6f6c2021000b0120\\\n1da9196f0000000007000000ffffffff02809e4730000000001976a914cbd7bfcc503\\\n51180132b2c0698cb90ad74c473c788ac809e4730000000001976a91488a060bc2dfe\\\n05780ae4dcb6c98b12436c35a93988ac00000000460200ae50010078e5c08b3996088\\\n7bf95185c381bdb719e60b6925fa12af78a8824fade927387c757acb6bac63da84f92\\\n45e20cfd5d830382ac634d434725ca6349ab5db920a3\n</code></pre></div></div>\n<p>Get the same transaction in JSON:</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Bash</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-bash theme-light\" data-lang=\"bash\" name=\"\" tabindex=\"0\">dash-cli getrawtransaction \\\n25632685ed0d7286901a80961c924c1ddd952e764754dbd8b40d0956413c8b56 \\\n1\n</code></pre></div></div>\n<p>Result:</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">JSON</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-json theme-light\" data-lang=\"json\" name=\"\" tabindex=\"0\">{\n  &quot;txid&quot;: &quot;25632685ed0d7286901a80961c924c1ddd952e764754dbd8b40d0956413c8b56&quot;,\n  &quot;version&quot;: 3,\n  &quot;type&quot;: 5,\n  &quot;size&quot;: 229,\n  &quot;locktime&quot;: 0,\n  &quot;vin&quot;: [\n    {\n      &quot;coinbase&quot;: &quot;03ae50011a4d696e656420627920416e74506f6f6c2021000b01201da9196f0000000007000000&quot;,\n      &quot;sequence&quot;: 4294967295\n    }\n  ],\n  &quot;vout&quot;: [\n    {\n      &quot;value&quot;: 8.10000000,\n      &quot;valueSat&quot;: 810000000,\n      &quot;n&quot;: 0,\n      &quot;scriptPubKey&quot;: {\n        &quot;asm&quot;: &quot;OP_DUP OP_HASH160 cbd7bfcc50351180132b2c0698cb90ad74c473c7 OP_EQUALVERIFY OP_CHECKSIG&quot;,\n        &quot;hex&quot;: &quot;76a914cbd7bfcc50351180132b2c0698cb90ad74c473c788ac&quot;,\n        &quot;reqSigs&quot;: 1,\n        &quot;type&quot;: &quot;pubkeyhash&quot;,\n        &quot;addresses&quot;: [\n          &quot;yeuGUfPMrbEqAS2Pw1wonYgEPbM4LAA9LK&quot;\n        ]\n      },\n      &quot;spentTxId&quot;: &quot;1790b286922d1a439bdc056939bc902a222f9d66ee63d8427805617eedf835bd&quot;,\n      &quot;spentIndex&quot;: 83,\n      &quot;spentHeight&quot;: 94680\n    },\n    {\n      &quot;value&quot;: 8.10000000,\n      &quot;valueSat&quot;: 810000000,\n      &quot;n&quot;: 1,\n      &quot;scriptPubKey&quot;: {\n        &quot;asm&quot;: &quot;OP_DUP OP_HASH160 88a060bc2dfe05780ae4dcb6c98b12436c35a939 OP_EQUALVERIFY OP_CHECKSIG&quot;,\n        &quot;hex&quot;: &quot;76a91488a060bc2dfe05780ae4dcb6c98b12436c35a93988ac&quot;,\n        &quot;reqSigs&quot;: 1,\n        &quot;type&quot;: &quot;pubkeyhash&quot;,\n        &quot;addresses&quot;: [\n          &quot;yYmrsYP3XYMZr1cGtha3QzmuNB1C7CfyhV&quot;\n        ]\n      }\n    }\n  ],\n  &quot;extraPayloadSize&quot;: 70,\n  &quot;extraPayload&quot;: &quot;0200ae50010078e5c08b39960887bf95185c381bdb719e60b6925fa12af78a8824fade927387c757acb6bac63da84f9245e20cfd5d830382ac634d434725ca6349ab5db920a3&quot;,\n  &quot;cbTx&quot;: {\n    &quot;version&quot;: 2,\n    &quot;height&quot;: 86190,\n    &quot;merkleRootMNList&quot;: &quot;877392defa24888af72aa15f92b6609e71db1b385c1895bf870896398bc0e578&quot;,\n    &quot;merkleRootQuorums&quot;: &quot;a320b95dab4963ca2547434d63ac8203835dfd0ce245924fa83dc6bab6ac57c7&quot;\n  },\n  &quot;hex&quot;: &quot;03000500010000000000000000000000000000000000000000000000000000000000000000ffffffff2703ae50011a4d696e656420627920416e74506f6f6c2021000b01201da9196f0000000007000000ffffffff02809e4730000000001976a914cbd7bfcc50351180132b2c0698cb90ad74c473c788ac809e4730000000001976a91488a060bc2dfe05780ae4dcb6c98b12436c35a93988ac00000000460200ae50010078e5c08b39960887bf95185c381bdb719e60b6925fa12af78a8824fade927387c757acb6bac63da84f9245e20cfd5d830382ac634d434725ca6349ab5db920a3&quot;,\n  &quot;blockhash&quot;: &quot;00000000007b0fb99e36713cf08012482478ee496e6dcb4007ad2e806306e62b&quot;,\n  &quot;height&quot;: 86190,\n  &quot;confirmations&quot;: 83233,\n  &quot;time&quot;: 1556114577,\n  &quot;blocktime&quot;: 1556114577,\n  &quot;instantlock&quot;: true,\n  &quot;instantlock_internal&quot;: false,\n  &quot;chainlock&quot;: true\n}\n</code></pre></div></div>\n<p><em>See also</em></p>\n<ul>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-blockchain#getspecialtxes\" target=\"\" title=\"\">GetSpecialTxes</a>: returns an array of special transactions found in the specified block</li>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-wallet#gettransaction\" target=\"\" title=\"\">GetTransaction</a>: gets detailed information about an in-wallet transaction.</li>\n</ul>\n<h1 class=\"heading heading-1 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"joinpsbts\"></div><div class=\"heading-text\"><div id=\"section-join-psb-ts\" class=\"heading-anchor_backwardsCompatibility\"></div>JoinPSBTs</div><a aria-label=\"Skip link to JoinPSBTs\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#joinpsbts\"></a></h1>\n<p>The <a href=\"core-api-ref-remote-procedure-calls-raw-transactions#joinpsbts\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">joinpsbts</code> RPC</a> joins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs. No input in any of the PSBTs can be in more than one of the PSBTs.</p>\n<p><em>Parameter #1---Transactions</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">txs</code></td><td>array</td><td>Required<br/>(exactly 1)</td><td>A JSON array of base64 strings of partially signed transactions</td></tr><tr><td>\u2192 PSBT</td><td>string</td><td>Required<br/>(1 or more)</td><td>A PSBT base64 string</td></tr></tbody></table></div></div>\n<p><em>Result---the combined raw transaction in base64</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td>Result</td><td>string</td><td>Required<br/>(Exactly 1)</td><td>The resulting raw transaction (base64-encoded string)</td></tr></tbody></table></div></div>\n<p><em>Example from Dash Core 18.0.0</em></p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Bash</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-bash theme-light\" data-lang=\"bash\" name=\"\" tabindex=\"0\">dash-cli -testnet joinpsbts &quot;[\\&quot;cHNidP8BAEICAAAAAfisRhf3kqdGJdB8vKvQz81ze9cH6bh0RKZfFTMsXatUAAAAAAD/////AQAAAAAAAAAABmoEAAECAwAAAAAAAAA=\\&quot;, \\&quot;cHNidP8BAEICAAAAAXgRxzbShUlivVFKgoLyhk0RCCYLZKCYTl/tYRd+yGImAAAAAAD/////AQAAAAAAAAAABmoEAAECAwAAAAAAAAA=\\&quot;]&quot;\n</code></pre></div></div>\n<p>Result:</p>\n<pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">cHNidP8BAHoCAAAAAvisRhf3kqdGJdB8vKvQz81ze9cH6bh0RKZfFTMsXatUAAAAAAD/////eBHHNtKFSWK9UUqCgvKGTREIJgtkoJhOX+1hF37IYiYAAAAAAP////8CAAAAAAAAAAAGagQAAQIDAAAAAAAAAAAGagQAAQIDAAAAAAAAAAAA\n</code></pre>\n<p><em>See also</em></p>\n<ul>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-raw-transactions#combinepsbt\" target=\"\" title=\"\">CombinePSBT</a>: combine multiple partially-signed Dash transactions into one transaction.</li>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-raw-transactions#converttopsbt\" target=\"\" title=\"\">ConvertToPSBT</a>: converts a network serialized transaction to a PSBT.</li>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-raw-transactions#decodepsbt\" target=\"\" title=\"\">DecodePSBT</a>: returns a JSON object representing the serialized, base64-encoded partially signed Dash transaction.</li>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-raw-transactions#finalizepsbt\" target=\"\" title=\"\">FinalizePSBT</a>: finalizes the inputs of a PSBT.</li>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-wallet#walletcreatefundedpsbt\" target=\"\" title=\"\">WalletCreateFundedPSBT</a>: creates and funds a transaction in the Partially Signed Transaction (PST) format.</li>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-wallet#walletprocesspsbt\" target=\"\" title=\"\">WalletProcessPSBT</a>: updates a PSBT with input information from a wallet and then allows the signing of inputs.</li>\n</ul>\n<h1 class=\"heading heading-1 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"sendrawtransaction\"></div><div class=\"heading-text\"><div id=\"section-send-raw-transaction\" class=\"heading-anchor_backwardsCompatibility\"></div>SendRawTransaction</div><a aria-label=\"Skip link to SendRawTransaction\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#sendrawtransaction\"></a></h1>\n<p>The <a href=\"core-api-ref-remote-procedure-calls-raw-transactions#sendrawtransaction\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">sendrawtransaction</code> RPC</a> validates a transaction and broadcasts it to the peer-to-peer network.</p>\n<blockquote class=\"callout callout_error\" theme=\"\u2757\ufe0f\"><h2 class=\"callout-heading empty\"><span class=\"callout-icon\">\u2757\ufe0f</span></h2><p>Breaking change(s) in Dash Core 18.0. See parameter and/or response information for details.</p></blockquote>\n<p><em>Parameter #1---a serialized transaction to broadcast</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td>Transaction</td><td>string (hex)</td><td>Required<br/>(exactly 1)</td><td>The serialized transaction to broadcast encoded as hex</td></tr></tbody></table></div></div>\n<p><em>Parameter #2--whether to allow high fees</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">maxfeerate</code></td><td>number</td><td>Optional<br/>(0 or 1)</td><td>Reject transactions whose fee rate is higher than the specified value, expressed in DASH/kB. <strong>Breaking change: parameter changed from <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">allowhighfees</code> to <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">maxfeerate</code> in Dash Core 18.0.0. See <a href=\"https://dashcore.readme.io/v0.17.0/docs/core-api-ref-remote-procedure-calls-raw-transactions#sendrawtransaction\" target=\"\" title=\"\">previous version</a>.</strong></td></tr></tbody></table></div></div>\n<p><em>Parameter #3--whether to use InstantSend</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td>Use InstantSend</td><td>bool</td><td>Optional<br/>(0 or 1)</td><td><em>Deprecated and ignored since Dash Core 0.15.0</em></td></tr></tbody></table></div></div>\n<p><em>Parameter #4--whether to bypass policy limits</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td>Bypass Limits</td><td>bool</td><td>Optional<br/>(0 or 1)</td><td>Bypass transaction policy limits</td></tr></tbody></table></div></div>\n<p><em>Result---a TXID or error message</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">result</code></td><td>null/string (hex)</td><td>Required<br/>(exactly 1)</td><td>If the transaction was accepted by the node for broadcast, this will be the TXID of the transaction encoded as hex in RPC byte order.  If the transaction was rejected by the node, this will set to <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">null</code>, the JSON-RPC error field will be set to a code, and the JSON-RPC message field may contain an informative error message</td></tr></tbody></table></div></div>\n<p><em>Examples from Dash Core 0.12.2</em></p>\n<p>Broadcast a signed transaction:</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Bash</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-bash theme-light\" data-lang=\"bash\" name=\"\" tabindex=\"0\">dash-cli -testnet sendrawtransaction 01000000016b490886c0198b\\\n028c6c5cb145c4eb3b1055a224a7a105aadeff41b69ec91e0601000000694630\\\n43022033a61c56fa0867ed67b76b023204a9dc0ee6b0d63305dc5f65fe943354\\\n45ff2f021f712f55399d5238fc7146497c431fc4182a1de0b96fc22716e0845f\\\n561d542e012102eacba539d92eb88d4e73bb32749d79f53f6e8d7947ac40a71b\\\nd4b26c13b6ec29ffffffff0200205fa0120000001976a914485485425fa99504\\\nec1638ac4213f3cfc9f32ef388acc0a8f9be010000001976a914811eacc14db8\\\nebb5b64486dc43400c0226b428a488ac00000000\n</code></pre></div></div>\n<p>Result:</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Text</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-text theme-light\" data-lang=\"text\" name=\"\" tabindex=\"0\">2f124cb550d9967b81914b544dea3783de23e85d67a9816f9bada665ecfe1cd5\n</code></pre></div></div>\n<p><em>See also</em></p>\n<ul>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-raw-transactions#combinerawtransaction\" target=\"\" title=\"\">CombineRawTransaction</a>: combine multiple partially signed transactions into one transaction.</li>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-raw-transactions#createrawtransaction\" target=\"\" title=\"\">CreateRawTransaction</a>: creates an unsigned serialized transaction that spends a previous output to a new output with a P2PKH or P2SH address. The transaction is not stored in the wallet or transmitted to the network.</li>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-raw-transactions#decoderawtransaction\" target=\"\" title=\"\">DecodeRawTransaction</a>: decodes a serialized transaction hex string into a JSON object describing the transaction.</li>\n<li><a href=\"#signrawtransactionwithkey\" target=\"\" title=\"\">SignRawTransactionWithKey</a>: signs inputs for a transaction in the serialized transaction format using private keys provided in the call.</li>\n</ul>\n<h1 class=\"heading heading-1 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"signrawtransactionwithkey\"></div><div class=\"heading-text\"><div id=\"section-sign-raw-transaction-with-key\" class=\"heading-anchor_backwardsCompatibility\"></div>SignRawTransactionWithKey</div><a aria-label=\"Skip link to SignRawTransactionWithKey\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#signrawtransactionwithkey\"></a></h1>\n<blockquote class=\"callout callout_okay\" theme=\"\ud83d\udc4d\"><h2 class=\"callout-heading empty\"><span class=\"callout-icon\">\ud83d\udc4d</span></h2><p>Added in Dash Core 0.17.0</p></blockquote>\n<p>The <a href=\"#signrawtransactionwithkey\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">signrawtransactionwithkey</code> RPC</a> signs inputs for a transaction in the serialized transaction format using private keys provided in the call.</p>\n<p><em>Parameter #1---the transaction to sign</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td>Transaction</td><td>string (hex)</td><td>Required<br/>(exactly 1)</td><td>The transaction to sign as a serialized transaction</td></tr></tbody></table></div></div>\n<p><em>Parameter #2---private keys for signing</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td>Private Keys</td><td>array</td><td>Required<br/>(exactly 1)</td><td>An array holding private keys.  If any keys are provided, only they will be used to sign the transaction (even if the wallet has other matching keys).  If this array is empty or not used, and wallet support is enabled, keys from the wallet will be used</td></tr><tr><td>\u2192<br/>Key</td><td>string (base58)</td><td>Required<br/>(1 or more)</td><td>A private key in base58check format to use to create a signature for this transaction</td></tr></tbody></table></div></div>\n<p><em>Parameter #3---unspent transaction output details</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td>Dependencies</td><td>array</td><td>Optional<br/>(0 or 1)</td><td>The previous outputs being spent by this transaction</td></tr><tr><td>\u2192<br/>Output</td><td>object</td><td>Optional<br/>(0 or more)</td><td>An output being spent</td></tr><tr><td>\u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">txid</code></td><td>string (hex)</td><td>Required<br/>(exactly 1)</td><td>The TXID of the transaction the output appeared in.  The TXID must be encoded in hex in RPC byte order</td></tr><tr><td>\u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">vout</code></td><td>number (int)</td><td>Required<br/>(exactly 1)</td><td>The index number of the output (vout) as it appeared in its transaction, with the first output being 0</td></tr><tr><td>\u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">scriptPubKey</code></td><td>string (hex)</td><td>Required<br/>(exactly 1)</td><td>The output&#x27;s pubkey script encoded as hex</td></tr><tr><td>\u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">redeemScript</code></td><td>string (hex)</td><td>Optional<br/>(0 or 1)</td><td>If the pubkey script was a script hash, this must be the corresponding redeem script</td></tr><tr><td>\u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">amount</code></td><td>numeric</td><td>Required<br/>(exactly 1)</td><td>The amount of Dash spent</td></tr></tbody></table></div></div>\n<p><em>Parameter #4---signature hash type</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th style=\"text-align:left\">Name</th><th style=\"text-align:left\">Type</th><th style=\"text-align:left\">Presence</th><th style=\"text-align:left\">Description</th><th style=\"text-align:left\"></th><th style=\"text-align:left\"></th><th style=\"text-align:left\"></th></tr></thead><tbody><tr><td style=\"text-align:left\">SigHash</td><td style=\"text-align:left\">string</td><td style=\"text-align:left\">Optional<br/>(0 or 1)</td><td style=\"text-align:left\">The type of signature hash to use for all of the signatures performed.  (You must use separate calls to the <a href=\"core-api-ref-remote-procedure-calls-raw-transactions#signrawtransactionwithkey\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">signrawtransaction</code> RPC</a> if you want to use different signature hash types for different signatures.  The allowed values are: <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">ALL</code>, <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">NONE</code>, <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">SINGLE</code>, `ALL</td><td style=\"text-align:left\">ANYONECANPAY<button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">, </code>NONE</td><td style=\"text-align:left\">ANYONECANPAY<button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">, and </code>SINGLE</td><td style=\"text-align:left\">ANYONECANPAY`</td></tr></tbody></table></div></div>\n<p><em>Result---the transaction with any signatures made</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">result</code></td><td>object</td><td>Required<br/>(exactly 1)</td><td>The results of the signature</td></tr><tr><td>\u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">hex</code></td><td>string (hex)</td><td>Required<br/>(exactly 1)</td><td>The resulting serialized transaction encoded as hex with any signatures made inserted.  If no signatures were made, this will be the same transaction provided in parameter #1</td></tr><tr><td>\u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">complete</code></td><td>bool</td><td>Required<br/>(exactly 1)</td><td>The value <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">true</code> if transaction is fully signed; the value <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">false</code> if more signatures are required. Once <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">true</code> the transaction can be sent using the <a href=\"#sendrawtransaction\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">sendrawtransaction</code> RPC</a>.</td></tr></tbody></table></div></div>\n<p><em>Example from Dash Core 0.17.0</em></p>\n<p>Sign the raw transaction hex generated from the <a href=\"#createrawtransaction\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">createrawtransaction</code> RPC</a>:</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Bash</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-bash theme-light\" data-lang=\"bash\" name=\"\" tabindex=\"0\">dash-cli -testnet signrawtransactionwithkey 020000000121f39228a11ddf197ac3658e\\\n93bd264d0afd927f0cdfc7caeb760537e529c94a0100000000ffffffff01809698000000000019\\\n76a914fe64a96d6660e30c433e1189082466a95bdf9ceb88ac00000000 \\\n[\\&quot;cSxm6ji1SQ7vF1r8QhcsE1AZ42ZJqs5CEAAnD18iV18ZCQ2u3gGa\\&quot;]\n</code></pre></div></div>\n<p>Result:</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">JSON</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-json theme-light\" data-lang=\"json\" name=\"\" tabindex=\"0\">{\n  &quot;hex&quot;: &quot;020000000121f39228a11ddf197ac3658e93bd264d0afd927f0cdfc7caeb760537e529c94a010000006b483045022100811c5679ef097b0e5a338fc3cd05ee50e1802680ea8a172d0fd3a81da3c1fc2002204804b18a44e888ac1ee9b6a7cbadc211ecdc30f8c889938c95125206e39554220121025d81ce6581e547dd34194385352053abb17f0246768d75443b25ded5e37d594fffffffff0180969800000000001976a914fe64a96d6660e30c433e1189082466a95bdf9ceb88ac00000000&quot;,\n  &quot;complete&quot;: true\n}\n</code></pre></div></div>\n<p><em>See also</em></p>\n<ul>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-raw-transactions#combinerawtransaction\" target=\"\" title=\"\">CombineRawTransaction</a>: combine multiple partially signed transactions into one transaction.</li>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-raw-transactions#createrawtransaction\" target=\"\" title=\"\">CreateRawTransaction</a>: creates an unsigned serialized transaction that spends a previous output to a new output with a P2PKH or P2SH address. The transaction is not stored in the wallet or transmitted to the network.</li>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-raw-transactions#decoderawtransaction\" target=\"\" title=\"\">DecodeRawTransaction</a>: decodes a serialized transaction hex string into a JSON object describing the transaction.</li>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-raw-transactions#sendrawtransaction\" target=\"\" title=\"\">SendRawTransaction</a>: validates a transaction and broadcasts it to the peer-to-peer network.</li>\n</ul>\n<h1 class=\"heading heading-1 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"testmempoolaccept\"></div><div class=\"heading-text\"><div id=\"section-test-mem-pool-accept\" class=\"heading-anchor_backwardsCompatibility\"></div>TestMemPoolAccept</div><a aria-label=\"Skip link to TestMemPoolAccept\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#testmempoolaccept\"></a></h1>\n<p>The <a href=\"core-api-ref-remote-procedure-calls-raw-transactions#testmempoolaccept\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">testmempoolaccept</code> RPC</a> returns the results of mempool acceptance tests indicating if raw transaction (serialized, hex-encoded) would be accepted by mempool.</p>\n<p><em>Parameter #1---raw txs</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">rawtxs</code></td><td>array</td><td>Required<br/>(exactly 1)</td><td>An array of hex strings of raw transactions (the length must be one for now)</td></tr></tbody></table></div></div>\n<p><em>Parameter #2---set max fee rate</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">maxfeerate</code></td><td>number</td><td>Optional<br/>(0 or 1)</td><td>Reject transactions whose fee rate is higher than the specified value, expressed in DASH/kB. Changed from <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">allowhighfees</code> in Dash Core 18.0.0. See <a href=\"https://dashcore.readme.io/v0.17.0/docs/core-api-ref-remote-procedure-calls-raw-transactions#sendrawtransaction\" target=\"\" title=\"\">previous version</a>.</td></tr></tbody></table></div></div>\n<p><em>Result---mempool acceptance test results</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">result</code></td><td>array</td><td>Required<br/>(exactly 1)</td><td>The result of the mempool acceptance test for each raw transaction in the input array.</td></tr><tr><td>\u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">txid</code></td><td>string (hex)</td><td>Required<br/>(exactly 1)</td><td>The TXID of the transaction the output appeared in.  The TXID must be encoded in hex in RPC byte order</td></tr><tr><td>\u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">allowed</code></td><td>bool</td><td>Required<br/>(exactly 1)</td><td>If the mempool allows this tx to be inserted</td></tr><tr><td>\u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">reject-reason</code></td><td>string</td><td>Required<br/>(exactly 1)</td><td>A rejection string that is only present when &#x27;allowed&#x27; is false.</td></tr></tbody></table></div></div>\n<p><em>Example from Dash Core 18.0.0</em></p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Bash</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-bash theme-light\" data-lang=\"bash\" name=\"\" tabindex=\"0\">dash-cli -testnet testmempoolaccept [\\&quot;020000000234a2863f9781a7200330e700e684804bb2407d225c4e940c9cfb772f22fc0748000000006a47304402203b5a7899b6be2f33d30c1a71940c51f38074f4224a1ad6dee03dcc65f8646072022050d711115cd7291c2f094e3a3cfda14441721b1438e406b963b5660274ba4475012103e2fe477e31365d784d98514c7c9294283620d4a9775f01da5d3ba52f4c7286f5feffffff34a2863f9781a7200330e700e684804bb2407d225c4e940c9cfb772f22fc0748010000006a473044022018901985d2c94492111a45ed51bac88e02f1bb4a8382eacf5f474d70878c19f4022046e309e548f95a64b05e8ef70fae0ff86bf83cbed3055591580e0b5f5597c3a2012103109325a92f9e6d31d2ebd0595d471275ae8d635db2a0c42358f387e1af69c14dfeffffff020f530f00000000001976a9145799a5df43d34b05cdf03347af9102b67a6d154a88ac00e1f505000000001976a91464d51a27c8b8434458bac0193039bae55ca023c388ac151c0900\\&quot;]\n</code></pre></div></div>\n<p>Result:</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">JSON</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-json theme-light\" data-lang=\"json\" name=\"\" tabindex=\"0\">[\n  {\n    &quot;txid&quot;: &quot;06464b9c80413a49ab3c618f769a11647b6011f9ad15094eb423916ae5bc0c23&quot;,\n    &quot;allowed&quot;: false,\n    &quot;reject-reason&quot;: &quot;18: txn-already-in-mempool&quot;\n  }\n]\n</code></pre></div></div>\n<p><em>See also</em></p>\n<ul>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-raw-transactions#combinerawtransaction\" target=\"\" title=\"\">CombineRawTransaction</a>: combine multiple partially signed transactions into one transaction.</li>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-raw-transactions#createrawtransaction\" target=\"\" title=\"\">CreateRawTransaction</a>: creates an unsigned serialized transaction that spends a previous output to a new output with a P2PKH or P2SH address. The transaction is not stored in the wallet or transmitted to the network.</li>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-raw-transactions#decoderawtransaction\" target=\"\" title=\"\">DecodeRawTransaction</a>: decodes a serialized transaction hex string into a JSON object describing the transaction.</li>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-raw-transactions#sendrawtransaction\" target=\"\" title=\"\">SendRawTransaction</a>: validates a transaction and broadcasts it to the peer-to-peer network.</li>\n<li><a href=\"#signrawtransactionwithkey\" target=\"\" title=\"\">SignRawTransactionWithKey</a>: signs inputs for a transaction in the serialized transaction format using private keys provided in the call.</li>\n</ul>\n<h1 class=\"heading heading-1 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"utxoupdatepsbt\"></div><div class=\"heading-text\"><div id=\"section-utxo-update-psbt\" class=\"heading-anchor_backwardsCompatibility\"></div>UTXOUpdatePSBT</div><a aria-label=\"Skip link to UTXOUpdatePSBT\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#utxoupdatepsbt\"></a></h1>\n<p>The <a href=\"core-api-ref-remote-procedure-calls-raw-transactions#utxoupdatepsbt\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">utxoupdatepsbt</code> RPC</a> updates a PSBT with  data from output descriptors, UTXOs retrieved from the UTXO set or the mempool.</p>\n<p><em>Parameter #1---psbt</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td>psbt</td><td>string</td><td>Required</td><td>A base64 string of a PSBT</td></tr></tbody></table></div></div>\n<p><em>Parameter #2---descriptors</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td>psbt</td><td>array</td><td>Optional<br/>(0 or 1)</td><td>An array of either strings or objects</td></tr><tr><td>\u2192<br/>Output descriptor</td><td>string</td><td>Optional<br/>(0 or 1)</td><td>An output descriptor</td></tr><tr><td>\u2192<br/>Output object</td><td>object</td><td>Optional<br/>(0 or 1)</td><td>An object with an output descriptor and extra information</td></tr><tr><td>\u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">desc</code></td><td>string</td><td>Required<br/>(exactly 1)</td><td>An output descriptor</td></tr><tr><td>\u2192 \u2192<br/><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">range</code><br/>(<button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">n</code> or <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">[n,n]</code>)</td><td>numeric or array</td><td>Optional<br/>(0 or 1)</td><td>Up to what index HD chains should be explored (either end or [begin,end]) (default=1000)</td></tr></tbody></table></div></div>\n<p><em>Result---the raw transaction in base64</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>Name</th><th>Type</th><th>Presence</th><th>Description</th></tr></thead><tbody><tr><td>Result</td><td>string</td><td>Required<br/>(Exactly 1)</td><td>The resulting raw transaction (base64-encoded string)</td></tr></tbody></table></div></div>\n<p><em>Example from Dash Core 18.0.0</em></p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Bash</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-bash theme-light\" data-lang=\"bash\" name=\"\" tabindex=\"0\">dash-cli -testnet utxoupdatepsbt cHNidP8BAEICAAAAAXgRxzbShUlivVFKgoLyhk0RCCYLZKCYTl/tYRd+yGImAAAAAAD/////AQAAAAAAAAAABmoEAAECAwAAAAAAAAA=\n</code></pre></div></div>\n<p>Result:</p>\n<pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">cHNidP8BAEICAAAAAXgRxzbShUlivVFKgoLyhk0RCCYLZKCYTl/tYRd+yGImAAAAAAD/////AQAAAAAAAAAABmoEAAECAwAAAAAAAAA=\n</code></pre>\n<p><em>See also</em></p>\n<ul>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-raw-transactions#combinepsbt\" target=\"\" title=\"\">CombinePSBT</a>: combine multiple partially-signed Dash transactions into one transaction.</li>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-raw-transactions#converttopsbt\" target=\"\" title=\"\">ConvertToPSBT</a>: converts a network serialized transaction to a PSBT.</li>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-raw-transactions#decodepsbt\" target=\"\" title=\"\">DecodePSBT</a>: returns a JSON object representing the serialized, base64-encoded partially signed Dash transaction.</li>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-raw-transactions#finalizepsbt\" target=\"\" title=\"\">FinalizePSBT</a>: finalizes the inputs of a PSBT.</li>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-wallet#walletcreatefundedpsbt\" target=\"\" title=\"\">WalletCreateFundedPSBT</a>: creates and funds a transaction in the Partially Signed Transaction (PST) format.</li>\n<li><a href=\"/docs/core-api-ref-remote-procedure-calls-wallet#walletprocesspsbt\" target=\"\" title=\"\">WalletProcessPSBT</a>: updates a PSBT with input information from a wallet and then allows the signing of inputs.</li>\n</ul>"
}