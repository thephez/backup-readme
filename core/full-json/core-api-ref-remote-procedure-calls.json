{
 "metadata": {
  "image": [],
  "title": "Dash Core RPC",
  "description": "Dash Core provides an RPC interface for various administrative tasks, wallet operations, and queries about network and blockchain data.",
  "keywords": "",
  "robots": "index"
 },
 "api": {
  "method": "get",
  "url": "",
  "auth": "required",
  "results": {
   "codes": [
    {
     "status": 200,
     "language": "json",
     "code": "{}",
     "name": ""
    },
    {
     "status": 400,
     "language": "json",
     "code": "{}",
     "name": ""
    }
   ]
  },
  "params": []
 },
 "next": {
  "description": "",
  "pages": [
   {
    "type": "doc",
    "icon": "file-text-o",
    "name": "Quick Reference",
    "slug": "core-api-ref-remote-procedure-call-quick-reference",
    "category": "Core API Reference"
   }
  ]
 },
 "algolia": {
  "recordCount": 15,
  "publishPending": false,
  "translationFailure": false,
  "updatedAt": "2023-03-14T20:52:32.301Z"
 },
 "title": "Remote Procedure Calls",
 "icon": "",
 "updates": [],
 "type": "basic",
 "slug": "core-api-ref-remote-procedure-calls",
 "excerpt": "Dash Core RPC Information",
 "body": "# Overview\n\nDash Core provides a remote procedure call (RPC) interface for various administrative tasks, <<glossary:wallet>> operations, and queries about <<glossary:network>> and <<glossary:block chain>> data.\n\nOpen-source client libraries for the RPC interface are readily available in most modern programming languages, so you probably don't need to write your own from scratch. Dash Core also ships with its own compiled C++ RPC client, `dash-cli`, located in the `bin` directory alongside `dashd` and `dash-qt`. The `dash-cli` program can be used as a command-line interface (CLI) to Dash Core or for making RPC calls from applications written in languages lacking a suitable native client. The remainder of this section describes the Dash Core RPC protocol in detail.\n\n> \ud83d\udcd8 Dash Core Configuration\n>\n> The following subsections reference setting configuration values. See the [Examples Page](core-examples-introduction) for more information about setting Dash Core configuration values.\n\n## Enabling RPC\n\nIf you start Dash Core using `dash-qt`, the RPC interface is disabled by default. To enable it, set `server=1` in `dash.conf` or supply the `-server` argument when invoking the program. If you start Dash Core using `dashd`, the RPC interface is enabled by default.\n\n## Basic Security\n\nThe interface requires the user to provide a password for authenticating RPC requests. This password can be set either using the `rpcpassword` property in `dash.conf` or by supplying the `-rpcpassword` program argument. Optionally a username can be set using the `rpcuser` configuration value. \n\n## RPC-Auth Security\n\nAlternatively, the authentication details can be provided using the `rpcauth` property. This removes the need to include a plaintext password in the dash.conf file by instead including a salt and hash of the password along with a username in the format:\n`<USERNAME>:<SALT>$<HASH>`\n\n``` shell\n# Example dash.conf rpcauth entry\nrpcauth=myuser:933fff1aaefa1fc5b3e981fd3ceacf03$f799757c0d36be8f1faa1dd3a01562b17ada82f2ff6c968c959103afda9e7c6f\n```\n\n> \ud83d\udcd8 \n>\n> The `rpcauth` option can be specified multiple times if multiple users are required.\n\nA canonical python script is included in Dash Core's repository under [share/rpcuser](https://github.com/dashpay/dash/tree/master/share/rpcauth) to generate the information required for the dash.conf file as well as the password required by clients using the rpcauth name.\n\n``` text\nString to be appended to dash.conf:\nrpcauth=myuser:b87393f6957f80448f8a0aba5eb8cc00$f67a3321106b13acc2a8881c9eb64e7bbc6eeb4681261b2918cc54da8915be6e\nYour password:\n2-Cl0O92-MT-XavyEIkkV_hxqdC_7fag8w7EF7t3UVg=\n```\n\n## RPC Whitelist\n\nThe RPC whitelist system can limit certain RPC users to only have access to some RPC calls. The system is configured by specifying the following two parameters in the `dash.conf` file or by setting them as program arguments on the command line:\n\n - `rpcwhitelist`: set a whitelist to filter incoming RPC calls for a specific user. The field <whitelist> comes in the format: `<USERNAME>:<rpc 1>,<rpc 2>,...,<rpc n>`. If multiple whitelists are set for a given user, they are set-intersected. Default whitelist behavior is defined by `rpcwhitelistdefault`.\n- `rpcwhitelistdefault`: sets default behavior for RPC whitelisting. Unless `rpcwhitelistdefault` is set to `0`, if any `rpcwhitelist` is set, the RPC server acts as if all RPC users are subject to empty-unless-otherwise-specified whitelists. If `rpcwhitelistdefault` is set to `1` and no `rpcwhitelist` is set, the RPC server acts as if all RPC users are subject to empty whitelists.\n\nExample configuration\n\n```text\nrpcauth=user1:4cc74397d6e9972e5ee7671fd241$11849357f26a5be7809c68a032bc2b16ab5dcf6348ef3ed1cf30dae47b8bcc71\nrpcauth=user2:181b4a25317bff60f3749adee7d6bca0$d9c331474f1322975fa170a2ffbcb176ba11644211746b27c1d317f265dd4ada\nrpcauth=user3:a6c8a511b53b1edcf69c36984985e$13cfba0e626db19061c9d61fa58e712d0319c11db97ad845fa84517f454f6675\nrpcwhitelist=user1:getnetworkinfo\nrpcwhitelist=user2:getnetworkinfo,getwalletinfo, getbestblockhash\n\n# Allow users to access any RPC unless they are listed in an `rpcwhitelist` entry\nrpcwhitelistdefault=0\n```\n\nIn this example, user1 can only call `getnetworkinfo`, user2 can only call `getnetworkinfo` or `getwalletinfo`, while user3 can still call all RPCs.\n\n## Restricted Access Users\n\n> \ud83d\udea7 \n>\n> This feature is only available on masternodes\n\nAs of Dash Core 0.17.0, an option is provided to add an RPC user that is restricted to a small subset of RPCs that will be used by Dash Platform. The `platform-user` configuration value sets the name of the RPC user to be restricted.\n\nThe `platform-user` configuration value must be set to a previously configured [rpcauth user](#rpc-auth-security).\n\nOnly the following RPCs are accessible to the restricted user:\n- [`getbestblockhash`](core-api-ref-remote-procedure-calls-blockchain#getbestblockhash)\n- [`getblockhash`](core-api-ref-remote-procedure-calls-blockchain#getblockhash)\n- [`getblockcount`](core-api-ref-remote-procedure-calls-blockchain#getblockcount)\n- [`getbestchainlock`](core-api-ref-remote-procedure-calls-blockchain#getbestchainlock)\n- [`quorum sign 4`](core-api-ref-remote-procedure-calls-evo#quorum-sign) - The restricted user can only request quorum signatures from the Platform quorum (LLMQ type 4)\n- [`quorum verify`](core-api-ref-remote-procedure-calls-evo#quorum-verify)\n- [`verifyislock`](core-api-ref-remote-procedure-calls-evo#verifyislock)\n\n## Default Connection Info\n\nThe Dash Core RPC service listens for HTTP `POST` requests on port 9998 in <<glossary:mainnet>> mode, 19998 in <<glossary:testnet>>, or 19898 in <<glossary:regression test mode>>. The port number can be changed by setting `rpcport` in `dash.conf`. By default the RPC service binds to your server's [localhost](https://en.wikipedia.org/wiki/Localhost) loopback network interface so it's not accessible from other servers. Authentication is implemented using [HTTP basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication). RPC HTTP requests must include a `Content-Type` header set to `text/plain` and a `Content-Length` header set to the size of the request body.\n\n# Data Formats\n\nThe format of the request body and response data is based on [version 1.0 of the JSON-RPC specification](http://json-rpc.org/wiki/specification). \n\n## Request Format\n\nSpecifically, the HTTP `POST` data of a request must be a JSON object with the following format:\n\n| Name                 | Type            | Presence                    | Description\n|----------------------|-----------------|-----------------------------|----------------\n| Request              | object          | Required<br>(exactly 1)     | The JSON-RPC request object\n| \u2192 <br>`jsonrpc`      | number (real)   | Optional<br>(0 or 1)        | Version indicator for the JSON-RPC request. Currently ignored by Dash Core.\n| \u2192 <br>`id`           | string          | Optional<br>(0 or 1)        | An arbitrary string that will be returned with the response.  May be omitted or set to an empty string (\"\")\n| \u2192 <br>`method`       | string          | Required<br>(exactly 1)     | The RPC method name (e.g. `getblock`).  See the RPC section for a list of available methods.\n| \u2192 <br>`params`       | array           | Optional<br>(0 or 1)        | An array containing positional parameter values for the RPC.  May be an empty array or omitted for RPC calls that don't have any required parameters.\n| \u2192 <br>`params`       | object           | Optional<br>(0 or 1)        | Starting from Dash Core 0.12.3 / Bitcoin Core 0.14.0 (replaces the params array above) An object containing named parameter values for the RPC. May be an empty object or omitted for RPC calls that don\u2019t have any required parameters.\n| \u2192 \u2192 <br>Parameter    | *any*           | Optional<br>(0 or more)       | A parameter.  May be any JSON type allowed by the particular RPC method\n\nIn the table above and in other tables describing RPC input and output, we use the following conventions\n\n* \"\u2192\" indicates an argument that is the child of a JSON array or JSON object. For example, \"\u2192 \u2192 Parameter\" above means Parameter is the child of the `params` array which itself is a child of the Request object.\n\n* Plain-text names like \"Request\" are unnamed in the actual JSON object\n\n* Code-style names like `params` are literal strings that appear in the JSON object.\n\n* \"Type\" is the JSON data type and the specific Dash Core type.\n\n* \"Presence\" indicates whether or not a field must be present within its containing array or object. Note that an optional object may still have required children.\n\n## Response Format\n\nThe HTTP response data for a RPC request is a JSON object with the following format:\n\n| Name                 | Type            | Presence                    | Description\n|----------------------|-----------------|-----------------------------|----------------\n| Response             | object          | Required<br>(exactly 1)     | The JSON-RPC response object.\n| \u2192 <br>`result`       | *any*           | Required<br>(exactly 1)     | The RPC output whose type varies by call.  Has value `null` if an error occurred.\n| \u2192 <br>`error`        | null/object     | Required<br>(exactly 1)     | An object describing the error if one occurred, otherwise `null`.\n| \u2192 \u2192 <br>`code`        | number (int)    | Required<br>(exactly 1)     | The error code returned by the RPC function call. See [rpcprotocol.h](https://github.com/dashpay/dash/blob/v0.15.x/src/rpc/protocol.h) for a full list of error codes and their meanings.\n| \u2192 \u2192 <br>`message`     | string          | Required<br>(exactly 1)     | A text description of the error.  May be an empty string (\"\").\n| \u2192 <br>`id`           | string          | Required<br>(exactly 1)     | The value of `id` provided with the request. Has value `null` if the `id` field was omitted in the request.\n\n# Example\n\nAs an example, here is the JSON-RPC request object for the hash of the <<glossary:genesis block>>:\n\n```json\n{\n    \"method\": \"getblockhash\",\n    \"params\": [0],\n    \"id\": \"foo\"\n}\n```\n\nThe command to send this request using `dash-cli` is:\n\n```shell Shell\ndash-cli getblockhash 0\n```\n\nThe command to send this request using `dash-cli` with named parameters is:\n\n```shell Shell\ndash-cli -named getblockhash height=0\n```\n\nAlternatively, we could `POST` this request using the cURL command-line program as follows:\n\n```shell Shell\ncurl --user 'my_username:my_secret_password' --data-binary '''\n  {\n      \"method\": \"getblockhash\",\n      \"params\": [0],\n      \"id\": \"foo\"\n  }''' \\\n  --header 'Content-Type: text/plain;' localhost:9998\n```\n\nThe HTTP response data for this request would be:\n\n```json\n{\n    \"result\": \"00000bafbc94add76cb75e2ec92894837288a481e5c005f6563d91623bf8bc2c\",\n    \"error\": null,\n    \"id\": \"foo\"\n}\n```\n\n> \ud83d\udcd8 \n>\n> Note: In order to minimize its size, the raw JSON response from Dash Core doesn't include any extraneous whitespace characters.\n\nHere whitespace has been added to make the object more readable. `dash-cli` also transforms the raw response to make it more human-readable. It:\n\n- Adds whitespace indentation to JSON objects\n- Expands escaped newline characters (\"\\n\") into actual newlines\n- Returns only the value of the `result` field if there's no error\n- Strips the outer double-quotes around `result`s of type string\n- Returns only the `error` field if there's an error\n\nContinuing with the example above, the output from the `dash-cli` command would be simply:\n\n```text\n00000bafbc94add76cb75e2ec92894837288a481e5c005f6563d91623bf8bc2c\n```\n\n## RPCs with sub-commands\n\nDash Core has a number of RPC requests that use sub-commands to group access to related data under one RPC method name. Examples of this include the [`gobject`](core-api-ref-remote-procedure-calls-dash#gobject), [`masternode`](core-api-ref-remote-procedure-calls-dash#masternode), [`protx`](core-api-ref-remote-procedure-calls-evo#protx), and [`quorum`](core-api-ref-remote-procedure-calls-evo#quorum) RPCs. If using cURL, the sub-commands should be included in the requests `params` field as shown here:\n\n```shell \ncurl --user 'my_username:my_secret_password' --data-binary '''\n  {\n      \"method\": \"gobject\",\n      \"params\": [\"list\", \"valid\", \"proposals\"],\n      \"id\": \"foo\"\n  }''' \\\n  --header 'Content-Type: text/plain;' localhost:9998\n```\n\n## Multi-wallet Support\n\n> \ud83d\udc4d\n>\n> Introduced in Dash Core 18.0\n\nSince Dash Core 18.0 introduced the ability to have multiple wallets loaded at the same time, wallet-related RPCs require using the `-rpcwallet` option when more than one wallet file is loaded. This is to ensure the RPC command is executed using the correct wallet. Pass the filename of the wallet to be acted on using the following syntax is:\n\n```shell\ndash-cli -rpcwallet=<wallet-filename> <command>\n```\n\nTo use the default wallet, use `\"\"` for the wallet filename as shown in the example below:\n\n```shell\ndash-cli -rpcwallet=\"\" getwalletinfo\n```\n\n## Error Handling\n\nIf there's an error processing a request, Dash Core sets the `result` field to `null` and provides information about the error in the  `error` field. For example, a request for the block hash at block height -1 would be met with the following response (again, whitespace added for clarity):\n\n```json\n{\n    \"result\": null,\n    \"error\": {\n        \"code\": -8,\n        \"message\": \"Block height out of range\"\n    },\n    \"id\": \"foo\"\n}\n```\n\nIf `dash-cli` encounters an error, it exits with a non-zero status code and outputs the `error` field as text to the process's standard error stream:\n\n```text\nerror code: -8\nerror message:\nBlock height out of range\n```\n\n## Batch Requests\n\nThe RPC interface supports request batching as described in [version 2.0 of the JSON-RPC specification](http://www.jsonrpc.org/specification#batch). To initiate multiple RPC requests within a single HTTP request, a client can `POST` a JSON array filled with Request objects. The HTTP response data is then a JSON array filled with the corresponding Response objects. Depending on your usage pattern, request batching may provide significant performance gains. The `dash-cli` RPC client does not support batch requests.\n\n```shell \ncurl --user 'my_username:my_secret_password' --data-binary '''\n  [\n    {\n      \"method\": \"getblockhash\",\n      \"params\": [0],\n      \"id\": \"foo\"\n    },\n    {\n      \"method\": \"getblockhash\",\n      \"params\": [1],\n      \"id\": \"foo2\"\n    }\n  ]''' \\\n  --header 'Content-Type: text/plain;' localhost:9998\n```\n\nTo keep this documentation compact and readable, the examples for each of the available RPC calls will be given as `dash-cli` commands:\n\n```shell\ndash-cli [options] <method name> <param1> <param2> ...\n```\n\nThis translates into an JSON-RPC Request object of the form:\n\n```json\n{\n    \"method\": \"<method name>\",\n    \"params\": [ \"<param1>\", \"<param2>\", \"...\" ],\n    \"id\": \"foo\"\n}\n```\n\n> \ud83d\udea7 High-precision real numbers\n>\n> **Warning:** if you write programs using the JSON-RPC interface, you must ensure they handle high-precision real numbers correctly.  See the [Proper Money Handling](https://en.bitcoin.it/wiki/Proper_Money_Handling_%28JSON-RPC%29) Bitcoin Wiki article for details and example code.",
 "order": 1,
 "isReference": false,
 "deprecated": false,
 "hidden": false,
 "sync_unique": "",
 "link_url": "",
 "link_external": false,
 "reusableContent": [],
 "previousSlug": "",
 "slugUpdatedAt": "2020-11-09T10:19:48.850Z",
 "revision": 44,
 "_id": "63f5176df91c7700118e77dc",
 "version": "63f5176df91c7700118e7825",
 "updatedAt": "2023-03-14T20:52:31.871Z",
 "createdAt": "2019-10-24T19:40:29.366Z",
 "project": "5daf2e65f4109c0040fd51e1",
 "user": "5b8400d7185d5e00036dcc3b",
 "category": "63f5176df91c7700118e77a1",
 "__v": 1,
 "parentDoc": null,
 "pendingAlgoliaPublish": false,
 "isApi": false,
 "id": "63f5176df91c7700118e77dc",
 "body_html": "# Overview\n\nDash Core provides a remote procedure call (RPC) interface for various administrative tasks, <<glossary:wallet>> operations, and queries about <<glossary:network>> and <<glossary:block chain>> data.\n\nOpen-source client libraries for the RPC interface are readily available in most modern programming languages, so you probably don't need to write your own from scratch. Dash Core also ships with its own compiled C++ RPC client, `dash-cli`, located in the `bin` directory alongside `dashd` and `dash-qt`. The `dash-cli` program can be used as a command-line interface (CLI) to Dash Core or for making RPC calls from applications written in languages lacking a suitable native client. The remainder of this section describes the Dash Core RPC protocol in detail.\n\n> \ud83d\udcd8 Dash Core Configuration\n>\n> The following subsections reference setting configuration values. See the [Examples Page](core-examples-introduction) for more information about setting Dash Core configuration values.\n\n## Enabling RPC\n\nIf you start Dash Core using `dash-qt`, the RPC interface is disabled by default. To enable it, set `server=1` in `dash.conf` or supply the `-server` argument when invoking the program. If you start Dash Core using `dashd`, the RPC interface is enabled by default.\n\n## Basic Security\n\nThe interface requires the user to provide a password for authenticating RPC requests. This password can be set either using the `rpcpassword` property in `dash.conf` or by supplying the `-rpcpassword` program argument. Optionally a username can be set using the `rpcuser` configuration value. \n\n## RPC-Auth Security\n\nAlternatively, the authentication details can be provided using the `rpcauth` property. This removes the need to include a plaintext password in the dash.conf file by instead including a salt and hash of the password along with a username in the format:\n`<USERNAME>:<SALT>$<HASH>`\n\n``` shell\n# Example dash.conf rpcauth entry\nrpcauth=myuser:933fff1aaefa1fc5b3e981fd3ceacf03$f799757c0d36be8f1faa1dd3a01562b17ada82f2ff6c968c959103afda9e7c6f\n```\n\n> \ud83d\udcd8 \n>\n> The `rpcauth` option can be specified multiple times if multiple users are required.\n\nA canonical python script is included in Dash Core's repository under [share/rpcuser](https://github.com/dashpay/dash/tree/master/share/rpcauth) to generate the information required for the dash.conf file as well as the password required by clients using the rpcauth name.\n\n``` text\nString to be appended to dash.conf:\nrpcauth=myuser:b87393f6957f80448f8a0aba5eb8cc00$f67a3321106b13acc2a8881c9eb64e7bbc6eeb4681261b2918cc54da8915be6e\nYour password:\n2-Cl0O92-MT-XavyEIkkV_hxqdC_7fag8w7EF7t3UVg=\n```\n\n## RPC Whitelist\n\nThe RPC whitelist system can limit certain RPC users to only have access to some RPC calls. The system is configured by specifying the following two parameters in the `dash.conf` file or by setting them as program arguments on the command line:\n\n - `rpcwhitelist`: set a whitelist to filter incoming RPC calls for a specific user. The field <whitelist> comes in the format: `<USERNAME>:<rpc 1>,<rpc 2>,...,<rpc n>`. If multiple whitelists are set for a given user, they are set-intersected. Default whitelist behavior is defined by `rpcwhitelistdefault`.\n- `rpcwhitelistdefault`: sets default behavior for RPC whitelisting. Unless `rpcwhitelistdefault` is set to `0`, if any `rpcwhitelist` is set, the RPC server acts as if all RPC users are subject to empty-unless-otherwise-specified whitelists. If `rpcwhitelistdefault` is set to `1` and no `rpcwhitelist` is set, the RPC server acts as if all RPC users are subject to empty whitelists.\n\nExample configuration\n\n```text\nrpcauth=user1:4cc74397d6e9972e5ee7671fd241$11849357f26a5be7809c68a032bc2b16ab5dcf6348ef3ed1cf30dae47b8bcc71\nrpcauth=user2:181b4a25317bff60f3749adee7d6bca0$d9c331474f1322975fa170a2ffbcb176ba11644211746b27c1d317f265dd4ada\nrpcauth=user3:a6c8a511b53b1edcf69c36984985e$13cfba0e626db19061c9d61fa58e712d0319c11db97ad845fa84517f454f6675\nrpcwhitelist=user1:getnetworkinfo\nrpcwhitelist=user2:getnetworkinfo,getwalletinfo, getbestblockhash\n\n# Allow users to access any RPC unless they are listed in an `rpcwhitelist` entry\nrpcwhitelistdefault=0\n```\n\nIn this example, user1 can only call `getnetworkinfo`, user2 can only call `getnetworkinfo` or `getwalletinfo`, while user3 can still call all RPCs.\n\n## Restricted Access Users\n\n> \ud83d\udea7 \n>\n> This feature is only available on masternodes\n\nAs of Dash Core 0.17.0, an option is provided to add an RPC user that is restricted to a small subset of RPCs that will be used by Dash Platform. The `platform-user` configuration value sets the name of the RPC user to be restricted.\n\nThe `platform-user` configuration value must be set to a previously configured [rpcauth user](#rpc-auth-security).\n\nOnly the following RPCs are accessible to the restricted user:\n- [`getbestblockhash`](core-api-ref-remote-procedure-calls-blockchain#getbestblockhash)\n- [`getblockhash`](core-api-ref-remote-procedure-calls-blockchain#getblockhash)\n- [`getblockcount`](core-api-ref-remote-procedure-calls-blockchain#getblockcount)\n- [`getbestchainlock`](core-api-ref-remote-procedure-calls-blockchain#getbestchainlock)\n- [`quorum sign 4`](core-api-ref-remote-procedure-calls-evo#quorum-sign) - The restricted user can only request quorum signatures from the Platform quorum (LLMQ type 4)\n- [`quorum verify`](core-api-ref-remote-procedure-calls-evo#quorum-verify)\n- [`verifyislock`](core-api-ref-remote-procedure-calls-evo#verifyislock)\n\n## Default Connection Info\n\nThe Dash Core RPC service listens for HTTP `POST` requests on port 9998 in <<glossary:mainnet>> mode, 19998 in <<glossary:testnet>>, or 19898 in <<glossary:regression test mode>>. The port number can be changed by setting `rpcport` in `dash.conf`. By default the RPC service binds to your server's [localhost](https://en.wikipedia.org/wiki/Localhost) loopback network interface so it's not accessible from other servers. Authentication is implemented using [HTTP basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication). RPC HTTP requests must include a `Content-Type` header set to `text/plain` and a `Content-Length` header set to the size of the request body.\n\n# Data Formats\n\nThe format of the request body and response data is based on [version 1.0 of the JSON-RPC specification](http://json-rpc.org/wiki/specification). \n\n## Request Format\n\nSpecifically, the HTTP `POST` data of a request must be a JSON object with the following format:\n\n| Name                 | Type            | Presence                    | Description\n|----------------------|-----------------|-----------------------------|----------------\n| Request              | object          | Required<br>(exactly 1)     | The JSON-RPC request object\n| \u2192 <br>`jsonrpc`      | number (real)   | Optional<br>(0 or 1)        | Version indicator for the JSON-RPC request. Currently ignored by Dash Core.\n| \u2192 <br>`id`           | string          | Optional<br>(0 or 1)        | An arbitrary string that will be returned with the response.  May be omitted or set to an empty string (\"\")\n| \u2192 <br>`method`       | string          | Required<br>(exactly 1)     | The RPC method name (e.g. `getblock`).  See the RPC section for a list of available methods.\n| \u2192 <br>`params`       | array           | Optional<br>(0 or 1)        | An array containing positional parameter values for the RPC.  May be an empty array or omitted for RPC calls that don't have any required parameters.\n| \u2192 <br>`params`       | object           | Optional<br>(0 or 1)        | Starting from Dash Core 0.12.3 / Bitcoin Core 0.14.0 (replaces the params array above) An object containing named parameter values for the RPC. May be an empty object or omitted for RPC calls that don\u2019t have any required parameters.\n| \u2192 \u2192 <br>Parameter    | *any*           | Optional<br>(0 or more)       | A parameter.  May be any JSON type allowed by the particular RPC method\n\nIn the table above and in other tables describing RPC input and output, we use the following conventions\n\n* \"\u2192\" indicates an argument that is the child of a JSON array or JSON object. For example, \"\u2192 \u2192 Parameter\" above means Parameter is the child of the `params` array which itself is a child of the Request object.\n\n* Plain-text names like \"Request\" are unnamed in the actual JSON object\n\n* Code-style names like `params` are literal strings that appear in the JSON object.\n\n* \"Type\" is the JSON data type and the specific Dash Core type.\n\n* \"Presence\" indicates whether or not a field must be present within its containing array or object. Note that an optional object may still have required children.\n\n## Response Format\n\nThe HTTP response data for a RPC request is a JSON object with the following format:\n\n| Name                 | Type            | Presence                    | Description\n|----------------------|-----------------|-----------------------------|----------------\n| Response             | object          | Required<br>(exactly 1)     | The JSON-RPC response object.\n| \u2192 <br>`result`       | *any*           | Required<br>(exactly 1)     | The RPC output whose type varies by call.  Has value `null` if an error occurred.\n| \u2192 <br>`error`        | null/object     | Required<br>(exactly 1)     | An object describing the error if one occurred, otherwise `null`.\n| \u2192 \u2192 <br>`code`        | number (int)    | Required<br>(exactly 1)     | The error code returned by the RPC function call. See [rpcprotocol.h](https://github.com/dashpay/dash/blob/v0.15.x/src/rpc/protocol.h) for a full list of error codes and their meanings.\n| \u2192 \u2192 <br>`message`     | string          | Required<br>(exactly 1)     | A text description of the error.  May be an empty string (\"\").\n| \u2192 <br>`id`           | string          | Required<br>(exactly 1)     | The value of `id` provided with the request. Has value `null` if the `id` field was omitted in the request.\n\n# Example\n\nAs an example, here is the JSON-RPC request object for the hash of the <<glossary:genesis block>>:\n\n```json\n{\n    \"method\": \"getblockhash\",\n    \"params\": [0],\n    \"id\": \"foo\"\n}\n```\n\nThe command to send this request using `dash-cli` is:\n\n```shell Shell\ndash-cli getblockhash 0\n```\n\nThe command to send this request using `dash-cli` with named parameters is:\n\n```shell Shell\ndash-cli -named getblockhash height=0\n```\n\nAlternatively, we could `POST` this request using the cURL command-line program as follows:\n\n```shell Shell\ncurl --user 'my_username:my_secret_password' --data-binary '''\n  {\n      \"method\": \"getblockhash\",\n      \"params\": [0],\n      \"id\": \"foo\"\n  }''' \\\n  --header 'Content-Type: text/plain;' localhost:9998\n```\n\nThe HTTP response data for this request would be:\n\n```json\n{\n    \"result\": \"00000bafbc94add76cb75e2ec92894837288a481e5c005f6563d91623bf8bc2c\",\n    \"error\": null,\n    \"id\": \"foo\"\n}\n```\n\n> \ud83d\udcd8 \n>\n> Note: In order to minimize its size, the raw JSON response from Dash Core doesn't include any extraneous whitespace characters.\n\nHere whitespace has been added to make the object more readable. `dash-cli` also transforms the raw response to make it more human-readable. It:\n\n- Adds whitespace indentation to JSON objects\n- Expands escaped newline characters (\"\\n\") into actual newlines\n- Returns only the value of the `result` field if there's no error\n- Strips the outer double-quotes around `result`s of type string\n- Returns only the `error` field if there's an error\n\nContinuing with the example above, the output from the `dash-cli` command would be simply:\n\n```text\n00000bafbc94add76cb75e2ec92894837288a481e5c005f6563d91623bf8bc2c\n```\n\n## RPCs with sub-commands\n\nDash Core has a number of RPC requests that use sub-commands to group access to related data under one RPC method name. Examples of this include the [`gobject`](core-api-ref-remote-procedure-calls-dash#gobject), [`masternode`](core-api-ref-remote-procedure-calls-dash#masternode), [`protx`](core-api-ref-remote-procedure-calls-evo#protx), and [`quorum`](core-api-ref-remote-procedure-calls-evo#quorum) RPCs. If using cURL, the sub-commands should be included in the requests `params` field as shown here:\n\n```shell \ncurl --user 'my_username:my_secret_password' --data-binary '''\n  {\n      \"method\": \"gobject\",\n      \"params\": [\"list\", \"valid\", \"proposals\"],\n      \"id\": \"foo\"\n  }''' \\\n  --header 'Content-Type: text/plain;' localhost:9998\n```\n\n## Multi-wallet Support\n\n> \ud83d\udc4d\n>\n> Introduced in Dash Core 18.0\n\nSince Dash Core 18.0 introduced the ability to have multiple wallets loaded at the same time, wallet-related RPCs require using the `-rpcwallet` option when more than one wallet file is loaded. This is to ensure the RPC command is executed using the correct wallet. Pass the filename of the wallet to be acted on using the following syntax is:\n\n```shell\ndash-cli -rpcwallet=<wallet-filename> <command>\n```\n\nTo use the default wallet, use `\"\"` for the wallet filename as shown in the example below:\n\n```shell\ndash-cli -rpcwallet=\"\" getwalletinfo\n```\n\n## Error Handling\n\nIf there's an error processing a request, Dash Core sets the `result` field to `null` and provides information about the error in the  `error` field. For example, a request for the block hash at block height -1 would be met with the following response (again, whitespace added for clarity):\n\n```json\n{\n    \"result\": null,\n    \"error\": {\n        \"code\": -8,\n        \"message\": \"Block height out of range\"\n    },\n    \"id\": \"foo\"\n}\n```\n\nIf `dash-cli` encounters an error, it exits with a non-zero status code and outputs the `error` field as text to the process's standard error stream:\n\n```text\nerror code: -8\nerror message:\nBlock height out of range\n```\n\n## Batch Requests\n\nThe RPC interface supports request batching as described in [version 2.0 of the JSON-RPC specification](http://www.jsonrpc.org/specification#batch). To initiate multiple RPC requests within a single HTTP request, a client can `POST` a JSON array filled with Request objects. The HTTP response data is then a JSON array filled with the corresponding Response objects. Depending on your usage pattern, request batching may provide significant performance gains. The `dash-cli` RPC client does not support batch requests.\n\n```shell \ncurl --user 'my_username:my_secret_password' --data-binary '''\n  [\n    {\n      \"method\": \"getblockhash\",\n      \"params\": [0],\n      \"id\": \"foo\"\n    },\n    {\n      \"method\": \"getblockhash\",\n      \"params\": [1],\n      \"id\": \"foo2\"\n    }\n  ]''' \\\n  --header 'Content-Type: text/plain;' localhost:9998\n```\n\nTo keep this documentation compact and readable, the examples for each of the available RPC calls will be given as `dash-cli` commands:\n\n```shell\ndash-cli [options] <method name> <param1> <param2> ...\n```\n\nThis translates into an JSON-RPC Request object of the form:\n\n```json\n{\n    \"method\": \"<method name>\",\n    \"params\": [ \"<param1>\", \"<param2>\", \"...\" ],\n    \"id\": \"foo\"\n}\n```\n\n> \ud83d\udea7 High-precision real numbers\n>\n> **Warning:** if you write programs using the JSON-RPC interface, you must ensure they handle high-precision real numbers correctly.  See the [Proper Money Handling](https://en.bitcoin.it/wiki/Proper_Money_Handling_%28JSON-RPC%29) Bitcoin Wiki article for details and example code."
}