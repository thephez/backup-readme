{
 "metadata": {
  "keywords": "",
  "robots": "index",
  "description": "In the section above, we retrieved a merkle block from the network; now we will parse it. Most of the block header has been omitted.",
  "title": "Parsing A MerkleBlock",
  "image": []
 },
 "mdx": {
  "altBody": "",
  "status": "rdmd"
 },
 "api": {
  "results": {
   "codes": [
    {
     "status": 200,
     "language": "json",
     "code": "{}",
     "name": ""
    },
    {
     "status": 400,
     "language": "json",
     "code": "{}",
     "name": ""
    }
   ]
  },
  "auth": "required",
  "params": [],
  "url": "",
  "method": "get"
 },
 "next": {
  "pages": [],
  "description": ""
 },
 "algolia": {
  "translationFailure": false,
  "publishPending": false,
  "recordCount": 1,
  "updatedAt": "2023-02-21T19:15:50.546Z"
 },
 "reusableContent": [],
 "_id": "63f5176df91c7700118e77d4",
 "version": "63f5176df91c7700118e7825",
 "updatedAt": "2020-05-28T20:29:25.572Z",
 "createdAt": "2019-10-24T14:52:51.162Z",
 "project": "5daf2e65f4109c0040fd51e1",
 "parentDoc": "63f5176df91c7700118e77cb",
 "user": "62b2101422da70001ee51d95",
 "category": "63f5176df91c7700118e77a0",
 "updates": [],
 "link_external": false,
 "link_url": "",
 "sync_unique": "",
 "hidden": false,
 "isReference": false,
 "order": 4,
 "body": "In the section above, we retrieved a <<glossary:merkle block>> from the network; now we will parse it. Most of the <<glossary:block header>> has been omitted. For a more complete hexdump, see the example in the [`merkleblock` message section](core-ref-p2p-network-data-messages#merkleblock).\n\n``` text\n7f16c5962e8bd963659c793ce370d95f\n093bc7e367117b3c30c1f8fdd0d97287 ... Merkle root\n\n07000000 ........................... Transaction count: 7\n04 ................................. Hash count: 4\n\n3612262624047ee87660be1a707519a4\n43b1c1ce3d248cbfc6c15870f6c5daa2 ... Hash #1\n019f5b01d4195ecbc9398fbf3c3b1fa9\nbb3183301d7a1fb3bd174fcfa40a2b65 ... Hash #2\n41ed70551dd7e841883ab8f0b16bf041\n76b7d1480e4f0af9f3d4c3595768d068 ... Hash #3\n20d2a7bc994987302e5b1ac80fc425fe\n25f8b63169ea78e68fbaaefa59379bbf ... Hash #4\n\n01 ................................. Flag bytes: 1\n1d ................................. Flags: 1 0 1 1 1 0 0 0\n```\n\nWe parse the above [`merkleblock` message](core-ref-p2p-network-data-messages#merkleblock) using the following instructions.  Each illustration is described in the paragraph below it.\n\n![Parsing A MerkleBlock](https://dash-docs.github.io/img/dev/gifs/en-merkleblock-parsing/en-merkleblock-parsing-001.svg)\n\nWe start by building the structure of a <<glossary:merkle tree>> based on the number of <<glossary:transactions>> in the <<glossary:block>>.\n\n![Parsing A MerkleBlock](https://dash-docs.github.io/img/dev/gifs/en-merkleblock-parsing/en-merkleblock-parsing-002.svg)\n\nThe first flag is a 1 and the <<glossary:merkle root>> is (as always) a non-TXID node, so we will need to compute the hash later based on this node's children. Accordingly, we descend into the merkle root's left child and look at the next flag for instructions.\n\n![Parsing A MerkleBlock](https://dash-docs.github.io/img/dev/gifs/en-merkleblock-parsing/en-merkleblock-parsing-003.svg)\n\nThe next flag in the example is a 0 and this is also a non-TXID node, so we apply the first hash from the [`merkleblock` message](core-ref-p2p-network-data-messages#merkleblock) to this node. We also don't process any child nodes---according to the peer which created the [`merkleblock` message](core-ref-p2p-network-data-messages#merkleblock), none of those nodes will lead to <<glossary:TXIDs>> of transactions that match our filter, so we don't need them. We go back up to the merkle root and then descend into its right child and look at the next (third) flag for instructions.\n\n![Parsing A MerkleBlock](https://dash-docs.github.io/img/dev/gifs/en-merkleblock-parsing/en-merkleblock-parsing-004.svg)\n\nThe third flag in the example is another 1 on another non-TXID node, so we descend into its left child.\n\n![Parsing A MerkleBlock](https://dash-docs.github.io/img/dev/gifs/en-merkleblock-parsing/en-merkleblock-parsing-005.svg)\n\nThe fourth flag is also a 1 on another non-TXID node, so we descend again---we will always continue descending until we reach a TXID node or a non-TXID node with a 0 flag (or we finish filling out the tree).\n\n![Parsing A MerkleBlock](https://dash-docs.github.io/img/dev/gifs/en-merkleblock-parsing/en-merkleblock-parsing-006.svg)\n\nFinally, on the fifth flag in the example (a 1), we reach a TXID node. The 1 flag indicates this TXID's transaction matches our filter and that we should take the next (second) hash and use it as this node's TXID.\n\n![Parsing A MerkleBlock](https://dash-docs.github.io/img/dev/gifs/en-merkleblock-parsing/en-merkleblock-parsing-007.svg)\n\nThe sixth flag also applies to a TXID, but it's a 0 flag, so this TXID's transaction doesn't match our filter; still, we take the next (third) hash and use it as this node's TXID.\n\n![Parsing A MerkleBlock](https://dash-docs.github.io/img/dev/gifs/en-merkleblock-parsing/en-merkleblock-parsing-008.svg)\n\nWe now have enough information to compute the hash for the fourth node we encountered---it's the hash of the concatenated hashes of the two TXIDs we filled out.\n\n![Parsing A MerkleBlock](https://dash-docs.github.io/img/dev/gifs/en-merkleblock-parsing/en-merkleblock-parsing-009.svg)\n\nMoving to the right child of the third node we encountered, we fill it out using the seventh flag and final hash---and discover there are no more child nodes to process.\n\n![Parsing A MerkleBlock](https://dash-docs.github.io/img/dev/gifs/en-merkleblock-parsing/en-merkleblock-parsing-011.svg)\n\nWe hash as appropriate to fill out the tree.  Note that the eighth flag is not used---this is acceptable as it was required to pad out a flag byte.\n\nThe final steps would be to ensure the computed <<glossary:merkle root>> is identical to the merkle root in the <<glossary:header>> and check the other steps of the parsing checklist in the [`merkleblock` message](core-ref-p2p-network-data-messages#merkleblock) section.",
 "excerpt": "",
 "slug": "core-examples-p2p-network-parsing-a-merkleblock",
 "type": "basic",
 "title": "Parsing A MerkleBlock",
 "__v": 0,
 "pendingAlgoliaPublish": false,
 "deprecated": false,
 "icon": "",
 "previousSlug": "",
 "revision": 2,
 "slugUpdatedAt": "2022-09-20T18:32:51.688Z",
 "isApi": false,
 "id": "63f5176df91c7700118e77d4",
 "body_html": "<p>In the section above, we retrieved a <span class=\"GlossaryItem-trigger\">merkle block</span> from the network; now we will parse it. Most of the <span class=\"GlossaryItem-trigger\">block header</span> has been omitted. For a more complete hexdump, see the example in the <a href=\"core-ref-p2p-network-data-messages#merkleblock\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">merkleblock</code> message section</a>.</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Text</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-text theme-light\" data-lang=\"text\" name=\"\" tabindex=\"0\">7f16c5962e8bd963659c793ce370d95f\n093bc7e367117b3c30c1f8fdd0d97287 ... Merkle root\n\n07000000 ........................... Transaction count: 7\n04 ................................. Hash count: 4\n\n3612262624047ee87660be1a707519a4\n43b1c1ce3d248cbfc6c15870f6c5daa2 ... Hash #1\n019f5b01d4195ecbc9398fbf3c3b1fa9\nbb3183301d7a1fb3bd174fcfa40a2b65 ... Hash #2\n41ed70551dd7e841883ab8f0b16bf041\n76b7d1480e4f0af9f3d4c3595768d068 ... Hash #3\n20d2a7bc994987302e5b1ac80fc425fe\n25f8b63169ea78e68fbaaefa59379bbf ... Hash #4\n\n01 ................................. Flag bytes: 1\n1d ................................. Flags: 1 0 1 1 1 0 0 0\n</code></pre></div></div>\n<p>We parse the above <a href=\"core-ref-p2p-network-data-messages#merkleblock\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">merkleblock</code> message</a> using the following instructions.  Each illustration is described in the paragraph below it.</p>\n<p><span aria-label=\"Parsing A MerkleBlock\" class=\"img lightbox closed\" role=\"button\" tabindex=\"0\"><span class=\"lightbox-inner\"><img alt=\"Parsing A MerkleBlock\" loading=\"lazy\" src=\"https://dash-docs.github.io/img/dev/gifs/en-merkleblock-parsing/en-merkleblock-parsing-001.svg\" align=\"\" caption=\"\" height=\"auto\" title=\"\" width=\"auto\"/></span></span></p>\n<p>We start by building the structure of a <span class=\"GlossaryItem-trigger\">merkle tree</span> based on the number of <span class=\"GlossaryItem-trigger\">transactions</span> in the <span class=\"GlossaryItem-trigger\">block</span>.</p>\n<p><span aria-label=\"Parsing A MerkleBlock\" class=\"img lightbox closed\" role=\"button\" tabindex=\"0\"><span class=\"lightbox-inner\"><img alt=\"Parsing A MerkleBlock\" loading=\"lazy\" src=\"https://dash-docs.github.io/img/dev/gifs/en-merkleblock-parsing/en-merkleblock-parsing-002.svg\" align=\"\" caption=\"\" height=\"auto\" title=\"\" width=\"auto\"/></span></span></p>\n<p>The first flag is a 1 and the <span class=\"GlossaryItem-trigger\">merkle root</span> is (as always) a non-TXID node, so we will need to compute the hash later based on this node&#x27;s children. Accordingly, we descend into the merkle root&#x27;s left child and look at the next flag for instructions.</p>\n<p><span aria-label=\"Parsing A MerkleBlock\" class=\"img lightbox closed\" role=\"button\" tabindex=\"0\"><span class=\"lightbox-inner\"><img alt=\"Parsing A MerkleBlock\" loading=\"lazy\" src=\"https://dash-docs.github.io/img/dev/gifs/en-merkleblock-parsing/en-merkleblock-parsing-003.svg\" align=\"\" caption=\"\" height=\"auto\" title=\"\" width=\"auto\"/></span></span></p>\n<p>The next flag in the example is a 0 and this is also a non-TXID node, so we apply the first hash from the <a href=\"core-ref-p2p-network-data-messages#merkleblock\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">merkleblock</code> message</a> to this node. We also don&#x27;t process any child nodes---according to the peer which created the <a href=\"core-ref-p2p-network-data-messages#merkleblock\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">merkleblock</code> message</a>, none of those nodes will lead to <span class=\"GlossaryItem-trigger\">TXIDs</span> of transactions that match our filter, so we don&#x27;t need them. We go back up to the merkle root and then descend into its right child and look at the next (third) flag for instructions.</p>\n<p><span aria-label=\"Parsing A MerkleBlock\" class=\"img lightbox closed\" role=\"button\" tabindex=\"0\"><span class=\"lightbox-inner\"><img alt=\"Parsing A MerkleBlock\" loading=\"lazy\" src=\"https://dash-docs.github.io/img/dev/gifs/en-merkleblock-parsing/en-merkleblock-parsing-004.svg\" align=\"\" caption=\"\" height=\"auto\" title=\"\" width=\"auto\"/></span></span></p>\n<p>The third flag in the example is another 1 on another non-TXID node, so we descend into its left child.</p>\n<p><span aria-label=\"Parsing A MerkleBlock\" class=\"img lightbox closed\" role=\"button\" tabindex=\"0\"><span class=\"lightbox-inner\"><img alt=\"Parsing A MerkleBlock\" loading=\"lazy\" src=\"https://dash-docs.github.io/img/dev/gifs/en-merkleblock-parsing/en-merkleblock-parsing-005.svg\" align=\"\" caption=\"\" height=\"auto\" title=\"\" width=\"auto\"/></span></span></p>\n<p>The fourth flag is also a 1 on another non-TXID node, so we descend again---we will always continue descending until we reach a TXID node or a non-TXID node with a 0 flag (or we finish filling out the tree).</p>\n<p><span aria-label=\"Parsing A MerkleBlock\" class=\"img lightbox closed\" role=\"button\" tabindex=\"0\"><span class=\"lightbox-inner\"><img alt=\"Parsing A MerkleBlock\" loading=\"lazy\" src=\"https://dash-docs.github.io/img/dev/gifs/en-merkleblock-parsing/en-merkleblock-parsing-006.svg\" align=\"\" caption=\"\" height=\"auto\" title=\"\" width=\"auto\"/></span></span></p>\n<p>Finally, on the fifth flag in the example (a 1), we reach a TXID node. The 1 flag indicates this TXID&#x27;s transaction matches our filter and that we should take the next (second) hash and use it as this node&#x27;s TXID.</p>\n<p><span aria-label=\"Parsing A MerkleBlock\" class=\"img lightbox closed\" role=\"button\" tabindex=\"0\"><span class=\"lightbox-inner\"><img alt=\"Parsing A MerkleBlock\" loading=\"lazy\" src=\"https://dash-docs.github.io/img/dev/gifs/en-merkleblock-parsing/en-merkleblock-parsing-007.svg\" align=\"\" caption=\"\" height=\"auto\" title=\"\" width=\"auto\"/></span></span></p>\n<p>The sixth flag also applies to a TXID, but it&#x27;s a 0 flag, so this TXID&#x27;s transaction doesn&#x27;t match our filter; still, we take the next (third) hash and use it as this node&#x27;s TXID.</p>\n<p><span aria-label=\"Parsing A MerkleBlock\" class=\"img lightbox closed\" role=\"button\" tabindex=\"0\"><span class=\"lightbox-inner\"><img alt=\"Parsing A MerkleBlock\" loading=\"lazy\" src=\"https://dash-docs.github.io/img/dev/gifs/en-merkleblock-parsing/en-merkleblock-parsing-008.svg\" align=\"\" caption=\"\" height=\"auto\" title=\"\" width=\"auto\"/></span></span></p>\n<p>We now have enough information to compute the hash for the fourth node we encountered---it&#x27;s the hash of the concatenated hashes of the two TXIDs we filled out.</p>\n<p><span aria-label=\"Parsing A MerkleBlock\" class=\"img lightbox closed\" role=\"button\" tabindex=\"0\"><span class=\"lightbox-inner\"><img alt=\"Parsing A MerkleBlock\" loading=\"lazy\" src=\"https://dash-docs.github.io/img/dev/gifs/en-merkleblock-parsing/en-merkleblock-parsing-009.svg\" align=\"\" caption=\"\" height=\"auto\" title=\"\" width=\"auto\"/></span></span></p>\n<p>Moving to the right child of the third node we encountered, we fill it out using the seventh flag and final hash---and discover there are no more child nodes to process.</p>\n<p><span aria-label=\"Parsing A MerkleBlock\" class=\"img lightbox closed\" role=\"button\" tabindex=\"0\"><span class=\"lightbox-inner\"><img alt=\"Parsing A MerkleBlock\" loading=\"lazy\" src=\"https://dash-docs.github.io/img/dev/gifs/en-merkleblock-parsing/en-merkleblock-parsing-011.svg\" align=\"\" caption=\"\" height=\"auto\" title=\"\" width=\"auto\"/></span></span></p>\n<p>We hash as appropriate to fill out the tree.  Note that the eighth flag is not used---this is acceptable as it was required to pad out a flag byte.</p>\n<p>The final steps would be to ensure the computed <span class=\"GlossaryItem-trigger\">merkle root</span> is identical to the merkle root in the <span class=\"GlossaryItem-trigger\">header</span> and check the other steps of the parsing checklist in the <a href=\"core-ref-p2p-network-data-messages#merkleblock\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">merkleblock</code> message</a> section.</p>"
}