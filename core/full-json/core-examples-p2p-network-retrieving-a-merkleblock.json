{
 "metadata": {
  "keywords": "",
  "robots": "index",
  "description": "For the merkleblock message documentation on the reference page, an actual merkle block was retrieved from the network and manually processed.",
  "title": "Retrieving A MerkleBlock",
  "image": []
 },
 "mdx": {
  "altBody": "",
  "status": "rdmd"
 },
 "api": {
  "results": {
   "codes": [
    {
     "status": 200,
     "language": "json",
     "code": "{}",
     "name": ""
    },
    {
     "status": 400,
     "language": "json",
     "code": "{}",
     "name": ""
    }
   ]
  },
  "auth": "required",
  "params": [],
  "url": "",
  "method": "get"
 },
 "next": {
  "pages": [
   {
    "type": "doc",
    "icon": "file-text-o",
    "name": "Parsing A MerkleBlock",
    "slug": "core-examples-p2p-network-parsing-a-merkleblock",
    "category": "Core Examples"
   }
  ],
  "description": ""
 },
 "algolia": {
  "translationFailure": false,
  "publishPending": false,
  "recordCount": 1,
  "updatedAt": "2023-02-21T19:15:50.358Z"
 },
 "reusableContent": [],
 "_id": "63f5176df91c7700118e77d3",
 "version": "63f5176df91c7700118e7825",
 "updatedAt": "2023-01-22T16:10:54.167Z",
 "createdAt": "2019-10-24T14:52:29.726Z",
 "project": "5daf2e65f4109c0040fd51e1",
 "parentDoc": "63f5176df91c7700118e77cb",
 "user": "62b2101422da70001ee51d95",
 "category": "63f5176df91c7700118e77a0",
 "updates": [],
 "link_external": false,
 "link_url": "",
 "sync_unique": "",
 "hidden": false,
 "isReference": false,
 "order": 3,
 "body": "For the [`merkleblock` message](core-ref-p2p-network-data-messages#merkleblock) documentation on the reference page, an actual <<glossary:merkle block>> was retrieved from the <<glossary:network>> and manually processed.  This section walks through each step of the process, demonstrating basic network communication and merkle block processing.\n\n``` python\n#!/usr/bin/env python\n\nfrom time import sleep\nfrom hashlib import sha256\nimport struct\nimport sys\n\nnetwork_string = \"f9beb4d9\".decode(\"hex\")  # Mainnet\n\ndef send(msg,payload):\n    ## Command is ASCII text, null padded to 12 bytes\n    command = msg + ( ( 12 - len(msg) ) * \"\\00\" )\n\n    ## Payload length is a uint32_t\n    payload_raw = payload.decode(\"hex\")\n    payload_len = struct.pack(\"I\", len(payload_raw))\n\n    ## Checksum is first 4 bytes of SHA256(SHA256(<payload>))\n    checksum = sha256(sha256(payload_raw).digest()).digest()[:4]\n\n    sys.stdout.write(\n        network_string\n        + command\n        + payload_len\n        + checksum\n        + payload_raw\n    )\n    sys.stdout.flush()\n``` \n\nTo connect to the P2P <<glossary:network>>, the trivial Python function above was developed to compute message headers and send payloads decoded from hex.\n\n``` python\n## Create a version message\nsend(\"version\",\n      \"71110100\" # ........................ Protocol Version: 70001\n    + \"0000000000000000\" # ................ Services: Headers Only (SPV)\n    + \"c6925e5400000000\" # ................ Time: 1415484102\n    + \"00000000000000000000000000000000\"\n    + \"0000ffff7f000001208d\" # ............ Receiver IP Address/Port\n    + \"00000000000000000000000000000000\"\n    + \"0000ffff7f000001208d\" # ............ Sender IP Address/Port\n    + \"0000000000000000\" # ................ Nonce (not used here)\n    + \"1b\" # .............................. Bytes in version string\n    + \"2f426974636f696e2e6f726720457861\"\n    + \"6d706c653a302e392e332f\" # .......... Version string\n    + \"93050500\" # ........................ Starting block height: 329107\n    + \"00\" # .............................. Relay transactions: false\n)\n``` \n\n\nPeers on the network will not accept any requests until you send them a [`version` message](core-ref-p2p-network-control-messages#version). The receiving node will reply with their [`version` message](core-ref-p2p-network-control-messages#version) and a [`verack` message](core-ref-p2p-network-control-messages#verack).\n\n``` python\nsleep(1)\nsend(\"verack\", \"\")\n```\n\nWe're not going to validate their [`version` message](core-ref-p2p-network-control-messages#version) with this simple script, but we will sleep a short bit and send back our own [`verack` message](core-ref-p2p-network-control-messages#verack) as if we had accepted their [`version` message](core-ref-p2p-network-control-messages#version).\n\n``` python\nsend(\"filterload\",\n      \"02\"  # ........ Filter bytes: 2\n    + \"b50f\" # ....... Filter: 1010 1101 1111 0000\n    + \"0b000000\" # ... nHashFuncs: 11\n    + \"00000000\" # ... nTweak: 0/none\n    + \"00\" # ......... nFlags: BLOOM_UPDATE_NONE\n)\n```\n\nWe set a <<glossary:bloom filter>> with the [`filterload` message](core-ref-p2p-network-control-messages#filterload). This filter is described in the preceding sections.\n\n``` python\nsend(\"getdata\",\n      \"01\" # ................................. Number of inventories: 1\n    + \"03000000\" # ........................... Inventory type: filtered block\n    + \"a4deb66c0d726b0aefb03ed51be407fb\"\n    + \"ad7331c6e8f9eef231b7000000000000\" # ... Block header hash\n)\n```\n\nWe request a merkle block for transactions matching our filter, completing our script.\n\nTo run the script, we simply pipe it to the Unix [`netcat` command](https://en.wikipedia.org/wiki/Netcat) or one of its many clones, one of which is available for practically any platform. For example, with the original netcat and using hexdump (`hd`) to display the output:\n\n``` bash\n## Connect to the Bitcoin Core peer running on localhost\npython get-merkle.py | nc localhost 8333 | hd\n```\n\nPart of the response is shown in the [Parsing a MerkleBlock](core-examples-p2p-network-parsing-a-merkleblock) section.",
 "excerpt": "",
 "slug": "core-examples-p2p-network-retrieving-a-merkleblock",
 "type": "basic",
 "title": "Retrieving A MerkleBlock",
 "__v": 1,
 "pendingAlgoliaPublish": false,
 "deprecated": false,
 "icon": "",
 "previousSlug": "",
 "revision": 4,
 "slugUpdatedAt": "2022-09-20T18:32:51.631Z",
 "isApi": false,
 "id": "63f5176df91c7700118e77d3",
 "body_html": "<p>For the <a href=\"core-ref-p2p-network-data-messages#merkleblock\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">merkleblock</code> message</a> documentation on the reference page, an actual <span class=\"GlossaryItem-trigger\">merkle block</span> was retrieved from the <span class=\"GlossaryItem-trigger\">network</span> and manually processed.  This section walks through each step of the process, demonstrating basic network communication and merkle block processing.</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Python</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-python theme-light\" data-lang=\"python\" name=\"\" tabindex=\"0\">#!/usr/bin/env python\n\nfrom time import sleep\nfrom hashlib import sha256\nimport struct\nimport sys\n\nnetwork_string = &quot;f9beb4d9&quot;.decode(&quot;hex&quot;)  # Mainnet\n\ndef send(msg,payload):\n    ## Command is ASCII text, null padded to 12 bytes\n    command = msg + ( ( 12 - len(msg) ) * &quot;\\00&quot; )\n\n    ## Payload length is a uint32_t\n    payload_raw = payload.decode(&quot;hex&quot;)\n    payload_len = struct.pack(&quot;I&quot;, len(payload_raw))\n\n    ## Checksum is first 4 bytes of SHA256(SHA256(&lt;payload&gt;))\n    checksum = sha256(sha256(payload_raw).digest()).digest()[:4]\n\n    sys.stdout.write(\n        network_string\n        + command\n        + payload_len\n        + checksum\n        + payload_raw\n    )\n    sys.stdout.flush()\n</code></pre></div></div>\n<p>To connect to the P2P <span class=\"GlossaryItem-trigger\">network</span>, the trivial Python function above was developed to compute message headers and send payloads decoded from hex.</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Python</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-python theme-light\" data-lang=\"python\" name=\"\" tabindex=\"0\">## Create a version message\nsend(&quot;version&quot;,\n      &quot;71110100&quot; # ........................ Protocol Version: 70001\n    + &quot;0000000000000000&quot; # ................ Services: Headers Only (SPV)\n    + &quot;c6925e5400000000&quot; # ................ Time: 1415484102\n    + &quot;00000000000000000000000000000000&quot;\n    + &quot;0000ffff7f000001208d&quot; # ............ Receiver IP Address/Port\n    + &quot;00000000000000000000000000000000&quot;\n    + &quot;0000ffff7f000001208d&quot; # ............ Sender IP Address/Port\n    + &quot;0000000000000000&quot; # ................ Nonce (not used here)\n    + &quot;1b&quot; # .............................. Bytes in version string\n    + &quot;2f426974636f696e2e6f726720457861&quot;\n    + &quot;6d706c653a302e392e332f&quot; # .......... Version string\n    + &quot;93050500&quot; # ........................ Starting block height: 329107\n    + &quot;00&quot; # .............................. Relay transactions: false\n)\n</code></pre></div></div>\n<p>Peers on the network will not accept any requests until you send them a <a href=\"core-ref-p2p-network-control-messages#version\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">version</code> message</a>. The receiving node will reply with their <a href=\"core-ref-p2p-network-control-messages#version\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">version</code> message</a> and a <a href=\"core-ref-p2p-network-control-messages#verack\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">verack</code> message</a>.</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Python</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-python theme-light\" data-lang=\"python\" name=\"\" tabindex=\"0\">sleep(1)\nsend(&quot;verack&quot;, &quot;&quot;)\n</code></pre></div></div>\n<p>We&#x27;re not going to validate their <a href=\"core-ref-p2p-network-control-messages#version\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">version</code> message</a> with this simple script, but we will sleep a short bit and send back our own <a href=\"core-ref-p2p-network-control-messages#verack\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">verack</code> message</a> as if we had accepted their <a href=\"core-ref-p2p-network-control-messages#version\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">version</code> message</a>.</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Python</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-python theme-light\" data-lang=\"python\" name=\"\" tabindex=\"0\">send(&quot;filterload&quot;,\n      &quot;02&quot;  # ........ Filter bytes: 2\n    + &quot;b50f&quot; # ....... Filter: 1010 1101 1111 0000\n    + &quot;0b000000&quot; # ... nHashFuncs: 11\n    + &quot;00000000&quot; # ... nTweak: 0/none\n    + &quot;00&quot; # ......... nFlags: BLOOM_UPDATE_NONE\n)\n</code></pre></div></div>\n<p>We set a <span class=\"GlossaryItem-trigger\">bloom filter</span> with the <a href=\"core-ref-p2p-network-control-messages#filterload\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">filterload</code> message</a>. This filter is described in the preceding sections.</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Python</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-python theme-light\" data-lang=\"python\" name=\"\" tabindex=\"0\">send(&quot;getdata&quot;,\n      &quot;01&quot; # ................................. Number of inventories: 1\n    + &quot;03000000&quot; # ........................... Inventory type: filtered block\n    + &quot;a4deb66c0d726b0aefb03ed51be407fb&quot;\n    + &quot;ad7331c6e8f9eef231b7000000000000&quot; # ... Block header hash\n)\n</code></pre></div></div>\n<p>We request a merkle block for transactions matching our filter, completing our script.</p>\n<p>To run the script, we simply pipe it to the Unix <a href=\"https://en.wikipedia.org/wiki/Netcat\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">netcat</code> command</a> or one of its many clones, one of which is available for practically any platform. For example, with the original netcat and using hexdump (<button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">hd</code>) to display the output:</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Bash</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-bash theme-light\" data-lang=\"bash\" name=\"\" tabindex=\"0\">## Connect to the Bitcoin Core peer running on localhost\npython get-merkle.py | nc localhost 8333 | hd\n</code></pre></div></div>\n<p>Part of the response is shown in the <a href=\"core-examples-p2p-network-parsing-a-merkleblock\" target=\"\" title=\"\">Parsing a MerkleBlock</a> section.</p>"
}