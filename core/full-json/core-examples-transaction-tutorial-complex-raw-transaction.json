{
 "metadata": {
  "image": [],
  "title": "Complex Raw Transaction",
  "description": "A demonstration of a Complex Raw Transaction. Let's create a transaction with two inputs and two outputs.",
  "keywords": "",
  "robots": "index"
 },
 "api": {
  "method": "get",
  "url": "",
  "auth": "required",
  "results": {
   "codes": [
    {
     "status": 200,
     "language": "json",
     "code": "{}",
     "name": ""
    },
    {
     "status": 400,
     "language": "json",
     "code": "{}",
     "name": ""
    }
   ]
  },
  "params": []
 },
 "next": {
  "description": "",
  "pages": [
   {
    "type": "doc",
    "icon": "file-text-o",
    "name": "Offline Signing",
    "slug": "core-examples-transaction-tutorial-offline-signing",
    "category": "Core Examples"
   }
  ]
 },
 "algolia": {
  "recordCount": 9,
  "publishPending": false,
  "translationFailure": false,
  "updatedAt": "2023-02-21T19:15:50.988Z"
 },
 "title": "Complex Raw Transaction",
 "icon": "",
 "updates": [],
 "type": "basic",
 "slug": "core-examples-transaction-tutorial-complex-raw-transaction",
 "excerpt": "",
 "body": "In this example, we'll create a <<glossary:transaction>> with two <<glossary:inputs>> and two <<glossary:outputs>>.  We'll sign each of the inputs separately, as might happen if the two inputs belonged to different people who agreed to create a transaction together (such as a CoinJoin transaction).\n\n# 1. List unspent outputs\n\n```shell \n> dash-cli -regtest listunspent\n```\n\n``` json\n[\n  {\n    \"txid\": \"fa0f4105b0a2b2706d65581c5e6411d3970253c7f231944fa2f978b4a3d9010d\",\n    \"vout\": 0,\n    \"address\": \"yfV9Wirf5RkYHgNDttjpBz8Wdi8BavLHcP\",\n    \"account\": \"\",\n    \"scriptPubKey\": \"76a914d240140859744755d73e5967081c3bedceffc5db88ac\",\n    \"amount\": 499.99990000,\n    \"confirmations\": 1,\n    \"ps_rounds\": -2,\n    \"spendable\": true,\n    \"solvable\": true\n  },\n  {\n    \"txid\": \"f84ca4ad33ec7889d3c6ac670152137a3ee1603c4096230a10562976f700d130\",\n    \"vout\": 0,\n    \"address\": \"yRdk89fwSW1mUBxQo5fCmEfTva7b4wh2H5\",\n    \"account\": \"\",\n    \"scriptPubKey\": \"76a9143a4e8960f26c1fa82d937046959b656e4dd7966688ac\",\n    \"amount\": 10.00000000,\n    \"confirmations\": 2,\n    \"ps_rounds\": -2,\n    \"spendable\": true,\n    \"solvable\": true\n  },\n  {\n    \"txid\": \"f84ca4ad33ec7889d3c6ac670152137a3ee1603c4096230a10562976f700d130\",\n    \"vout\": 1,\n    \"address\": \"yavnyFMebbfX4F2VC25P18FW6LS66h2wqJ\",\n    \"scriptPubKey\": \"76a914a0411dbed3eab4341d5c41496d61b4fa1b22037e88ac\",\n    \"amount\": 490.00000000,\n    \"confirmations\": 2,\n    \"ps_rounds\": -2,\n    \"spendable\": true,\n    \"solvable\": true\n  },\n  {\n    \"txid\": \"ea6d596da55a137846f8b08bfd414b4667ce456f9e3b3182e6f05810e8613d84\",\n    \"vout\": 0,\n    \"address\": \"yWtgzKSckhedxtJ8NXhShWGjfBivkvBGgG\",\n    \"scriptPubKey\": \"21023fff9c9dc9088c0aeba90d75413705091111311d761054de23\\\n                      acdd217450869aac\",\n    \"amount\": 500.00000000,\n    \"confirmations\": 101,\n    \"ps_rounds\": -2,\n    \"spendable\": true,\n    \"solvable\": true\n  }\n]\n```\n\n# 2. Select UTXOs\n\nFor our two inputs, we select two UTXOs by placing the txid and output index numbers (vouts) in shell variables.  We also save the addresses corresponding to the public keys (hashed or unhashed) used in those transactions. We need the addresses so we can get the corresponding private keys from our wallet.\n\n``` bash\n> UTXO1_TXID=ea6d596da55a137846f8b08bfd414b4667ce456f9e3b3182e6f05810e8613d84\n> UTXO1_VOUT=0\n> UTXO1_ADDRESS=yWtgzKSckhedxtJ8NXhShWGjfBivkvBGgG\n\n> UTXO2_TXID=f84ca4ad33ec7889d3c6ac670152137a3ee1603c4096230a10562976f700d130\n> UTXO2_VOUT=0\n> UTXO2_ADDRESS=yRdk89fwSW1mUBxQo5fCmEfTva7b4wh2H5\n```\n\n# 3. Get private keys\n\n>\u2757\ufe0f Private Key Warning\n>\n> **Warning:** Users should never manually manage private keys on mainnet. As dangerous as raw transactions are (see warnings above), making a mistake with a private key can be much worse---as in the case of a HD wallet [cross-generational key compromise](core-guide-wallets-wallet-files#hardened-keys). \n**These examples are to help you learn, not for you to emulate on mainnet.**\n\nUse the [`dumpprivkey` RPC](core-api-ref-remote-procedure-calls-wallet#dumpprivkey) to get the <<glossary:private keys>> corresponding to the <<glossary:public keys>> used in the two UTXOs our inputs we will be spending.  We need the private keys so we can sign each of the inputs separately.\n\n``` bash\n> dash-cli -regtest dumpprivkey $UTXO1_ADDRESS\ncNL522MEQUnQxsZJo4ryPH8sPd2uVZaFKjKnZivo9DyVjpAGU7qP\n\n> dash-cli -regtest dumpprivkey $UTXO2_ADDRESS\ncPtZ9nagmjQ5bRKMuqoDz8xni6hRPfZ1zp3TSrqH3j3RyUThTYGN\n\n> UTXO1_PRIVATE_KEY=cNL522MEQUnQxsZJo4ryPH8sPd2uVZaFKjKnZivo9DyVjpAGU7qP\n\n> UTXO2_PRIVATE_KEY=cPtZ9nagmjQ5bRKMuqoDz8xni6hRPfZ1zp3TSrqH3j3RyUThTYGN\n```\n\n# 4. Get new addresses\n\nFor our two outputs, get two new <<glossary:addresses>>.\n\n``` bash\n> dash-cli -regtest getnewaddress\nyhshGrdbh3rWt9EPaSi7xSGRFMvFdzTZ8n\n> dash-cli -regtest getnewaddress\nyesLaP5XFTaLZiWAo2zK8mFfUCtV8rRhKw\n\n> NEW_ADDRESS1=yhshGrdbh3rWt9EPaSi7xSGRFMvFdzTZ8n\n> NEW_ADDRESS2=yesLaP5XFTaLZiWAo2zK8mFfUCtV8rRhKw\n```\n\n# 5. Create raw transaction\n\nCreate the <<glossary:raw transaction>> using the [`createrawtransaction` RPC](core-api-ref-remote-procedure-calls-raw-transactions#createrawtransaction) much the same as before, except now we have two inputs and two outputs.\n\n``` bash\n## Outputs - inputs = transaction fee, so always double-check your math!\n> dash-cli -regtest createrawtransaction '''\n    [\n      {\n        \"txid\": \"'$UTXO1_TXID'\",\n        \"vout\": '$UTXO1_VOUT'\n      },\n      {\n        \"txid\": \"'$UTXO2_TXID'\",\n        \"vout\": '$UTXO2_VOUT'\n      }\n    ]\n    ''' '''\n    {\n      \"'$NEW_ADDRESS1'\": 499.9999,\n      \"'$NEW_ADDRESS2'\": 10\n    }'''\n0100000002843d61e81058f0e682313b9e6f45ce67464b41fd8bb0f84678135a\\\na56d596dea0000000000ffffffff30d100f7762956100a2396403c60e13e7a13\\\n520167acc6d38978ec33ada44cf80000000000ffffffff02f04c3ba40b000000\\\n1976a914ec73fe6129b249617bb5f20c8760708055fb6fdb88ac00ca9a3b0000\\\n00001976a914cb7a56b046479f8c247875d672d3e1aed18c33f488ac00000000\n\n> RAW_TX=0100000002843d61e81058f0e682313b9e6f45ce67464b41fd8bb0f[...]\n```\n\n# 6. Sign raw transaction\n\nSigning the raw transaction with [`signrawtransactionwithkey`](core-api-ref-remote-procedure-calls-raw-transactions#signrawtransactionwithkey) gets more complicated as we now have two arguments:\n\n1. The unsigned raw transaction.\n\n2. The private key we want to use to sign one of the inputs.\n\n## 6a. First input\n\nThe result is a raw transaction with only one input signed; the fact that the transaction isn't fully signed is indicated by value of the `complete` JSON field.  We save the incomplete, partly-signed raw transaction hex to a shell variable.\n\n``` bash\n> dash-cli -regtest signrawtransaction $RAW_TX '''\n    [\n      \"'$UTXO1_PRIVATE_KEY'\"\n    ]'''\n```\n``` json\n{\n  \"hex\": \"0100000002843d61e81058f0e682313b9e6f45ce67464b41fd8bb0\\\n  f84678135aa56d596dea00000000494830450221009f7f356c0cc2d3337b5f\\\n  76dfc6de9f9be7c8c5ac2074cbeeba4815b90329602002207790f23361480e\\\n  2a5a2d1fa6e293ccd5cd01279ad301176f091b84d6dd8e8f6501ffffffff30\\\n  d100f7762956100a2396403c60e13e7a13520167acc6d38978ec33ada44cf8\\\n  0000000000ffffffff02f04c3ba40b0000001976a914ec73fe6129b249617b\\\n  b5f20c8760708055fb6fdb88ac00ca9a3b000000001976a914cb7a56b04647\\\n  9f8c247875d672d3e1aed18c33f488ac00000000\",\n  \"complete\": false,\n  \"errors\": [\n    {\n      \"txid\": \"f84ca4ad33ec7889d3c6ac670152137a3ee1603c4096230a1\\\n                0562976f700d130\",\n      \"vout\": 0,\n      \"scriptSig\": \"\",\n      \"sequence\": 4294967295,\n      \"error\": \"Unable to sign input, invalid stack size (possibly missing key)\"\n    }\n  ]\n}\n```\n``` bash\n\n> PARTLY_SIGNED_RAW_TX=0100000002843d61e81058f0e682313b9e6f45ce6[...]\n```\n\n## 6b. Second input\n\nTo sign the second input, we repeat the process we used to sign the first input using the second private key. Now that both inputs are signed, the `complete` result is *true*.\n\n``` bash\n> dash-cli -regtest signrawtransaction $PARTLY_SIGNED_RAW_TX '''\n    [\n      \"'$UTXO2_PRIVATE_KEY'\"\n    ]'''\n```\n``` json\n{\n  \"hex\": \"0100000002843d61e81058f0e682313b9e6f45ce67464b41fd8bb0\\\n  f84678135aa56d596dea00000000494830450221009f7f356c0cc2d3337b5f\\\n  76dfc6de9f9be7c8c5ac2074cbeeba4815b90329602002207790f23361480e\\\n  2a5a2d1fa6e293ccd5cd01279ad301176f091b84d6dd8e8f6501ffffffff30\\\n  d100f7762956100a2396403c60e13e7a13520167acc6d38978ec33ada44cf8\\\n  000000006a47304402207867e88e3fe2c926df29376d77eba81daf9f4a5573\\\n  44d4f02e9c7dcee96a51e4022076274c2365dc069e7ef797c95c75ab6e01ca\\\n  3757342f3e6f21a3d9d01086efb7012102ff9005f79aa4c22ac48fa93d9b7f\\\n  40f321db1c13cd70cf08bdab3e23c8d19620ffffffff02f04c3ba40b000000\\\n  1976a914ec73fe6129b249617bb5f20c8760708055fb6fdb88ac00ca9a3b00\\\n  0000001976a914cb7a56b046479f8c247875d672d3e1aed18c33f488ac0000\\\n  0000\",\n  \"complete\": true\n}\n```\n\nClean up the shell variables used. Unlike previous subsections, we're not going to send this transaction to the connected node with `sendrawtransaction`. This will allow us to illustrate in the [Offline Signing subsection](core-examples-transaction-tutorial-offline-signing) below how to spend a transaction which is not yet in the block chain or memory pool.\n\n``` bash\n> unset PARTLY_SIGNED_RAW_TX RAW_TX NEW_ADDRESS1 [...]\n```",
 "mdxAltBody": "",
 "order": 2,
 "isReference": false,
 "deprecated": false,
 "hidden": false,
 "sync_unique": "",
 "link_url": "",
 "link_external": false,
 "reusableContent": [],
 "previousSlug": "",
 "slugUpdatedAt": "2022-05-17T18:39:44.257Z",
 "revision": 4,
 "_id": "63f5176df91c7700118e77d8",
 "version": "63f5176df91c7700118e7825",
 "updatedAt": "2023-01-25T15:07:05.862Z",
 "createdAt": "2019-10-24T15:53:39.526Z",
 "project": "5daf2e65f4109c0040fd51e1",
 "user": "62b2101422da70001ee51d95",
 "parentDoc": "63f5176df91c7700118e77d5",
 "category": "63f5176df91c7700118e77a0",
 "__v": 1,
 "pendingAlgoliaPublish": false,
 "isApi": false,
 "id": "63f5176df91c7700118e77d8",
 "body_html": "<p>In this example, we&#x27;ll create a <span class=\"GlossaryItem-trigger\">transaction</span> with two <span class=\"GlossaryItem-trigger\">inputs</span> and two <span class=\"GlossaryItem-trigger\">outputs</span>.  We&#x27;ll sign each of the inputs separately, as might happen if the two inputs belonged to different people who agreed to create a transaction together (such as a CoinJoin transaction).</p>\n<h1 class=\"heading heading-1 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"1-list-unspent-outputs\"></div><div class=\"heading-text\"><div id=\"section-1-list-unspent-outputs\" class=\"heading-anchor_backwardsCompatibility\"></div>1. List unspent outputs</div><a aria-label=\"Skip link to 1. List unspent outputs\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#1-list-unspent-outputs\"></a></h1>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Shell</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-shell theme-light\" data-lang=\"shell\" name=\"\" tabindex=\"0\">&gt; dash-cli -regtest listunspent\n</code></pre></div></div>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">JSON</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-json theme-light\" data-lang=\"json\" name=\"\" tabindex=\"0\">[\n  {\n    &quot;txid&quot;: &quot;fa0f4105b0a2b2706d65581c5e6411d3970253c7f231944fa2f978b4a3d9010d&quot;,\n    &quot;vout&quot;: 0,\n    &quot;address&quot;: &quot;yfV9Wirf5RkYHgNDttjpBz8Wdi8BavLHcP&quot;,\n    &quot;account&quot;: &quot;&quot;,\n    &quot;scriptPubKey&quot;: &quot;76a914d240140859744755d73e5967081c3bedceffc5db88ac&quot;,\n    &quot;amount&quot;: 499.99990000,\n    &quot;confirmations&quot;: 1,\n    &quot;ps_rounds&quot;: -2,\n    &quot;spendable&quot;: true,\n    &quot;solvable&quot;: true\n  },\n  {\n    &quot;txid&quot;: &quot;f84ca4ad33ec7889d3c6ac670152137a3ee1603c4096230a10562976f700d130&quot;,\n    &quot;vout&quot;: 0,\n    &quot;address&quot;: &quot;yRdk89fwSW1mUBxQo5fCmEfTva7b4wh2H5&quot;,\n    &quot;account&quot;: &quot;&quot;,\n    &quot;scriptPubKey&quot;: &quot;76a9143a4e8960f26c1fa82d937046959b656e4dd7966688ac&quot;,\n    &quot;amount&quot;: 10.00000000,\n    &quot;confirmations&quot;: 2,\n    &quot;ps_rounds&quot;: -2,\n    &quot;spendable&quot;: true,\n    &quot;solvable&quot;: true\n  },\n  {\n    &quot;txid&quot;: &quot;f84ca4ad33ec7889d3c6ac670152137a3ee1603c4096230a10562976f700d130&quot;,\n    &quot;vout&quot;: 1,\n    &quot;address&quot;: &quot;yavnyFMebbfX4F2VC25P18FW6LS66h2wqJ&quot;,\n    &quot;scriptPubKey&quot;: &quot;76a914a0411dbed3eab4341d5c41496d61b4fa1b22037e88ac&quot;,\n    &quot;amount&quot;: 490.00000000,\n    &quot;confirmations&quot;: 2,\n    &quot;ps_rounds&quot;: -2,\n    &quot;spendable&quot;: true,\n    &quot;solvable&quot;: true\n  },\n  {\n    &quot;txid&quot;: &quot;ea6d596da55a137846f8b08bfd414b4667ce456f9e3b3182e6f05810e8613d84&quot;,\n    &quot;vout&quot;: 0,\n    &quot;address&quot;: &quot;yWtgzKSckhedxtJ8NXhShWGjfBivkvBGgG&quot;,\n    &quot;scriptPubKey&quot;: &quot;21023fff9c9dc9088c0aeba90d75413705091111311d761054de23\\\n                      acdd217450869aac&quot;,\n    &quot;amount&quot;: 500.00000000,\n    &quot;confirmations&quot;: 101,\n    &quot;ps_rounds&quot;: -2,\n    &quot;spendable&quot;: true,\n    &quot;solvable&quot;: true\n  }\n]\n</code></pre></div></div>\n<h1 class=\"heading heading-1 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"2-select-utxos\"></div><div class=\"heading-text\"><div id=\"section-2-select-utx-os\" class=\"heading-anchor_backwardsCompatibility\"></div>2. Select UTXOs</div><a aria-label=\"Skip link to 2. Select UTXOs\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#2-select-utxos\"></a></h1>\n<p>For our two inputs, we select two UTXOs by placing the txid and output index numbers (vouts) in shell variables.  We also save the addresses corresponding to the public keys (hashed or unhashed) used in those transactions. We need the addresses so we can get the corresponding private keys from our wallet.</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Bash</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-bash theme-light\" data-lang=\"bash\" name=\"\" tabindex=\"0\">&gt; UTXO1_TXID=ea6d596da55a137846f8b08bfd414b4667ce456f9e3b3182e6f05810e8613d84\n&gt; UTXO1_VOUT=0\n&gt; UTXO1_ADDRESS=yWtgzKSckhedxtJ8NXhShWGjfBivkvBGgG\n\n&gt; UTXO2_TXID=f84ca4ad33ec7889d3c6ac670152137a3ee1603c4096230a10562976f700d130\n&gt; UTXO2_VOUT=0\n&gt; UTXO2_ADDRESS=yRdk89fwSW1mUBxQo5fCmEfTva7b4wh2H5\n</code></pre></div></div>\n<h1 class=\"heading heading-1 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"3-get-private-keys\"></div><div class=\"heading-text\"><div id=\"section-3-get-private-keys\" class=\"heading-anchor_backwardsCompatibility\"></div>3. Get private keys</div><a aria-label=\"Skip link to 3. Get private keys\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#3-get-private-keys\"></a></h1>\n<blockquote class=\"callout callout_error\" theme=\"\u2757\ufe0f\"><h2 class=\"callout-heading\"><span class=\"callout-icon\">\u2757\ufe0f</span><p>Private Key Warning</p></h2><p><strong>Warning:</strong> Users should never manually manage private keys on mainnet. As dangerous as raw transactions are (see warnings above), making a mistake with a private key can be much worse---as in the case of a HD wallet <a href=\"core-guide-wallets-wallet-files#hardened-keys\" target=\"\" title=\"\">cross-generational key compromise</a>.<br/>\n<strong>These examples are to help you learn, not for you to emulate on mainnet.</strong></p></blockquote>\n<p>Use the <a href=\"core-api-ref-remote-procedure-calls-wallet#dumpprivkey\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">dumpprivkey</code> RPC</a> to get the <span class=\"GlossaryItem-trigger\">private keys</span> corresponding to the <span class=\"GlossaryItem-trigger\">public keys</span> used in the two UTXOs our inputs we will be spending.  We need the private keys so we can sign each of the inputs separately.</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Bash</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-bash theme-light\" data-lang=\"bash\" name=\"\" tabindex=\"0\">&gt; dash-cli -regtest dumpprivkey $UTXO1_ADDRESS\ncNL522MEQUnQxsZJo4ryPH8sPd2uVZaFKjKnZivo9DyVjpAGU7qP\n\n&gt; dash-cli -regtest dumpprivkey $UTXO2_ADDRESS\ncPtZ9nagmjQ5bRKMuqoDz8xni6hRPfZ1zp3TSrqH3j3RyUThTYGN\n\n&gt; UTXO1_PRIVATE_KEY=cNL522MEQUnQxsZJo4ryPH8sPd2uVZaFKjKnZivo9DyVjpAGU7qP\n\n&gt; UTXO2_PRIVATE_KEY=cPtZ9nagmjQ5bRKMuqoDz8xni6hRPfZ1zp3TSrqH3j3RyUThTYGN\n</code></pre></div></div>\n<h1 class=\"heading heading-1 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"4-get-new-addresses\"></div><div class=\"heading-text\"><div id=\"section-4-get-new-addresses\" class=\"heading-anchor_backwardsCompatibility\"></div>4. Get new addresses</div><a aria-label=\"Skip link to 4. Get new addresses\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#4-get-new-addresses\"></a></h1>\n<p>For our two outputs, get two new <span class=\"GlossaryItem-trigger\">addresses</span>.</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Bash</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-bash theme-light\" data-lang=\"bash\" name=\"\" tabindex=\"0\">&gt; dash-cli -regtest getnewaddress\nyhshGrdbh3rWt9EPaSi7xSGRFMvFdzTZ8n\n&gt; dash-cli -regtest getnewaddress\nyesLaP5XFTaLZiWAo2zK8mFfUCtV8rRhKw\n\n&gt; NEW_ADDRESS1=yhshGrdbh3rWt9EPaSi7xSGRFMvFdzTZ8n\n&gt; NEW_ADDRESS2=yesLaP5XFTaLZiWAo2zK8mFfUCtV8rRhKw\n</code></pre></div></div>\n<h1 class=\"heading heading-1 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"5-create-raw-transaction\"></div><div class=\"heading-text\"><div id=\"section-5-create-raw-transaction\" class=\"heading-anchor_backwardsCompatibility\"></div>5. Create raw transaction</div><a aria-label=\"Skip link to 5. Create raw transaction\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#5-create-raw-transaction\"></a></h1>\n<p>Create the <span class=\"GlossaryItem-trigger\">raw transaction</span> using the <a href=\"core-api-ref-remote-procedure-calls-raw-transactions#createrawtransaction\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">createrawtransaction</code> RPC</a> much the same as before, except now we have two inputs and two outputs.</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Bash</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-bash theme-light\" data-lang=\"bash\" name=\"\" tabindex=\"0\">## Outputs - inputs = transaction fee, so always double-check your math!\n&gt; dash-cli -regtest createrawtransaction &#x27;&#x27;&#x27;\n    [\n      {\n        &quot;txid&quot;: &quot;&#x27;$UTXO1_TXID&#x27;&quot;,\n        &quot;vout&quot;: &#x27;$UTXO1_VOUT&#x27;\n      },\n      {\n        &quot;txid&quot;: &quot;&#x27;$UTXO2_TXID&#x27;&quot;,\n        &quot;vout&quot;: &#x27;$UTXO2_VOUT&#x27;\n      }\n    ]\n    &#x27;&#x27;&#x27; &#x27;&#x27;&#x27;\n    {\n      &quot;&#x27;$NEW_ADDRESS1&#x27;&quot;: 499.9999,\n      &quot;&#x27;$NEW_ADDRESS2&#x27;&quot;: 10\n    }&#x27;&#x27;&#x27;\n0100000002843d61e81058f0e682313b9e6f45ce67464b41fd8bb0f84678135a\\\na56d596dea0000000000ffffffff30d100f7762956100a2396403c60e13e7a13\\\n520167acc6d38978ec33ada44cf80000000000ffffffff02f04c3ba40b000000\\\n1976a914ec73fe6129b249617bb5f20c8760708055fb6fdb88ac00ca9a3b0000\\\n00001976a914cb7a56b046479f8c247875d672d3e1aed18c33f488ac00000000\n\n&gt; RAW_TX=0100000002843d61e81058f0e682313b9e6f45ce67464b41fd8bb0f[...]\n</code></pre></div></div>\n<h1 class=\"heading heading-1 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"6-sign-raw-transaction\"></div><div class=\"heading-text\"><div id=\"section-6-sign-raw-transaction\" class=\"heading-anchor_backwardsCompatibility\"></div>6. Sign raw transaction</div><a aria-label=\"Skip link to 6. Sign raw transaction\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#6-sign-raw-transaction\"></a></h1>\n<p>Signing the raw transaction with <a href=\"core-api-ref-remote-procedure-calls-raw-transactions#signrawtransactionwithkey\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">signrawtransactionwithkey</code></a> gets more complicated as we now have two arguments:</p>\n<ol>\n<li>\n<p>The unsigned raw transaction.</p>\n</li>\n<li>\n<p>The private key we want to use to sign one of the inputs.</p>\n</li>\n</ol>\n<h2 class=\"heading heading-2 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"6a-first-input\"></div><div class=\"heading-text\"><div id=\"section-6-a-first-input\" class=\"heading-anchor_backwardsCompatibility\"></div>6a. First input</div><a aria-label=\"Skip link to 6a. First input\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#6a-first-input\"></a></h2>\n<p>The result is a raw transaction with only one input signed; the fact that the transaction isn&#x27;t fully signed is indicated by value of the <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">complete</code> JSON field.  We save the incomplete, partly-signed raw transaction hex to a shell variable.</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Bash</button><button aria-selected=\"false\" class=\"\" role=\"tab\" type=\"button\">JSON</button><button aria-selected=\"false\" class=\"\" role=\"tab\" type=\"button\">Bash</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-bash theme-light\" data-lang=\"bash\" name=\"\" tabindex=\"0\">&gt; dash-cli -regtest signrawtransaction $RAW_TX &#x27;&#x27;&#x27;\n    [\n      &quot;&#x27;$UTXO1_PRIVATE_KEY&#x27;&quot;\n    ]&#x27;&#x27;&#x27;\n</code></pre><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-json theme-light\" data-lang=\"json\" name=\"\" tabindex=\"0\">{\n  &quot;hex&quot;: &quot;0100000002843d61e81058f0e682313b9e6f45ce67464b41fd8bb0\\\n  f84678135aa56d596dea00000000494830450221009f7f356c0cc2d3337b5f\\\n  76dfc6de9f9be7c8c5ac2074cbeeba4815b90329602002207790f23361480e\\\n  2a5a2d1fa6e293ccd5cd01279ad301176f091b84d6dd8e8f6501ffffffff30\\\n  d100f7762956100a2396403c60e13e7a13520167acc6d38978ec33ada44cf8\\\n  0000000000ffffffff02f04c3ba40b0000001976a914ec73fe6129b249617b\\\n  b5f20c8760708055fb6fdb88ac00ca9a3b000000001976a914cb7a56b04647\\\n  9f8c247875d672d3e1aed18c33f488ac00000000&quot;,\n  &quot;complete&quot;: false,\n  &quot;errors&quot;: [\n    {\n      &quot;txid&quot;: &quot;f84ca4ad33ec7889d3c6ac670152137a3ee1603c4096230a1\\\n                0562976f700d130&quot;,\n      &quot;vout&quot;: 0,\n      &quot;scriptSig&quot;: &quot;&quot;,\n      &quot;sequence&quot;: 4294967295,\n      &quot;error&quot;: &quot;Unable to sign input, invalid stack size (possibly missing key)&quot;\n    }\n  ]\n}\n</code></pre><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-bash theme-light\" data-lang=\"bash\" name=\"\" tabindex=\"0\">\n&gt; PARTLY_SIGNED_RAW_TX=0100000002843d61e81058f0e682313b9e6f45ce6[...]\n</code></pre></div></div>\n<h2 class=\"heading heading-2 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"6b-second-input\"></div><div class=\"heading-text\"><div id=\"section-6-b-second-input\" class=\"heading-anchor_backwardsCompatibility\"></div>6b. Second input</div><a aria-label=\"Skip link to 6b. Second input\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#6b-second-input\"></a></h2>\n<p>To sign the second input, we repeat the process we used to sign the first input using the second private key. Now that both inputs are signed, the <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">complete</code> result is <em>true</em>.</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Bash</button><button aria-selected=\"false\" class=\"\" role=\"tab\" type=\"button\">JSON</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-bash theme-light\" data-lang=\"bash\" name=\"\" tabindex=\"0\">&gt; dash-cli -regtest signrawtransaction $PARTLY_SIGNED_RAW_TX &#x27;&#x27;&#x27;\n    [\n      &quot;&#x27;$UTXO2_PRIVATE_KEY&#x27;&quot;\n    ]&#x27;&#x27;&#x27;\n</code></pre><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-json theme-light\" data-lang=\"json\" name=\"\" tabindex=\"0\">{\n  &quot;hex&quot;: &quot;0100000002843d61e81058f0e682313b9e6f45ce67464b41fd8bb0\\\n  f84678135aa56d596dea00000000494830450221009f7f356c0cc2d3337b5f\\\n  76dfc6de9f9be7c8c5ac2074cbeeba4815b90329602002207790f23361480e\\\n  2a5a2d1fa6e293ccd5cd01279ad301176f091b84d6dd8e8f6501ffffffff30\\\n  d100f7762956100a2396403c60e13e7a13520167acc6d38978ec33ada44cf8\\\n  000000006a47304402207867e88e3fe2c926df29376d77eba81daf9f4a5573\\\n  44d4f02e9c7dcee96a51e4022076274c2365dc069e7ef797c95c75ab6e01ca\\\n  3757342f3e6f21a3d9d01086efb7012102ff9005f79aa4c22ac48fa93d9b7f\\\n  40f321db1c13cd70cf08bdab3e23c8d19620ffffffff02f04c3ba40b000000\\\n  1976a914ec73fe6129b249617bb5f20c8760708055fb6fdb88ac00ca9a3b00\\\n  0000001976a914cb7a56b046479f8c247875d672d3e1aed18c33f488ac0000\\\n  0000&quot;,\n  &quot;complete&quot;: true\n}\n</code></pre></div></div>\n<p>Clean up the shell variables used. Unlike previous subsections, we&#x27;re not going to send this transaction to the connected node with <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">sendrawtransaction</code>. This will allow us to illustrate in the <a href=\"core-examples-transaction-tutorial-offline-signing\" target=\"\" title=\"\">Offline Signing subsection</a> below how to spend a transaction which is not yet in the block chain or memory pool.</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Bash</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-bash theme-light\" data-lang=\"bash\" name=\"\" tabindex=\"0\">&gt; unset PARTLY_SIGNED_RAW_TX RAW_TX NEW_ADDRESS1 [...]\n</code></pre></div></div>"
}