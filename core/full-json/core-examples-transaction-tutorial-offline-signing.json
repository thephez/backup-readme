{
 "metadata": {
  "image": [],
  "title": "Offline Signing",
  "description": "We will now spend the transaction created in the Complex Raw Transaction subsection without sending it to the local node first.",
  "keywords": "",
  "robots": "index"
 },
 "api": {
  "method": "get",
  "url": "",
  "auth": "required",
  "results": {
   "codes": [
    {
     "status": 200,
     "language": "json",
     "code": "{}",
     "name": ""
    },
    {
     "status": 400,
     "language": "json",
     "code": "{}",
     "name": ""
    }
   ]
  },
  "params": []
 },
 "next": {
  "description": "",
  "pages": [
   {
    "type": "doc",
    "icon": "file-text-o",
    "name": "P2SH Multisig",
    "slug": "core-examples-transaction-tutorial-p2sh-multisig",
    "category": "Core Examples"
   }
  ]
 },
 "algolia": {
  "recordCount": 11,
  "publishPending": false,
  "translationFailure": false,
  "updatedAt": "2023-02-21T19:15:51.190Z"
 },
 "title": "Offline Signing",
 "icon": "",
 "updates": [],
 "type": "basic",
 "slug": "core-examples-transaction-tutorial-offline-signing",
 "excerpt": "",
 "body": "We will now spend the <<glossary:transaction>> created in the [Complex Raw Transaction subsection](core-examples-transaction-tutorial-complex-raw-transaction) without sending it to the local <<glossary:node>> first. This is the same basic process used by <<glossary:wallet>> programs for offline signing---which generally means signing a transaction without access to the current UTXO set.\n\nOffline signing is safe. However, in this example we will also be spending an <<glossary:output>> which is not part of the <<glossary:block chain>> because the transaction containing it has never been broadcast. That can be unsafe:\n\n> \ud83d\udea7 Unconfirmed Transaction Spending\n>\n> **Warning:** Transactions which spend outputs from unconfirmed transactions are vulnerable to transaction malleability. Be sure to read about transaction malleability and adopt good practices before spending unconfirmed transactions on mainnet.\n\nPut the previously signed (but not sent) transaction into a shell variable.\n\n``` shell\nOLD_SIGNED_RAW_TX=0100000002843d61e81058f0e682313b9e6f45ce67464b41fd8bb0\\\nf84678135aa56d596dea00000000494830450221009f7f356c0cc2d3337b5f76dfc6de9f\\\n9be7c8c5ac2074cbeeba4815b90329602002207790f23361480e2a5a2d1fa6e293ccd5cd\\\n01279ad301176f091b84d6dd8e8f6501ffffffff30d100f7762956100a2396403c60e13e\\\n7a13520167acc6d38978ec33ada44cf8000000006a47304402207867e88e3fe2c926df29\\\n376d77eba81daf9f4a557344d4f02e9c7dcee96a51e4022076274c2365dc069e7ef797c9\\\n5c75ab6e01ca3757342f3e6f21a3d9d01086efb7012102ff9005f79aa4c22ac48fa93d9b\\\n7f40f321db1c13cd70cf08bdab3e23c8d19620ffffffff02f04c3ba40b0000001976a914\\\nec73fe6129b249617bb5f20c8760708055fb6fdb88ac00ca9a3b000000001976a914cb7a\\\n56b046479f8c247875d672d3e1aed18c33f488ac00000000\n``` \n\n\n# 1. Decode signed transaction\n\nDecode the signed <<glossary:raw transaction>> so we can get its <<glossary:TXID>>. Also, choose a specific one of its UTXOs to spend and save that UTXO's <<glossary:output index>> number (vout) and hex <<glossary:pubkey script>> (scriptPubKey) into shell variables.\n\n``` shell\ndash-cli -regtest decoderawtransaction $OLD_SIGNED_RAW_TX\n``` \n\n``` json\n{\n  \"txid\": \"5efd61cf24c9644d79646627c4d1e192e9b2a760a5c720db8f4a9f76cb781077\",\n  \"size\": 339,\n  \"version\": 1,\n  \"locktime\": 0,\n  \"vin\": [\n    {\n      \"txid\": \"ea6d596da55a137846f8b08bfd414b4667ce456f9e3b3182e6f05810e86\\\n                13d84\",\n      \"vout\": 0,\n      \"scriptSig\": {\n        \"asm\": \"30450221009f7f356c0cc2d3337b5f76dfc6de9f9be7c8c5ac2074cbee\\\n                ba4815b90329602002207790f23361480e2a5a2d1fa6e293ccd5cd0127\\\n                9ad301176f091b84d6dd8e8f65[ALL]\",\n        \"hex\": \"4830450221009f7f356c0cc2d3337b5f76dfc6de9f9be7c8c5ac2074cb\\\n                eeba4815b90329602002207790f23361480e2a5a2d1fa6e293ccd5cd01\\\n                279ad301176f091b84d6dd8e8f6501\"\n      },\n      \"sequence\": 4294967295\n    },\n    {\n      \"txid\": \"f84ca4ad33ec7889d3c6ac670152137a3ee1603c4096230a10562976f70\\\n                0d130\",\n      \"vout\": 0,\n      \"scriptSig\": {\n        \"asm\": \"304402207867e88e3fe2c926df29376d77eba81daf9f4a557344d4f02e\\\n                9c7dcee96a51e4022076274c2365dc069e7ef797c95c75ab6e01ca3757\\\n                342f3e6f21a3d9d01086efb7[ALL] 02ff9005f79aa4c22ac48fa93d9b\\\n                7f40f321db1c13cd70cf08bdab3e23c8d19620\",\n        \"hex\": \"47304402207867e88e3fe2c926df29376d77eba81daf9f4a557344d4f0\\\n                2e9c7dcee96a51e4022076274c2365dc069e7ef797c95c75ab6e01ca37\\\n                57342f3e6f21a3d9d01086efb7012102ff9005f79aa4c22ac48fa93d9b\\\n                7f40f321db1c13cd70cf08bdab3e23c8d19620\"\n      },\n      \"sequence\": 4294967295\n    }\n  ],\n  \"vout\": [\n    {\n      \"value\": 499.99990000,\n      \"valueSat\": 49999990000,\n      \"n\": 0,\n      \"scriptPubKey\": {\n        \"asm\": \"OP_DUP OP_HASH160 ec73fe6129b249617bb5f20c8760708055fb6fdb\\\n                OP_EQUALVERIFY OP_CHECKSIG\",\n        \"hex\": \"76a914ec73fe6129b249617bb5f20c8760708055fb6fdb88ac\",\n        \"reqSigs\": 1,\n        \"type\": \"pubkeyhash\",\n        \"addresses\": [\n          \"yhshGrdbh3rWt9EPaSi7xSGRFMvFdzTZ8n\"\n        ]\n      }\n    },\n    {\n      \"value\": 10.00000000,\n      \"valueSat\": 1000000000,\n      \"n\": 1,\n      \"scriptPubKey\": {\n        \"asm\": \"OP_DUP OP_HASH160 cb7a56b046479f8c247875d672d3e1aed18c33f4\\\n                OP_EQUALVERIFY OP_CHECKSIG\",\n        \"hex\": \"76a914cb7a56b046479f8c247875d672d3e1aed18c33f488ac\",\n        \"reqSigs\": 1,\n        \"type\": \"pubkeyhash\",\n        \"addresses\": [\n          \"yesLaP5XFTaLZiWAo2zK8mFfUCtV8rRhKw\"\n        ]\n      }\n    }\n  ]\n}\n```\n``` bash\n\n> UTXO_TXID=5efd61cf24c9644d79646627c4d1e192e9b2a760a5c720db8f4a9f76cb781077\n> UTXO_VOUT=1\n> UTXO_OUTPUT_SCRIPT=76a914cb7a56b046479f8c247875d672d3e1aed18c33f488ac\n```\n\n# 2. Get new address\n\nGet a new <<glossary:address>> to spend the <<glossary:duffs>> to.\n\n``` bash\n> dash-cli -regtest getnewaddress\nyfijhy7gYY34J2U77xFKdMwfA8k5mVnSRa\n\n> NEW_ADDRESS=yfijhy7gYY34J2U77xFKdMwfA8k5mVnSRa\n```\n\n# 3. Create raw transaction\n\nCreate the raw transaction the same way we've done in the previous subsections.\n\n``` bash\n## Outputs - inputs = transaction fee, so always double-check your math!\n> dash-cli -regtest createrawtransaction '''\n    [\n      {\n        \"txid\": \"'$UTXO_TXID'\",\n        \"vout\": '$UTXO_VOUT'\n      }\n    ]\n    ''' '''\n    {\n      \"'$NEW_ADDRESS'\": 9.9999\n    }'''\n0100000001771078cb769f4a8fdb20c7a560a7b2e992e1d1c4276664794d64c9\\\n24cf61fd5e0100000000ffffffff01f0a29a3b000000001976a914d4d2078580\\\na9eea0ca9368d1c99c097279b8081f88ac00000000\n\n> RAW_TX=0100000001771078cb769f4a8fdb20c7a560a7b2e992e1d1c427666[...]\n```\n\n# 4. Sign raw transaction\n\nAttempt to sign the <<glossary:raw transaction>> without any special arguments, the way we successfully signed the the raw transaction in the [Simple Raw Transaction subsection](core-examples-transaction-tutorial-simple-raw-transaction). If you've read the [Transaction section](core-guide-transactions) of the guide, you may know why the call fails and leaves the raw transaction hex unchanged.\n\n![Old Transaction Data Required To Be Signed](https://dash-docs.github.io/img/dev/en-signing-output-to-spend.svg)\n\nAs illustrated above, the data that gets signed includes the <<glossary:TXID>> and vout from the previous transaction.  That information is included in the `createrawtransaction` raw transaction.  But the data that gets signed also includes the <<glossary:pubkey script>> from the previous transaction, even though it doesn't appear in either the unsigned or signed transaction.\n\nIn the other raw transaction subsections above, the previous <<glossary:output>> was part of the UTXO set known to the wallet, so the wallet was able to use the TXID and <<glossary:output index>> number to find the previous <<glossary:pubkey script>> and insert it automatically.\n\n## 4a. Without Pubkey Script\n\n> \ud83d\udea7 \n>\n> Note: This step demonstrates the error returned when an unknown output is referenced.\n\nIn this case, you're spending an <<glossary:output>> which is unknown to the wallet, so it can't automatically insert the previous pubkey script.\n\n``` bash\n> dash-cli -regtest signrawtransactionwithwallet $RAW_TX\n```\n``` json\n{\n  \"hex\": \"0100000001771078cb769f4a8fdb20c7a560a7b2e992e1d1c4276664794d64c9\\\n          24cf61fd5e0100000000ffffffff01f0a29a3b000000001976a914d4d2078580\\\n          a9eea0ca9368d1c99c097279b8081f88ac00000000\",\n  \"complete\": false,\n  \"errors\": [\n    {\n      \"txid\": \"5efd61cf24c9644d79646627c4d1e192e9b2a760a5c720db8f4a9f76cb7\\\n                81077\",\n      \"vout\": 1,\n      \"scriptSig\": \"\",\n      \"sequence\": 4294967295,\n      \"error\": \"Input not found or already spent\"\n    }\n  ]\n}\n```\n\n## 4b. With Pubkey Script\n\nSuccessfully sign the transaction by providing the previous pubkey script and other required input data.\n\nThis specific operation is typically what offline signing wallets do. The online wallet creates the raw transaction and gets the previous pubkey scripts for all the inputs. The user brings this information to the offline wallet. After displaying the transaction details to the user, the offline wallet signs the transaction as we did above. The user takes the signed transaction back to the online wallet, which broadcasts it.\n\n``` bash\n> dash-cli -regtest signrawtransactionwithwallet $RAW_TX '''\n    [\n      {\n        \"txid\": \"'$UTXO_TXID'\",\n        \"vout\": '$UTXO_VOUT',\n        \"scriptPubKey\": \"'$UTXO_OUTPUT_SCRIPT'\"\n      }\n    ]'''\n```\n``` json\n{\n  \"hex\": \"0100000001771078cb769f4a8fdb20c7a560a7b2e992e1d1c4276664794d64c9\\\n          24cf61fd5e010000006a47304402204ee3aae064dccedb511a84fcade3f35f2d\\\n          95119283e2e9f23659d91ce799cb6d02203a4cecbd7c154de8394b9505814f1e\\\n          c842e890980e7c4c20ed182f09a71d65f3012103b0b12fb25b6382b0680ce4b0\\\n          379bc201c4cbb391d3c0e171181f24c9a5df1468ffffffff01f0a29a3b000000\\\n          001976a914d4d2078580a9eea0ca9368d1c99c097279b8081f88ac00000000\",\n  \"complete\": true\n}\n```\n``` bash\n\n> SIGNED_RAW_TX=0100000001771078cb769f4a8fdb20c7a560a7b2e992e1d1[...]\n```\n\n# 5. Send raw transaction\n\n## 5a. Second transaction\n\nAttempt to broadcast the second transaction before we've broadcast the first transaction.  The <<glossary:node>> rejects this attempt because the second transaction spends an <<glossary:output>> which is not a UTXO the node knows about.\n\n``` bash\n> dash-cli -regtest sendrawtransaction $SIGNED_RAW_TX\n```\n``` bash\nerror code: -25\nerror message:\nMissing inputs\n\nerror: {\"code\":-22,\"message\":\"TX rejected\"}\n```\n\n## 5b. First transaction\n\nBroadcast the first transaction, which succeeds, and then broadcast the second transaction---which also now succeeds because the node now sees the UTXO.\n\n``` bash\n> dash-cli -regtest sendrawtransaction $OLD_SIGNED_RAW_TX\n5efd61cf24c9644d79646627c4d1e192e9b2a760a5c720db8f4a9f76cb781077\n> dash-cli -regtest sendrawtransaction $SIGNED_RAW_TX\nf89deefb927fbd03c5acab194de2ba8f98ab160b9c4b3f57bde63073c4b5f060\n```\n\n# 6. Check mempool\n\nWe have once again not generated an additional block, so the transactions above have not yet become part of the regtest block chain.  However, they are part of the local node's memory pool.\n\n``` bash\n> dash-cli -regtest getrawmempool\n```\n``` json\n[\n  \"f89deefb927fbd03c5acab194de2ba8f98ab160b9c4b3f57bde63073c4b5f060\",\n  \"5efd61cf24c9644d79646627c4d1e192e9b2a760a5c720db8f4a9f76cb781077\"\n]\n```\n\nRemove old shell variables.\n\n``` bash\n> unset OLD_SIGNED_RAW_TX SIGNED_RAW_TX RAW_TX [...]\n```",
 "order": 3,
 "isReference": false,
 "deprecated": false,
 "hidden": false,
 "sync_unique": "",
 "link_url": "",
 "link_external": false,
 "reusableContent": [],
 "previousSlug": "",
 "slugUpdatedAt": "2022-05-17T23:15:18.103Z",
 "revision": 5,
 "_id": "63f5176df91c7700118e77d9",
 "version": "63f5176df91c7700118e7825",
 "updatedAt": "2023-01-22T15:54:36.961Z",
 "createdAt": "2019-10-24T15:53:55.192Z",
 "project": "5daf2e65f4109c0040fd51e1",
 "user": "62b2101422da70001ee51d95",
 "parentDoc": "63f5176df91c7700118e77d5",
 "category": "63f5176df91c7700118e77a0",
 "__v": 1,
 "pendingAlgoliaPublish": false,
 "isApi": false,
 "id": "63f5176df91c7700118e77d9",
 "body_html": "We will now spend the <<glossary:transaction>> created in the [Complex Raw Transaction subsection](core-examples-transaction-tutorial-complex-raw-transaction) without sending it to the local <<glossary:node>> first. This is the same basic process used by <<glossary:wallet>> programs for offline signing---which generally means signing a transaction without access to the current UTXO set.\n\nOffline signing is safe. However, in this example we will also be spending an <<glossary:output>> which is not part of the <<glossary:block chain>> because the transaction containing it has never been broadcast. That can be unsafe:\n\n> \ud83d\udea7 Unconfirmed Transaction Spending\n>\n> **Warning:** Transactions which spend outputs from unconfirmed transactions are vulnerable to transaction malleability. Be sure to read about transaction malleability and adopt good practices before spending unconfirmed transactions on mainnet.\n\nPut the previously signed (but not sent) transaction into a shell variable.\n\n``` shell\nOLD_SIGNED_RAW_TX=0100000002843d61e81058f0e682313b9e6f45ce67464b41fd8bb0\\\nf84678135aa56d596dea00000000494830450221009f7f356c0cc2d3337b5f76dfc6de9f\\\n9be7c8c5ac2074cbeeba4815b90329602002207790f23361480e2a5a2d1fa6e293ccd5cd\\\n01279ad301176f091b84d6dd8e8f6501ffffffff30d100f7762956100a2396403c60e13e\\\n7a13520167acc6d38978ec33ada44cf8000000006a47304402207867e88e3fe2c926df29\\\n376d77eba81daf9f4a557344d4f02e9c7dcee96a51e4022076274c2365dc069e7ef797c9\\\n5c75ab6e01ca3757342f3e6f21a3d9d01086efb7012102ff9005f79aa4c22ac48fa93d9b\\\n7f40f321db1c13cd70cf08bdab3e23c8d19620ffffffff02f04c3ba40b0000001976a914\\\nec73fe6129b249617bb5f20c8760708055fb6fdb88ac00ca9a3b000000001976a914cb7a\\\n56b046479f8c247875d672d3e1aed18c33f488ac00000000\n``` \n\n\n# 1. Decode signed transaction\n\nDecode the signed <<glossary:raw transaction>> so we can get its <<glossary:TXID>>. Also, choose a specific one of its UTXOs to spend and save that UTXO's <<glossary:output index>> number (vout) and hex <<glossary:pubkey script>> (scriptPubKey) into shell variables.\n\n``` shell\ndash-cli -regtest decoderawtransaction $OLD_SIGNED_RAW_TX\n``` \n\n``` json\n{\n  \"txid\": \"5efd61cf24c9644d79646627c4d1e192e9b2a760a5c720db8f4a9f76cb781077\",\n  \"size\": 339,\n  \"version\": 1,\n  \"locktime\": 0,\n  \"vin\": [\n    {\n      \"txid\": \"ea6d596da55a137846f8b08bfd414b4667ce456f9e3b3182e6f05810e86\\\n                13d84\",\n      \"vout\": 0,\n      \"scriptSig\": {\n        \"asm\": \"30450221009f7f356c0cc2d3337b5f76dfc6de9f9be7c8c5ac2074cbee\\\n                ba4815b90329602002207790f23361480e2a5a2d1fa6e293ccd5cd0127\\\n                9ad301176f091b84d6dd8e8f65[ALL]\",\n        \"hex\": \"4830450221009f7f356c0cc2d3337b5f76dfc6de9f9be7c8c5ac2074cb\\\n                eeba4815b90329602002207790f23361480e2a5a2d1fa6e293ccd5cd01\\\n                279ad301176f091b84d6dd8e8f6501\"\n      },\n      \"sequence\": 4294967295\n    },\n    {\n      \"txid\": \"f84ca4ad33ec7889d3c6ac670152137a3ee1603c4096230a10562976f70\\\n                0d130\",\n      \"vout\": 0,\n      \"scriptSig\": {\n        \"asm\": \"304402207867e88e3fe2c926df29376d77eba81daf9f4a557344d4f02e\\\n                9c7dcee96a51e4022076274c2365dc069e7ef797c95c75ab6e01ca3757\\\n                342f3e6f21a3d9d01086efb7[ALL] 02ff9005f79aa4c22ac48fa93d9b\\\n                7f40f321db1c13cd70cf08bdab3e23c8d19620\",\n        \"hex\": \"47304402207867e88e3fe2c926df29376d77eba81daf9f4a557344d4f0\\\n                2e9c7dcee96a51e4022076274c2365dc069e7ef797c95c75ab6e01ca37\\\n                57342f3e6f21a3d9d01086efb7012102ff9005f79aa4c22ac48fa93d9b\\\n                7f40f321db1c13cd70cf08bdab3e23c8d19620\"\n      },\n      \"sequence\": 4294967295\n    }\n  ],\n  \"vout\": [\n    {\n      \"value\": 499.99990000,\n      \"valueSat\": 49999990000,\n      \"n\": 0,\n      \"scriptPubKey\": {\n        \"asm\": \"OP_DUP OP_HASH160 ec73fe6129b249617bb5f20c8760708055fb6fdb\\\n                OP_EQUALVERIFY OP_CHECKSIG\",\n        \"hex\": \"76a914ec73fe6129b249617bb5f20c8760708055fb6fdb88ac\",\n        \"reqSigs\": 1,\n        \"type\": \"pubkeyhash\",\n        \"addresses\": [\n          \"yhshGrdbh3rWt9EPaSi7xSGRFMvFdzTZ8n\"\n        ]\n      }\n    },\n    {\n      \"value\": 10.00000000,\n      \"valueSat\": 1000000000,\n      \"n\": 1,\n      \"scriptPubKey\": {\n        \"asm\": \"OP_DUP OP_HASH160 cb7a56b046479f8c247875d672d3e1aed18c33f4\\\n                OP_EQUALVERIFY OP_CHECKSIG\",\n        \"hex\": \"76a914cb7a56b046479f8c247875d672d3e1aed18c33f488ac\",\n        \"reqSigs\": 1,\n        \"type\": \"pubkeyhash\",\n        \"addresses\": [\n          \"yesLaP5XFTaLZiWAo2zK8mFfUCtV8rRhKw\"\n        ]\n      }\n    }\n  ]\n}\n```\n``` bash\n\n> UTXO_TXID=5efd61cf24c9644d79646627c4d1e192e9b2a760a5c720db8f4a9f76cb781077\n> UTXO_VOUT=1\n> UTXO_OUTPUT_SCRIPT=76a914cb7a56b046479f8c247875d672d3e1aed18c33f488ac\n```\n\n# 2. Get new address\n\nGet a new <<glossary:address>> to spend the <<glossary:duffs>> to.\n\n``` bash\n> dash-cli -regtest getnewaddress\nyfijhy7gYY34J2U77xFKdMwfA8k5mVnSRa\n\n> NEW_ADDRESS=yfijhy7gYY34J2U77xFKdMwfA8k5mVnSRa\n```\n\n# 3. Create raw transaction\n\nCreate the raw transaction the same way we've done in the previous subsections.\n\n``` bash\n## Outputs - inputs = transaction fee, so always double-check your math!\n> dash-cli -regtest createrawtransaction '''\n    [\n      {\n        \"txid\": \"'$UTXO_TXID'\",\n        \"vout\": '$UTXO_VOUT'\n      }\n    ]\n    ''' '''\n    {\n      \"'$NEW_ADDRESS'\": 9.9999\n    }'''\n0100000001771078cb769f4a8fdb20c7a560a7b2e992e1d1c4276664794d64c9\\\n24cf61fd5e0100000000ffffffff01f0a29a3b000000001976a914d4d2078580\\\na9eea0ca9368d1c99c097279b8081f88ac00000000\n\n> RAW_TX=0100000001771078cb769f4a8fdb20c7a560a7b2e992e1d1c427666[...]\n```\n\n# 4. Sign raw transaction\n\nAttempt to sign the <<glossary:raw transaction>> without any special arguments, the way we successfully signed the the raw transaction in the [Simple Raw Transaction subsection](core-examples-transaction-tutorial-simple-raw-transaction). If you've read the [Transaction section](core-guide-transactions) of the guide, you may know why the call fails and leaves the raw transaction hex unchanged.\n\n![Old Transaction Data Required To Be Signed](https://dash-docs.github.io/img/dev/en-signing-output-to-spend.svg)\n\nAs illustrated above, the data that gets signed includes the <<glossary:TXID>> and vout from the previous transaction.  That information is included in the `createrawtransaction` raw transaction.  But the data that gets signed also includes the <<glossary:pubkey script>> from the previous transaction, even though it doesn't appear in either the unsigned or signed transaction.\n\nIn the other raw transaction subsections above, the previous <<glossary:output>> was part of the UTXO set known to the wallet, so the wallet was able to use the TXID and <<glossary:output index>> number to find the previous <<glossary:pubkey script>> and insert it automatically.\n\n## 4a. Without Pubkey Script\n\n> \ud83d\udea7 \n>\n> Note: This step demonstrates the error returned when an unknown output is referenced.\n\nIn this case, you're spending an <<glossary:output>> which is unknown to the wallet, so it can't automatically insert the previous pubkey script.\n\n``` bash\n> dash-cli -regtest signrawtransactionwithwallet $RAW_TX\n```\n``` json\n{\n  \"hex\": \"0100000001771078cb769f4a8fdb20c7a560a7b2e992e1d1c4276664794d64c9\\\n          24cf61fd5e0100000000ffffffff01f0a29a3b000000001976a914d4d2078580\\\n          a9eea0ca9368d1c99c097279b8081f88ac00000000\",\n  \"complete\": false,\n  \"errors\": [\n    {\n      \"txid\": \"5efd61cf24c9644d79646627c4d1e192e9b2a760a5c720db8f4a9f76cb7\\\n                81077\",\n      \"vout\": 1,\n      \"scriptSig\": \"\",\n      \"sequence\": 4294967295,\n      \"error\": \"Input not found or already spent\"\n    }\n  ]\n}\n```\n\n## 4b. With Pubkey Script\n\nSuccessfully sign the transaction by providing the previous pubkey script and other required input data.\n\nThis specific operation is typically what offline signing wallets do. The online wallet creates the raw transaction and gets the previous pubkey scripts for all the inputs. The user brings this information to the offline wallet. After displaying the transaction details to the user, the offline wallet signs the transaction as we did above. The user takes the signed transaction back to the online wallet, which broadcasts it.\n\n``` bash\n> dash-cli -regtest signrawtransactionwithwallet $RAW_TX '''\n    [\n      {\n        \"txid\": \"'$UTXO_TXID'\",\n        \"vout\": '$UTXO_VOUT',\n        \"scriptPubKey\": \"'$UTXO_OUTPUT_SCRIPT'\"\n      }\n    ]'''\n```\n``` json\n{\n  \"hex\": \"0100000001771078cb769f4a8fdb20c7a560a7b2e992e1d1c4276664794d64c9\\\n          24cf61fd5e010000006a47304402204ee3aae064dccedb511a84fcade3f35f2d\\\n          95119283e2e9f23659d91ce799cb6d02203a4cecbd7c154de8394b9505814f1e\\\n          c842e890980e7c4c20ed182f09a71d65f3012103b0b12fb25b6382b0680ce4b0\\\n          379bc201c4cbb391d3c0e171181f24c9a5df1468ffffffff01f0a29a3b000000\\\n          001976a914d4d2078580a9eea0ca9368d1c99c097279b8081f88ac00000000\",\n  \"complete\": true\n}\n```\n``` bash\n\n> SIGNED_RAW_TX=0100000001771078cb769f4a8fdb20c7a560a7b2e992e1d1[...]\n```\n\n# 5. Send raw transaction\n\n## 5a. Second transaction\n\nAttempt to broadcast the second transaction before we've broadcast the first transaction.  The <<glossary:node>> rejects this attempt because the second transaction spends an <<glossary:output>> which is not a UTXO the node knows about.\n\n``` bash\n> dash-cli -regtest sendrawtransaction $SIGNED_RAW_TX\n```\n``` bash\nerror code: -25\nerror message:\nMissing inputs\n\nerror: {\"code\":-22,\"message\":\"TX rejected\"}\n```\n\n## 5b. First transaction\n\nBroadcast the first transaction, which succeeds, and then broadcast the second transaction---which also now succeeds because the node now sees the UTXO.\n\n``` bash\n> dash-cli -regtest sendrawtransaction $OLD_SIGNED_RAW_TX\n5efd61cf24c9644d79646627c4d1e192e9b2a760a5c720db8f4a9f76cb781077\n> dash-cli -regtest sendrawtransaction $SIGNED_RAW_TX\nf89deefb927fbd03c5acab194de2ba8f98ab160b9c4b3f57bde63073c4b5f060\n```\n\n# 6. Check mempool\n\nWe have once again not generated an additional block, so the transactions above have not yet become part of the regtest block chain.  However, they are part of the local node's memory pool.\n\n``` bash\n> dash-cli -regtest getrawmempool\n```\n``` json\n[\n  \"f89deefb927fbd03c5acab194de2ba8f98ab160b9c4b3f57bde63073c4b5f060\",\n  \"5efd61cf24c9644d79646627c4d1e192e9b2a760a5c720db8f4a9f76cb781077\"\n]\n```\n\nRemove old shell variables.\n\n``` bash\n> unset OLD_SIGNED_RAW_TX SIGNED_RAW_TX RAW_TX [...]\n```"
}