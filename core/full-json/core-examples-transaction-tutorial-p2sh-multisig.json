{
 "metadata": {
  "image": [],
  "title": "P2SH Multisig",
  "description": "In this subsection, we will create a P2SH multisig address, spend duffs to it, and then spend those duffs from it to another address.",
  "keywords": "",
  "robots": "index"
 },
 "api": {
  "method": "get",
  "url": "",
  "auth": "required",
  "results": {
   "codes": [
    {
     "status": 200,
     "language": "json",
     "code": "{}",
     "name": ""
    },
    {
     "status": 400,
     "language": "json",
     "code": "{}",
     "name": ""
    }
   ]
  },
  "params": []
 },
 "next": {
  "description": "",
  "pages": [
   {
    "type": "doc",
    "icon": "file-text-o",
    "name": "P2P Network",
    "slug": "core-examples-p2p-network",
    "category": "Core Examples"
   }
  ]
 },
 "algolia": {
  "recordCount": 13,
  "publishPending": false,
  "translationFailure": false,
  "updatedAt": "2023-02-21T19:15:51.409Z"
 },
 "title": "P2SH Multisig",
 "icon": "",
 "updates": [],
 "type": "basic",
 "slug": "core-examples-transaction-tutorial-p2sh-multisig",
 "excerpt": "",
 "body": "In this subsection, we will create a <<glossary:P2SH multisig>> address, spend <<glossary:duffs>> to it, and then spend those duffs from it to another <<glossary:address>>.\n\nCreating a <<glossary:multisig>> address is easy. Multisig <<glossary:outputs>> have two parameters, the *minimum* number of signatures required (*m*) and the *number* of <<glossary:public keys>> to use to validate those signatures. This is called m-of-n, and in this case we'll be using 2-of-3.\n\n# 1. Get new addresses\n\nGenerate three new P2PKH addresses. A <<glossary:P2PKH address>> cannot be used with the multisig redeem script created below. (Hashing each public key is unnecessary anyway---all the public keys are protected by a hash when the <<glossary:redeem script>> is hashed.) However, Dash Core uses addresses as a way to reference the underlying full (unhashed) public keys it knows about, so we get the three new addresses above in order to use their public keys.\n\nRecall from the Guide that the hashed public keys used in addresses obfuscate the full public key, so you cannot give an address to another person or device as part of creating a typical multisig output or P2SH multisig redeem script. You must give them a full public key.\n\n``` bash\n    > dash-cli -regtest getnewaddress\n    yYtWtpW7akCc2a5En8NsXeTGENyYbNgv9q\n    > dash-cli -regtest getnewaddress\n    yarm2x9eDFd9dKCycyPigwwj1vfJcYFxsH\n    > dash-cli -regtest getnewaddress\n    yLknHbtnjJRVWQr78aTfCPfNB42jfNkDWK\n\n    > NEW_ADDRESS1=yYtWtpW7akCc2a5En8NsXeTGENyYbNgv9q\n    > NEW_ADDRESS2=yarm2x9eDFd9dKCycyPigwwj1vfJcYFxsH\n    > NEW_ADDRESS3=yLknHbtnjJRVWQr78aTfCPfNB42jfNkDWK\n```\n\n# 2. Get public key\n\nUse the [`getaddressinfo` RPC](core-api-ref-remote-procedure-calls-wallet#getaddressinfo) to display the full (unhashed) public key for the addresses.  This is the information which will actually be included in the multisig redeem script.  This is also the information you would give another person or device as part of creating a multisig output or P2SH multisig redeem script.\n\nWe save the address returned to a shell variable.\n\n``` bash\n> dash-cli -regtest getaddressinfo $NEW_ADDRESS3\n```\n``` json\n{\n  \"address\": \"yLknHbtnjJRVWQr78aTfCPfNB42jfNkDWK\",\n  \"scriptPubKey\": \"76a91404caa000366b99780f8e606ccc818883ca7f48f888ac\",\n  \"ismine\": true,\n  \"solvable\": true,\n  \"iswatchonly\": false,\n  \"isscript\": false,\n  \"pubkey\": \"038007ef6fd812d73da054271b68a42dae06672cff2a30b2814935537e5930ebf6\",\n  \"iscompressed\": true,\n  \"label\": \"\",\n  \"ischange\": false,\n}\n\n```\n``` bash\n\n> NEW_ADDRESS3_PUBLIC_KEY=038007ef6fd812d73da054271b68a42dae0667[...]\n```\n\n# 3. Create multisig address\n\nUse the [`createmultisig` RPC](core-api-ref-remote-procedure-calls-util#createmultisig) with two arguments, the number (*n*) of signatures required and a list of public keys. The P2SH address is returned along with the redeem script which must be provided when we spend duffs sent to the P2SH address.\n\n>\u2757\ufe0f Redeem Script\n>\n> **Warning:** You must not lose the redeem script, especially if you don't have a record of which public keys you used to create the P2SH multisig address. You need the redeem script to spend any dash sent to the P2SH address. \n>\n> If you lose the redeem script, you can recreate it by running the same command above, with the public keys listed in the same order. **However, if you lose both the redeem script and even one of the public keys, you will never be able to spend duffs sent to that P2SH address.**\n\nNeither the address nor the redeem script are stored in the wallet when you use `createmultisig`. To store them in the wallet, use the [`addmultisigaddress` RPC](core-api-ref-remote-procedure-calls-wallet#addmultisigaddress) instead.  If you add an address to the wallet, you should also make a new backup.\n\n``` bash\n> dash-cli -regtest createmultisig 2 '''\n    [\n      \"'$NEW_ADDRESS1_PUBLIC_KEY'\",\n      \"'$NEW_ADDRESS2_PUBLIC_KEY'\",\n      \"'$NEW_ADDRESS3_PUBLIC_KEY'\"\n    ]'''\n```\n``` json\n{\n  \"address\": \"8meEZF54K7GxhHhdLCCeNwFQjHENv4CK86\",\n  \"redeemScript\": \"522103fa8866cccae3c975a72884443a351801a0ea9721cbe721558\\\n                  6ddd6fab5f39f262103b2259f42a241f4870e794521594f2af7aadf0\\\n                  e4c580a43582e58630e4618634621038007ef6fd812d73da054271b6\\\n                  8a42dae06672cff2a30b2814935537e5930ebf653ae\"\n}\n```\n``` bash\n\n> P2SH_ADDRESS=8meEZF54K7GxhHhdLCCeNwFQjHENv4CK86\n> P2SH_REDEEM_SCRIPT=522103fa8866cccae3c975a72884443a351801a0ea9[...]\n```\n\n# 4. Fund multisig address\n\nPaying the P2SH multisig address with Dash Core is as simple as paying a more common P2PKH address. Here we use the same command (but different variable) we used in the [Simple Spending subsection](core-examples-transaction-tutorial-simple-spending). As before, this command automatically selects an UTXO, creates a <<glossary:change output>> to a new one of our P2PKH addresses if necessary, and pays a <<glossary:transaction fee>> if necessary.\n\nWe save that <<glossary:TXID>> to a shell variable as the TXID of the UTXO we plan to spend next.\n\n``` bash\n> dash-cli -regtest sendtoaddress $P2SH_ADDRESS 10.00\nddb2a2eb2402a9ae61d7db93a9a48c0747859d899e704b10f5b72145779f9c52\n\n> UTXO_TXID=ddb2a2eb2402a9ae61d7db93a9a48c0747859d899e704b10f5b7[...]\n```\n\n# 5. Get decoded transaction\n\nWe use the [`getrawtransaction` RPC](core-api-ref-remote-procedure-calls-raw-transactions#getrawtransaction) with the optional second argument (*true*) to get the decoded transaction we just created with `sendtoaddress`. We choose one of the <<glossary:outputs>> (the multisig address one) to be our UTXO and get its <<glossary:output index>> number (vout) and <<glossary:pubkey script>> (scriptPubKey).\n\n``` bash\n> dash-cli -regtest getrawtransaction $UTXO_TXID 1\n```\n``` json\n{\n  \"hex\": \"010000000130d100f7762956100a2396403c60e13e7a13520167acc6d38978ec\\\n          33ada44cf8010000006b48304502210084effe3132550e6ba43a7f4cc54ad30d\\\n          001c0dbc3ea66d638e5f3d6039a28c2b022044c8cd89cf455b8650fe259306eb\\\n          2a30b0112969717e469a722bca0263e0975d01210324c2226564b19f0948306b\\\n          b7160a735c28001bbd046cd46059df9f8434f41254feffffff0200ca9a3b0000\\\n          000017a9144f334f26e350c8903c92ff25b733670902cfad5a8700e0052d0b00\\\n          00001976a91479165c2155b8fec5c702ec7f251d0982f27b402988ac67000000\",\n  \"txid\": \"ddb2a2eb2402a9ae61d7db93a9a48c0747859d899e704b10f5b72145779f9c52\",\n  \"size\": 224,\n  \"version\": 1,\n  \"locktime\": 103,\n  \"vin\": [\n    {\n      \"txid\": \"f84ca4ad33ec7889d3c6ac670152137a3ee1603c4096230a10562976f70\\\n                0d130\",\n      \"vout\": 1,\n      \"scriptSig\": {\n        \"asm\": \"304502210084effe3132550e6ba43a7f4cc54ad30d001c0dbc3ea66d63\\\n                8e5f3d6039a28c2b022044c8cd89cf455b8650fe259306eb2a30b01129\\\n                69717e469a722bca0263e0975d[ALL] 0324c2226564b19f0948306bb7\\\n                160a735c28001bbd046cd46059df9f8434f41254\",\n        \"hex\": \"48304502210084effe3132550e6ba43a7f4cc54ad30d001c0dbc3ea66d\\\n                638e5f3d6039a28c2b022044c8cd89cf455b8650fe259306eb2a30b011\\\n                2969717e469a722bca0263e0975d01210324c2226564b19f0948306bb7\\\n                160a735c28001bbd046cd46059df9f8434f41254\"\n      },\n      \"sequence\": 4294967294\n    }\n  ],\n  \"vout\": [\n    {\n      \"value\": 10.00000000,\n      \"valueSat\": 1000000000,\n      \"n\": 0,\n      \"scriptPubKey\": {\n        \"asm\": \"OP_HASH160 4f334f26e350c8903c92ff25b733670902cfad5a OP_EQUAL\",\n        \"hex\": \"a9144f334f26e350c8903c92ff25b733670902cfad5a87\",\n        \"reqSigs\": 1,\n        \"type\": \"scripthash\",\n        \"addresses\": [\n          \"8meEZF54K7GxhHhdLCCeNwFQjHENv4CK86\"\n        ]\n      }\n    },\n    {\n      \"value\": 480.00000000,\n      \"valueSat\": 48000000000,\n      \"n\": 1,\n      \"scriptPubKey\": {\n        \"asm\": \"OP_DUP OP_HASH160 79165c2155b8fec5c702ec7f251d0982f27b4029\\\n                OP_EQUALVERIFY OP_CHECKSIG\",\n        \"hex\": \"76a91479165c2155b8fec5c702ec7f251d0982f27b402988ac\",\n        \"reqSigs\": 1,\n        \"type\": \"pubkeyhash\",\n        \"addresses\": [\n          \"yXMhQ1L5q3PcnJgEhyAFztQPPRaEr8Mh8s\"\n        ]\n      }\n    }\n  ]\n}\n```\n``` bash\n\n> UTXO_VOUT=0\n> UTXO_OUTPUT_SCRIPT=a9144f334f26e350c8903c92ff25b733670902cfad5a87\n```\n\n# 6. Get new address\n\nWe generate a new P2PKH address to use in the output we're about to create.\n\n``` bash\n> dash-cli -regtest getnewaddress\nyZSxAakpoWGG3vcsvpk9qNtsYREhump4Cr\n\n> NEW_ADDRESS4=yZSxAakpoWGG3vcsvpk9qNtsYREhump4Cr\n```\n\n# 7. Create raw transaction\n\nWe generate the <<glossary:raw transaction>> the same way we did in the [Simple Raw Transaction subsection](core-examples-transaction-tutorial-simple-raw-transaction).\n\n``` bash\n## Outputs - inputs = transaction fee, so always double-check your math!\n> dash-cli -regtest createrawtransaction '''\n    [\n      {\n        \"txid\": \"'$UTXO_TXID'\",\n        \"vout\": '$UTXO_VOUT'\n      }\n   ]\n   ''' '''\n   {\n     \"'$NEW_ADDRESS4'\": 9.998\n   }'''\n\n0100000001529c9f774521b7f5104b709e899d8547078ca4a993dbd761aea902\\\n24eba2b2dd0000000000ffffffff01c0bc973b000000001976a914900504f96c\\\n55d6ebe1c33581ba9430ca05b12a1488ac00000000\n\n010000000175e1769813db8418fea17576694af1ff31cb2b512b7333e6eb42f0\\\n30d0d778720000000000ffffffff01c0bc973b000000001976a914b6f64f5bf3\\\ne38f25ead28817df7929c06fe847ee88ac00000000\n\n> RAW_TX=0100000001529c9f774521b7f5104b709e899d8547078ca4a993dbd[...]\n```\n\n# 8. Get private key\n\nWe get the <<glossary:private keys>> for two of the <<glossary:public keys>> we used to create the transaction, the same way we got private keys in the [Complex Raw Transaction subsection](/docs/core-examples-transaction-tutorial-complex-raw-transaction). Recall that we created a 2-of-3 multisig pubkey script, so signatures from two private keys are needed.\n\n>\u2757\ufe0f Private Key Warning\n>\n> **Reminder:** Users should never manually manage private keys on mainnet. See the warning in the [complex raw transaction section](core-examples-transaction-tutorial-complex-raw-transaction).\n\n``` bash\n> dash-cli -regtest dumpprivkey $NEW_ADDRESS1\ncThhxbQUtBDzHZbZrW6XAR4XkXfaQf4Abo7BQaTK2zVp7sVrHdmv\n> dash-cli -regtest dumpprivkey $NEW_ADDRESS3\ncUbYymPeHhRszTn64Xg7dzYKez8YC83M39ZTPJDiBDu8dRD3EjzF\n\n> NEW_ADDRESS1_PRIVATE_KEY=cThhxbQUtBDzHZbZrW6XAR4XkXfaQf4Abo7BQ[...]\n> NEW_ADDRESS3_PRIVATE_KEY=cUbYymPeHhRszTn64Xg7dzYKez8YC83M39ZTP[...]\n```\n\n# 9. Sign raw transaction\n\n## 9a. Private Key 1\n\nWe make the first <<glossary:signature>>. The input argument (JSON object) takes the additional <<glossary:redeem script>> parameter so that it can append the redeem script to the <<glossary:signature script>> after the two signatures.\n\n``` bash\n> dash-cli -regtest signrawtransactionwithkey $RAW_TX '''\n    [\n      \"'$NEW_ADDRESS1_PRIVATE_KEY'\"\n    ]''' '''\n    [\n      {\n        \"txid\": \"'$UTXO_TXID'\",\n        \"vout\": '$UTXO_VOUT',\n        \"scriptPubKey\": \"'$UTXO_OUTPUT_SCRIPT'\",\n        \"redeemScript\": \"'$P2SH_REDEEM_SCRIPT'\"\n      }\n    ]\n    '''\n```\n``` json\n{\n  \"hex\": \"0100000001529c9f774521b7f5104b709e899d8547078ca4a993dbd761aea902\\\n          24eba2b2dd00000000b40047304402201cc50eac6d2db04dabd8ccd68b3116c0\\\n          a8d37e7e41335e0d0ab441a5aa08cdcd02204011d184dca2489758c05e01556f\\\n          f2ff9c48c39ff434fdfb1d9e0284fbde7701014c69522103fa8866cccae3c975\\\n          a72884443a351801a0ea9721cbe7215586ddd6fab5f39f262103b2259f42a241\\\n          f4870e794521594f2af7aadf0e4c580a43582e58630e4618634621038007ef6f\\\n          d812d73da054271b68a42dae06672cff2a30b2814935537e5930ebf653aeffff\\\n          ffff01c0bc973b000000001976a914900504f96c55d6ebe1c33581ba9430ca05\\\n          b12a1488ac00000000\",\n  \"complete\": false,\n  \"errors\": [\n    {\n      \"txid\": \"ddb2a2eb2402a9ae61d7db93a9a48c0747859d899e704b10f5b72145779\\\n                f9c52\",\n      \"vout\": 0,\n      \"scriptSig\": \"0047304402201cc50eac6d2db04dabd8ccd68b3116c0a8d37e7e41\\\n                    335e0d0ab441a5aa08cdcd02204011d184dca2489758c05e01556f\\\n                    f2ff9c48c39ff434fdfb1d9e0284fbde7701014c69522103fa8866\\\n                    cccae3c975a72884443a351801a0ea9721cbe7215586ddd6fab5f3\\\n                    9f262103b2259f42a241f4870e794521594f2af7aadf0e4c580a43\\\n                    582e58630e4618634621038007ef6fd812d73da054271b68a42dae\\\n                    06672cff2a30b2814935537e5930ebf653ae\",\n      \"sequence\": 4294967295,\n      \"error\": \"Signature must be zero for failed CHECK(MULTI)SIG operation\"\n    }\n  ]\n}\n```\n``` bash\n\n> PARTLY_SIGNED_RAW_TX=010000000175e1769813db8418fea17576694af1f[...]\n```\n\n## 9b. Private Key 3\n\nThe [`signrawtransactionwithkey`](core-api-ref-remote-procedure-calls-raw-transactions#signrawtransactionwithkey) call used here is nearly identical to the one used above.  The only difference is the private key used.  Now that the two required signatures have been provided, the transaction is marked as complete.\n\n``` bash\n> dash-cli -regtest signrawtransactionwithkey $PARTLY_SIGNED_RAW_TX '''\n    [\n      \"'$NEW_ADDRESS3_PRIVATE_KEY'\"\n    ]''' '''\n    [\n      {\n        \"txid\": \"'$UTXO_TXID'\",\n        \"vout\": '$UTXO_VOUT',\n        \"scriptPubKey\": \"'$UTXO_OUTPUT_SCRIPT'\",\n        \"redeemScript\": \"'$P2SH_REDEEM_SCRIPT'\"\n      }\n    ]\n    '''\n```\n``` json\n{\n  \"hex\": \"0100000001529c9f774521b7f5104b709e899d8547078ca4a993dbd761aea902\\\n          24eba2b2dd00000000fdfd000047304402201cc50eac6d2db04dabd8ccd68b31\\\n          16c0a8d37e7e41335e0d0ab441a5aa08cdcd02204011d184dca2489758c05e01\\\n          556ff2ff9c48c39ff434fdfb1d9e0284fbde770101483045022100e0e1f95f1a\\\n          b85814ee0920d5bd28c6831086e838af4bec344fd8654a0b58525f022075989f\\\n          d3a677e1522aa85d45c41720aec9e7c127acadb6c14338c3b1a768ab28014c69\\\n          522103fa8866cccae3c975a72884443a351801a0ea9721cbe7215586ddd6fab5\\\n          f39f262103b2259f42a241f4870e794521594f2af7aadf0e4c580a43582e5863\\\n          0e4618634621038007ef6fd812d73da054271b68a42dae06672cff2a30b28149\\\n          35537e5930ebf653aeffffffff01c0bc973b000000001976a914900504f96c55\\\n          d6ebe1c33581ba9430ca05b12a1488ac00000000\",\n  \"complete\": true\n}\n```\n``` bash\n\n> SIGNED_RAW_TX=0100000001529c9f774521b7f5104b709e899d8547078ca4[...]\n```\n\n# 10. Send raw transaction\n\nWe send the transaction spending the P2SH multisig output to the local <<glossary:node>>, which accepts it.\n\n``` bash\n> dash-cli -regtest sendrawtransaction $SIGNED_RAW_TX\n483061b32894aacf6c4050291252a480c2a4c869eb85bd45082fb87d6b175ae8\n```",
 "mdxAltBody": "",
 "order": 4,
 "isReference": false,
 "deprecated": false,
 "hidden": false,
 "sync_unique": "",
 "link_url": "",
 "link_external": false,
 "reusableContent": [],
 "previousSlug": "",
 "slugUpdatedAt": "2022-05-18T14:25:28.499Z",
 "revision": 5,
 "_id": "63f5176df91c7700118e77da",
 "version": "63f5176df91c7700118e7825",
 "updatedAt": "2023-01-16T15:09:50.801Z",
 "createdAt": "2019-10-24T15:54:10.361Z",
 "project": "5daf2e65f4109c0040fd51e1",
 "user": "5b8400d7185d5e00036dcc3b",
 "parentDoc": "63f5176df91c7700118e77d5",
 "category": "63f5176df91c7700118e77a0",
 "__v": 1,
 "pendingAlgoliaPublish": false,
 "isApi": false,
 "id": "63f5176df91c7700118e77da",
 "body_html": "<p>In this subsection, we will create a <span class=\"GlossaryItem-trigger\">P2SH multisig</span> address, spend <span class=\"GlossaryItem-trigger\">duffs</span> to it, and then spend those duffs from it to another <span class=\"GlossaryItem-trigger\">address</span>.</p>\n<p>Creating a <span class=\"GlossaryItem-trigger\">multisig</span> address is easy. Multisig <span class=\"GlossaryItem-trigger\">outputs</span> have two parameters, the <em>minimum</em> number of signatures required (<em>m</em>) and the <em>number</em> of <span class=\"GlossaryItem-trigger\">public keys</span> to use to validate those signatures. This is called m-of-n, and in this case we&#x27;ll be using 2-of-3.</p>\n<h1 class=\"heading heading-1 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"1-get-new-addresses\"></div><div class=\"heading-text\"><div id=\"section-1-get-new-addresses\" class=\"heading-anchor_backwardsCompatibility\"></div>1. Get new addresses</div><a aria-label=\"Skip link to 1. Get new addresses\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#1-get-new-addresses\"></a></h1>\n<p>Generate three new P2PKH addresses. A <span class=\"GlossaryItem-trigger\">P2PKH address</span> cannot be used with the multisig redeem script created below. (Hashing each public key is unnecessary anyway---all the public keys are protected by a hash when the <span class=\"GlossaryItem-trigger\">redeem script</span> is hashed.) However, Dash Core uses addresses as a way to reference the underlying full (unhashed) public keys it knows about, so we get the three new addresses above in order to use their public keys.</p>\n<p>Recall from the Guide that the hashed public keys used in addresses obfuscate the full public key, so you cannot give an address to another person or device as part of creating a typical multisig output or P2SH multisig redeem script. You must give them a full public key.</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Bash</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-bash theme-light\" data-lang=\"bash\" name=\"\" tabindex=\"0\">    &gt; dash-cli -regtest getnewaddress\n    yYtWtpW7akCc2a5En8NsXeTGENyYbNgv9q\n    &gt; dash-cli -regtest getnewaddress\n    yarm2x9eDFd9dKCycyPigwwj1vfJcYFxsH\n    &gt; dash-cli -regtest getnewaddress\n    yLknHbtnjJRVWQr78aTfCPfNB42jfNkDWK\n\n    &gt; NEW_ADDRESS1=yYtWtpW7akCc2a5En8NsXeTGENyYbNgv9q\n    &gt; NEW_ADDRESS2=yarm2x9eDFd9dKCycyPigwwj1vfJcYFxsH\n    &gt; NEW_ADDRESS3=yLknHbtnjJRVWQr78aTfCPfNB42jfNkDWK\n</code></pre></div></div>\n<h1 class=\"heading heading-1 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"2-get-public-key\"></div><div class=\"heading-text\"><div id=\"section-2-get-public-key\" class=\"heading-anchor_backwardsCompatibility\"></div>2. Get public key</div><a aria-label=\"Skip link to 2. Get public key\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#2-get-public-key\"></a></h1>\n<p>Use the <a href=\"core-api-ref-remote-procedure-calls-wallet#getaddressinfo\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">getaddressinfo</code> RPC</a> to display the full (unhashed) public key for the addresses.  This is the information which will actually be included in the multisig redeem script.  This is also the information you would give another person or device as part of creating a multisig output or P2SH multisig redeem script.</p>\n<p>We save the address returned to a shell variable.</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Bash</button><button aria-selected=\"false\" class=\"\" role=\"tab\" type=\"button\">JSON</button><button aria-selected=\"false\" class=\"\" role=\"tab\" type=\"button\">Bash</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-bash theme-light\" data-lang=\"bash\" name=\"\" tabindex=\"0\">&gt; dash-cli -regtest getaddressinfo $NEW_ADDRESS3\n</code></pre><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-json theme-light\" data-lang=\"json\" name=\"\" tabindex=\"0\">{\n  &quot;address&quot;: &quot;yLknHbtnjJRVWQr78aTfCPfNB42jfNkDWK&quot;,\n  &quot;scriptPubKey&quot;: &quot;76a91404caa000366b99780f8e606ccc818883ca7f48f888ac&quot;,\n  &quot;ismine&quot;: true,\n  &quot;solvable&quot;: true,\n  &quot;iswatchonly&quot;: false,\n  &quot;isscript&quot;: false,\n  &quot;pubkey&quot;: &quot;038007ef6fd812d73da054271b68a42dae06672cff2a30b2814935537e5930ebf6&quot;,\n  &quot;iscompressed&quot;: true,\n  &quot;label&quot;: &quot;&quot;,\n  &quot;ischange&quot;: false,\n}\n\n</code></pre><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-bash theme-light\" data-lang=\"bash\" name=\"\" tabindex=\"0\">\n&gt; NEW_ADDRESS3_PUBLIC_KEY=038007ef6fd812d73da054271b68a42dae0667[...]\n</code></pre></div></div>\n<h1 class=\"heading heading-1 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"3-create-multisig-address\"></div><div class=\"heading-text\"><div id=\"section-3-create-multisig-address\" class=\"heading-anchor_backwardsCompatibility\"></div>3. Create multisig address</div><a aria-label=\"Skip link to 3. Create multisig address\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#3-create-multisig-address\"></a></h1>\n<p>Use the <a href=\"core-api-ref-remote-procedure-calls-util#createmultisig\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">createmultisig</code> RPC</a> with two arguments, the number (<em>n</em>) of signatures required and a list of public keys. The P2SH address is returned along with the redeem script which must be provided when we spend duffs sent to the P2SH address.</p>\n<blockquote class=\"callout callout_error\" theme=\"\u2757\ufe0f\"><h2 class=\"callout-heading\"><span class=\"callout-icon\">\u2757\ufe0f</span><p>Redeem Script</p></h2><p><strong>Warning:</strong> You must not lose the redeem script, especially if you don&#x27;t have a record of which public keys you used to create the P2SH multisig address. You need the redeem script to spend any dash sent to the P2SH address. </p><p>If you lose the redeem script, you can recreate it by running the same command above, with the public keys listed in the same order. <strong>However, if you lose both the redeem script and even one of the public keys, you will never be able to spend duffs sent to that P2SH address.</strong></p></blockquote>\n<p>Neither the address nor the redeem script are stored in the wallet when you use <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">createmultisig</code>. To store them in the wallet, use the <a href=\"core-api-ref-remote-procedure-calls-wallet#addmultisigaddress\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">addmultisigaddress</code> RPC</a> instead.  If you add an address to the wallet, you should also make a new backup.</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Bash</button><button aria-selected=\"false\" class=\"\" role=\"tab\" type=\"button\">JSON</button><button aria-selected=\"false\" class=\"\" role=\"tab\" type=\"button\">Bash</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-bash theme-light\" data-lang=\"bash\" name=\"\" tabindex=\"0\">&gt; dash-cli -regtest createmultisig 2 &#x27;&#x27;&#x27;\n    [\n      &quot;&#x27;$NEW_ADDRESS1_PUBLIC_KEY&#x27;&quot;,\n      &quot;&#x27;$NEW_ADDRESS2_PUBLIC_KEY&#x27;&quot;,\n      &quot;&#x27;$NEW_ADDRESS3_PUBLIC_KEY&#x27;&quot;\n    ]&#x27;&#x27;&#x27;\n</code></pre><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-json theme-light\" data-lang=\"json\" name=\"\" tabindex=\"0\">{\n  &quot;address&quot;: &quot;8meEZF54K7GxhHhdLCCeNwFQjHENv4CK86&quot;,\n  &quot;redeemScript&quot;: &quot;522103fa8866cccae3c975a72884443a351801a0ea9721cbe721558\\\n                  6ddd6fab5f39f262103b2259f42a241f4870e794521594f2af7aadf0\\\n                  e4c580a43582e58630e4618634621038007ef6fd812d73da054271b6\\\n                  8a42dae06672cff2a30b2814935537e5930ebf653ae&quot;\n}\n</code></pre><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-bash theme-light\" data-lang=\"bash\" name=\"\" tabindex=\"0\">\n&gt; P2SH_ADDRESS=8meEZF54K7GxhHhdLCCeNwFQjHENv4CK86\n&gt; P2SH_REDEEM_SCRIPT=522103fa8866cccae3c975a72884443a351801a0ea9[...]\n</code></pre></div></div>\n<h1 class=\"heading heading-1 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"4-fund-multisig-address\"></div><div class=\"heading-text\"><div id=\"section-4-fund-multisig-address\" class=\"heading-anchor_backwardsCompatibility\"></div>4. Fund multisig address</div><a aria-label=\"Skip link to 4. Fund multisig address\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#4-fund-multisig-address\"></a></h1>\n<p>Paying the P2SH multisig address with Dash Core is as simple as paying a more common P2PKH address. Here we use the same command (but different variable) we used in the <a href=\"core-examples-transaction-tutorial-simple-spending\" target=\"\" title=\"\">Simple Spending subsection</a>. As before, this command automatically selects an UTXO, creates a <span class=\"GlossaryItem-trigger\">change output</span> to a new one of our P2PKH addresses if necessary, and pays a <span class=\"GlossaryItem-trigger\">transaction fee</span> if necessary.</p>\n<p>We save that <span class=\"GlossaryItem-trigger\">TXID</span> to a shell variable as the TXID of the UTXO we plan to spend next.</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Bash</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-bash theme-light\" data-lang=\"bash\" name=\"\" tabindex=\"0\">&gt; dash-cli -regtest sendtoaddress $P2SH_ADDRESS 10.00\nddb2a2eb2402a9ae61d7db93a9a48c0747859d899e704b10f5b72145779f9c52\n\n&gt; UTXO_TXID=ddb2a2eb2402a9ae61d7db93a9a48c0747859d899e704b10f5b7[...]\n</code></pre></div></div>\n<h1 class=\"heading heading-1 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"5-get-decoded-transaction\"></div><div class=\"heading-text\"><div id=\"section-5-get-decoded-transaction\" class=\"heading-anchor_backwardsCompatibility\"></div>5. Get decoded transaction</div><a aria-label=\"Skip link to 5. Get decoded transaction\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#5-get-decoded-transaction\"></a></h1>\n<p>We use the <a href=\"core-api-ref-remote-procedure-calls-raw-transactions#getrawtransaction\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">getrawtransaction</code> RPC</a> with the optional second argument (<em>true</em>) to get the decoded transaction we just created with <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">sendtoaddress</code>. We choose one of the <span class=\"GlossaryItem-trigger\">outputs</span> (the multisig address one) to be our UTXO and get its <span class=\"GlossaryItem-trigger\">output index</span> number (vout) and <span class=\"GlossaryItem-trigger\">pubkey script</span> (scriptPubKey).</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Bash</button><button aria-selected=\"false\" class=\"\" role=\"tab\" type=\"button\">JSON</button><button aria-selected=\"false\" class=\"\" role=\"tab\" type=\"button\">Bash</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-bash theme-light\" data-lang=\"bash\" name=\"\" tabindex=\"0\">&gt; dash-cli -regtest getrawtransaction $UTXO_TXID 1\n</code></pre><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-json theme-light\" data-lang=\"json\" name=\"\" tabindex=\"0\">{\n  &quot;hex&quot;: &quot;010000000130d100f7762956100a2396403c60e13e7a13520167acc6d38978ec\\\n          33ada44cf8010000006b48304502210084effe3132550e6ba43a7f4cc54ad30d\\\n          001c0dbc3ea66d638e5f3d6039a28c2b022044c8cd89cf455b8650fe259306eb\\\n          2a30b0112969717e469a722bca0263e0975d01210324c2226564b19f0948306b\\\n          b7160a735c28001bbd046cd46059df9f8434f41254feffffff0200ca9a3b0000\\\n          000017a9144f334f26e350c8903c92ff25b733670902cfad5a8700e0052d0b00\\\n          00001976a91479165c2155b8fec5c702ec7f251d0982f27b402988ac67000000&quot;,\n  &quot;txid&quot;: &quot;ddb2a2eb2402a9ae61d7db93a9a48c0747859d899e704b10f5b72145779f9c52&quot;,\n  &quot;size&quot;: 224,\n  &quot;version&quot;: 1,\n  &quot;locktime&quot;: 103,\n  &quot;vin&quot;: [\n    {\n      &quot;txid&quot;: &quot;f84ca4ad33ec7889d3c6ac670152137a3ee1603c4096230a10562976f70\\\n                0d130&quot;,\n      &quot;vout&quot;: 1,\n      &quot;scriptSig&quot;: {\n        &quot;asm&quot;: &quot;304502210084effe3132550e6ba43a7f4cc54ad30d001c0dbc3ea66d63\\\n                8e5f3d6039a28c2b022044c8cd89cf455b8650fe259306eb2a30b01129\\\n                69717e469a722bca0263e0975d[ALL] 0324c2226564b19f0948306bb7\\\n                160a735c28001bbd046cd46059df9f8434f41254&quot;,\n        &quot;hex&quot;: &quot;48304502210084effe3132550e6ba43a7f4cc54ad30d001c0dbc3ea66d\\\n                638e5f3d6039a28c2b022044c8cd89cf455b8650fe259306eb2a30b011\\\n                2969717e469a722bca0263e0975d01210324c2226564b19f0948306bb7\\\n                160a735c28001bbd046cd46059df9f8434f41254&quot;\n      },\n      &quot;sequence&quot;: 4294967294\n    }\n  ],\n  &quot;vout&quot;: [\n    {\n      &quot;value&quot;: 10.00000000,\n      &quot;valueSat&quot;: 1000000000,\n      &quot;n&quot;: 0,\n      &quot;scriptPubKey&quot;: {\n        &quot;asm&quot;: &quot;OP_HASH160 4f334f26e350c8903c92ff25b733670902cfad5a OP_EQUAL&quot;,\n        &quot;hex&quot;: &quot;a9144f334f26e350c8903c92ff25b733670902cfad5a87&quot;,\n        &quot;reqSigs&quot;: 1,\n        &quot;type&quot;: &quot;scripthash&quot;,\n        &quot;addresses&quot;: [\n          &quot;8meEZF54K7GxhHhdLCCeNwFQjHENv4CK86&quot;\n        ]\n      }\n    },\n    {\n      &quot;value&quot;: 480.00000000,\n      &quot;valueSat&quot;: 48000000000,\n      &quot;n&quot;: 1,\n      &quot;scriptPubKey&quot;: {\n        &quot;asm&quot;: &quot;OP_DUP OP_HASH160 79165c2155b8fec5c702ec7f251d0982f27b4029\\\n                OP_EQUALVERIFY OP_CHECKSIG&quot;,\n        &quot;hex&quot;: &quot;76a91479165c2155b8fec5c702ec7f251d0982f27b402988ac&quot;,\n        &quot;reqSigs&quot;: 1,\n        &quot;type&quot;: &quot;pubkeyhash&quot;,\n        &quot;addresses&quot;: [\n          &quot;yXMhQ1L5q3PcnJgEhyAFztQPPRaEr8Mh8s&quot;\n        ]\n      }\n    }\n  ]\n}\n</code></pre><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-bash theme-light\" data-lang=\"bash\" name=\"\" tabindex=\"0\">\n&gt; UTXO_VOUT=0\n&gt; UTXO_OUTPUT_SCRIPT=a9144f334f26e350c8903c92ff25b733670902cfad5a87\n</code></pre></div></div>\n<h1 class=\"heading heading-1 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"6-get-new-address\"></div><div class=\"heading-text\"><div id=\"section-6-get-new-address\" class=\"heading-anchor_backwardsCompatibility\"></div>6. Get new address</div><a aria-label=\"Skip link to 6. Get new address\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#6-get-new-address\"></a></h1>\n<p>We generate a new P2PKH address to use in the output we&#x27;re about to create.</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Bash</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-bash theme-light\" data-lang=\"bash\" name=\"\" tabindex=\"0\">&gt; dash-cli -regtest getnewaddress\nyZSxAakpoWGG3vcsvpk9qNtsYREhump4Cr\n\n&gt; NEW_ADDRESS4=yZSxAakpoWGG3vcsvpk9qNtsYREhump4Cr\n</code></pre></div></div>\n<h1 class=\"heading heading-1 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"7-create-raw-transaction\"></div><div class=\"heading-text\"><div id=\"section-7-create-raw-transaction\" class=\"heading-anchor_backwardsCompatibility\"></div>7. Create raw transaction</div><a aria-label=\"Skip link to 7. Create raw transaction\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#7-create-raw-transaction\"></a></h1>\n<p>We generate the <span class=\"GlossaryItem-trigger\">raw transaction</span> the same way we did in the <a href=\"core-examples-transaction-tutorial-simple-raw-transaction\" target=\"\" title=\"\">Simple Raw Transaction subsection</a>.</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Bash</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-bash theme-light\" data-lang=\"bash\" name=\"\" tabindex=\"0\">## Outputs - inputs = transaction fee, so always double-check your math!\n&gt; dash-cli -regtest createrawtransaction &#x27;&#x27;&#x27;\n    [\n      {\n        &quot;txid&quot;: &quot;&#x27;$UTXO_TXID&#x27;&quot;,\n        &quot;vout&quot;: &#x27;$UTXO_VOUT&#x27;\n      }\n   ]\n   &#x27;&#x27;&#x27; &#x27;&#x27;&#x27;\n   {\n     &quot;&#x27;$NEW_ADDRESS4&#x27;&quot;: 9.998\n   }&#x27;&#x27;&#x27;\n\n0100000001529c9f774521b7f5104b709e899d8547078ca4a993dbd761aea902\\\n24eba2b2dd0000000000ffffffff01c0bc973b000000001976a914900504f96c\\\n55d6ebe1c33581ba9430ca05b12a1488ac00000000\n\n010000000175e1769813db8418fea17576694af1ff31cb2b512b7333e6eb42f0\\\n30d0d778720000000000ffffffff01c0bc973b000000001976a914b6f64f5bf3\\\ne38f25ead28817df7929c06fe847ee88ac00000000\n\n&gt; RAW_TX=0100000001529c9f774521b7f5104b709e899d8547078ca4a993dbd[...]\n</code></pre></div></div>\n<h1 class=\"heading heading-1 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"8-get-private-key\"></div><div class=\"heading-text\"><div id=\"section-8-get-private-key\" class=\"heading-anchor_backwardsCompatibility\"></div>8. Get private key</div><a aria-label=\"Skip link to 8. Get private key\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#8-get-private-key\"></a></h1>\n<p>We get the <span class=\"GlossaryItem-trigger\">private keys</span> for two of the <span class=\"GlossaryItem-trigger\">public keys</span> we used to create the transaction, the same way we got private keys in the <a href=\"/docs/core-examples-transaction-tutorial-complex-raw-transaction\" target=\"\" title=\"\">Complex Raw Transaction subsection</a>. Recall that we created a 2-of-3 multisig pubkey script, so signatures from two private keys are needed.</p>\n<blockquote class=\"callout callout_error\" theme=\"\u2757\ufe0f\"><h2 class=\"callout-heading\"><span class=\"callout-icon\">\u2757\ufe0f</span><p>Private Key Warning</p></h2><p><strong>Reminder:</strong> Users should never manually manage private keys on mainnet. See the warning in the <a href=\"core-examples-transaction-tutorial-complex-raw-transaction\" target=\"\" title=\"\">complex raw transaction section</a>.</p></blockquote>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Bash</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-bash theme-light\" data-lang=\"bash\" name=\"\" tabindex=\"0\">&gt; dash-cli -regtest dumpprivkey $NEW_ADDRESS1\ncThhxbQUtBDzHZbZrW6XAR4XkXfaQf4Abo7BQaTK2zVp7sVrHdmv\n&gt; dash-cli -regtest dumpprivkey $NEW_ADDRESS3\ncUbYymPeHhRszTn64Xg7dzYKez8YC83M39ZTPJDiBDu8dRD3EjzF\n\n&gt; NEW_ADDRESS1_PRIVATE_KEY=cThhxbQUtBDzHZbZrW6XAR4XkXfaQf4Abo7BQ[...]\n&gt; NEW_ADDRESS3_PRIVATE_KEY=cUbYymPeHhRszTn64Xg7dzYKez8YC83M39ZTP[...]\n</code></pre></div></div>\n<h1 class=\"heading heading-1 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"9-sign-raw-transaction\"></div><div class=\"heading-text\"><div id=\"section-9-sign-raw-transaction\" class=\"heading-anchor_backwardsCompatibility\"></div>9. Sign raw transaction</div><a aria-label=\"Skip link to 9. Sign raw transaction\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#9-sign-raw-transaction\"></a></h1>\n<h2 class=\"heading heading-2 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"9a-private-key-1\"></div><div class=\"heading-text\"><div id=\"section-9-a-private-key-1\" class=\"heading-anchor_backwardsCompatibility\"></div>9a. Private Key 1</div><a aria-label=\"Skip link to 9a. Private Key 1\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#9a-private-key-1\"></a></h2>\n<p>We make the first <span class=\"GlossaryItem-trigger\">signature</span>. The input argument (JSON object) takes the additional <span class=\"GlossaryItem-trigger\">redeem script</span> parameter so that it can append the redeem script to the <span class=\"GlossaryItem-trigger\">signature script</span> after the two signatures.</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Bash</button><button aria-selected=\"false\" class=\"\" role=\"tab\" type=\"button\">JSON</button><button aria-selected=\"false\" class=\"\" role=\"tab\" type=\"button\">Bash</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-bash theme-light\" data-lang=\"bash\" name=\"\" tabindex=\"0\">&gt; dash-cli -regtest signrawtransactionwithkey $RAW_TX &#x27;&#x27;&#x27;\n    [\n      &quot;&#x27;$NEW_ADDRESS1_PRIVATE_KEY&#x27;&quot;\n    ]&#x27;&#x27;&#x27; &#x27;&#x27;&#x27;\n    [\n      {\n        &quot;txid&quot;: &quot;&#x27;$UTXO_TXID&#x27;&quot;,\n        &quot;vout&quot;: &#x27;$UTXO_VOUT&#x27;,\n        &quot;scriptPubKey&quot;: &quot;&#x27;$UTXO_OUTPUT_SCRIPT&#x27;&quot;,\n        &quot;redeemScript&quot;: &quot;&#x27;$P2SH_REDEEM_SCRIPT&#x27;&quot;\n      }\n    ]\n    &#x27;&#x27;&#x27;\n</code></pre><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-json theme-light\" data-lang=\"json\" name=\"\" tabindex=\"0\">{\n  &quot;hex&quot;: &quot;0100000001529c9f774521b7f5104b709e899d8547078ca4a993dbd761aea902\\\n          24eba2b2dd00000000b40047304402201cc50eac6d2db04dabd8ccd68b3116c0\\\n          a8d37e7e41335e0d0ab441a5aa08cdcd02204011d184dca2489758c05e01556f\\\n          f2ff9c48c39ff434fdfb1d9e0284fbde7701014c69522103fa8866cccae3c975\\\n          a72884443a351801a0ea9721cbe7215586ddd6fab5f39f262103b2259f42a241\\\n          f4870e794521594f2af7aadf0e4c580a43582e58630e4618634621038007ef6f\\\n          d812d73da054271b68a42dae06672cff2a30b2814935537e5930ebf653aeffff\\\n          ffff01c0bc973b000000001976a914900504f96c55d6ebe1c33581ba9430ca05\\\n          b12a1488ac00000000&quot;,\n  &quot;complete&quot;: false,\n  &quot;errors&quot;: [\n    {\n      &quot;txid&quot;: &quot;ddb2a2eb2402a9ae61d7db93a9a48c0747859d899e704b10f5b72145779\\\n                f9c52&quot;,\n      &quot;vout&quot;: 0,\n      &quot;scriptSig&quot;: &quot;0047304402201cc50eac6d2db04dabd8ccd68b3116c0a8d37e7e41\\\n                    335e0d0ab441a5aa08cdcd02204011d184dca2489758c05e01556f\\\n                    f2ff9c48c39ff434fdfb1d9e0284fbde7701014c69522103fa8866\\\n                    cccae3c975a72884443a351801a0ea9721cbe7215586ddd6fab5f3\\\n                    9f262103b2259f42a241f4870e794521594f2af7aadf0e4c580a43\\\n                    582e58630e4618634621038007ef6fd812d73da054271b68a42dae\\\n                    06672cff2a30b2814935537e5930ebf653ae&quot;,\n      &quot;sequence&quot;: 4294967295,\n      &quot;error&quot;: &quot;Signature must be zero for failed CHECK(MULTI)SIG operation&quot;\n    }\n  ]\n}\n</code></pre><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-bash theme-light\" data-lang=\"bash\" name=\"\" tabindex=\"0\">\n&gt; PARTLY_SIGNED_RAW_TX=010000000175e1769813db8418fea17576694af1f[...]\n</code></pre></div></div>\n<h2 class=\"heading heading-2 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"9b-private-key-3\"></div><div class=\"heading-text\"><div id=\"section-9-b-private-key-3\" class=\"heading-anchor_backwardsCompatibility\"></div>9b. Private Key 3</div><a aria-label=\"Skip link to 9b. Private Key 3\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#9b-private-key-3\"></a></h2>\n<p>The <a href=\"core-api-ref-remote-procedure-calls-raw-transactions#signrawtransactionwithkey\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">signrawtransactionwithkey</code></a> call used here is nearly identical to the one used above.  The only difference is the private key used.  Now that the two required signatures have been provided, the transaction is marked as complete.</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Bash</button><button aria-selected=\"false\" class=\"\" role=\"tab\" type=\"button\">JSON</button><button aria-selected=\"false\" class=\"\" role=\"tab\" type=\"button\">Bash</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-bash theme-light\" data-lang=\"bash\" name=\"\" tabindex=\"0\">&gt; dash-cli -regtest signrawtransactionwithkey $PARTLY_SIGNED_RAW_TX &#x27;&#x27;&#x27;\n    [\n      &quot;&#x27;$NEW_ADDRESS3_PRIVATE_KEY&#x27;&quot;\n    ]&#x27;&#x27;&#x27; &#x27;&#x27;&#x27;\n    [\n      {\n        &quot;txid&quot;: &quot;&#x27;$UTXO_TXID&#x27;&quot;,\n        &quot;vout&quot;: &#x27;$UTXO_VOUT&#x27;,\n        &quot;scriptPubKey&quot;: &quot;&#x27;$UTXO_OUTPUT_SCRIPT&#x27;&quot;,\n        &quot;redeemScript&quot;: &quot;&#x27;$P2SH_REDEEM_SCRIPT&#x27;&quot;\n      }\n    ]\n    &#x27;&#x27;&#x27;\n</code></pre><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-json theme-light\" data-lang=\"json\" name=\"\" tabindex=\"0\">{\n  &quot;hex&quot;: &quot;0100000001529c9f774521b7f5104b709e899d8547078ca4a993dbd761aea902\\\n          24eba2b2dd00000000fdfd000047304402201cc50eac6d2db04dabd8ccd68b31\\\n          16c0a8d37e7e41335e0d0ab441a5aa08cdcd02204011d184dca2489758c05e01\\\n          556ff2ff9c48c39ff434fdfb1d9e0284fbde770101483045022100e0e1f95f1a\\\n          b85814ee0920d5bd28c6831086e838af4bec344fd8654a0b58525f022075989f\\\n          d3a677e1522aa85d45c41720aec9e7c127acadb6c14338c3b1a768ab28014c69\\\n          522103fa8866cccae3c975a72884443a351801a0ea9721cbe7215586ddd6fab5\\\n          f39f262103b2259f42a241f4870e794521594f2af7aadf0e4c580a43582e5863\\\n          0e4618634621038007ef6fd812d73da054271b68a42dae06672cff2a30b28149\\\n          35537e5930ebf653aeffffffff01c0bc973b000000001976a914900504f96c55\\\n          d6ebe1c33581ba9430ca05b12a1488ac00000000&quot;,\n  &quot;complete&quot;: true\n}\n</code></pre><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-bash theme-light\" data-lang=\"bash\" name=\"\" tabindex=\"0\">\n&gt; SIGNED_RAW_TX=0100000001529c9f774521b7f5104b709e899d8547078ca4[...]\n</code></pre></div></div>\n<h1 class=\"heading heading-1 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"10-send-raw-transaction\"></div><div class=\"heading-text\"><div id=\"section-10-send-raw-transaction\" class=\"heading-anchor_backwardsCompatibility\"></div>10. Send raw transaction</div><a aria-label=\"Skip link to 10. Send raw transaction\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#10-send-raw-transaction\"></a></h1>\n<p>We send the transaction spending the P2SH multisig output to the local <span class=\"GlossaryItem-trigger\">node</span>, which accepts it.</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Bash</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-bash theme-light\" data-lang=\"bash\" name=\"\" tabindex=\"0\">&gt; dash-cli -regtest sendrawtransaction $SIGNED_RAW_TX\n483061b32894aacf6c4050291252a480c2a4c869eb85bd45082fb87d6b175ae8\n</code></pre></div></div>"
}