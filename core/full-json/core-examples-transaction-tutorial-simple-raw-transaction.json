{
 "metadata": {
  "image": [],
  "title": "Simple Raw Transaction",
  "description": "The raw transaction RPCs allow users to create custom transactions and delay broadcasting those transactions.",
  "keywords": "",
  "robots": "index"
 },
 "api": {
  "method": "get",
  "url": "",
  "auth": "required",
  "results": {
   "codes": [
    {
     "status": 200,
     "language": "json",
     "code": "{}",
     "name": ""
    },
    {
     "status": 400,
     "language": "json",
     "code": "{}",
     "name": ""
    }
   ]
  },
  "params": []
 },
 "next": {
  "description": "",
  "pages": [
   {
    "type": "doc",
    "icon": "file-text-o",
    "name": "Complex Raw Transaction",
    "slug": "core-examples-transaction-tutorial-complex-raw-transaction",
    "category": "Core Examples"
   }
  ]
 },
 "algolia": {
  "recordCount": 8,
  "publishPending": false,
  "translationFailure": false,
  "updatedAt": "2023-02-21T19:15:50.763Z"
 },
 "title": "Simple Raw Transaction",
 "icon": "",
 "updates": [],
 "type": "basic",
 "slug": "core-examples-transaction-tutorial-simple-raw-transaction",
 "excerpt": "",
 "body": "The [raw transaction RPCs](core-api-ref-remote-procedure-calls-raw-transactions) allow users to create custom <<glossary:transactions>> and delay broadcasting those transactions. However, mistakes made in <<glossary:raw transactions>> may not be detected by Dash Core, and a number of raw transaction users have permanently lost large numbers of <<glossary:duffs>>, so please be careful using raw transactions on <<glossary:mainnet>>.\n\nThis subsection covers one of the simplest possible raw transactions.\n\n> \ud83d\udcd8 \n>\n> Note: the following steps pick up where the [Simple Spending Tutorial](core-examples-transaction-tutorial-simple-spending) left off\n\n# 1. List unspent outputs\n\nRe-rerun `listunspent`. We now have three UTXOs: the two transactions we created before plus the <<glossary:coinbase transaction>> from block #2. We save the <<glossary:TXID>> and <<glossary:output index>> number (vout) of that <<glossary:coinbase>> UTXO to shell variables.\n\n```shell \ndash-cli -regtest listunspent\n```\n\n``` json\n[\n  {\n    \"txid\": \"f84ca4ad33ec7889d3c6ac670152137a3ee1603c4096230a10562976f700d130\",\n    \"vout\": 0,\n    \"address\": \"yRdk89fwSW1mUBxQo5fCmEfTva7b4wh2H5\",\n    \"account\": \"\",\n    \"scriptPubKey\": \"76a9143a4e8960f26c1fa82d937046959b656e4dd7966688ac\",\n    \"amount\": 10.00000000,\n    \"confirmations\": 1,\n    \"ps_rounds\": -2,\n    \"spendable\": true,\n    \"solvable\": true\n  },\n  {\n    \"txid\": \"f84ca4ad33ec7889d3c6ac670152137a3ee1603c4096230a10562976f700d130\",\n    \"vout\": 1,\n    \"address\": \"yavnyFMebbfX4F2VC25P18FW6LS66h2wqJ\",\n    \"scriptPubKey\": \"76a914a0411dbed3eab4341d5c41496d61b4fa1b22037e88ac\",\n    \"amount\": 490.00000000,\n    \"confirmations\": 1,\n    \"ps_rounds\": -2,\n    \"spendable\": true,\n    \"solvable\": true\n  },\n  {\n    \"txid\": \"9036265a8f577421e556cd4f729752d73469953deea759de11efa9ba354936a8\",\n    \"vout\": 0,\n    \"address\": \"yWtgzKSckhedxtJ8NXhShWGjfBivkvBGgG\",\n    \"scriptPubKey\": \"21023fff9c9dc9088c0aeba90d75413705091111311d761054de23ac\\\n                      dd217450869aac\",\n    \"amount\": 500.00000000,\n    \"confirmations\": 101,\n    \"ps_rounds\": -2,\n    \"spendable\": true,\n    \"solvable\": true\n  }\n]\n```\n\n``` bash\n\n> UTXO_TXID=9036265a8f577421e556cd4f729752d73469953deea759de11ef[...]\n> UTXO_VOUT=0\n```\n\n# 2. Get new address\n\n```shell \ndash-cli -regtest getnewaddress\n```\n\n``` bash\nyfV9Wirf5RkYHgNDttjpBz8Wdi8BavLHcP\n\n> NEW_ADDRESS=yfV9Wirf5RkYHgNDttjpBz8Wdi8BavLHcP\n```\n\n# 3. Create raw transaction\n\nUsing two arguments to the [`createrawtransaction` RPC](core-api-ref-remote-procedure-calls-raw-transactions#createrawtransaction), we create a new raw format transaction. The first argument (a JSON array) references the txid of the coinbase transaction from block #2 and the <<glossary:index>> number (0) of the <<glossary:output>> from that transaction we want to spend. The second argument (a JSON object) creates the output with the address ( <<glossary:public key>> hash) and number of DASH we want to transfer. We save the resulting raw format transaction to a shell variable.\n\n>\u2757\ufe0f Transaction fee warning\n>\n> **Warning:** `createrawtransaction` does not automatically create change outputs, so you can easily accidentally pay a large transaction fee.\n\nIn this example, our input had 500.0000 DASH and our output (`$NEW_ADDRESS`) is being paid 499.9999 DASH, so the transaction will include a fee of 0.0001 DASH. If we had paid `$NEW_ADDRESS` only 100 DASH with no other changes to this transaction, the <<glossary:transaction fee>> would be a whopping 400 DASH. See the [Complex Raw Transaction subsection](/docs/core-examples-transaction-tutorial-complex-raw-transaction) below for how to create a transaction with multiple outputs so you can send the change back to yourself.\n\n```shell \n## Outputs - inputs = transaction fee, so always double-check your math!\ndash-cli -regtest createrawtransaction ''' \\\n    [ \\\n      { \\\n        \"txid\": \"'$UTXO_TXID'\", \\\n        \"vout\": '$UTXO_VOUT' \\\n      } \\\n    ] \\\n    ''' ''' \\\n    { \\\n      \"'$NEW_ADDRESS'\": 499.9999 \\\n    }'''\n```\n\n``` bash\n0100000001a8364935baa9ef11de59a7ee3d956934d75297724fcd56e5217457\\\n8f5a2636900000000000ffffffff01f04c3ba40b0000001976a914d240140859\\\n744755d73e5967081c3bedceffc5db88ac00000000\n\n> RAW_TX=0100000001a8364935baa9ef11de59a7ee3d956934d75297724fcd5[...]\n```\n\n# 4. Decode raw transaction\n\nUse the [`decoderawtransaction` RPC](core-api-ref-remote-procedure-calls-raw-transactions#decoderawtransaction) to see exactly what the transaction we just created does.\n\n```shell \ndash-cli -regtest decoderawtransaction $RAW_TX\n```\n\n``` json\n{\n  \"txid\": \"7cbd2245ee5d824c00fc08b3bf2f694ad9a215d38d897fcf2df64a43c59bb97b\",\n  \"size\": 85,\n  \"version\": 1,\n  \"locktime\": 0,\n  \"vin\": [\n    {\n      \"txid\": \"9036265a8f577421e556cd4f729752d73469953deea759de11efa9ba354936a8\",\n      \"vout\": 0,\n      \"scriptSig\": {\n        \"asm\": \"\",\n        \"hex\": \"\"\n      },\n      \"sequence\": 4294967295\n    }\n  ],\n  \"vout\": [\n    {\n      \"value\": 499.99990000,\n      \"valueSat\": 49999990000,\n      \"n\": 0,\n      \"scriptPubKey\": {\n        \"asm\": \"OP_DUP OP_HASH160 d240140859744755d73e5967081c3bedceffc5db\\\n                  OP_EQUALVERIFY OP_CHECKSIG\",\n        \"hex\": \"76a914d240140859744755d73e5967081c3bedceffc5db88ac\",\n        \"reqSigs\": 1,\n        \"type\": \"pubkeyhash\",\n        \"addresses\": [\n          \"yfV9Wirf5RkYHgNDttjpBz8Wdi8BavLHcP\"\n        ]\n      }\n    }\n  ]\n}\n```\n\n# 5. Sign transaction\n\nUse the [`signrawtransactionwithwallet` RPC](core-api-ref-remote-procedure-calls-wallet#signrawtransactionwithwallet) to sign the transaction created by `createrawtransaction` and save the returned \"hex\" raw format signed transaction to a shell variable.\n\n```shell \ndash-cli -regtest signrawtransactionwithwallet $RAW_TX\n```\n\n``` json\n{\n  \"hex\": \"0100000001a8364935baa9ef11de59a7ee3d956934d75297724fcd\\\n          56e52174578f5a2636900000000049483045022100b4e5e9224afa\\\n          de8686bb22a957d1ec1587a66ee84943761b2d9061d5f751cd7602\\\n          203c88d4064641a413ce3d0824264d6d87908960487afe9a3a133e\\\n          7d67a22fd05101ffffffff01f04c3ba40b0000001976a914d24014\\\n          0859744755d73e5967081c3bedceffc5db88ac00000000\",\n  \"complete\": true\n}\n```\n``` bash\n\n> SIGNED_RAW_TX=0100000001a8364935baa9ef11de59a7ee3d956934d75297[...]\n```\n\nEven though the transaction is now complete, the Dash Core <<glossary:node>> we're connected to doesn't know anything about the transaction, nor does any other part of the <<glossary:network>>. We've created a spend, but we haven't actually spent anything because we could simply unset the `$SIGNED_RAW_TX` variable to eliminate the transaction.\n\n# 6. Send raw transaction\n\nSend the signed transaction to the connected node using the [`sendrawtransaction` RPC](core-api-ref-remote-procedure-calls-raw-transactions#sendrawtransaction). After accepting the transaction, the node would usually then broadcast it to other <<glossary:peers>>, but we're not currently connected to other peers because we started in <<glossary:regression test mode>>.\n\n```shell \ndash-cli -regtest sendrawtransaction $SIGNED_RAW_TX\n```\n\n``` bash\nfa0f4105b0a2b2706d65581c5e6411d3970253c7f231944fa2f978b4a3d9010d\n```\n\n# 7. Mine a block\n\nGenerate a block to confirm the transaction and then clear our shell variables.\n\n```shell \ndash-cli -regtest generate 1\n\nunset UTXO_TXID UTXO_VOUT NEW_ADDRESS RAW_TX SIGNED_RAW_TX\n```",
 "order": 1,
 "isReference": false,
 "deprecated": false,
 "hidden": false,
 "sync_unique": "",
 "link_url": "",
 "link_external": false,
 "reusableContent": [],
 "previousSlug": "",
 "slugUpdatedAt": "2021-11-02T16:02:22.053Z",
 "revision": 7,
 "_id": "63f5176df91c7700118e77d7",
 "version": "63f5176df91c7700118e7825",
 "updatedAt": "2023-01-25T15:08:57.124Z",
 "createdAt": "2019-10-24T15:51:25.177Z",
 "project": "5daf2e65f4109c0040fd51e1",
 "user": "62b2101422da70001ee51d95",
 "parentDoc": "63f5176df91c7700118e77d5",
 "category": "63f5176df91c7700118e77a0",
 "__v": 1,
 "pendingAlgoliaPublish": false,
 "isApi": false,
 "id": "63f5176df91c7700118e77d7",
 "body_html": "The [raw transaction RPCs](core-api-ref-remote-procedure-calls-raw-transactions) allow users to create custom <<glossary:transactions>> and delay broadcasting those transactions. However, mistakes made in <<glossary:raw transactions>> may not be detected by Dash Core, and a number of raw transaction users have permanently lost large numbers of <<glossary:duffs>>, so please be careful using raw transactions on <<glossary:mainnet>>.\n\nThis subsection covers one of the simplest possible raw transactions.\n\n> \ud83d\udcd8 \n>\n> Note: the following steps pick up where the [Simple Spending Tutorial](core-examples-transaction-tutorial-simple-spending) left off\n\n# 1. List unspent outputs\n\nRe-rerun `listunspent`. We now have three UTXOs: the two transactions we created before plus the <<glossary:coinbase transaction>> from block #2. We save the <<glossary:TXID>> and <<glossary:output index>> number (vout) of that <<glossary:coinbase>> UTXO to shell variables.\n\n```shell \ndash-cli -regtest listunspent\n```\n\n``` json\n[\n  {\n    \"txid\": \"f84ca4ad33ec7889d3c6ac670152137a3ee1603c4096230a10562976f700d130\",\n    \"vout\": 0,\n    \"address\": \"yRdk89fwSW1mUBxQo5fCmEfTva7b4wh2H5\",\n    \"account\": \"\",\n    \"scriptPubKey\": \"76a9143a4e8960f26c1fa82d937046959b656e4dd7966688ac\",\n    \"amount\": 10.00000000,\n    \"confirmations\": 1,\n    \"ps_rounds\": -2,\n    \"spendable\": true,\n    \"solvable\": true\n  },\n  {\n    \"txid\": \"f84ca4ad33ec7889d3c6ac670152137a3ee1603c4096230a10562976f700d130\",\n    \"vout\": 1,\n    \"address\": \"yavnyFMebbfX4F2VC25P18FW6LS66h2wqJ\",\n    \"scriptPubKey\": \"76a914a0411dbed3eab4341d5c41496d61b4fa1b22037e88ac\",\n    \"amount\": 490.00000000,\n    \"confirmations\": 1,\n    \"ps_rounds\": -2,\n    \"spendable\": true,\n    \"solvable\": true\n  },\n  {\n    \"txid\": \"9036265a8f577421e556cd4f729752d73469953deea759de11efa9ba354936a8\",\n    \"vout\": 0,\n    \"address\": \"yWtgzKSckhedxtJ8NXhShWGjfBivkvBGgG\",\n    \"scriptPubKey\": \"21023fff9c9dc9088c0aeba90d75413705091111311d761054de23ac\\\n                      dd217450869aac\",\n    \"amount\": 500.00000000,\n    \"confirmations\": 101,\n    \"ps_rounds\": -2,\n    \"spendable\": true,\n    \"solvable\": true\n  }\n]\n```\n\n``` bash\n\n> UTXO_TXID=9036265a8f577421e556cd4f729752d73469953deea759de11ef[...]\n> UTXO_VOUT=0\n```\n\n# 2. Get new address\n\n```shell \ndash-cli -regtest getnewaddress\n```\n\n``` bash\nyfV9Wirf5RkYHgNDttjpBz8Wdi8BavLHcP\n\n> NEW_ADDRESS=yfV9Wirf5RkYHgNDttjpBz8Wdi8BavLHcP\n```\n\n# 3. Create raw transaction\n\nUsing two arguments to the [`createrawtransaction` RPC](core-api-ref-remote-procedure-calls-raw-transactions#createrawtransaction), we create a new raw format transaction. The first argument (a JSON array) references the txid of the coinbase transaction from block #2 and the <<glossary:index>> number (0) of the <<glossary:output>> from that transaction we want to spend. The second argument (a JSON object) creates the output with the address ( <<glossary:public key>> hash) and number of DASH we want to transfer. We save the resulting raw format transaction to a shell variable.\n\n>\u2757\ufe0f Transaction fee warning\n>\n> **Warning:** `createrawtransaction` does not automatically create change outputs, so you can easily accidentally pay a large transaction fee.\n\nIn this example, our input had 500.0000 DASH and our output (`$NEW_ADDRESS`) is being paid 499.9999 DASH, so the transaction will include a fee of 0.0001 DASH. If we had paid `$NEW_ADDRESS` only 100 DASH with no other changes to this transaction, the <<glossary:transaction fee>> would be a whopping 400 DASH. See the [Complex Raw Transaction subsection](/docs/core-examples-transaction-tutorial-complex-raw-transaction) below for how to create a transaction with multiple outputs so you can send the change back to yourself.\n\n```shell \n## Outputs - inputs = transaction fee, so always double-check your math!\ndash-cli -regtest createrawtransaction ''' \\\n    [ \\\n      { \\\n        \"txid\": \"'$UTXO_TXID'\", \\\n        \"vout\": '$UTXO_VOUT' \\\n      } \\\n    ] \\\n    ''' ''' \\\n    { \\\n      \"'$NEW_ADDRESS'\": 499.9999 \\\n    }'''\n```\n\n``` bash\n0100000001a8364935baa9ef11de59a7ee3d956934d75297724fcd56e5217457\\\n8f5a2636900000000000ffffffff01f04c3ba40b0000001976a914d240140859\\\n744755d73e5967081c3bedceffc5db88ac00000000\n\n> RAW_TX=0100000001a8364935baa9ef11de59a7ee3d956934d75297724fcd5[...]\n```\n\n# 4. Decode raw transaction\n\nUse the [`decoderawtransaction` RPC](core-api-ref-remote-procedure-calls-raw-transactions#decoderawtransaction) to see exactly what the transaction we just created does.\n\n```shell \ndash-cli -regtest decoderawtransaction $RAW_TX\n```\n\n``` json\n{\n  \"txid\": \"7cbd2245ee5d824c00fc08b3bf2f694ad9a215d38d897fcf2df64a43c59bb97b\",\n  \"size\": 85,\n  \"version\": 1,\n  \"locktime\": 0,\n  \"vin\": [\n    {\n      \"txid\": \"9036265a8f577421e556cd4f729752d73469953deea759de11efa9ba354936a8\",\n      \"vout\": 0,\n      \"scriptSig\": {\n        \"asm\": \"\",\n        \"hex\": \"\"\n      },\n      \"sequence\": 4294967295\n    }\n  ],\n  \"vout\": [\n    {\n      \"value\": 499.99990000,\n      \"valueSat\": 49999990000,\n      \"n\": 0,\n      \"scriptPubKey\": {\n        \"asm\": \"OP_DUP OP_HASH160 d240140859744755d73e5967081c3bedceffc5db\\\n                  OP_EQUALVERIFY OP_CHECKSIG\",\n        \"hex\": \"76a914d240140859744755d73e5967081c3bedceffc5db88ac\",\n        \"reqSigs\": 1,\n        \"type\": \"pubkeyhash\",\n        \"addresses\": [\n          \"yfV9Wirf5RkYHgNDttjpBz8Wdi8BavLHcP\"\n        ]\n      }\n    }\n  ]\n}\n```\n\n# 5. Sign transaction\n\nUse the [`signrawtransactionwithwallet` RPC](core-api-ref-remote-procedure-calls-wallet#signrawtransactionwithwallet) to sign the transaction created by `createrawtransaction` and save the returned \"hex\" raw format signed transaction to a shell variable.\n\n```shell \ndash-cli -regtest signrawtransactionwithwallet $RAW_TX\n```\n\n``` json\n{\n  \"hex\": \"0100000001a8364935baa9ef11de59a7ee3d956934d75297724fcd\\\n          56e52174578f5a2636900000000049483045022100b4e5e9224afa\\\n          de8686bb22a957d1ec1587a66ee84943761b2d9061d5f751cd7602\\\n          203c88d4064641a413ce3d0824264d6d87908960487afe9a3a133e\\\n          7d67a22fd05101ffffffff01f04c3ba40b0000001976a914d24014\\\n          0859744755d73e5967081c3bedceffc5db88ac00000000\",\n  \"complete\": true\n}\n```\n``` bash\n\n> SIGNED_RAW_TX=0100000001a8364935baa9ef11de59a7ee3d956934d75297[...]\n```\n\nEven though the transaction is now complete, the Dash Core <<glossary:node>> we're connected to doesn't know anything about the transaction, nor does any other part of the <<glossary:network>>. We've created a spend, but we haven't actually spent anything because we could simply unset the `$SIGNED_RAW_TX` variable to eliminate the transaction.\n\n# 6. Send raw transaction\n\nSend the signed transaction to the connected node using the [`sendrawtransaction` RPC](core-api-ref-remote-procedure-calls-raw-transactions#sendrawtransaction). After accepting the transaction, the node would usually then broadcast it to other <<glossary:peers>>, but we're not currently connected to other peers because we started in <<glossary:regression test mode>>.\n\n```shell \ndash-cli -regtest sendrawtransaction $SIGNED_RAW_TX\n```\n\n``` bash\nfa0f4105b0a2b2706d65581c5e6411d3970253c7f231944fa2f978b4a3d9010d\n```\n\n# 7. Mine a block\n\nGenerate a block to confirm the transaction and then clear our shell variables.\n\n```shell \ndash-cli -regtest generate 1\n\nunset UTXO_TXID UTXO_VOUT NEW_ADDRESS RAW_TX SIGNED_RAW_TX\n```"
}