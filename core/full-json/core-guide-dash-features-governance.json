{
 "metadata": {
  "image": [],
  "title": "Dash Core Governance",
  "description": "Dash Core synchronizes the governance system via the masternode network as the last stage of the Masternode sync process",
  "keywords": "",
  "robots": "index"
 },
 "mdx": {
  "altBody": "",
  "status": "rdmd"
 },
 "api": {
  "method": "get",
  "url": "",
  "auth": "required",
  "results": {
   "codes": [
    {
     "status": 200,
     "language": "json",
     "code": "{}",
     "name": ""
    },
    {
     "status": 400,
     "language": "json",
     "code": "{}",
     "name": ""
    }
   ]
  },
  "params": []
 },
 "next": {
  "description": "",
  "pages": [
   {
    "type": "doc",
    "icon": "file-text-o",
    "name": "Masternode Quorums",
    "slug": "core-guide-dash-features-masternode-quorums",
    "category": "Core Guides"
   }
  ]
 },
 "algolia": {
  "recordCount": 6,
  "publishPending": false,
  "translationFailure": false,
  "updatedAt": "2023-02-21T19:15:46.563Z"
 },
 "title": "Governance",
 "icon": "",
 "updates": [],
 "type": "basic",
 "slug": "core-guide-dash-features-governance",
 "excerpt": "",
 "body": "# Synchronization\n\nDash Core synchronizes the governance system via the <<glossary:masternode>> <<glossary:network>> as the last stage of the Masternode sync process (following the sync of sporks, the Masternode list, and Masternode payments).\n\nThe [`govsync` message](core-ref-p2p-network-governance-messages#govsync) initiates a sync of the governance system. Masternodes ignore this request if they are not fully synced.  \n\nThere are two distinct stages of governance sync:\n\n1. Initial request (object sync) - requests the governance objects only via a [`govsync` message](core-ref-p2p-network-governance-messages#govsync) sent with a hash of all zeros.  \n\n2. Follow up request(s) (vote sync) - request governance object votes for a specific object via a [`govsync` message](core-ref-p2p-network-governance-messages#govsync) containing the hash of the object. One message is required for each object. Dash Core periodically (~ every 6 seconds) sends messages to connected nodes until all the governance objects have been synchronized.\n\n> \ud83d\udcd8 Governance Object Sync Limitation\n>\n> Dash Core limits how frequently the first type of sync (object sync) can be requested. Frequent requests will result in the node being banned.\n\nMasternodes respond to the [`govsync` message](core-ref-p2p-network-governance-messages#govsync) with several items:\n\nFor Object Sync:\n\n* First, the Masternode sends a [`ssc` message](core-ref-p2p-network-masternode-messages#ssc) (Sync Status Count) for `govobj` objects. This message indicates how many <<glossary:inventory>> items will be sent.\n\n* Second, the Masternode sends an [`inv` message](core-ref-p2p-network-data-messages#inv) for the `govobj` and `govobjvote` objects.\n\nFor Vote Sync:\n\n* First, the Masternode sends a [`ssc` message](core-ref-p2p-network-masternode-messages#ssc) (Sync Status Count) for `govobjvote` objects. This message indicates how many inventory items will be sent.\n\n* Second, the Masternode sends an [`inv` message](core-ref-p2p-network-data-messages#inv) for the `govobjvote` object(s).\n\nOnce the syncing <<glossary:node>> receives the counts and inventories, it may request any `govobj` and `govobjvote` objects from the masternode via a [`getdata` message](core-ref-p2p-network-data-messages#getdata).\n\n## Governance Sync Data Flow\n\n| **Syncing Node Message** | **Direction**  | **Masternode Response**   | **Description** |\n| --- | --- | --- | --- |\n| **Initial request** | | | **Requests all governance objects (without votes)** |\n| [`govsync` message](core-ref-p2p-network-governance-messages#govsync)        | \u2192              |                           | Syncing node initiates governance sync (hash set to all zeros)\n|                          | \u2190              | [`ssc` message](core-ref-p2p-network-masternode-messages#ssc) (govobj)    | Number of governance objects (0 or more)\n|                          | \u2190              | [`inv` message](core-ref-p2p-network-data-messages#inv) (govobj)    | Governance object inventories\n| [`getdata` message](core-ref-p2p-network-data-messages#getdata) (govobj) | \u2192              |                           | (Optional) Syncing node requests govobj\n|                          | \u2190              | [`govobj` message](core-ref-p2p-network-governance-messages#govobj)          | (If requested) Governance object\n| | | | |\n| **Follow up requests** | | | **Requests governance object (with votes)** |\n| [`govsync` message](core-ref-p2p-network-governance-messages#govsync)        | \u2192              |                           | Syncing node requests governance sync for a specific governance object\n|                          | \u2190              | [`ssc` message](core-ref-p2p-network-masternode-messages#ssc) (govobjvote)| Number of governance object votes (0 or more)\n|                          | \u2190              | [`inv` message](core-ref-p2p-network-data-messages#inv) (govobjvote)| Governance object vote inventories\n| [`getdata` message](core-ref-p2p-network-data-messages#getdata) (govobjvote) | \u2192              |                           | (Optional) Syncing node requests govobjvote\n|                          | \u2190              | [`govobjvote` message](core-ref-p2p-network-governance-messages#govobjvote)      | (If requested) Governance object vote\n\n# Sentinel\n\n[Sentinel](https://github.com/dashpay/sentinel/) is a Python application that connects to a masternode's local dashd instance to run as an autonomous agent for persisting, processing, and automating Dash 12.1+ governance objects and tasks. Sentinel abstracts some governance details away from Dash Core for easier extensibility of the governance system in the future. This will allow the integration between Evolution and Dash Core to proceed more smoothly and enable new governance object additions with minimal impact to Dash Core.\n\nSentinel runs periodically and performs three main tasks as described below:\ngovernance sync, governance object pruning, and superblock management. The governance object data is stored in a SQLite database.\n\n## Sentinel Sync\n\nSentinel issues a [`gobject list` RPC](core-api-ref-remote-procedure-calls-dash#gobject-list) command and updates its database with the results returned from dashd. When objects are removed from the network, they are purged from the Sentinel database.\n\n## Sentinel Prune\n\nSentinel 1.1.0 introduced proposal pruning which automatically votes to delete expired proposals following approximately half of a <<glossary:superblock>> cycle. This delay period ensures that proposals are not deleted prematurely. Prior to this, proposals remained in memory unless a sufficient number of masternodes manually voted to delete them.\n\n## Sentinel Superblock\n\nSentinel manages superblock creation, voting, and submission to dashd for network propagation.\n\nBeginning ~3 days (1662 blocks) prior to a superblock, Sentinel selects one masternode per block to rank proposals. This ranking is used to determine what a candidate superblock (or \"superblock trigger\") should contain. Based on the results, it creates and broadcasts a new superblock trigger if a matching one was not found.\n\nAll masternodes vote for existing superblock triggers. Each masternode casts only 1 superblock trigger \"Yes\" vote per superblock cycle. It will vote \"No\" for any other triggers it receives.\n\n> \ud83d\udea7 Single masternode trigger vote\n>\n> Note: This means that proposal votes submitted _after_ superblock trigger creation begins will **not** be counted by some masternodes (those that have already voted on a superblock trigger).\n\nAt the superblock height, the trigger with the most \"Yes\" votes is paid out by that block's miner.",
 "order": 2,
 "isReference": false,
 "deprecated": false,
 "hidden": false,
 "sync_unique": "",
 "link_url": "",
 "link_external": false,
 "reusableContent": [],
 "previousSlug": "",
 "slugUpdatedAt": "2022-08-02T16:59:21.912Z",
 "revision": 2,
 "_id": "63f5176df91c7700118e77c4",
 "version": "63f5176df91c7700118e7825",
 "updatedAt": "2023-01-12T20:50:26.876Z",
 "createdAt": "2019-10-23T19:49:59.097Z",
 "project": "5daf2e65f4109c0040fd51e1",
 "user": "62b2101422da70001ee51d95",
 "parentDoc": "63f5176df91c7700118e77bd",
 "category": "63f5176df91c7700118e779e",
 "__v": 3,
 "pendingAlgoliaPublish": false,
 "isApi": false,
 "id": "63f5176df91c7700118e77c4",
 "body_html": "<h1 class=\"heading heading-1 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"synchronization\"></div><div class=\"heading-text\"><div id=\"section-synchronization\" class=\"heading-anchor_backwardsCompatibility\"></div>Synchronization</div><a aria-label=\"Skip link to Synchronization\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#synchronization\"></a></h1>\n<p>Dash Core synchronizes the governance system via the <span class=\"GlossaryItem-trigger\">masternode</span> <span class=\"GlossaryItem-trigger\">network</span> as the last stage of the Masternode sync process (following the sync of sporks, the Masternode list, and Masternode payments).</p>\n<p>The <a href=\"core-ref-p2p-network-governance-messages#govsync\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">govsync</code> message</a> initiates a sync of the governance system. Masternodes ignore this request if they are not fully synced.  </p>\n<p>There are two distinct stages of governance sync:</p>\n<ol>\n<li>\n<p>Initial request (object sync) - requests the governance objects only via a <a href=\"core-ref-p2p-network-governance-messages#govsync\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">govsync</code> message</a> sent with a hash of all zeros.  </p>\n</li>\n<li>\n<p>Follow up request(s) (vote sync) - request governance object votes for a specific object via a <a href=\"core-ref-p2p-network-governance-messages#govsync\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">govsync</code> message</a> containing the hash of the object. One message is required for each object. Dash Core periodically (~ every 6 seconds) sends messages to connected nodes until all the governance objects have been synchronized.</p>\n</li>\n</ol>\n<blockquote class=\"callout callout_info\" theme=\"\ud83d\udcd8\"><h2 class=\"callout-heading\"><span class=\"callout-icon\">\ud83d\udcd8</span><p>Governance Object Sync Limitation</p></h2><p>Dash Core limits how frequently the first type of sync (object sync) can be requested. Frequent requests will result in the node being banned.</p></blockquote>\n<p>Masternodes respond to the <a href=\"core-ref-p2p-network-governance-messages#govsync\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">govsync</code> message</a> with several items:</p>\n<p>For Object Sync:</p>\n<ul>\n<li>\n<p>First, the Masternode sends a <a href=\"core-ref-p2p-network-masternode-messages#ssc\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">ssc</code> message</a> (Sync Status Count) for <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">govobj</code> objects. This message indicates how many <span class=\"GlossaryItem-trigger\">inventory</span> items will be sent.</p>\n</li>\n<li>\n<p>Second, the Masternode sends an <a href=\"core-ref-p2p-network-data-messages#inv\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">inv</code> message</a> for the <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">govobj</code> and <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">govobjvote</code> objects.</p>\n</li>\n</ul>\n<p>For Vote Sync:</p>\n<ul>\n<li>\n<p>First, the Masternode sends a <a href=\"core-ref-p2p-network-masternode-messages#ssc\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">ssc</code> message</a> (Sync Status Count) for <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">govobjvote</code> objects. This message indicates how many inventory items will be sent.</p>\n</li>\n<li>\n<p>Second, the Masternode sends an <a href=\"core-ref-p2p-network-data-messages#inv\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">inv</code> message</a> for the <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">govobjvote</code> object(s).</p>\n</li>\n</ul>\n<p>Once the syncing <span class=\"GlossaryItem-trigger\">node</span> receives the counts and inventories, it may request any <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">govobj</code> and <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">govobjvote</code> objects from the masternode via a <a href=\"core-ref-p2p-network-data-messages#getdata\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">getdata</code> message</a>.</p>\n<h2 class=\"heading heading-2 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"governance-sync-data-flow\"></div><div class=\"heading-text\"><div id=\"section-governance-sync-data-flow\" class=\"heading-anchor_backwardsCompatibility\"></div>Governance Sync Data Flow</div><a aria-label=\"Skip link to Governance Sync Data Flow\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#governance-sync-data-flow\"></a></h2>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th><strong>Syncing Node Message</strong></th><th><strong>Direction</strong></th><th><strong>Masternode Response</strong></th><th><strong>Description</strong></th></tr></thead><tbody><tr><td><strong>Initial request</strong></td><td></td><td></td><td><strong>Requests all governance objects (without votes)</strong></td></tr><tr><td><a href=\"core-ref-p2p-network-governance-messages#govsync\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">govsync</code> message</a></td><td>\u2192</td><td></td><td>Syncing node initiates governance sync (hash set to all zeros)</td></tr><tr><td></td><td>\u2190</td><td><a href=\"core-ref-p2p-network-masternode-messages#ssc\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">ssc</code> message</a> (govobj)</td><td>Number of governance objects (0 or more)</td></tr><tr><td></td><td>\u2190</td><td><a href=\"core-ref-p2p-network-data-messages#inv\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">inv</code> message</a> (govobj)</td><td>Governance object inventories</td></tr><tr><td><a href=\"core-ref-p2p-network-data-messages#getdata\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">getdata</code> message</a> (govobj)</td><td>\u2192</td><td></td><td>(Optional) Syncing node requests govobj</td></tr><tr><td></td><td>\u2190</td><td><a href=\"core-ref-p2p-network-governance-messages#govobj\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">govobj</code> message</a></td><td>(If requested) Governance object</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td><strong>Follow up requests</strong></td><td></td><td></td><td><strong>Requests governance object (with votes)</strong></td></tr><tr><td><a href=\"core-ref-p2p-network-governance-messages#govsync\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">govsync</code> message</a></td><td>\u2192</td><td></td><td>Syncing node requests governance sync for a specific governance object</td></tr><tr><td></td><td>\u2190</td><td><a href=\"core-ref-p2p-network-masternode-messages#ssc\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">ssc</code> message</a> (govobjvote)</td><td>Number of governance object votes (0 or more)</td></tr><tr><td></td><td>\u2190</td><td><a href=\"core-ref-p2p-network-data-messages#inv\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">inv</code> message</a> (govobjvote)</td><td>Governance object vote inventories</td></tr><tr><td><a href=\"core-ref-p2p-network-data-messages#getdata\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">getdata</code> message</a> (govobjvote)</td><td>\u2192</td><td></td><td>(Optional) Syncing node requests govobjvote</td></tr><tr><td></td><td>\u2190</td><td><a href=\"core-ref-p2p-network-governance-messages#govobjvote\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">govobjvote</code> message</a></td><td>(If requested) Governance object vote</td></tr></tbody></table></div></div>\n<h1 class=\"heading heading-1 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"sentinel\"></div><div class=\"heading-text\"><div id=\"section-sentinel\" class=\"heading-anchor_backwardsCompatibility\"></div>Sentinel</div><a aria-label=\"Skip link to Sentinel\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#sentinel\"></a></h1>\n<p><a href=\"https://github.com/dashpay/sentinel/\" target=\"\" title=\"\">Sentinel</a> is a Python application that connects to a masternode&#x27;s local dashd instance to run as an autonomous agent for persisting, processing, and automating Dash 12.1+ governance objects and tasks. Sentinel abstracts some governance details away from Dash Core for easier extensibility of the governance system in the future. This will allow the integration between Evolution and Dash Core to proceed more smoothly and enable new governance object additions with minimal impact to Dash Core.</p>\n<p>Sentinel runs periodically and performs three main tasks as described below:<br/>\ngovernance sync, governance object pruning, and superblock management. The governance object data is stored in a SQLite database.</p>\n<h2 class=\"heading heading-2 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"sentinel-sync\"></div><div class=\"heading-text\"><div id=\"section-sentinel-sync\" class=\"heading-anchor_backwardsCompatibility\"></div>Sentinel Sync</div><a aria-label=\"Skip link to Sentinel Sync\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#sentinel-sync\"></a></h2>\n<p>Sentinel issues a <a href=\"core-api-ref-remote-procedure-calls-dash#gobject-list\" target=\"\" title=\"\"><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">gobject list</code> RPC</a> command and updates its database with the results returned from dashd. When objects are removed from the network, they are purged from the Sentinel database.</p>\n<h2 class=\"heading heading-2 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"sentinel-prune\"></div><div class=\"heading-text\"><div id=\"section-sentinel-prune\" class=\"heading-anchor_backwardsCompatibility\"></div>Sentinel Prune</div><a aria-label=\"Skip link to Sentinel Prune\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#sentinel-prune\"></a></h2>\n<p>Sentinel 1.1.0 introduced proposal pruning which automatically votes to delete expired proposals following approximately half of a <span class=\"GlossaryItem-trigger\">superblock</span> cycle. This delay period ensures that proposals are not deleted prematurely. Prior to this, proposals remained in memory unless a sufficient number of masternodes manually voted to delete them.</p>\n<h2 class=\"heading heading-2 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"sentinel-superblock\"></div><div class=\"heading-text\"><div id=\"section-sentinel-superblock\" class=\"heading-anchor_backwardsCompatibility\"></div>Sentinel Superblock</div><a aria-label=\"Skip link to Sentinel Superblock\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#sentinel-superblock\"></a></h2>\n<p>Sentinel manages superblock creation, voting, and submission to dashd for network propagation.</p>\n<p>Beginning ~3 days (1662 blocks) prior to a superblock, Sentinel selects one masternode per block to rank proposals. This ranking is used to determine what a candidate superblock (or &quot;superblock trigger&quot;) should contain. Based on the results, it creates and broadcasts a new superblock trigger if a matching one was not found.</p>\n<p>All masternodes vote for existing superblock triggers. Each masternode casts only 1 superblock trigger &quot;Yes&quot; vote per superblock cycle. It will vote &quot;No&quot; for any other triggers it receives.</p>\n<blockquote class=\"callout callout_warn\" theme=\"\ud83d\udea7\"><h2 class=\"callout-heading\"><span class=\"callout-icon\">\ud83d\udea7</span><p>Single masternode trigger vote</p></h2><p>Note: This means that proposal votes submitted <em>after</em> superblock trigger creation begins will <strong>not</strong> be counted by some masternodes (those that have already voted on a superblock trigger).</p></blockquote>\n<p>At the superblock height, the trigger with the most &quot;Yes&quot; votes is paid out by that block&#x27;s miner.</p>"
}