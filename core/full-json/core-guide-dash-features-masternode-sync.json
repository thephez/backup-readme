{
 "metadata": {
  "image": [],
  "title": "Dash Masternode Sync",
  "description": "Dash Core performs full masternode synchronization as required. There are four conditions that initiate a start/restart the sync process."
 },
 "api": {
  "method": "get",
  "url": "",
  "auth": "required",
  "results": {
   "codes": [
    {
     "status": 200,
     "language": "json",
     "code": "{}",
     "name": ""
    },
    {
     "status": 400,
     "language": "json",
     "code": "{}",
     "name": ""
    }
   ]
  },
  "params": []
 },
 "next": {
  "description": "",
  "pages": [
   {
    "type": "doc",
    "icon": "file-text-o",
    "name": "Governance",
    "slug": "core-guide-dash-features-governance",
    "category": "Core Guides"
   }
  ]
 },
 "title": "Masternode Sync",
 "icon": "",
 "updates": [],
 "type": "basic",
 "slug": "core-guide-dash-features-masternode-sync",
 "excerpt": "",
 "body": "Dash Core performs full <<glossary:masternode>> synchronization as required. There are four conditions that initiate a start/restart the sync process:\n\n* Initial startup of Dash Core\n* More than 60 minutes have passed since the last activation\n* A failure occurred during the last sync attempt (after a 1 minute cooldown before sync restarts)\n* Issuing a [`mnsync reset` RPC](core-api-ref-remote-procedure-calls-dash#mnsync) command\n\n# Initial Masternode Sync\n\nThe deterministic masternode lists introduced by [DIP3](https://github.com/dashpay/dips/blob/master/dip-0003.md) eliminated several steps of the sync process related to the masternode list and masternode payments. Since that information is now available on-chain, P2P messages related to those steps were deprecated.\n\nThis diagram shows the order in which P2P messages are sent to perform masternode synchronization initially after startup.\n\n![Masternode Sync (Initial)](https://dash-docs.github.io/img/dev/en-masternode-sync-initial-dip3.svg)\n\nThe following table details the data flow of P2P messages exchanged during initial masternode synchronization after the activation of [DIP3](https://github.com/dashpay/dips/blob/master/dip-0003.md) and <<glossary:Spork>> 15.\n\n| **Syncing Node Message** | **Direction**  | **Masternode Response**   | **Description** |\n| --- | :---: | --- | --- |\n| **1. Sporks** |   |  |  |\n| [`getsporks` message](core-ref-p2p-network-control-messages#getsporks)                            | \u2192 |                           | Syncing node requests sporks\n|                                                | \u2190 | [`spork` message](core-ref-p2p-network-control-messages#spork)(s)        |\n| **2. Mempool** |   |  |  |\n| [`mempool` message](core-ref-p2p-network-data-messages#mempool)                            | \u2192 |                           | Syncing node requests mempool entries\n|                                                | \u2190 | [`inv` message](core-ref-p2p-network-data-messages#inv)(s) | `inv` message(s) containing TXIDs of mempool transactions |\n| **3. Governance** |   |  | See [Governance sync](#governance) |\n\n*Masternode Sync Status*\n\nThere are several status values used to track masternode synchronization. They are used in both [`ssc` messages](core-ref-p2p-network-masternode-messages#ssc) and the [`mnsync` RPC](core-api-ref-remote-procedure-calls-dash#mnsync).\n\n| **Value** | **Status**  | **Description** |\n| --- | --- | --- |\n| _-1_  | _`MASTERNODE_SYNC_FAILED` _     | **Removed in Dash Core 0.16.0**<br>Synchronization failed |\n| _0_   | _`MASTERNODE_SYNC_INITIAL` _    | **Deprecated (merged with `MASTERNODE_SYNC_WAITING` in Dash Core 0.16.0)**<br>Synchronization just started, was reset recently, or is still in IBD |\n| 1   | `MASTERNODE_SYNC_BLOCKCHAIN` (previously `MASTERNODE_SYNC_WAITING`)  | **Renamed in Dash Core 0.16.0**<br>Synchronization pending - waiting after initial to check for more headers/blocks.  |\n| 4   | `MASTERNODE_SYNC_GOVERNANCE`  | Synchronizing governance objects  |\n| 999 | `MASTERNODE_SYNC_FINISHED`    | Synchronization finished |\n\n# Ongoing Masternode Sync\n\nOnce a masternode completes an initial full sync, continuing synchronization is maintained by the exchange of P2P messages with other <<glossary:nodes>>. This diagram shows an overview of the messages exchanged to keep governance objects synchronized between masternodes.\n\n![Masternode Sync (Ongoing)](https://dash-docs.github.io/img/dev/en-masternode-sync-ongoing.svg)\n\n**Governance**\n\nAfter the initial governance synchronization, governance information is kept current by the [`govobj` messages](core-ref-p2p-network-governance-messages#govobj) and [`govobjvote` messages](core-ref-p2p-network-governance-messages#govobjvote) relayed on the <<glossary:network>>. Unsynchronized <<glossary:peers>> may send [`govsync` messages](core-ref-p2p-network-governance-messages#govsync) to request governance sync.\n\n# Masternode Sync Schedule\n\nThe following tables detail the timing of various functions used to keep the masternodes in sync with each other. This information is derived from the scheduler section of `AppInitMain` in `src/init.cpp`.\n\n| **Period (seconds)** | **Action** | **Description** |\n| --- | --- | --- |\n| 6   | MN Sync                   | Synchronizes sporks and governance objects (masternode-sync.cpp) |\n\nThe following actions only run when the masternode sync is past `MASTERNODE_SYNC_WAITING` status.\n\n| **Period (seconds)** | **Action** | **Description** |\n| --- | --- | --- |\n| 60  | Process MN Connections    | Disconnects some masternodes (`masternodeman.cpp`) |\n| 60  | InstantSend Check/Remove  | Remove expired/orphaned/invalid InstantSend candidates and votes (`instantx.cpp`) |\n| 300 | Maintenance               | Check/remove/reprocess governance objects (`governance.cpp`) |",
 "order": 7,
 "isReference": false,
 "deprecated": false,
 "hidden": false,
 "sync_unique": "",
 "link_url": "",
 "link_external": false,
 "pendingAlgoliaPublish": false,
 "previousSlug": "",
 "slugUpdatedAt": "2020-09-21T17:11:52.722Z",
 "revision": 1,
 "_id": "6388e57de5231e009cab801f",
 "version": "6388e57de5231e009cab8087",
 "updatedAt": "2022-08-02T17:38:44.353Z",
 "createdAt": "2019-10-23T19:48:24.145Z",
 "project": "5daf2e65f4109c0040fd51e1",
 "user": "62b2101422da70001ee51d95",
 "parentDoc": "6388e57de5231e009cab8019",
 "category": "6388e57de5231e009cab7ffa",
 "__v": 3,
 "isApi": false,
 "id": "6388e57de5231e009cab801f",
 "body_html": "<div class=\"magic-block-textarea\"><p>Dash Core performs full &lt;&lt;glossary:masternode&gt;&gt; synchronization as required. There are four conditions that initiate a start/restart the sync process:</p>\n<ul>\n<li >Initial startup of Dash Core</li><li >More than 60 minutes have passed since the last activation</li><li >A failure occurred during the last sync attempt (after a 1 minute cooldown before sync restarts)</li><li >Issuing a <a href=\"core-api-ref-remote-procedure-calls-dash#mnsync\"><code>mnsync reset</code> RPC</a> command</li></ul>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-initial-masternode-sync\"></div>Initial Masternode Sync<a class=\"fa fa-anchor\" href=\"#section-initial-masternode-sync\"></a></h1>\n<p>The deterministic masternode lists introduced by <a href=\"https://github.com/dashpay/dips/blob/master/dip-0003.md\">DIP3</a> eliminated several steps of the sync process related to the masternode list and masternode payments. Since that information is now available on-chain, P2P messages related to those steps were deprecated.</p>\n<p>This diagram shows the order in which P2P messages are sent to perform masternode synchronization initially after startup.</p>\n<p><img src=\"https://dash-docs.github.io/img/dev/en-masternode-sync-initial-dip3.svg\" alt=\"Masternode Sync (Initial)\"></p>\n<p>The following table details the data flow of P2P messages exchanged during initial masternode synchronization after the activation of <a href=\"https://github.com/dashpay/dips/blob/master/dip-0003.md\">DIP3</a> and &lt;&lt;glossary:Spork&gt;&gt; 15.</p>\n<div class=\"marked-table\"><table>\n<thead>\n<tr>\n<th><strong>Syncing Node Message</strong></th>\n<th style=\"text-align:center\"><strong>Direction</strong></th>\n<th><strong>Masternode Response</strong></th>\n<th><strong>Description</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>1. Sporks</strong></td>\n<td style=\"text-align:center\"></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"core-ref-p2p-network-control-messages#getsporks\"><code>getsporks</code> message</a></td>\n<td style=\"text-align:center\">\u2192</td>\n<td></td>\n<td>Syncing node requests sporks</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\">\u2190</td>\n<td><a href=\"core-ref-p2p-network-control-messages#spork\"><code>spork</code> message</a>(s)</td>\n</tr>\n<tr>\n<td><strong>2. Mempool</strong></td>\n<td style=\"text-align:center\"></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"core-ref-p2p-network-data-messages#mempool\"><code>mempool</code> message</a></td>\n<td style=\"text-align:center\">\u2192</td>\n<td></td>\n<td>Syncing node requests mempool entries</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\">\u2190</td>\n<td><a href=\"core-ref-p2p-network-data-messages#inv\"><code>inv</code> message</a>(s)</td>\n<td><code>inv</code> message(s) containing TXIDs of mempool transactions</td>\n</tr>\n<tr>\n<td><strong>3. Governance</strong></td>\n<td style=\"text-align:center\"></td>\n<td></td>\n<td>See <a href=\"#governance\">Governance sync</a></td>\n</tr>\n</tbody>\n</table></div>\n<p><em>Masternode Sync Status</em></p>\n<p>There are several status values used to track masternode synchronization. They are used in both <a href=\"core-ref-p2p-network-masternode-messages#ssc\"><code>ssc</code> messages</a> and the <a href=\"core-api-ref-remote-procedure-calls-dash#mnsync\"><code>mnsync</code> RPC</a>.</p>\n<div class=\"marked-table\"><table>\n<thead>\n<tr>\n<th><strong>Value</strong></th>\n<th><strong>Status</strong></th>\n<th><strong>Description</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>-1</em></td>\n<td>_<code>MASTERNODE_SYNC_FAILED</code> _</td>\n<td><strong>Removed in Dash Core 0.16.0</strong><br>Synchronization failed</td>\n</tr>\n<tr>\n<td><em>0</em></td>\n<td>_<code>MASTERNODE_SYNC_INITIAL</code> _</td>\n<td><strong>Deprecated (merged with <code>MASTERNODE_SYNC_WAITING</code> in Dash Core 0.16.0)</strong><br>Synchronization just started, was reset recently, or is still in IBD</td>\n</tr>\n<tr>\n<td>1</td>\n<td><code>MASTERNODE_SYNC_BLOCKCHAIN</code> (previously <code>MASTERNODE_SYNC_WAITING</code>)</td>\n<td><strong>Renamed in Dash Core 0.16.0</strong><br>Synchronization pending - waiting after initial to check for more headers/blocks.</td>\n</tr>\n<tr>\n<td>4</td>\n<td><code>MASTERNODE_SYNC_GOVERNANCE</code></td>\n<td>Synchronizing governance objects</td>\n</tr>\n<tr>\n<td>999</td>\n<td><code>MASTERNODE_SYNC_FINISHED</code></td>\n<td>Synchronization finished</td>\n</tr>\n</tbody>\n</table></div>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-ongoing-masternode-sync\"></div>Ongoing Masternode Sync<a class=\"fa fa-anchor\" href=\"#section-ongoing-masternode-sync\"></a></h1>\n<p>Once a masternode completes an initial full sync, continuing synchronization is maintained by the exchange of P2P messages with other &lt;&lt;glossary:nodes&gt;&gt;. This diagram shows an overview of the messages exchanged to keep governance objects synchronized between masternodes.</p>\n<p><img src=\"https://dash-docs.github.io/img/dev/en-masternode-sync-ongoing.svg\" alt=\"Masternode Sync (Ongoing)\"></p>\n<p><strong>Governance</strong></p>\n<p>After the initial governance synchronization, governance information is kept current by the <a href=\"core-ref-p2p-network-governance-messages#govobj\"><code>govobj</code> messages</a> and <a href=\"core-ref-p2p-network-governance-messages#govobjvote\"><code>govobjvote</code> messages</a> relayed on the &lt;&lt;glossary:network&gt;&gt;. Unsynchronized &lt;&lt;glossary:peers&gt;&gt; may send <a href=\"core-ref-p2p-network-governance-messages#govsync\"><code>govsync</code> messages</a> to request governance sync.</p>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-masternode-sync-schedule\"></div>Masternode Sync Schedule<a class=\"fa fa-anchor\" href=\"#section-masternode-sync-schedule\"></a></h1>\n<p>The following tables detail the timing of various functions used to keep the masternodes in sync with each other. This information is derived from the scheduler section of <code>AppInitMain</code> in <code>src/init.cpp</code>.</p>\n<div class=\"marked-table\"><table>\n<thead>\n<tr>\n<th><strong>Period (seconds)</strong></th>\n<th><strong>Action</strong></th>\n<th><strong>Description</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>6</td>\n<td>MN Sync</td>\n<td>Synchronizes sporks and governance objects (masternode-sync.cpp)</td>\n</tr>\n</tbody>\n</table></div>\n<p>The following actions only run when the masternode sync is past <code>MASTERNODE_SYNC_WAITING</code> status.</p>\n<div class=\"marked-table\"><table>\n<thead>\n<tr>\n<th><strong>Period (seconds)</strong></th>\n<th><strong>Action</strong></th>\n<th><strong>Description</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>60</td>\n<td>Process MN Connections</td>\n<td>Disconnects some masternodes (<code>masternodeman.cpp</code>)</td>\n</tr>\n<tr>\n<td>60</td>\n<td>InstantSend Check/Remove</td>\n<td>Remove expired/orphaned/invalid InstantSend candidates and votes (<code>instantx.cpp</code>)</td>\n</tr>\n<tr>\n<td>300</td>\n<td>Maintenance</td>\n<td>Check/remove/reprocess governance objects (<code>governance.cpp</code>)</td>\n</tr>\n</tbody>\n</table></div>\n\n</div>"
}