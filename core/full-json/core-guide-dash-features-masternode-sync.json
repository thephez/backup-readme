{
 "metadata": {
  "image": [],
  "title": "Dash Masternode Sync",
  "description": "Dash Core performs full masternode synchronization as required. There are four conditions that initiate a start/restart the sync process.",
  "keywords": "",
  "robots": "index"
 },
 "api": {
  "method": "get",
  "url": "",
  "auth": "required",
  "results": {
   "codes": [
    {
     "status": 200,
     "language": "json",
     "code": "{}",
     "name": ""
    },
    {
     "status": 400,
     "language": "json",
     "code": "{}",
     "name": ""
    }
   ]
  },
  "params": []
 },
 "next": {
  "description": "",
  "pages": [
   {
    "type": "doc",
    "icon": "file-text-o",
    "name": "Governance",
    "slug": "core-guide-dash-features-governance",
    "category": "Core Guides"
   }
  ]
 },
 "algolia": {
  "recordCount": 4,
  "publishPending": false,
  "translationFailure": false,
  "updatedAt": "2023-02-21T19:15:47.019Z"
 },
 "title": "Masternode Sync",
 "icon": "",
 "updates": [],
 "type": "basic",
 "slug": "core-guide-dash-features-masternode-sync",
 "excerpt": "",
 "body": "Dash Core performs full <<glossary:masternode>> synchronization as required. There are four conditions that initiate a start/restart the sync process:\n\n* Initial startup of Dash Core\n* More than 60 minutes have passed since the last activation\n* A failure occurred during the last sync attempt (after a 1 minute cooldown before sync restarts)\n* Issuing a [`mnsync reset` RPC](core-api-ref-remote-procedure-calls-dash#mnsync) command\n\n# Initial Masternode Sync\n\nThe deterministic masternode lists introduced by [DIP3](https://github.com/dashpay/dips/blob/master/dip-0003.md) eliminated several steps of the sync process related to the masternode list and masternode payments. Since that information is now available on-chain, P2P messages related to those steps were deprecated.\n\nThis diagram shows the order in which P2P messages are sent to perform masternode synchronization initially after startup.\n\n![Masternode Sync (Initial)](https://dash-docs.github.io/img/dev/en-masternode-sync-initial-dip3.svg)\n\nThe following table details the data flow of P2P messages exchanged during initial masternode synchronization after the activation of [DIP3](https://github.com/dashpay/dips/blob/master/dip-0003.md) and <<glossary:Spork>> 15.\n\n| **Syncing Node Message** | **Direction**  | **Masternode Response**   | **Description** |\n| --- | :---: | --- | --- |\n| **1. Sporks** |   |  |  |\n| [`getsporks` message](core-ref-p2p-network-control-messages#getsporks)                            | \u2192 |                           | Syncing node requests sporks\n|                                                | \u2190 | [`spork` message](core-ref-p2p-network-control-messages#spork)(s)        |\n| **2. Mempool** |   |  |  |\n| [`mempool` message](core-ref-p2p-network-data-messages#mempool)                            | \u2192 |                           | Syncing node requests mempool entries\n|                                                | \u2190 | [`inv` message](core-ref-p2p-network-data-messages#inv)(s) | `inv` message(s) containing TXIDs of mempool transactions |\n| **3. Governance** |   |  | See [Governance sync](core-guide-dash-features-governance#synchronization) |\n\n*Masternode Sync Status*\n\nThere are several status values used to track masternode synchronization. They are used in both [`ssc` messages](core-ref-p2p-network-masternode-messages#ssc) and the [`mnsync` RPC](core-api-ref-remote-procedure-calls-dash#mnsync).\n\n| **Value** | **Status**  | **Description** |\n| --- | --- | --- |\n| _-1_  | _`MASTERNODE_SYNC_FAILED` _     | **Removed in Dash Core 0.16.0**<br>Synchronization failed |\n| _0_   | _`MASTERNODE_SYNC_INITIAL` _    | **Deprecated (merged with `MASTERNODE_SYNC_WAITING` in Dash Core 0.16.0)**<br>Synchronization just started, was reset recently, or is still in IBD |\n| 1   | `MASTERNODE_SYNC_BLOCKCHAIN` (previously `MASTERNODE_SYNC_WAITING`)  | **Renamed in Dash Core 0.16.0**<br>Synchronization pending - waiting after initial to check for more headers/blocks.  |\n| 4   | `MASTERNODE_SYNC_GOVERNANCE`  | Synchronizing governance objects  |\n| 999 | `MASTERNODE_SYNC_FINISHED`    | Synchronization finished |\n\n# Ongoing Masternode Sync\n\nOnce a masternode completes an initial full sync, continuing synchronization is maintained by the exchange of P2P messages with other <<glossary:nodes>>. This diagram shows an overview of the messages exchanged to keep governance objects synchronized between masternodes.\n\n![Masternode Sync (Ongoing)](https://dash-docs.github.io/img/dev/en-masternode-sync-ongoing.svg)\n\n**Governance**\n\nAfter the initial governance synchronization, governance information is kept current by the [`govobj` messages](core-ref-p2p-network-governance-messages#govobj) and [`govobjvote` messages](core-ref-p2p-network-governance-messages#govobjvote) relayed on the <<glossary:network>>. Unsynchronized <<glossary:peers>> may send [`govsync` messages](core-ref-p2p-network-governance-messages#govsync) to request governance sync.\n\n# Masternode Sync Schedule\n\nThe following tables detail the timing of various functions used to keep the masternodes in sync with each other. This information is derived from the scheduler section of `AppInitMain` in `src/init.cpp`.\n\n| **Period (seconds)** | **Action** | **Description** |\n| --- | --- | --- |\n| 6   | MN Sync                   | Synchronizes sporks and governance objects (masternode-sync.cpp) |\n\nThe following actions only run when the masternode sync is past `MASTERNODE_SYNC_WAITING` status.\n\n| **Period (seconds)** | **Action** | **Description** |\n| --- | --- | --- |\n| 60  | Process MN Connections    | Disconnects some masternodes (`masternodeman.cpp`) |\n| 60  | InstantSend Check/Remove  | Remove expired/orphaned/invalid InstantSend candidates and votes (`instantx.cpp`) |\n| 300 | Maintenance               | Check/remove/reprocess governance objects (`governance.cpp`) |",
 "order": 7,
 "isReference": false,
 "deprecated": false,
 "hidden": false,
 "sync_unique": "",
 "link_url": "",
 "link_external": false,
 "reusableContent": [],
 "previousSlug": "",
 "slugUpdatedAt": "2020-09-21T17:11:52.722Z",
 "revision": 2,
 "_id": "63f5176df91c7700118e77c3",
 "version": "63f5176df91c7700118e7825",
 "updatedAt": "2023-01-10T18:32:31.617Z",
 "createdAt": "2019-10-23T19:48:24.145Z",
 "project": "5daf2e65f4109c0040fd51e1",
 "user": "5b8400d7185d5e00036dcc3b",
 "parentDoc": "63f5176df91c7700118e77bd",
 "category": "63f5176df91c7700118e779e",
 "__v": 3,
 "pendingAlgoliaPublish": false,
 "isApi": false,
 "id": "63f5176df91c7700118e77c3",
 "body_html": "Dash Core performs full <<glossary:masternode>> synchronization as required. There are four conditions that initiate a start/restart the sync process:\n\n* Initial startup of Dash Core\n* More than 60 minutes have passed since the last activation\n* A failure occurred during the last sync attempt (after a 1 minute cooldown before sync restarts)\n* Issuing a [`mnsync reset` RPC](core-api-ref-remote-procedure-calls-dash#mnsync) command\n\n# Initial Masternode Sync\n\nThe deterministic masternode lists introduced by [DIP3](https://github.com/dashpay/dips/blob/master/dip-0003.md) eliminated several steps of the sync process related to the masternode list and masternode payments. Since that information is now available on-chain, P2P messages related to those steps were deprecated.\n\nThis diagram shows the order in which P2P messages are sent to perform masternode synchronization initially after startup.\n\n![Masternode Sync (Initial)](https://dash-docs.github.io/img/dev/en-masternode-sync-initial-dip3.svg)\n\nThe following table details the data flow of P2P messages exchanged during initial masternode synchronization after the activation of [DIP3](https://github.com/dashpay/dips/blob/master/dip-0003.md) and <<glossary:Spork>> 15.\n\n| **Syncing Node Message** | **Direction**  | **Masternode Response**   | **Description** |\n| --- | :---: | --- | --- |\n| **1. Sporks** |   |  |  |\n| [`getsporks` message](core-ref-p2p-network-control-messages#getsporks)                            | \u2192 |                           | Syncing node requests sporks\n|                                                | \u2190 | [`spork` message](core-ref-p2p-network-control-messages#spork)(s)        |\n| **2. Mempool** |   |  |  |\n| [`mempool` message](core-ref-p2p-network-data-messages#mempool)                            | \u2192 |                           | Syncing node requests mempool entries\n|                                                | \u2190 | [`inv` message](core-ref-p2p-network-data-messages#inv)(s) | `inv` message(s) containing TXIDs of mempool transactions |\n| **3. Governance** |   |  | See [Governance sync](core-guide-dash-features-governance#synchronization) |\n\n*Masternode Sync Status*\n\nThere are several status values used to track masternode synchronization. They are used in both [`ssc` messages](core-ref-p2p-network-masternode-messages#ssc) and the [`mnsync` RPC](core-api-ref-remote-procedure-calls-dash#mnsync).\n\n| **Value** | **Status**  | **Description** |\n| --- | --- | --- |\n| _-1_  | _`MASTERNODE_SYNC_FAILED` _     | **Removed in Dash Core 0.16.0**<br>Synchronization failed |\n| _0_   | _`MASTERNODE_SYNC_INITIAL` _    | **Deprecated (merged with `MASTERNODE_SYNC_WAITING` in Dash Core 0.16.0)**<br>Synchronization just started, was reset recently, or is still in IBD |\n| 1   | `MASTERNODE_SYNC_BLOCKCHAIN` (previously `MASTERNODE_SYNC_WAITING`)  | **Renamed in Dash Core 0.16.0**<br>Synchronization pending - waiting after initial to check for more headers/blocks.  |\n| 4   | `MASTERNODE_SYNC_GOVERNANCE`  | Synchronizing governance objects  |\n| 999 | `MASTERNODE_SYNC_FINISHED`    | Synchronization finished |\n\n# Ongoing Masternode Sync\n\nOnce a masternode completes an initial full sync, continuing synchronization is maintained by the exchange of P2P messages with other <<glossary:nodes>>. This diagram shows an overview of the messages exchanged to keep governance objects synchronized between masternodes.\n\n![Masternode Sync (Ongoing)](https://dash-docs.github.io/img/dev/en-masternode-sync-ongoing.svg)\n\n**Governance**\n\nAfter the initial governance synchronization, governance information is kept current by the [`govobj` messages](core-ref-p2p-network-governance-messages#govobj) and [`govobjvote` messages](core-ref-p2p-network-governance-messages#govobjvote) relayed on the <<glossary:network>>. Unsynchronized <<glossary:peers>> may send [`govsync` messages](core-ref-p2p-network-governance-messages#govsync) to request governance sync.\n\n# Masternode Sync Schedule\n\nThe following tables detail the timing of various functions used to keep the masternodes in sync with each other. This information is derived from the scheduler section of `AppInitMain` in `src/init.cpp`.\n\n| **Period (seconds)** | **Action** | **Description** |\n| --- | --- | --- |\n| 6   | MN Sync                   | Synchronizes sporks and governance objects (masternode-sync.cpp) |\n\nThe following actions only run when the masternode sync is past `MASTERNODE_SYNC_WAITING` status.\n\n| **Period (seconds)** | **Action** | **Description** |\n| --- | --- | --- |\n| 60  | Process MN Connections    | Disconnects some masternodes (`masternodeman.cpp`) |\n| 60  | InstantSend Check/Remove  | Remove expired/orphaned/invalid InstantSend candidates and votes (`instantx.cpp`) |\n| 300 | Maintenance               | Check/remove/reprocess governance objects (`governance.cpp`) |"
}