{
 "metadata": {
  "image": [],
  "title": "Standard Transactions",
  "description": "Standard transactions are ones whose pubkey scripts and signature scripts matched a small set of believed-to-be-safe templates.",
  "keywords": "",
  "robots": "index"
 },
 "api": {
  "method": "get",
  "url": "",
  "auth": "required",
  "results": {
   "codes": [
    {
     "status": 200,
     "language": "json",
     "code": "{}",
     "name": ""
    },
    {
     "status": 400,
     "language": "json",
     "code": "{}",
     "name": ""
    }
   ]
  },
  "params": []
 },
 "next": {
  "description": "",
  "pages": [
   {
    "type": "doc",
    "icon": "file-text-o",
    "name": "Non-Standard Transactions",
    "slug": "core-guide-transactions-non-standard-transactions",
    "category": "Core Guides"
   }
  ]
 },
 "algolia": {
  "recordCount": 6,
  "publishPending": false,
  "translationFailure": false,
  "updatedAt": "2023-02-21T19:16:03.486Z"
 },
 "title": "Standard Transactions",
 "icon": "",
 "updates": [],
 "type": "basic",
 "slug": "core-guide-transactions-standard-transactions",
 "excerpt": "",
 "body": "After the discovery of several dangerous bugs in early versions of Bitcoin, a test was added which only accepted <<glossary:transactions>> from the <<glossary:network>> if their pubkey scripts and signature scripts matched a small set of believed-to-be-safe templates, and if the rest of the transaction didn't violate another small set of rules enforcing good network behavior. This is the `IsStandard()` test, and transactions which pass it are called standard transactions.\n\nNon-standard transactions---those that fail the test---may be accepted by <<glossary:nodes>> not using the default Dash Core settings. If they are included in blocks, they will also avoid the IsStandard test and be processed.\n\nBesides making it more difficult for someone to attack Dash for free by broadcasting harmful transactions, the standard transaction test also helps prevent users from creating transactions today that would make adding new transaction features in the future more difficult. For example, as described above, each transaction includes a version number---if users started arbitrarily changing the version number, it would become useless as a tool for introducing backwards-incompatible features.\n\nAs of Dash Core 0.12.2, the standard pubkey script types are:\n\n# Pay To Public Key Hash (P2PKH)\n\n<<glossary:P2PKH>> is the most common form of pubkey script used to send a transaction to one or multiple Dash <<glossary:addresses>>.\n\n```\nPubkey script: OP_DUP OP_HASH160 <PubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\nSignature script: <sig> <pubkey>\n```\n\n# Pay To Script Hash (P2SH)\n\n<<glossary:P2SH>> is used to send a transaction to a script hash. Each of the standard pubkey scripts can be used as a P2SH redeem script, but in practice only the multisig pubkey script makes sense until more transaction types are made standard.\n\n```\nPubkey script: OP_HASH160 <Hash160(redeemScript)> OP_EQUAL\nSignature script: <sig> [sig] [sig...] <redeemScript>\n```\n\n# Multisig\n\nAlthough P2SH multisig is now generally used for multisig transactions, this base script can be used to require multiple signatures before a UTXO can be spent.\n\nIn multisig pubkey scripts, called m-of-n, *m* is the *minimum* number of signatures which must match a public key; *n* is the *number* of public keys being provided. Both *m* and *n* should be opcodes `OP_1` through `OP_16`, corresponding to the number desired.\n\nBecause of an off-by-one error in the original Bitcoin implementation which must be preserved for compatibility, `OP_CHECKMULTISIG` consumes one more value from the stack than indicated by *m*, so the list of secp256k1 signatures in the signature script must be prefaced with an extra value (`OP_0`) which will be consumed but not used.\n\nThe signature script must provide signatures in the same order as the corresponding public keys appear in the pubkey script or redeem script. See the description in [`OP_CHECKMULTISIG`](core-ref-transactions-opcodes) for details.\n\n```\nPubkey script: <m> <A pubkey> [B pubkey] [C pubkey...] <n> OP_CHECKMULTISIG\nSignature script: OP_0 <A sig> [B sig] [C sig...]\n```\n\nAlthough it\u2019s not a separate transaction type, this is a P2SH multisig with 2-of-3:\n\n```\nPubkey script: OP_HASH160 <Hash160(redeemScript)> OP_EQUAL\nRedeem script: <OP_2> <A pubkey> <B pubkey> <C pubkey> <OP_3> OP_CHECKMULTISIG\nSignature script: OP_0 <A sig> <C sig> <redeemScript>\n```\n\n# Pubkey\n\nPubkey <<glossary:outputs>> are a simplified form of the P2PKH pubkey script, but they aren\u2019t as secure as P2PKH, so they generally aren\u2019t used in new transactions anymore.\n\n```\nPubkey script: <pubkey> OP_CHECKSIG\nSignature script: <sig>\n```\n\n# Null Data\n\nNull data transactions (relayed and mined by default in Bitcoin Core 0.9.0 and later) add arbitrary data to a provably unspendable pubkey script that full <<glossary:nodes>> don't have to store in their UTXO database. It is preferable to use null data transactions over transactions that bloat the UTXO database because they cannot be automatically pruned; however, it is usually even more preferable to store data outside transactions if possible.\n\nConsensus rules allow null data outputs up to the maximum allowed pubkey script size of 10,000 bytes provided they follow all other consensus rules, such as not having any data pushes larger than 520 bytes.\n\nDash Core 0.11.x, by default, relayed and mined null data transactions with up to 40 bytes in a single data push and only one null data output that pays exactly 0 duffs:\n\n```\nPubkey Script: OP_RETURN <0 to 40 bytes of data>\n(Null data scripts cannot be spent, so there's no signature script.)\n```\n\nDash Core 0.12.1+ defaults to relaying and mining null data outputs with up to 83 bytes with any number of data pushes, provided the total byte limit is not exceeded. There must still only be a single null data output and it must still pay exactly 0 duffs.\n\n> \ud83d\udcd8 OP_RETURN Limit\n>\n> **Note:** Since the null data output must include opcodes, the limit for data is less than 83 bytes. A typical `OP_RETURN` is limited to 80 bytes due to the following 3 required bytes:\n>\n> * `OP_RETURN` (0x6a)\n> * `OP_PUSHDATA1` (0x4c)\n> * Data Size (e.g. 0x50 for 80 bytes)\n\nThe following annotated hexdump shows an example `OP_RETURN` output:\n\n``` bash\n6a ......................................... OP_RETURN Opcode\n4c ......................................... OP_PUSHDATA1 Opcode\n50 ......................................... Bytes to push: 80\n\n48656c6c6f2066726f6d207468657068657a203\na2d29205468697320697320746865206d617869\n6d756d2074657874206c656e67746820616c6c6\nf77656420666f7220616e204f505f5245545552\n4e2e ....................................... Data\n```\n\nThe `-datacarriersize` Dash Core configuration option allows you to set the maximum number of bytes in null data outputs that you will relay or mine.",
 "order": 2,
 "isReference": false,
 "deprecated": false,
 "hidden": false,
 "sync_unique": "",
 "link_url": "",
 "link_external": false,
 "reusableContent": [],
 "previousSlug": "",
 "slugUpdatedAt": "2022-09-18T18:19:53.813Z",
 "revision": 6,
 "_id": "63f5176df91c7700118e77ff",
 "version": "63f5176df91c7700118e7825",
 "updatedAt": "2023-01-16T15:53:47.249Z",
 "createdAt": "2019-10-28T17:23:01.563Z",
 "project": "5daf2e65f4109c0040fd51e1",
 "user": "5b8400d7185d5e00036dcc3b",
 "parentDoc": "63f5176df91c7700118e77fc",
 "category": "63f5176df91c7700118e779e",
 "__v": 1,
 "pendingAlgoliaPublish": false,
 "isApi": false,
 "id": "63f5176df91c7700118e77ff",
 "body_html": "After the discovery of several dangerous bugs in early versions of Bitcoin, a test was added which only accepted <<glossary:transactions>> from the <<glossary:network>> if their pubkey scripts and signature scripts matched a small set of believed-to-be-safe templates, and if the rest of the transaction didn't violate another small set of rules enforcing good network behavior. This is the `IsStandard()` test, and transactions which pass it are called standard transactions.\n\nNon-standard transactions---those that fail the test---may be accepted by <<glossary:nodes>> not using the default Dash Core settings. If they are included in blocks, they will also avoid the IsStandard test and be processed.\n\nBesides making it more difficult for someone to attack Dash for free by broadcasting harmful transactions, the standard transaction test also helps prevent users from creating transactions today that would make adding new transaction features in the future more difficult. For example, as described above, each transaction includes a version number---if users started arbitrarily changing the version number, it would become useless as a tool for introducing backwards-incompatible features.\n\nAs of Dash Core 0.12.2, the standard pubkey script types are:\n\n# Pay To Public Key Hash (P2PKH)\n\n<<glossary:P2PKH>> is the most common form of pubkey script used to send a transaction to one or multiple Dash <<glossary:addresses>>.\n\n```\nPubkey script: OP_DUP OP_HASH160 <PubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\nSignature script: <sig> <pubkey>\n```\n\n# Pay To Script Hash (P2SH)\n\n<<glossary:P2SH>> is used to send a transaction to a script hash. Each of the standard pubkey scripts can be used as a P2SH redeem script, but in practice only the multisig pubkey script makes sense until more transaction types are made standard.\n\n```\nPubkey script: OP_HASH160 <Hash160(redeemScript)> OP_EQUAL\nSignature script: <sig> [sig] [sig...] <redeemScript>\n```\n\n# Multisig\n\nAlthough P2SH multisig is now generally used for multisig transactions, this base script can be used to require multiple signatures before a UTXO can be spent.\n\nIn multisig pubkey scripts, called m-of-n, *m* is the *minimum* number of signatures which must match a public key; *n* is the *number* of public keys being provided. Both *m* and *n* should be opcodes `OP_1` through `OP_16`, corresponding to the number desired.\n\nBecause of an off-by-one error in the original Bitcoin implementation which must be preserved for compatibility, `OP_CHECKMULTISIG` consumes one more value from the stack than indicated by *m*, so the list of secp256k1 signatures in the signature script must be prefaced with an extra value (`OP_0`) which will be consumed but not used.\n\nThe signature script must provide signatures in the same order as the corresponding public keys appear in the pubkey script or redeem script. See the description in [`OP_CHECKMULTISIG`](core-ref-transactions-opcodes) for details.\n\n```\nPubkey script: <m> <A pubkey> [B pubkey] [C pubkey...] <n> OP_CHECKMULTISIG\nSignature script: OP_0 <A sig> [B sig] [C sig...]\n```\n\nAlthough it\u2019s not a separate transaction type, this is a P2SH multisig with 2-of-3:\n\n```\nPubkey script: OP_HASH160 <Hash160(redeemScript)> OP_EQUAL\nRedeem script: <OP_2> <A pubkey> <B pubkey> <C pubkey> <OP_3> OP_CHECKMULTISIG\nSignature script: OP_0 <A sig> <C sig> <redeemScript>\n```\n\n# Pubkey\n\nPubkey <<glossary:outputs>> are a simplified form of the P2PKH pubkey script, but they aren\u2019t as secure as P2PKH, so they generally aren\u2019t used in new transactions anymore.\n\n```\nPubkey script: <pubkey> OP_CHECKSIG\nSignature script: <sig>\n```\n\n# Null Data\n\nNull data transactions (relayed and mined by default in Bitcoin Core 0.9.0 and later) add arbitrary data to a provably unspendable pubkey script that full <<glossary:nodes>> don't have to store in their UTXO database. It is preferable to use null data transactions over transactions that bloat the UTXO database because they cannot be automatically pruned; however, it is usually even more preferable to store data outside transactions if possible.\n\nConsensus rules allow null data outputs up to the maximum allowed pubkey script size of 10,000 bytes provided they follow all other consensus rules, such as not having any data pushes larger than 520 bytes.\n\nDash Core 0.11.x, by default, relayed and mined null data transactions with up to 40 bytes in a single data push and only one null data output that pays exactly 0 duffs:\n\n```\nPubkey Script: OP_RETURN <0 to 40 bytes of data>\n(Null data scripts cannot be spent, so there's no signature script.)\n```\n\nDash Core 0.12.1+ defaults to relaying and mining null data outputs with up to 83 bytes with any number of data pushes, provided the total byte limit is not exceeded. There must still only be a single null data output and it must still pay exactly 0 duffs.\n\n> \ud83d\udcd8 OP_RETURN Limit\n>\n> **Note:** Since the null data output must include opcodes, the limit for data is less than 83 bytes. A typical `OP_RETURN` is limited to 80 bytes due to the following 3 required bytes:\n>\n> * `OP_RETURN` (0x6a)\n> * `OP_PUSHDATA1` (0x4c)\n> * Data Size (e.g. 0x50 for 80 bytes)\n\nThe following annotated hexdump shows an example `OP_RETURN` output:\n\n``` bash\n6a ......................................... OP_RETURN Opcode\n4c ......................................... OP_PUSHDATA1 Opcode\n50 ......................................... Bytes to push: 80\n\n48656c6c6f2066726f6d207468657068657a203\na2d29205468697320697320746865206d617869\n6d756d2074657874206c656e67746820616c6c6\nf77656420666f7220616e204f505f5245545552\n4e2e ....................................... Data\n```\n\nThe `-datacarriersize` Dash Core configuration option allows you to set the maximum number of bytes in null data outputs that you will relay or mine."
}