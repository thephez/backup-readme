{
 "metadata": {
  "image": [],
  "title": "",
  "description": "",
  "keywords": ""
 },
 "api": {
  "method": "get",
  "url": "",
  "auth": "required",
  "results": {
   "codes": [
    {
     "status": 200,
     "language": "json",
     "code": "{}",
     "name": ""
    },
    {
     "status": 400,
     "language": "json",
     "code": "{}",
     "name": ""
    }
   ]
  },
  "params": []
 },
 "next": {
  "description": "",
  "pages": [
   {
    "type": "doc",
    "icon": "file-text-o",
    "name": "Improvement Proposals",
    "slug": "core-ref-improvement-proposals",
    "category": "Core Reference"
   }
  ]
 },
 "algolia": {
  "recordCount": 5,
  "publishPending": false,
  "updatedAt": "2023-02-21T21:23:54.234Z"
 },
 "title": "Deprecated Messages",
 "icon": "",
 "updates": [],
 "type": "basic",
 "slug": "core-ref-p2p-network-deprecated-messages",
 "excerpt": "",
 "body": ">\u2757\ufe0f Deprecated Messages\n>\n> The following network messages have been deprecated and should no longer be used.\n\n# Alert\n\n>\u2757\ufe0f\n>\n> Deprecated since 0.15.0\n\n*Added in protocol version 311.*\n*Removed by Bitcoin in protocol version 70013, but retained by Dash until 0.15.0.*\n\nThe `alert` message warns nodes of problems that may affect them or the rest of the network. Each `alert` message is signed using a key controlled by respected community members, mostly Dash Core developers.\n\nTo ensure all nodes can validate and forward `alert` messages, encapsulation is used. Developers create an alert using the data structure appropriate for the versions of the software they want to notify; then they serialize that data and sign it. The serialized data and its signature make up the outer `alert` message---allowing nodes which don't understand the data structure to validate the signature and relay the alert to nodes which do understand it. The nodes which actually need the message can decode the serialized data to access the inner `alert` message.\n\nThe outer `alert` message has four fields:\n\n| Bytes       | Name            | Data Type        | Description\n|-------------|-----------------|------------------|-------------\n| *Variable*  | alert bytes     | compactSize uint | The number of bytes in following alert field.\n| *Variable*  | alert           | uchar            | The serialized alert.  See below for a description of the current alert format.\n| *Variable*  | signature bytes | compactSize uint | The number of bytes in the following signature field.\n| *Variable*  | signature       | uchar            | A DER-encoded ECDSA (secp256k1) signature of the alert signed with the developer's alert key.\n\nAlthough designed to be easily upgraded, the format of the inner serialized alert has not changed since the `alert` message was first introduced in protocol version 311.\n\n| Bytes    | Name              | Data Type                 | Description\n|----------|-------------------|---------------------------|-------------\n| 4        | version           | int32_t                   | Alert format version.  Version 1 from protocol version 311 through at least protocol version 70002.\n| 8        | relayUntil        | int64_t                   | The time beyond which nodes should stop relaying this alert.  Unix epoch time format.\n| 8        | expiration        | int64_t                   | The time beyond which this alert is no longer in effect and should be ignored.  Unix epoch time format.\n| 4        | ID                | int32_t                   | A unique ID number for this alert.\n| 4        | cancel            | int32_t                   | All alerts with an ID number less than or equal to this number should be canceled: deleted and not accepted in the future.\n| *Varies* | setCancel count   | compactSize uint          | The number of IDs in the following setCancel field.  May be zero.\n| *Varies* | setCancel         | int32_t                   | Alert IDs which should be canceled.  Each alert ID is a separate int32_t number.\n| 4        | minVer            | int32_t                   | This alert only applies to protocol versions greater than or equal to this version. Nodes running other protocol versions should still relay it.\n| 4        | maxVer            | int32_t                   | This alert only applies to protocol versions less than or equal to this version. Nodes running other protocol versions should still relay it.\n| *Varies* | user\\_agent count | compactSize uint          | The number of user agent strings in the following setUser\\_agent field.  May be zero.\n| *Varies* | setUser\\_agent    | compactSize uint + string | If this field is empty, it has no effect on the alert.  If there is at least one entry is this field, this alert only applies to programs with a user agent that exactly matches one of the strings in this field.  Each entry in this field is a compactSize uint followed by a string---the uint indicates how many bytes are in the following string.  This field was originally called setSubVer; since BIP14, it applies to user agent strings as defined in the [`version` message](core-ref-p2p-network-control-messages#version).\n| 4        | priority          | int32_t                   | Relative priority compared to other alerts.\n| *Varies* | comment bytes     | compactSize uint          | The number of bytes in the following comment field.  May be zero.\n| *Varies* | comment           | string                    | A comment on the alert that is not displayed.\n| *Varies* | statusBar bytes   | compactSize uint          | The number of bytes in the following statusBar field.  May be zero.\n| *Varies* | statusBar         | string                    | The alert message that is displayed to the user.\n| *Varies* | reserved bytes    | compactSize uint          | The number of bytes in the following reserved field.  May be zero.\n| *Varies* | reserved          | string                    | Reserved for future use.  Originally called RPC Error.  \n\nThe annotated hexdump below shows an `alert` message. (The message header has been omitted.)\n\n``` text\n73 ................................. Bytes in encapsulated alert: 115\n01000000 ........................... Version: 1\n3766404f00000000 ................... RelayUntil: 1329620535\nb305434f00000000 ................... Expiration: 1330917376\n\nf2030000 ........................... ID: 1010\nf1030000 ........................... Cancel: 1009\n00 ................................. setCancel count: 0\n\n10270000 ........................... MinVer: 10000\n48ee0000 ........................... MaxVer: 61000\n00 ................................. setUser_agent bytes: 0\n64000000 ........................... Priority: 100\n\n00 ................................. Bytes In Comment String: 0\n46 ................................. Bytes in StatusBar String: 70\n53656520626974636f696e2e6f72672f\n666562323020696620796f7520686176\n652074726f75626c6520636f6e6e6563\n74696e67206166746572203230204665\n627275617279 ....................... Status Bar String: \"See [...]\"\n00 ................................. Bytes In Reserved String: 0\n\n47 ................................. Bytes in signature: 71\n30450221008389df45f0703f39ec8c1c\nc42c13810ffcae14995bb648340219e3\n53b63b53eb022009ec65e1c1aaeec1fd\n334c6b684bde2b3f573060d5b70c3a46\n723326e4e8a4f1 ..................... Signature\n```\n\n**Alert key compromise:** Dash Core's source code defines a particular set of alert parameters that can be used to notify users that the alert signing key has been compromised and that they should upgrade to get a new alert public key. Once a signed alert containing those parameters has been received, no other alerts can cancel or override it.\n\n# ix\n\n>\u2757\ufe0f\n>\n> Deprecated since 0.15.0\n\nThe `ix` message (transaction lock request) has the same structure as the [`tx` message](core-ref-p2p-network-data-messages#tx). The masternode network responds with `txlvote` messages if the transaction inputs can be locked.\n\n# reject\n\n>\u2757\ufe0f\n>\n> Removed in 19.0.0\n\n*Added in protocol version 70002 as described by BIP61.*\n\nThe [`reject` message](core-ref-p2p-network-control-messages#reject) informs the receiving <<glossary:node>> that one of its previous messages has been rejected.\n\n| Bytes    | Name          | Data Type        | Description\n|----------|---------------|------------------|--------------\n| *Varies* | message bytes | compactSize uint | The number of bytes in the following message field.\n| *Varies* | message       | string           | The type of message rejected as ASCII text *without null padding*.  For example: \"tx\", \"block\", or \"version\".\n| 1        | code          | char             | The reject message code.  See the table below.\n| *Varies* | reason bytes  | compactSize uint | The number of bytes in the following reason field.  May be 0x00 if a text reason isn't provided.\n| *Varies* | reason        | string           | The reason for the rejection in ASCII text.  This should not be displayed to the user; it is only for debugging purposes.\n| *Varies* | extra data    | *varies*         | Optional additional data provided with the rejection.  For example, most rejections of [`tx` messages](core-ref-p2p-network-data-messages#tx) or [`block` messages](core-ref-p2p-network-data-messages#block) include the hash of the rejected transaction or block header.  See the code table below.\n\nThe following table lists message reject codes.  Codes are tied to the type of message they reply to; for example there is a 0x10 reject code for transactions and a 0x10 reject code for blocks.\n\n| Code | In Reply To       | Extra Bytes | Extra Type | Description\n|------|-------------------|-------------|------------|----------------\n| 0x01 | *any message*     | 0           | N/A        | Message could not be decoded.  Be careful of [`reject` message](core-ref-p2p-network-control-messages#reject) feedback loops where two peers each don't understand each other's [`reject` messages](core-ref-p2p-network-control-messages#reject) and so keep sending them back and forth forever.\n| 0x10 | [`block` message](core-ref-p2p-network-data-messages#block)   | 32          | char[32]   | Block is invalid for some reason (invalid proof-of-work, invalid signature, etc).  Extra data may include the rejected block's header hash.\n| 0x10 | [`tx` message](core-ref-p2p-network-data-messages#tx)      | 32          | char[32]   | Transaction is invalid for some reason (invalid signature, output value greater than input, etc.).  Extra data may include the rejected transaction's TXID.\n| 0x10 | `ix` message      | 32          | char[32]   | InstantSend transaction is invalid for some reason (invalid tx lock request, conflicting tx lock request, etc.).  Extra data may include the rejected transaction's TXID.\n| 0x11 | [`block` message](core-ref-p2p-network-data-messages#block)   | 32          | char[32]   | The block uses a version that is no longer supported.  Extra data may include the rejected block's header hash.\n| 0x11 | [`version` message](core-ref-p2p-network-control-messages#version) | 0           | N/A        | Connecting node is using a protocol version that the rejecting node considers obsolete and unsupported.\n| 0x11 | [`dsa` message](core-ref-p2p-network-privatesend-messages#dsa)     | 0           | N/A        | Connecting node is using a CoinJoin protocol version that the rejecting node considers obsolete and unsupported.\n| 0x11 | [`dsi` message](core-ref-p2p-network-privatesend-messages#dsi)     | 0           | N/A        | Connecting node is using a CoinJoin protocol version that the rejecting node considers obsolete and unsupported.\n| 0x11 | [`dsc` message](core-ref-p2p-network-privatesend-messages#dsc)     | 0           | N/A        | Connecting node is using a CoinJoin protocol version that the rejecting node considers obsolete and unsupported.\n| 0x11 | [`dsf` message](core-ref-p2p-network-privatesend-messages#dsf)     | 0           | N/A        | Connecting node is using a CoinJoin protocol version that the rejecting node considers obsolete and unsupported.\n| 0x11 | [`dsq` message](core-ref-p2p-network-privatesend-messages#dsq)     | 0           | N/A        | Connecting node is using a CoinJoin protocol version that the rejecting node considers obsolete and unsupported.\n| 0x11 | [`dssu` message](core-ref-p2p-network-privatesend-messages#dssu)    | 0           | N/A        | Connecting node is using a CoinJoin protocol version that the rejecting node considers obsolete and unsupported.\n| 0x11 | [`govsync` message](core-ref-p2p-network-governance-messages#govsync) | 0           | N/A        | Connecting node is using a governance protocol version that the rejecting node considers obsolete and unsupported.\n| 0x11 | [`govobj` message](core-ref-p2p-network-governance-messages#govobj)  | 0           | N/A        | Connecting node is using a governance protocol version that the rejecting node considers obsolete and unsupported.\n| 0x11 | [`govobjvote` message](core-ref-p2p-network-governance-messages#govobjvote) | 0           | N/A        | Connecting node is using a governance protocol version that the rejecting node considers obsolete and unsupported.\n| 0x11 | `mnget` message   | 0           | N/A        | Connecting node is using a masternode payment protocol version that the rejecting node considers obsolete and unsupported.\n| 0x11 | `mnw` message     | 0           | N/A        | Connecting node is using a masternode payment protocol version that the rejecting node considers obsolete and unsupported.\n| 0x11 | `txlvote` message | 0           | N/A        | Connecting node is using an InstantSend protocol version that the rejecting node considers obsolete and unsupported.\n| 0x12 | [`tx` message](core-ref-p2p-network-data-messages#tx)      | 32          | char[32]   | Duplicate input spend (double spend): the rejected transaction spends the same input as a previously-received transaction.  Extra data may include the rejected transaction's TXID.\n| 0x12 | [`version` message](core-ref-p2p-network-control-messages#version) | 0           | N/A        | More than one [`version` message](core-ref-p2p-network-control-messages#version) received in this connection.\n| 0x40 | [`tx` message](core-ref-p2p-network-data-messages#tx)      | 32          | char[32]   | The transaction will not be mined or relayed because the rejecting node considers it non-standard---a transaction type or version unknown by the server.  Extra data may include the rejected transaction's TXID.\n| 0x41 | [`tx` message](core-ref-p2p-network-data-messages#tx)      | 32          | char[32]   | One or more output amounts are below the dust threshold.  Extra data may include the rejected transaction's TXID.\n| 0x42 | [`tx` message](core-ref-p2p-network-data-messages#tx)      |             | char[32]   | The transaction did not have a large enough fee or priority to be relayed or mined.  Extra data may include the rejected transaction's TXID.\n| 0x43 | [`block` message](core-ref-p2p-network-data-messages#block)   | 32          | char[32]   | The block belongs to a block chain which is not the same block chain as provided by a compiled-in checkpoint.  Extra data may include the rejected block's header hash.\n\nReject Codes\n\n| Code | Description\n|------|--------------\n| 0x01 | Malformed\n| 0x10 | Invalid\n| 0x11 | Obsolete\n| 0x12 | Duplicate\n| 0x40 | Non-standard\n| 0x41 | Dust\n| 0x42 | Insufficient fee\n| 0x43 | Checkpoint\n\nThe annotated hexdump below shows a [`reject` message](core-ref-p2p-network-control-messages#reject). (The message header has been omitted.)\n\n``` text\n02 ................................. Number of bytes in message: 2\n7478 ............................... Type of message rejected: tx\n12 ................................. Reject code: 0x12 (duplicate)\n15 ................................. Number of bytes in reason: 21\n6261642d74786e732d696e707574732d\n7370656e74 ......................... Reason: bad-txns-inputs-spent\n394715fcab51093be7bfca5a31005972\n947baf86a31017939575fb2354222821 ... TXID\n```\n\n# txlvote\n\n>\u2757\ufe0f\n>\n> Deprecated since 0.15.0\n\nThe `txlvote` message (transaction lock vote) is sent by masternodes to indicate approval of a transaction lock request `ix` message.\n\n| Bytes | Name | Data type | Required | Description |\n| ---------- | ----------- | --------- | -------- | -------- |\n| 32 | txHash | uint256 | Required | TXID of the transaction to lock\n| 36 | outPoint | outpoint | Required | The unspent outpoint to lock in this transaction\n| 36 | outpointMasternode | outpoint | Required | The outpoint of the masternode which is signing the vote\n| 32 | quorumModifierHash | uint256 | Required | *Added in protocol version 70213. Only present when Spork 15 is active.*<br><br>\n| 32 | masternodeProTxHash | uint256 | Required | *Added in protocol version 70213. Only present when Spork 15 is active.*<br><br>The proTxHash of the DIP3 masternode which is signing the vote\n| 96 | vchMasternodeSignature | char[] | Required | Masternode BLS signature\n\nThe following annotated hexdump shows a `txlvote` message. (The message header has been omitted.)\n\n``` text\n84a27bb879f316482598fe65b0b51544\ne85490d85fc36af1c293e186da373c02 ..... TXID\n\nOutpoint to lock\n| 4c1e6318bab4f9284d3bc0e49ec7fe76\n| 1e9c914b8ea0bcac4563005daa451221 ... Outpoint TXID\n| 00000000 ........................... Outpoint index number: 0\n\nMasternode Outpoint\n| 5d02f07c7318411e41fdd4be9f1e5ece\n| 16d680cfe318306087edc8fb205e507b ... Outpoint TXID\n| 01000000 ........................... Outpoint index number: 1\n\nb62cb5007704d2db8595d5b31cfb7cb0\n8d7e530c16a7597e1db4430a00000000 ..... Quorum Modifier hash\n\n569abbea4ab45f36dd059c44f1dc0804\nf3f13071379c2f418d3637fb548c4159 ..... Masternode ProRegTx hash\n\n60 ................................... Signature length: 96\n\n0b0b97ec14fbc1f12566c3a90ed113e4\ne9c5ee6cdcf2fe2171e4b5f387286146\na0632a250d64ea507ce5e1d1f1983aae\n0b70e568ad2856a0cc13008001c6d0f3\n5bdeb380f6aba0c54663a3b5e2d86d44\n305c2e5d855c72588ffb0e8e2a36482c ..... Masternode BLS Signature\n```",
 "order": 10,
 "isReference": false,
 "deprecated": false,
 "hidden": false,
 "sync_unique": "",
 "link_url": "",
 "link_external": false,
 "reusableContent": [],
 "previousSlug": "",
 "slugUpdatedAt": "2023-01-12T21:07:08.443Z",
 "revision": 5,
 "_id": "63f5176df91c7700118e77bc",
 "version": "63f5176df91c7700118e7825",
 "updatedAt": "2023-02-21T21:23:53.793Z",
 "createdAt": "2019-10-23T17:03:45.891Z",
 "project": "5daf2e65f4109c0040fd51e1",
 "user": "5b8400d7185d5e00036dcc3b",
 "parentDoc": "63f5176df91c7700118e77a5",
 "category": "63f5176df91c7700118e779d",
 "__v": 5,
 "pendingAlgoliaPublish": false,
 "isApi": false,
 "id": "63f5176df91c7700118e77bc",
 "body_html": "<div class=\"magic-block-textarea\"><blockquote>\n<p>\u2757\ufe0f Deprecated Messages</p>\n<p>The following network messages have been deprecated and should no longer be used.</p>\n</blockquote>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-alert\"></div>Alert<a class=\"fa fa-anchor\" href=\"#section-alert\"></a></h1>\n<blockquote>\n<p>\u2757\ufe0f</p>\n<p>Deprecated since 0.15.0</p>\n</blockquote>\n<p><em>Added in protocol version 311.</em><br><em>Removed by Bitcoin in protocol version 70013, but retained by Dash until 0.15.0.</em></p>\n<p>The <code>alert</code> message warns nodes of problems that may affect them or the rest of the network. Each <code>alert</code> message is signed using a key controlled by respected community members, mostly Dash Core developers.</p>\n<p>To ensure all nodes can validate and forward <code>alert</code> messages, encapsulation is used. Developers create an alert using the data structure appropriate for the versions of the software they want to notify; then they serialize that data and sign it. The serialized data and its signature make up the outer <code>alert</code> message---allowing nodes which don&#39;t understand the data structure to validate the signature and relay the alert to nodes which do understand it. The nodes which actually need the message can decode the serialized data to access the inner <code>alert</code> message.</p>\n<p>The outer <code>alert</code> message has four fields:</p>\n<div class=\"marked-table\"><table>\n<thead>\n<tr>\n<th>Bytes</th>\n<th>Name</th>\n<th>Data Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>Variable</em></td>\n<td>alert bytes</td>\n<td>compactSize uint</td>\n<td>The number of bytes in following alert field.</td>\n</tr>\n<tr>\n<td><em>Variable</em></td>\n<td>alert</td>\n<td>uchar</td>\n<td>The serialized alert.  See below for a description of the current alert format.</td>\n</tr>\n<tr>\n<td><em>Variable</em></td>\n<td>signature bytes</td>\n<td>compactSize uint</td>\n<td>The number of bytes in the following signature field.</td>\n</tr>\n<tr>\n<td><em>Variable</em></td>\n<td>signature</td>\n<td>uchar</td>\n<td>A DER-encoded ECDSA (secp256k1) signature of the alert signed with the developer&#39;s alert key.</td>\n</tr>\n</tbody>\n</table></div>\n<p>Although designed to be easily upgraded, the format of the inner serialized alert has not changed since the <code>alert</code> message was first introduced in protocol version 311.</p>\n<div class=\"marked-table\"><table>\n<thead>\n<tr>\n<th>Bytes</th>\n<th>Name</th>\n<th>Data Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>4</td>\n<td>version</td>\n<td>int32_t</td>\n<td>Alert format version.  Version 1 from protocol version 311 through at least protocol version 70002.</td>\n</tr>\n<tr>\n<td>8</td>\n<td>relayUntil</td>\n<td>int64_t</td>\n<td>The time beyond which nodes should stop relaying this alert.  Unix epoch time format.</td>\n</tr>\n<tr>\n<td>8</td>\n<td>expiration</td>\n<td>int64_t</td>\n<td>The time beyond which this alert is no longer in effect and should be ignored.  Unix epoch time format.</td>\n</tr>\n<tr>\n<td>4</td>\n<td>ID</td>\n<td>int32_t</td>\n<td>A unique ID number for this alert.</td>\n</tr>\n<tr>\n<td>4</td>\n<td>cancel</td>\n<td>int32_t</td>\n<td>All alerts with an ID number less than or equal to this number should be canceled: deleted and not accepted in the future.</td>\n</tr>\n<tr>\n<td><em>Varies</em></td>\n<td>setCancel count</td>\n<td>compactSize uint</td>\n<td>The number of IDs in the following setCancel field.  May be zero.</td>\n</tr>\n<tr>\n<td><em>Varies</em></td>\n<td>setCancel</td>\n<td>int32_t</td>\n<td>Alert IDs which should be canceled.  Each alert ID is a separate int32_t number.</td>\n</tr>\n<tr>\n<td>4</td>\n<td>minVer</td>\n<td>int32_t</td>\n<td>This alert only applies to protocol versions greater than or equal to this version. Nodes running other protocol versions should still relay it.</td>\n</tr>\n<tr>\n<td>4</td>\n<td>maxVer</td>\n<td>int32_t</td>\n<td>This alert only applies to protocol versions less than or equal to this version. Nodes running other protocol versions should still relay it.</td>\n</tr>\n<tr>\n<td><em>Varies</em></td>\n<td>user_agent count</td>\n<td>compactSize uint</td>\n<td>The number of user agent strings in the following setUser_agent field.  May be zero.</td>\n</tr>\n<tr>\n<td><em>Varies</em></td>\n<td>setUser_agent</td>\n<td>compactSize uint + string</td>\n<td>If this field is empty, it has no effect on the alert.  If there is at least one entry is this field, this alert only applies to programs with a user agent that exactly matches one of the strings in this field.  Each entry in this field is a compactSize uint followed by a string---the uint indicates how many bytes are in the following string.  This field was originally called setSubVer; since BIP14, it applies to user agent strings as defined in the <a href=\"core-ref-p2p-network-control-messages#version\"><code>version</code> message</a>.</td>\n</tr>\n<tr>\n<td>4</td>\n<td>priority</td>\n<td>int32_t</td>\n<td>Relative priority compared to other alerts.</td>\n</tr>\n<tr>\n<td><em>Varies</em></td>\n<td>comment bytes</td>\n<td>compactSize uint</td>\n<td>The number of bytes in the following comment field.  May be zero.</td>\n</tr>\n<tr>\n<td><em>Varies</em></td>\n<td>comment</td>\n<td>string</td>\n<td>A comment on the alert that is not displayed.</td>\n</tr>\n<tr>\n<td><em>Varies</em></td>\n<td>statusBar bytes</td>\n<td>compactSize uint</td>\n<td>The number of bytes in the following statusBar field.  May be zero.</td>\n</tr>\n<tr>\n<td><em>Varies</em></td>\n<td>statusBar</td>\n<td>string</td>\n<td>The alert message that is displayed to the user.</td>\n</tr>\n<tr>\n<td><em>Varies</em></td>\n<td>reserved bytes</td>\n<td>compactSize uint</td>\n<td>The number of bytes in the following reserved field.  May be zero.</td>\n</tr>\n<tr>\n<td><em>Varies</em></td>\n<td>reserved</td>\n<td>string</td>\n<td>Reserved for future use.  Originally called RPC Error.  </td>\n</tr>\n</tbody>\n</table></div>\n<p>The annotated hexdump below shows an <code>alert</code> message. (The message header has been omitted.)</p>\n<pre><code class=\"lang-text\">73 ................................. Bytes in encapsulated alert: 115\n01000000 ........................... Version: 1\n3766404f00000000 ................... RelayUntil: 1329620535\nb305434f00000000 ................... Expiration: 1330917376\n\nf2030000 ........................... ID: 1010\nf1030000 ........................... Cancel: 1009\n00 ................................. setCancel count: 0\n\n10270000 ........................... MinVer: 10000\n48ee0000 ........................... MaxVer: 61000\n00 ................................. setUser_agent bytes: 0\n64000000 ........................... Priority: 100\n\n00 ................................. Bytes In Comment String: 0\n46 ................................. Bytes in StatusBar String: 70\n53656520626974636f696e2e6f72672f\n666562323020696620796f7520686176\n652074726f75626c6520636f6e6e6563\n74696e67206166746572203230204665\n627275617279 ....................... Status Bar String: &quot;See [...]&quot;\n00 ................................. Bytes In Reserved String: 0\n\n47 ................................. Bytes in signature: 71\n30450221008389df45f0703f39ec8c1c\nc42c13810ffcae14995bb648340219e3\n53b63b53eb022009ec65e1c1aaeec1fd\n334c6b684bde2b3f573060d5b70c3a46\n723326e4e8a4f1 ..................... Signature\n</code></pre>\n<p><strong>Alert key compromise:</strong> Dash Core&#39;s source code defines a particular set of alert parameters that can be used to notify users that the alert signing key has been compromised and that they should upgrade to get a new alert public key. Once a signed alert containing those parameters has been received, no other alerts can cancel or override it.</p>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-ix\"></div>ix<a class=\"fa fa-anchor\" href=\"#section-ix\"></a></h1>\n<blockquote>\n<p>\u2757\ufe0f</p>\n<p>Deprecated since 0.15.0</p>\n</blockquote>\n<p>The <code>ix</code> message (transaction lock request) has the same structure as the <a href=\"core-ref-p2p-network-data-messages#tx\"><code>tx</code> message</a>. The masternode network responds with <code>txlvote</code> messages if the transaction inputs can be locked.</p>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-reject\"></div>reject<a class=\"fa fa-anchor\" href=\"#section-reject\"></a></h1>\n<blockquote>\n<p>\u2757\ufe0f</p>\n<p>Removed in 19.0.0</p>\n</blockquote>\n<p><em>Added in protocol version 70002 as described by BIP61.</em></p>\n<p>The <a href=\"core-ref-p2p-network-control-messages#reject\"><code>reject</code> message</a> informs the receiving &lt;&lt;glossary:node&gt;&gt; that one of its previous messages has been rejected.</p>\n<div class=\"marked-table\"><table>\n<thead>\n<tr>\n<th>Bytes</th>\n<th>Name</th>\n<th>Data Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>Varies</em></td>\n<td>message bytes</td>\n<td>compactSize uint</td>\n<td>The number of bytes in the following message field.</td>\n</tr>\n<tr>\n<td><em>Varies</em></td>\n<td>message</td>\n<td>string</td>\n<td>The type of message rejected as ASCII text <em>without null padding</em>.  For example: &quot;tx&quot;, &quot;block&quot;, or &quot;version&quot;.</td>\n</tr>\n<tr>\n<td>1</td>\n<td>code</td>\n<td>char</td>\n<td>The reject message code.  See the table below.</td>\n</tr>\n<tr>\n<td><em>Varies</em></td>\n<td>reason bytes</td>\n<td>compactSize uint</td>\n<td>The number of bytes in the following reason field.  May be 0x00 if a text reason isn&#39;t provided.</td>\n</tr>\n<tr>\n<td><em>Varies</em></td>\n<td>reason</td>\n<td>string</td>\n<td>The reason for the rejection in ASCII text.  This should not be displayed to the user; it is only for debugging purposes.</td>\n</tr>\n<tr>\n<td><em>Varies</em></td>\n<td>extra data</td>\n<td><em>varies</em></td>\n<td>Optional additional data provided with the rejection.  For example, most rejections of <a href=\"core-ref-p2p-network-data-messages#tx\"><code>tx</code> messages</a> or <a href=\"core-ref-p2p-network-data-messages#block\"><code>block</code> messages</a> include the hash of the rejected transaction or block header.  See the code table below.</td>\n</tr>\n</tbody>\n</table></div>\n<p>The following table lists message reject codes.  Codes are tied to the type of message they reply to; for example there is a 0x10 reject code for transactions and a 0x10 reject code for blocks.</p>\n<div class=\"marked-table\"><table>\n<thead>\n<tr>\n<th>Code</th>\n<th>In Reply To</th>\n<th>Extra Bytes</th>\n<th>Extra Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0x01</td>\n<td><em>any message</em></td>\n<td>0</td>\n<td>N/A</td>\n<td>Message could not be decoded.  Be careful of <a href=\"core-ref-p2p-network-control-messages#reject\"><code>reject</code> message</a> feedback loops where two peers each don&#39;t understand each other&#39;s <a href=\"core-ref-p2p-network-control-messages#reject\"><code>reject</code> messages</a> and so keep sending them back and forth forever.</td>\n</tr>\n<tr>\n<td>0x10</td>\n<td><a href=\"core-ref-p2p-network-data-messages#block\"><code>block</code> message</a></td>\n<td>32</td>\n<td>char[32]</td>\n<td>Block is invalid for some reason (invalid proof-of-work, invalid signature, etc).  Extra data may include the rejected block&#39;s header hash.</td>\n</tr>\n<tr>\n<td>0x10</td>\n<td><a href=\"core-ref-p2p-network-data-messages#tx\"><code>tx</code> message</a></td>\n<td>32</td>\n<td>char[32]</td>\n<td>Transaction is invalid for some reason (invalid signature, output value greater than input, etc.).  Extra data may include the rejected transaction&#39;s TXID.</td>\n</tr>\n<tr>\n<td>0x10</td>\n<td><code>ix</code> message</td>\n<td>32</td>\n<td>char[32]</td>\n<td>InstantSend transaction is invalid for some reason (invalid tx lock request, conflicting tx lock request, etc.).  Extra data may include the rejected transaction&#39;s TXID.</td>\n</tr>\n<tr>\n<td>0x11</td>\n<td><a href=\"core-ref-p2p-network-data-messages#block\"><code>block</code> message</a></td>\n<td>32</td>\n<td>char[32]</td>\n<td>The block uses a version that is no longer supported.  Extra data may include the rejected block&#39;s header hash.</td>\n</tr>\n<tr>\n<td>0x11</td>\n<td><a href=\"core-ref-p2p-network-control-messages#version\"><code>version</code> message</a></td>\n<td>0</td>\n<td>N/A</td>\n<td>Connecting node is using a protocol version that the rejecting node considers obsolete and unsupported.</td>\n</tr>\n<tr>\n<td>0x11</td>\n<td><a href=\"core-ref-p2p-network-privatesend-messages#dsa\"><code>dsa</code> message</a></td>\n<td>0</td>\n<td>N/A</td>\n<td>Connecting node is using a CoinJoin protocol version that the rejecting node considers obsolete and unsupported.</td>\n</tr>\n<tr>\n<td>0x11</td>\n<td><a href=\"core-ref-p2p-network-privatesend-messages#dsi\"><code>dsi</code> message</a></td>\n<td>0</td>\n<td>N/A</td>\n<td>Connecting node is using a CoinJoin protocol version that the rejecting node considers obsolete and unsupported.</td>\n</tr>\n<tr>\n<td>0x11</td>\n<td><a href=\"core-ref-p2p-network-privatesend-messages#dsc\"><code>dsc</code> message</a></td>\n<td>0</td>\n<td>N/A</td>\n<td>Connecting node is using a CoinJoin protocol version that the rejecting node considers obsolete and unsupported.</td>\n</tr>\n<tr>\n<td>0x11</td>\n<td><a href=\"core-ref-p2p-network-privatesend-messages#dsf\"><code>dsf</code> message</a></td>\n<td>0</td>\n<td>N/A</td>\n<td>Connecting node is using a CoinJoin protocol version that the rejecting node considers obsolete and unsupported.</td>\n</tr>\n<tr>\n<td>0x11</td>\n<td><a href=\"core-ref-p2p-network-privatesend-messages#dsq\"><code>dsq</code> message</a></td>\n<td>0</td>\n<td>N/A</td>\n<td>Connecting node is using a CoinJoin protocol version that the rejecting node considers obsolete and unsupported.</td>\n</tr>\n<tr>\n<td>0x11</td>\n<td><a href=\"core-ref-p2p-network-privatesend-messages#dssu\"><code>dssu</code> message</a></td>\n<td>0</td>\n<td>N/A</td>\n<td>Connecting node is using a CoinJoin protocol version that the rejecting node considers obsolete and unsupported.</td>\n</tr>\n<tr>\n<td>0x11</td>\n<td><a href=\"core-ref-p2p-network-governance-messages#govsync\"><code>govsync</code> message</a></td>\n<td>0</td>\n<td>N/A</td>\n<td>Connecting node is using a governance protocol version that the rejecting node considers obsolete and unsupported.</td>\n</tr>\n<tr>\n<td>0x11</td>\n<td><a href=\"core-ref-p2p-network-governance-messages#govobj\"><code>govobj</code> message</a></td>\n<td>0</td>\n<td>N/A</td>\n<td>Connecting node is using a governance protocol version that the rejecting node considers obsolete and unsupported.</td>\n</tr>\n<tr>\n<td>0x11</td>\n<td><a href=\"core-ref-p2p-network-governance-messages#govobjvote\"><code>govobjvote</code> message</a></td>\n<td>0</td>\n<td>N/A</td>\n<td>Connecting node is using a governance protocol version that the rejecting node considers obsolete and unsupported.</td>\n</tr>\n<tr>\n<td>0x11</td>\n<td><code>mnget</code> message</td>\n<td>0</td>\n<td>N/A</td>\n<td>Connecting node is using a masternode payment protocol version that the rejecting node considers obsolete and unsupported.</td>\n</tr>\n<tr>\n<td>0x11</td>\n<td><code>mnw</code> message</td>\n<td>0</td>\n<td>N/A</td>\n<td>Connecting node is using a masternode payment protocol version that the rejecting node considers obsolete and unsupported.</td>\n</tr>\n<tr>\n<td>0x11</td>\n<td><code>txlvote</code> message</td>\n<td>0</td>\n<td>N/A</td>\n<td>Connecting node is using an InstantSend protocol version that the rejecting node considers obsolete and unsupported.</td>\n</tr>\n<tr>\n<td>0x12</td>\n<td><a href=\"core-ref-p2p-network-data-messages#tx\"><code>tx</code> message</a></td>\n<td>32</td>\n<td>char[32]</td>\n<td>Duplicate input spend (double spend): the rejected transaction spends the same input as a previously-received transaction.  Extra data may include the rejected transaction&#39;s TXID.</td>\n</tr>\n<tr>\n<td>0x12</td>\n<td><a href=\"core-ref-p2p-network-control-messages#version\"><code>version</code> message</a></td>\n<td>0</td>\n<td>N/A</td>\n<td>More than one <a href=\"core-ref-p2p-network-control-messages#version\"><code>version</code> message</a> received in this connection.</td>\n</tr>\n<tr>\n<td>0x40</td>\n<td><a href=\"core-ref-p2p-network-data-messages#tx\"><code>tx</code> message</a></td>\n<td>32</td>\n<td>char[32]</td>\n<td>The transaction will not be mined or relayed because the rejecting node considers it non-standard---a transaction type or version unknown by the server.  Extra data may include the rejected transaction&#39;s TXID.</td>\n</tr>\n<tr>\n<td>0x41</td>\n<td><a href=\"core-ref-p2p-network-data-messages#tx\"><code>tx</code> message</a></td>\n<td>32</td>\n<td>char[32]</td>\n<td>One or more output amounts are below the dust threshold.  Extra data may include the rejected transaction&#39;s TXID.</td>\n</tr>\n<tr>\n<td>0x42</td>\n<td><a href=\"core-ref-p2p-network-data-messages#tx\"><code>tx</code> message</a></td>\n<td></td>\n<td>char[32]</td>\n<td>The transaction did not have a large enough fee or priority to be relayed or mined.  Extra data may include the rejected transaction&#39;s TXID.</td>\n</tr>\n<tr>\n<td>0x43</td>\n<td><a href=\"core-ref-p2p-network-data-messages#block\"><code>block</code> message</a></td>\n<td>32</td>\n<td>char[32]</td>\n<td>The block belongs to a block chain which is not the same block chain as provided by a compiled-in checkpoint.  Extra data may include the rejected block&#39;s header hash.</td>\n</tr>\n</tbody>\n</table></div>\n<p>Reject Codes</p>\n<div class=\"marked-table\"><table>\n<thead>\n<tr>\n<th>Code</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0x01</td>\n<td>Malformed</td>\n</tr>\n<tr>\n<td>0x10</td>\n<td>Invalid</td>\n</tr>\n<tr>\n<td>0x11</td>\n<td>Obsolete</td>\n</tr>\n<tr>\n<td>0x12</td>\n<td>Duplicate</td>\n</tr>\n<tr>\n<td>0x40</td>\n<td>Non-standard</td>\n</tr>\n<tr>\n<td>0x41</td>\n<td>Dust</td>\n</tr>\n<tr>\n<td>0x42</td>\n<td>Insufficient fee</td>\n</tr>\n<tr>\n<td>0x43</td>\n<td>Checkpoint</td>\n</tr>\n</tbody>\n</table></div>\n<p>The annotated hexdump below shows a <a href=\"core-ref-p2p-network-control-messages#reject\"><code>reject</code> message</a>. (The message header has been omitted.)</p>\n<pre><code class=\"lang-text\">02 ................................. Number of bytes in message: 2\n7478 ............................... Type of message rejected: tx\n12 ................................. Reject code: 0x12 (duplicate)\n15 ................................. Number of bytes in reason: 21\n6261642d74786e732d696e707574732d\n7370656e74 ......................... Reason: bad-txns-inputs-spent\n394715fcab51093be7bfca5a31005972\n947baf86a31017939575fb2354222821 ... TXID\n</code></pre>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-txlvote\"></div>txlvote<a class=\"fa fa-anchor\" href=\"#section-txlvote\"></a></h1>\n<blockquote>\n<p>\u2757\ufe0f</p>\n<p>Deprecated since 0.15.0</p>\n</blockquote>\n<p>The <code>txlvote</code> message (transaction lock vote) is sent by masternodes to indicate approval of a transaction lock request <code>ix</code> message.</p>\n<div class=\"marked-table\"><table>\n<thead>\n<tr>\n<th>Bytes</th>\n<th>Name</th>\n<th>Data type</th>\n<th>Required</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>32</td>\n<td>txHash</td>\n<td>uint256</td>\n<td>Required</td>\n<td>TXID of the transaction to lock</td>\n</tr>\n<tr>\n<td>36</td>\n<td>outPoint</td>\n<td>outpoint</td>\n<td>Required</td>\n<td>The unspent outpoint to lock in this transaction</td>\n</tr>\n<tr>\n<td>36</td>\n<td>outpointMasternode</td>\n<td>outpoint</td>\n<td>Required</td>\n<td>The outpoint of the masternode which is signing the vote</td>\n</tr>\n<tr>\n<td>32</td>\n<td>quorumModifierHash</td>\n<td>uint256</td>\n<td>Required</td>\n<td><em>Added in protocol version 70213. Only present when Spork 15 is active.</em><br><br></td>\n</tr>\n<tr>\n<td>32</td>\n<td>masternodeProTxHash</td>\n<td>uint256</td>\n<td>Required</td>\n<td><em>Added in protocol version 70213. Only present when Spork 15 is active.</em><br><br>The proTxHash of the DIP3 masternode which is signing the vote</td>\n</tr>\n<tr>\n<td>96</td>\n<td>vchMasternodeSignature</td>\n<td>char[]</td>\n<td>Required</td>\n<td>Masternode BLS signature</td>\n</tr>\n</tbody>\n</table></div>\n<p>The following annotated hexdump shows a <code>txlvote</code> message. (The message header has been omitted.)</p>\n<pre><code class=\"lang-text\">84a27bb879f316482598fe65b0b51544\ne85490d85fc36af1c293e186da373c02 ..... TXID\n\nOutpoint to lock\n| 4c1e6318bab4f9284d3bc0e49ec7fe76\n| 1e9c914b8ea0bcac4563005daa451221 ... Outpoint TXID\n| 00000000 ........................... Outpoint index number: 0\n\nMasternode Outpoint\n| 5d02f07c7318411e41fdd4be9f1e5ece\n| 16d680cfe318306087edc8fb205e507b ... Outpoint TXID\n| 01000000 ........................... Outpoint index number: 1\n\nb62cb5007704d2db8595d5b31cfb7cb0\n8d7e530c16a7597e1db4430a00000000 ..... Quorum Modifier hash\n\n569abbea4ab45f36dd059c44f1dc0804\nf3f13071379c2f418d3637fb548c4159 ..... Masternode ProRegTx hash\n\n60 ................................... Signature length: 96\n\n0b0b97ec14fbc1f12566c3a90ed113e4\ne9c5ee6cdcf2fe2171e4b5f387286146\na0632a250d64ea507ce5e1d1f1983aae\n0b70e568ad2856a0cc13008001c6d0f3\n5bdeb380f6aba0c54663a3b5e2d86d44\n305c2e5d855c72588ffb0e8e2a36482c ..... Masternode BLS Signature\n</code></pre>\n\n</div>"
}