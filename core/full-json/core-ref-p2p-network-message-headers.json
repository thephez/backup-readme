{
 "metadata": {
  "image": [],
  "title": "Dash Message Headers",
  "description": "All messages in the network protocol use the same container format, which provides a required multi-field message header and an optional payload.",
  "keywords": "",
  "robots": "index"
 },
 "api": {
  "method": "get",
  "url": "",
  "auth": "required",
  "results": {
   "codes": [
    {
     "status": 200,
     "language": "json",
     "code": "{}",
     "name": ""
    },
    {
     "status": 400,
     "language": "json",
     "code": "{}",
     "name": ""
    }
   ]
  },
  "params": []
 },
 "next": {
  "description": "",
  "pages": [
   {
    "type": "doc",
    "icon": "file-text-o",
    "name": "Control Messages",
    "slug": "core-ref-p2p-network-control-messages",
    "category": "Core Reference"
   }
  ]
 },
 "algolia": {
  "recordCount": 2,
  "publishPending": false,
  "translationFailure": false,
  "updatedAt": "2023-02-21T19:15:39.442Z"
 },
 "title": "Message Headers",
 "icon": "",
 "updates": [],
 "type": "basic",
 "slug": "core-ref-p2p-network-message-headers",
 "excerpt": "",
 "body": "All messages in the network protocol use the same container format, which provides a required multi-field <<glossary:message header>> and an optional payload. The message header format is:\n\n| Bytes | Name         | Data Type | Description\n| :-------: |--------------|-----------|-------------\n| 4     | start string | char[4]   | Magic bytes indicating the originating network; used to seek to next message when stream state is unknown.\n| 12    | command name | char[12]  | ASCII string which identifies what message type is contained in the payload.  Followed by nulls (0x00) to pad out byte count; for example: `version\\0\\0\\0\\0\\0`.\n| 4     | payload size | uint32_t  | Number of bytes in payload.  The current maximum number of bytes ([`MAX_SIZE`](https://github.com/dashpay/dash/blob/v0.15.x/src/serialize.h#L29)) allowed in the payload by Dash Core is 32 MiB---messages with a payload size larger than this will be dropped or rejected.\n| 4     | checksum     | char[4]   | *Added in protocol version 209.* <br><br>First 4 bytes of SHA256(SHA256(payload)) in internal byte order.<br /><br /> If payload is empty, as in `verack` and [`getaddr` messages](core-ref-p2p-network-control-messages#getaddr), the checksum is always 0x5df6e0e2 (SHA256(SHA256(<empty string>))).\n\n# Example\n\nThe following example is an annotated hex dump of a <<glossary:mainnet>> message header from a [`verack` message](core-ref-p2p-network-control-messages#verack) which has no payload.\n\n``` text\nbf0c6bbd ................... Start string: Mainnet\n76657261636b000000000000 ... Command name: verack + null padding\n00000000 ................... Byte count: 0\n5df6e0e2 ................... Checksum: SHA256(SHA256(<empty>))\n```",
 "order": 2,
 "isReference": false,
 "deprecated": false,
 "hidden": false,
 "sync_unique": "",
 "link_url": "",
 "link_external": false,
 "reusableContent": [],
 "previousSlug": "",
 "slugUpdatedAt": "2022-07-27T17:29:29.064Z",
 "revision": 1,
 "_id": "63f5176df91c7700118e77a8",
 "version": "63f5176df91c7700118e7825",
 "updatedAt": "2020-06-02T19:51:36.287Z",
 "createdAt": "2019-10-23T16:02:12.016Z",
 "project": "5daf2e65f4109c0040fd51e1",
 "user": "62b2101422da70001ee51d95",
 "category": "63f5176df91c7700118e779d",
 "__v": 2,
 "parentDoc": "63f5176df91c7700118e77a5",
 "pendingAlgoliaPublish": false,
 "isApi": false,
 "id": "63f5176df91c7700118e77a8",
 "body_html": "All messages in the network protocol use the same container format, which provides a required multi-field <<glossary:message header>> and an optional payload. The message header format is:\n\n| Bytes | Name         | Data Type | Description\n| :-------: |--------------|-----------|-------------\n| 4     | start string | char[4]   | Magic bytes indicating the originating network; used to seek to next message when stream state is unknown.\n| 12    | command name | char[12]  | ASCII string which identifies what message type is contained in the payload.  Followed by nulls (0x00) to pad out byte count; for example: `version\\0\\0\\0\\0\\0`.\n| 4     | payload size | uint32_t  | Number of bytes in payload.  The current maximum number of bytes ([`MAX_SIZE`](https://github.com/dashpay/dash/blob/v0.15.x/src/serialize.h#L29)) allowed in the payload by Dash Core is 32 MiB---messages with a payload size larger than this will be dropped or rejected.\n| 4     | checksum     | char[4]   | *Added in protocol version 209.* <br><br>First 4 bytes of SHA256(SHA256(payload)) in internal byte order.<br /><br /> If payload is empty, as in `verack` and [`getaddr` messages](core-ref-p2p-network-control-messages#getaddr), the checksum is always 0x5df6e0e2 (SHA256(SHA256(<empty string>))).\n\n# Example\n\nThe following example is an annotated hex dump of a <<glossary:mainnet>> message header from a [`verack` message](core-ref-p2p-network-control-messages#verack) which has no payload.\n\n``` text\nbf0c6bbd ................... Start string: Mainnet\n76657261636b000000000000 ... Command name: verack + null padding\n00000000 ................... Byte count: 0\n5df6e0e2 ................... Checksum: SHA256(SHA256(<empty>))\n```"
}