{
 "metadata": {
  "image": [],
  "title": "Dash Raw Transaction Format",
  "description": "Dash transactions are broadcast between peers in a serialized byte format, called raw format. This is further SHA256 hashed to create the TXID and merkle root.",
  "keywords": "",
  "robots": "index"
 },
 "api": {
  "method": "get",
  "url": "",
  "auth": "required",
  "results": {
   "codes": [
    {
     "status": 200,
     "language": "json",
     "code": "{}",
     "name": ""
    },
    {
     "status": 400,
     "language": "json",
     "code": "{}",
     "name": ""
    }
   ]
  },
  "params": []
 },
 "next": {
  "description": "",
  "pages": [
   {
    "type": "doc",
    "icon": "file-text-o",
    "name": "Special Transactions",
    "slug": "core-ref-transactions-special-transactions",
    "category": "Core Reference"
   }
  ]
 },
 "algolia": {
  "recordCount": 6,
  "publishPending": false,
  "translationFailure": false,
  "updatedAt": "2023-02-21T19:15:44.809Z"
 },
 "title": "Raw Transaction Format",
 "icon": "",
 "updates": [],
 "type": "basic",
 "slug": "core-ref-transactions-raw-transaction-format",
 "excerpt": "",
 "body": "Dash transactions are broadcast between <<glossary:peers>> in a serialized byte format, called <<glossary:raw format>>. It is this form of a transaction which is SHA256(SHA256()) hashed to create the <<glossary:TXID>> and, ultimately, the <<glossary:merkle root>> of a <<glossary:block>> containing the transaction---making the transaction format part of the <<glossary:consensus rules>>.\n\nDash Core and many other tools print and accept <<glossary:raw transactions>> encoded as hex.\n\nTransactions prior to protocol version 70209 defaulted to version 1. Transaction version 2 was the default in protocol versions => 70209 and < 70213. Version 2 transactions have the same format, but the `lock_time` parameter was redefined by [BIP68](https://github.com/bitcoin/bips/blob/master/bip-0068.mediawiki) to enable relative lock-times. (Note: transactions in the <<glossary:block chain>> are allowed to list a higher version number to permit <<glossary:soft forks>>, but they are treated as version 2 transactions by current software.)\n\nDash Core 0.13.0 (protocol version 70213) introduced transaction version 3 as part of the [DIP2 - Special Transactions](https://github.com/dashpay/dips/blob/master/dip-0002.md) implementation. Details of the changes introduced by this feature and currently implemented <<glossary:special transactions>> can be found in the [Special Transactions section](core-ref-transactions-special-transactions) below as well as in the [DIP](https://github.com/dashpay/dips/blob/master/dip-0002.md).\n\nA raw transaction has the following top-level format:\n\n| Bytes    | Name         | Data Type           | Description\n|----------|--------------|---------------------|-------------\n| 2        | version      | uint16_t            | *Converted from 4 bytes to 2 bytes by DIP2 in v0.13.0*<br><br>Transaction version number; currently version 3.  Programs creating transactions using newer consensus rules may use higher version numbers.\n| 2        | type         | uint16_t            | *Added by DIP2 in v0.13.0. Uses 2 bytes that were previously part of `version`*<br><br>Transaction type number; 0 for classical transactions; Non-zero for DIP2 special transactions.\n| *Varies* | tx_in count  | compactSize uint    | Number of inputs in this transaction.\n| *Varies* | tx_in        | txIn                | Transaction inputs.  See description of txIn below.\n| *Varies* | tx_out count | compactSize uint    | Number of outputs in this transaction.\n| *Varies* | tx_out       | txOut               | Transaction outputs.  See description of txOut below.\n| 4        | lock_time    | uint32_t            | A time (Unix epoch time) or block number.  See the [locktime parsing rules](core-guide-transactions-locktime-and-sequence-number).\n| *Varies* | extra_payload size | compactSize uint | *Added by DIP2 in v0.13.0*<br><br>Variable number of bytes of extra payload for DIP2-based special transactions\n| *Varies* | extra_payload | blob               | *Added by DIP2 in v0.13.0*<br><br>Special transaction payload.\n\nA transaction may have multiple <<glossary:inputs>> and <<glossary:outputs>>, so the txIn and txOut structures may recur within a transaction. <<glossary:CompactSize unsigned integers>> are a form of variable-length integers; they are described in the [CompactSize section](core-ref-transactions-compactsize-unsigned-integers).\n\n# JSON-RPC Responses\n\nWhen retrieving transaction data via Dash Core RPCs (e.g. the [`getrawtransaction` RPC](core-api-ref-remote-procedure-calls-raw-transactions#getrawtransaction)), the transaction data is returned in the following format.\n\nVersion 1 and 2 Transaction Structure (prior to DIP2 activation in Dash Core v0.13.0):\n``` json\n{\n  \"txid\": \"<string>\",\n  \"size\": \"<int>\",\n  \"version\": 2,\n  \"locktime\": 0,\n  \"vin\": [ ],\n  \"vout\": [ ]\n}\n```\n\nVersion 3 Transaction Structure (Dash Core v0.13.0+ and activated [DIP2](https://github.com/dashpay/dips/blob/master/dip-0002.md)):\n``` json\n{\n  \"txid\": \"<string>\",\n  \"size\": \"<int>\",\n  \"version\": 3,\n  \"type\": \"<int>\",\n  \"locktime\": 0,\n  \"vin\": [ ],\n  \"vout\": [ ],\n  \"extraPayloadSize\": \"<variable int>\",\n  \"extraPayload\": \"\u2026\"\n}\n```\n\nFor <<glossary:special transactions>> (those using the extraPayload fields), JSON-RPC responses contain a parsed JSON representation of the Transaction Payload.\n\nThe sample transaction below shows the response for a quorum commitment special transaction:\n\n``` json\n{\n  \"txid\": \"592a09d08348d970b4d9ba216246a23dac866717b460d3f369a86293b9839eea\",\n  \"size\": 342,\n  \"version\": 3,\n  \"type\": 6,\n  \"locktime\": 0,\n  \"vin\": [\n  ],\n  \"vout\": [\n  ],\n  \"extraPayloadSize\": 329,\n  \"extraPayload\": \"0100841b0000010001211cd3e4230b2bc47530e200447e998a38e960d4ed5f5251e26892130cn  \"qcTx\": {\n    \"version\": 1,\n    \"height\": 7044,\n    \"commitment\": {\n      \"version\": 1,\n      \"llmqType\": 1,\n      \"quorumHash\": \"0000000c139268e251525fedd460e9388a997e4400e23075c42b0b23e4d31c21\",\n      \"signersCount\": 0,\n      \"validMembersCount\": 0,\n      \"quorumPublicKey\": \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n    }\n  },\n  \"instantlock\": false\n}\n```\n\n**<span id=\"txin\"></span>**\n# TxIn: A Transaction Input (Non-Coinbase)\n\nEach non- <<glossary:coinbase>> <<glossary:input>> spends an outpoint from a previous transaction. (Coinbase inputs are described separately after the example section below.)\n\n| Bytes    | Name             | Data Type            | Description\n|----------|------------------|----------------------|--------------\n| 36       | previous_output  | <<glossary:outpoint>>             | The previous outpoint being spent.  See description of outpoint below.\n| *Varies* | script bytes     | compactSize uint     | The number of bytes in the signature script.  Maximum is 10,000 bytes.\n| *Varies* | signature script | char[]               | A script-language script which satisfies the conditions placed in the outpoint's pubkey script.  Should only contain data pushes; see the [signature script modification warning](core-ref-transactions-opcodes#signature-script-modification).\n| 4        | sequence         | uint32_t             | Sequence number.  Default for Dash Core and almost all other programs is 0xffffffff.\n\n**<span id=\"outpoint\"></span>**\n# Outpoint: The Specific Part Of A Specific Output\n\nBecause a single transaction can include multiple <<glossary:outputs>>, the <<glossary:outpoint>> structure includes both a <<glossary:TXID>> and an output index number to refer to specific output.\n\n| Bytes | Name  | Data Type | Description\n|-------|-------|-----------|--------------\n| 32    | hash  | char[32]  | The TXID of the transaction holding the output to spend.  The TXID is a hash provided here in internal byte order.\n| 4     | index | uint32_t  | The output index number of the specific output to spend from the transaction. The first output is 0x00000000.\n\n**<span id=\"txout\"></span>**\n# TxOut: A Transaction Output\n\nEach <<glossary:output>> spends a certain number of <<glossary:duffs>>, placing them under control of anyone who can satisfy the provided <<glossary:pubkey script>>.\n\n| Bytes    | Name            | Data Type        | Description\n|----------|-----------------|------------------|--------------\n| 8        | value           | int64_t          | Number of duffs to spend.  May be zero; the sum of all outputs may not exceed the sum of duffs previously spent to the outpoints provided in the input section.  (Exception: coinbase transactions spend the block subsidy and collected transaction fees.)\n| 1+       | pk_script bytes | compactSize uint | Number of bytes in the pubkey script.  Maximum is 10,000 bytes.\n| *Varies* | pk_script       | char[]           | Defines the conditions which must be satisfied to spend this output.\n\n**Example**\n\nThe sample raw transaction itemized below is the one created in the [Simple Raw Transaction section](core-examples-transaction-tutorial#simple-raw-transaction) of the Developer Examples. It spends a previous pay-to-pubkey output by paying to a new pay-to-pubkey-hash (P2PKH) output.\n\n``` text\n01000000 ................................... Version\n\n01 ......................................... Number of inputs\n|\n| 7b1eabe0209b1fe794124575ef807057\n| c77ada2138ae4fa8d6c4de0398a14f3f ......... Outpoint TXID\n| 00000000 ................................. Outpoint index number: 0\n|\n| 49 ....................................... Bytes in sig. script: 73\n| | 48 ..................................... Push 72 bytes as data\n| | | 30450221008949f0cb400094ad2b5eb3\n| | | 99d59d01c14d73d8fe6e96df1a7150de\n| | | b388ab8935022079656090d7f6bac4c9\n| | | a94e0aad311a4268e082a725f8aeae05\n| | | 73fb12ff866a5f01 ..................... Secp256k1 signature\n|\n| ffffffff ................................. Sequence number: UINT32_MAX\n\n01 ......................................... Number of outputs\n| f0ca052a01000000 ......................... Duffs (49.99990000 Dash)\n|\n| 19 ....................................... Bytes in pubkey script: 25\n| | 76 ..................................... OP_DUP\n| | a9 ..................................... OP_HASH160\n| | 14 ..................................... Push 20 bytes as data\n| | | cbc20a7664f2f69e5355aa427045bc15\n| | | e7c6c772 ............................. PubKey hash\n| | 88 ..................................... OP_EQUALVERIFY\n| | ac ..................................... OP_CHECKSIG\n\n00000000 ................................... locktime: 0 (a block height)\n```\n\n**<span id=\"coinbase\"></span>**\n# Coinbase Input: The Input Of The First Transaction In A Block\n\nThe first transaction in a <<glossary:block>>, called the <<glossary:coinbase transaction>>, must have exactly one input, called a <<glossary:coinbase>>. The coinbase <<glossary:input>> currently has the following format.\n\n| Bytes    | Name               | Data Type            | Description\n|----------|--------------------|----------------------|--------------\n| 32       | hash (null)        | char[32]             | A 32-byte null, as a coinbase has no previous outpoint.\n| 4        | index (UINT32_MAX) | uint32_t             | 0xffffffff, as a coinbase has no previous outpoint.\n| *Varies* | script bytes       | compactSize uint     | The number of bytes in the coinbase script, up to a maximum of 100 bytes.\n| *Varies* (4) | height         | script               | The <<glossary:block height>> of this block as required by BIP34.  Uses script language: starts with a data-pushing opcode that indicates how many bytes to push to the stack followed by the block height as a little-endian unsigned integer.  This script must be as short as possible, otherwise it may be rejected.<br><br>  The data-pushing opcode will be 0x03 and the total size four bytes until block 16,777,216 about 300 years from now.\n| *Varies* | coinbase script    | *None*               | The <<glossary:coinbase field>>: Arbitrary data not exceeding 100 bytes minus the (4) height bytes.  Miners commonly place an extra nonce in this field to update the block header merkle root during hashing.\n| 4        | sequence           | uint32_t             | Sequence number.\n\nAlthough the coinbase script is arbitrary data, if it includes the bytes used by any signature-checking operations such as [`OP_CHECKSIG`](core-ref-transactions-opcodes), those signature checks will be counted as signature operations (sigops) towards the block's sigop limit.  To avoid this, you can prefix all data with the appropriate push operation.\n\nAn itemized <<glossary:coinbase transaction>>:\n\n``` text\n01000000 .............................. Version\n\n01 .................................... Number of inputs\n| 00000000000000000000000000000000\n| 00000000000000000000000000000000 ...  Previous outpoint TXID\n| ffffffff ............................ Previous outpoint index\n|\n| 18 .................................. Bytes in coinbase: 24\n| |\n| | 03 ................................ Bytes in height\n| | | b8240b .......................... Height: 730296\n| |\n| | 03b8240b049d29aa59080400077efa95\n| | 0000052f6d70682f .................. Arbitrary data\n| 00000000 ............................ Sequence\n\n02 .................................... Output count\n| Transaction Output 1\n| | f20cbe0a00000000 .................... Duffs (1.80227314 Dash)\n| | 1976a9142cd46be3ceeacca983e0fea3\n| | b88f26b08a26c29b88ac ................ P2PKH script\n|\n| Transaction Output 2\n| | eb0cbe0a00000000 .................... Duffs (1.80227307 Dash)\n| | 1976a914868180414905937a68fadeb0\n| | f33e64d102c9591a88ac ................ P2PKH script\n|\n| 00000000 ............................ Locktime\n```\n\nNote: currently the normal coinbase has 2 outputs (1 for the <<glossary:miner>> and 1 for the selected <<glossary:masternode>>). Superblocks ([superblock example](https://chainz.cryptoid.info/dash/block.dws?731104.htm)) have multiple outputs depending on the number of proposals being funded.",
 "order": 2,
 "isReference": false,
 "deprecated": false,
 "hidden": false,
 "sync_unique": "",
 "link_url": "",
 "link_external": false,
 "reusableContent": [],
 "previousSlug": "",
 "slugUpdatedAt": "2022-07-26T20:35:38.418Z",
 "revision": 5,
 "_id": "63f5176df91c7700118e77b6",
 "version": "63f5176df91c7700118e7825",
 "updatedAt": "2023-01-25T21:43:34.016Z",
 "createdAt": "2019-10-23T16:11:28.615Z",
 "project": "5daf2e65f4109c0040fd51e1",
 "user": "5b8400d7185d5e00036dcc3b",
 "parentDoc": "63f5176df91c7700118e77ae",
 "category": "63f5176df91c7700118e779d",
 "__v": 1,
 "pendingAlgoliaPublish": false,
 "isApi": false,
 "id": "63f5176df91c7700118e77b6",
 "body_html": "Dash transactions are broadcast between <<glossary:peers>> in a serialized byte format, called <<glossary:raw format>>. It is this form of a transaction which is SHA256(SHA256()) hashed to create the <<glossary:TXID>> and, ultimately, the <<glossary:merkle root>> of a <<glossary:block>> containing the transaction---making the transaction format part of the <<glossary:consensus rules>>.\n\nDash Core and many other tools print and accept <<glossary:raw transactions>> encoded as hex.\n\nTransactions prior to protocol version 70209 defaulted to version 1. Transaction version 2 was the default in protocol versions => 70209 and < 70213. Version 2 transactions have the same format, but the `lock_time` parameter was redefined by [BIP68](https://github.com/bitcoin/bips/blob/master/bip-0068.mediawiki) to enable relative lock-times. (Note: transactions in the <<glossary:block chain>> are allowed to list a higher version number to permit <<glossary:soft forks>>, but they are treated as version 2 transactions by current software.)\n\nDash Core 0.13.0 (protocol version 70213) introduced transaction version 3 as part of the [DIP2 - Special Transactions](https://github.com/dashpay/dips/blob/master/dip-0002.md) implementation. Details of the changes introduced by this feature and currently implemented <<glossary:special transactions>> can be found in the [Special Transactions section](core-ref-transactions-special-transactions) below as well as in the [DIP](https://github.com/dashpay/dips/blob/master/dip-0002.md).\n\nA raw transaction has the following top-level format:\n\n| Bytes    | Name         | Data Type           | Description\n|----------|--------------|---------------------|-------------\n| 2        | version      | uint16_t            | *Converted from 4 bytes to 2 bytes by DIP2 in v0.13.0*<br><br>Transaction version number; currently version 3.  Programs creating transactions using newer consensus rules may use higher version numbers.\n| 2        | type         | uint16_t            | *Added by DIP2 in v0.13.0. Uses 2 bytes that were previously part of `version`*<br><br>Transaction type number; 0 for classical transactions; Non-zero for DIP2 special transactions.\n| *Varies* | tx_in count  | compactSize uint    | Number of inputs in this transaction.\n| *Varies* | tx_in        | txIn                | Transaction inputs.  See description of txIn below.\n| *Varies* | tx_out count | compactSize uint    | Number of outputs in this transaction.\n| *Varies* | tx_out       | txOut               | Transaction outputs.  See description of txOut below.\n| 4        | lock_time    | uint32_t            | A time (Unix epoch time) or block number.  See the [locktime parsing rules](core-guide-transactions-locktime-and-sequence-number).\n| *Varies* | extra_payload size | compactSize uint | *Added by DIP2 in v0.13.0*<br><br>Variable number of bytes of extra payload for DIP2-based special transactions\n| *Varies* | extra_payload | blob               | *Added by DIP2 in v0.13.0*<br><br>Special transaction payload.\n\nA transaction may have multiple <<glossary:inputs>> and <<glossary:outputs>>, so the txIn and txOut structures may recur within a transaction. <<glossary:CompactSize unsigned integers>> are a form of variable-length integers; they are described in the [CompactSize section](core-ref-transactions-compactsize-unsigned-integers).\n\n# JSON-RPC Responses\n\nWhen retrieving transaction data via Dash Core RPCs (e.g. the [`getrawtransaction` RPC](core-api-ref-remote-procedure-calls-raw-transactions#getrawtransaction)), the transaction data is returned in the following format.\n\nVersion 1 and 2 Transaction Structure (prior to DIP2 activation in Dash Core v0.13.0):\n``` json\n{\n  \"txid\": \"<string>\",\n  \"size\": \"<int>\",\n  \"version\": 2,\n  \"locktime\": 0,\n  \"vin\": [ ],\n  \"vout\": [ ]\n}\n```\n\nVersion 3 Transaction Structure (Dash Core v0.13.0+ and activated [DIP2](https://github.com/dashpay/dips/blob/master/dip-0002.md)):\n``` json\n{\n  \"txid\": \"<string>\",\n  \"size\": \"<int>\",\n  \"version\": 3,\n  \"type\": \"<int>\",\n  \"locktime\": 0,\n  \"vin\": [ ],\n  \"vout\": [ ],\n  \"extraPayloadSize\": \"<variable int>\",\n  \"extraPayload\": \"\u2026\"\n}\n```\n\nFor <<glossary:special transactions>> (those using the extraPayload fields), JSON-RPC responses contain a parsed JSON representation of the Transaction Payload.\n\nThe sample transaction below shows the response for a quorum commitment special transaction:\n\n``` json\n{\n  \"txid\": \"592a09d08348d970b4d9ba216246a23dac866717b460d3f369a86293b9839eea\",\n  \"size\": 342,\n  \"version\": 3,\n  \"type\": 6,\n  \"locktime\": 0,\n  \"vin\": [\n  ],\n  \"vout\": [\n  ],\n  \"extraPayloadSize\": 329,\n  \"extraPayload\": \"0100841b0000010001211cd3e4230b2bc47530e200447e998a38e960d4ed5f5251e26892130cn  \"qcTx\": {\n    \"version\": 1,\n    \"height\": 7044,\n    \"commitment\": {\n      \"version\": 1,\n      \"llmqType\": 1,\n      \"quorumHash\": \"0000000c139268e251525fedd460e9388a997e4400e23075c42b0b23e4d31c21\",\n      \"signersCount\": 0,\n      \"validMembersCount\": 0,\n      \"quorumPublicKey\": \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n    }\n  },\n  \"instantlock\": false\n}\n```\n\n**<span id=\"txin\"></span>**\n# TxIn: A Transaction Input (Non-Coinbase)\n\nEach non- <<glossary:coinbase>> <<glossary:input>> spends an outpoint from a previous transaction. (Coinbase inputs are described separately after the example section below.)\n\n| Bytes    | Name             | Data Type            | Description\n|----------|------------------|----------------------|--------------\n| 36       | previous_output  | <<glossary:outpoint>>             | The previous outpoint being spent.  See description of outpoint below.\n| *Varies* | script bytes     | compactSize uint     | The number of bytes in the signature script.  Maximum is 10,000 bytes.\n| *Varies* | signature script | char[]               | A script-language script which satisfies the conditions placed in the outpoint's pubkey script.  Should only contain data pushes; see the [signature script modification warning](core-ref-transactions-opcodes#signature-script-modification).\n| 4        | sequence         | uint32_t             | Sequence number.  Default for Dash Core and almost all other programs is 0xffffffff.\n\n**<span id=\"outpoint\"></span>**\n# Outpoint: The Specific Part Of A Specific Output\n\nBecause a single transaction can include multiple <<glossary:outputs>>, the <<glossary:outpoint>> structure includes both a <<glossary:TXID>> and an output index number to refer to specific output.\n\n| Bytes | Name  | Data Type | Description\n|-------|-------|-----------|--------------\n| 32    | hash  | char[32]  | The TXID of the transaction holding the output to spend.  The TXID is a hash provided here in internal byte order.\n| 4     | index | uint32_t  | The output index number of the specific output to spend from the transaction. The first output is 0x00000000.\n\n**<span id=\"txout\"></span>**\n# TxOut: A Transaction Output\n\nEach <<glossary:output>> spends a certain number of <<glossary:duffs>>, placing them under control of anyone who can satisfy the provided <<glossary:pubkey script>>.\n\n| Bytes    | Name            | Data Type        | Description\n|----------|-----------------|------------------|--------------\n| 8        | value           | int64_t          | Number of duffs to spend.  May be zero; the sum of all outputs may not exceed the sum of duffs previously spent to the outpoints provided in the input section.  (Exception: coinbase transactions spend the block subsidy and collected transaction fees.)\n| 1+       | pk_script bytes | compactSize uint | Number of bytes in the pubkey script.  Maximum is 10,000 bytes.\n| *Varies* | pk_script       | char[]           | Defines the conditions which must be satisfied to spend this output.\n\n**Example**\n\nThe sample raw transaction itemized below is the one created in the [Simple Raw Transaction section](core-examples-transaction-tutorial#simple-raw-transaction) of the Developer Examples. It spends a previous pay-to-pubkey output by paying to a new pay-to-pubkey-hash (P2PKH) output.\n\n``` text\n01000000 ................................... Version\n\n01 ......................................... Number of inputs\n|\n| 7b1eabe0209b1fe794124575ef807057\n| c77ada2138ae4fa8d6c4de0398a14f3f ......... Outpoint TXID\n| 00000000 ................................. Outpoint index number: 0\n|\n| 49 ....................................... Bytes in sig. script: 73\n| | 48 ..................................... Push 72 bytes as data\n| | | 30450221008949f0cb400094ad2b5eb3\n| | | 99d59d01c14d73d8fe6e96df1a7150de\n| | | b388ab8935022079656090d7f6bac4c9\n| | | a94e0aad311a4268e082a725f8aeae05\n| | | 73fb12ff866a5f01 ..................... Secp256k1 signature\n|\n| ffffffff ................................. Sequence number: UINT32_MAX\n\n01 ......................................... Number of outputs\n| f0ca052a01000000 ......................... Duffs (49.99990000 Dash)\n|\n| 19 ....................................... Bytes in pubkey script: 25\n| | 76 ..................................... OP_DUP\n| | a9 ..................................... OP_HASH160\n| | 14 ..................................... Push 20 bytes as data\n| | | cbc20a7664f2f69e5355aa427045bc15\n| | | e7c6c772 ............................. PubKey hash\n| | 88 ..................................... OP_EQUALVERIFY\n| | ac ..................................... OP_CHECKSIG\n\n00000000 ................................... locktime: 0 (a block height)\n```\n\n**<span id=\"coinbase\"></span>**\n# Coinbase Input: The Input Of The First Transaction In A Block\n\nThe first transaction in a <<glossary:block>>, called the <<glossary:coinbase transaction>>, must have exactly one input, called a <<glossary:coinbase>>. The coinbase <<glossary:input>> currently has the following format.\n\n| Bytes    | Name               | Data Type            | Description\n|----------|--------------------|----------------------|--------------\n| 32       | hash (null)        | char[32]             | A 32-byte null, as a coinbase has no previous outpoint.\n| 4        | index (UINT32_MAX) | uint32_t             | 0xffffffff, as a coinbase has no previous outpoint.\n| *Varies* | script bytes       | compactSize uint     | The number of bytes in the coinbase script, up to a maximum of 100 bytes.\n| *Varies* (4) | height         | script               | The <<glossary:block height>> of this block as required by BIP34.  Uses script language: starts with a data-pushing opcode that indicates how many bytes to push to the stack followed by the block height as a little-endian unsigned integer.  This script must be as short as possible, otherwise it may be rejected.<br><br>  The data-pushing opcode will be 0x03 and the total size four bytes until block 16,777,216 about 300 years from now.\n| *Varies* | coinbase script    | *None*               | The <<glossary:coinbase field>>: Arbitrary data not exceeding 100 bytes minus the (4) height bytes.  Miners commonly place an extra nonce in this field to update the block header merkle root during hashing.\n| 4        | sequence           | uint32_t             | Sequence number.\n\nAlthough the coinbase script is arbitrary data, if it includes the bytes used by any signature-checking operations such as [`OP_CHECKSIG`](core-ref-transactions-opcodes), those signature checks will be counted as signature operations (sigops) towards the block's sigop limit.  To avoid this, you can prefix all data with the appropriate push operation.\n\nAn itemized <<glossary:coinbase transaction>>:\n\n``` text\n01000000 .............................. Version\n\n01 .................................... Number of inputs\n| 00000000000000000000000000000000\n| 00000000000000000000000000000000 ...  Previous outpoint TXID\n| ffffffff ............................ Previous outpoint index\n|\n| 18 .................................. Bytes in coinbase: 24\n| |\n| | 03 ................................ Bytes in height\n| | | b8240b .......................... Height: 730296\n| |\n| | 03b8240b049d29aa59080400077efa95\n| | 0000052f6d70682f .................. Arbitrary data\n| 00000000 ............................ Sequence\n\n02 .................................... Output count\n| Transaction Output 1\n| | f20cbe0a00000000 .................... Duffs (1.80227314 Dash)\n| | 1976a9142cd46be3ceeacca983e0fea3\n| | b88f26b08a26c29b88ac ................ P2PKH script\n|\n| Transaction Output 2\n| | eb0cbe0a00000000 .................... Duffs (1.80227307 Dash)\n| | 1976a914868180414905937a68fadeb0\n| | f33e64d102c9591a88ac ................ P2PKH script\n|\n| 00000000 ............................ Locktime\n```\n\nNote: currently the normal coinbase has 2 outputs (1 for the <<glossary:miner>> and 1 for the selected <<glossary:masternode>>). Superblocks ([superblock example](https://chainz.cryptoid.info/dash/block.dws?731104.htm)) have multiple outputs depending on the number of proposals being funded."
}