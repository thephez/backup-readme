{
 "metadata": {
  "image": [],
  "title": "",
  "description": "",
  "keywords": "",
  "robots": "index"
 },
 "mdx": {
  "altBody": "",
  "status": "rdmd"
 },
 "api": {
  "method": "get",
  "url": "",
  "auth": "required",
  "results": {
   "codes": [
    {
     "name": "",
     "code": "{}",
     "language": "json",
     "status": 200
    },
    {
     "name": "",
     "code": "{}",
     "language": "json",
     "status": 400
    }
   ]
  },
  "params": [],
  "examples": {
   "codes": []
  }
 },
 "next": {
  "description": "",
  "pages": []
 },
 "algolia": {
  "recordCount": 1,
  "publishPending": false,
  "translationFailure": false,
  "updatedAt": "2023-09-06T16:36:58.274Z"
 },
 "title": "subscribeToTransactionsWithProofs",
 "icon": "",
 "updates": [],
 "type": "basic",
 "slug": "dapi-client-usage-core-subscribetotransactionswithproofs",
 "excerpt": "",
 "body": "**Usage**: `await client.core.subscribeToTransactionsWithProofs(bloomFilter, options = { count: 0 })`  \n**Description**: For any provided bloomfilter, it will return a ClientReadableStream streaming the transaction matching the filter.\n\nParameters:\n\n| parameters                  | type             | required        | Description                                                                                               |\n| --------------------------- | ---------------- | --------------- | --------------------------------------------------------------------------------------------------------- |\n| **bloomFilter.vData**       | Uint8Array/Array | yes             | The filter itself is simply a bit field of arbitrary byte-aligned size. The maximum size is 36,000 bytes. |\n| **bloomFilter.nHashFuncs**  | Number           | yes             | The number of hash functions to use in this filter. The maximum value allowed in this field is 50.        |\n| **bloomFilter.nTweak**      | Number           | yes             | A random value to add to the seed value in the hash function used by the bloom filter.                    |\n| **bloomFilter.nFlags**      | Number           | yes             | A set of flags that control how matched items are added to the filter.                                    |\n| **options.fromBlockHash**   | String           | yes             | Specifies block hash to start syncing from                                                                |\n| **options.fromBlockHeight** | Number           | yes             | Specifies block height to start syncing from                                                              |\n| **options.count**           | Number           | no (default: 0) | Number of blocks to sync, if set to 0 syncing is continuously sends new data as well                      |\n\nReturns : Promise<EventEmitter>|!grpc.web.ClientReadableStream\\<!TransactionsWithProofsResponse>\n\nExample :\n\n```js\nconst filter; // A BloomFilter object\nconst stream = await client.subscribeToTransactionsWithProofs(filter, { fromBlockHeight: 0 });\n\nstream\n      .on('data', (response) => {\n        const merkleBlock = response.getRawMerkleBlock();\n        const transactions = response.getRawTransactions();\n\n        if (merkleBlock) {\n          const merkleBlockHex = Buffer.from(merkleBlock).toString('hex');\n        }\n\n        if (transactions) {\n          transactions.getTransactionsList()\n              .forEach((tx) => {\n                  // tx are probabilistic, so you will have to verify it's yours\n                  const tx = new Transaction(Buffer.from(tx));\n              });\n        }\n      })\n    .on('error', (err) => {\n        // do something with err\n      });\n```",
 "order": 9,
 "isReference": false,
 "deprecated": false,
 "hidden": false,
 "sync_unique": "",
 "link_url": "",
 "link_external": false,
 "reusableContent": [],
 "previousSlug": "subscribetotransactionswithproofs",
 "slugUpdatedAt": "2023-07-26T16:47:23.625Z",
 "revision": 4,
 "_id": "64f8a9df750465004742ae15",
 "user": "5b8400d7185d5e00036dcc3b",
 "project": "5bda01cad172e200499a20a9",
 "parentDoc": "64f8a9df750465004742ae0b",
 "category": "64f8a9df750465004742ad75",
 "createdAt": "2023-07-26T15:49:53.047Z",
 "updatedAt": "2023-07-26T16:47:23.618Z",
 "version": "64f8a9df750465004742ae1d",
 "__v": 0,
 "isApi": false,
 "id": "64f8a9df750465004742ae15",
 "body_html": "<p><strong>Usage</strong>: <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">await client.core.subscribeToTransactionsWithProofs(bloomFilter, options = { count: 0 })</code><br/>\n<strong>Description</strong>: For any provided bloomfilter, it will return a ClientReadableStream streaming the transaction matching the filter.</p>\n<p>Parameters:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"rdmd-table\"><div class=\"rdmd-table-inner\"><table><thead><tr><th>parameters</th><th>type</th><th>required</th><th>Description</th></tr></thead><tbody><tr><td><strong>bloomFilter.vData</strong></td><td>Uint8Array/Array</td><td>yes</td><td>The filter itself is simply a bit field of arbitrary byte-aligned size. The maximum size is 36,000 bytes.</td></tr><tr><td><strong>bloomFilter.nHashFuncs</strong></td><td>Number</td><td>yes</td><td>The number of hash functions to use in this filter. The maximum value allowed in this field is 50.</td></tr><tr><td><strong>bloomFilter.nTweak</strong></td><td>Number</td><td>yes</td><td>A random value to add to the seed value in the hash function used by the bloom filter.</td></tr><tr><td><strong>bloomFilter.nFlags</strong></td><td>Number</td><td>yes</td><td>A set of flags that control how matched items are added to the filter.</td></tr><tr><td><strong>options.fromBlockHash</strong></td><td>String</td><td>yes</td><td>Specifies block hash to start syncing from</td></tr><tr><td><strong>options.fromBlockHeight</strong></td><td>Number</td><td>yes</td><td>Specifies block height to start syncing from</td></tr><tr><td><strong>options.count</strong></td><td>Number</td><td>no (default: 0)</td><td>Number of blocks to sync, if set to 0 syncing is continuously sends new data as well</td></tr></tbody></table></div></div>\n<p>Returns : Promise<!-- -->|!grpc.web.ClientReadableStream&lt;!TransactionsWithProofsResponse&gt;</p>\n<p>Example :</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">JavaScript</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-js theme-light\" data-lang=\"js\" name=\"\" tabindex=\"0\">const filter; // A BloomFilter object\nconst stream = await client.subscribeToTransactionsWithProofs(filter, { fromBlockHeight: 0 });\n\nstream\n      .on(&#x27;data&#x27;, (response) =&gt; {\n        const merkleBlock = response.getRawMerkleBlock();\n        const transactions = response.getRawTransactions();\n\n        if (merkleBlock) {\n          const merkleBlockHex = Buffer.from(merkleBlock).toString(&#x27;hex&#x27;);\n        }\n\n        if (transactions) {\n          transactions.getTransactionsList()\n              .forEach((tx) =&gt; {\n                  // tx are probabilistic, so you will have to verify it&#x27;s yours\n                  const tx = new Transaction(Buffer.from(tx));\n              });\n        }\n      })\n    .on(&#x27;error&#x27;, (err) =&gt; {\n        // do something with err\n      });\n</code></pre></div></div>"
}