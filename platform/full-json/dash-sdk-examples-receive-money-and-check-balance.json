{
 "metadata": {
  "image": [],
  "title": "",
  "description": "",
  "keywords": "",
  "robots": "index"
 },
 "api": {
  "method": "get",
  "url": "",
  "auth": "required",
  "results": {
   "codes": [
    {
     "name": "",
     "code": "{}",
     "language": "json",
     "status": 200
    },
    {
     "name": "",
     "code": "{}",
     "language": "json",
     "status": 400
    }
   ]
  },
  "params": [],
  "examples": {
   "codes": []
  }
 },
 "next": {
  "description": "",
  "pages": []
 },
 "algolia": {
  "recordCount": 5,
  "publishPending": false,
  "translationFailure": false,
  "updatedAt": "2023-09-06T16:36:50.226Z"
 },
 "title": "Receive money and check balance",
 "icon": "",
 "updates": [],
 "type": "basic",
 "slug": "dash-sdk-examples-receive-money-and-check-balance",
 "excerpt": "",
 "body": "## Receive money and display balance\n\nInitialize the SDK Client with your [generated mnemonic](https://dashplatform.readme.io/docs/dash-sdk-examples-generate-a-new-mnemonic) passed as an option.\n\n```js\nconst Dash = require(\"dash\");\nconst mnemonic = ''// your mnemonic here.\nconst client = new Dash.Client({\n  wallet: {\n    mnemonic,\n  }\n});\n\nasync function showBalance() {\n  const account = await client.wallet.getAccount();\n  const totalBalance = account.getTotalBalance();\n  console.log(`Account's total balance: ${totalBalance} duffs`);\n}\n```\n\nHaving your `client` instance set up, you will be able to access the `account` and `wallet` instance generated from your mnemonic.\n\nBy default `getAccount()` returns the first BIP44 account.  \nYou can read more on [how to use a different account](https://dashplatform.readme.io/docs/dash-sdk-examples-use-different-account).\n\n## Generate a receiving address\n\nDash wallet supports two different types of addresses: \n\n- `external` addresses used for receiving funds from other addresses\n- `internal` addresses used for change outputs of outgoing transactions  \n- For your privacy, you might want to generate a new address for each payment:\n\n```js\nasync function generateUnusedAddress() {\n  const account = await client.wallet.getAccount();\n  const { address } = account.getUnusedAddress();\n  console.log(`Unused external address: ${address}`);\n}\n```\n\nThis above code will generate a new unique (never used) address. \n\n## Displaying your balance\n\n_Dash Wallet returns the balance in duffs (1 Dash is equal to 100.000.000 duffs)_\n\n`getTotalBalance()` function takes into account `confirmed` and `unconfirmed` transactions (not included in a block).  \nIt is recommended to check the confirmed balance before making a payment:\n\n```js\nasync function showBalance() {\n  const account = await client.wallet.getAccount();\n  const totalBalance = account.getTotalBalance();\n  const confirmedBalance = account.getConfirmedBalance();\n  const unconfirmedBalance = account.getUnconfirmedBalance();\n  console.log(`Account balance:\n    Confirmed: ${confirmedBalance}\n    Unconfirmed: ${unconfirmedBalance}\n    Total: ${totalBalance}\n  `);\n}\n```\n\n## Listen for event on received transaction\n\nWhen a new unconfirmed transaction is received, you can receive an event, and then validate the address or perform an action if needed.   \n\n```js\n// FETCHED/UNCONFIRMED_TRANSACTION event is currently disabled\n\nasync function listenUnconfirmedTransaction() {\n  const account = await client.wallet.getAccount();\n  account.on('FETCHED/UNCONFIRMED_TRANSACTION', (data) => {\n    console.dir(data);\n  });\n}\n```\n\n## Get address at specific index\n\nIn case you want to retrieve an address at specific index: \n\n```js\nasync function getAddressAtIndex() {\n  const account = await client.wallet.getAccount();\n  const { address: externalAddress } = account.getAddress(2);\n  const { address: internalAddress } = account.getAddress(2, 'internal');\n}\n```",
 "order": 3,
 "isReference": false,
 "deprecated": false,
 "hidden": false,
 "sync_unique": "",
 "link_url": "",
 "link_external": false,
 "reusableContent": [],
 "previousSlug": "receive-money-and-check-balance",
 "slugUpdatedAt": "2023-07-17T21:35:04.847Z",
 "revision": 13,
 "_id": "64f8a9df750465004742ade5",
 "user": "62b2101422da70001ee51d95",
 "project": "5bda01cad172e200499a20a9",
 "parentDoc": "64f8a9df750465004742ade1",
 "category": "64f8a9df750465004742ad74",
 "createdAt": "2023-07-12T20:49:46.713Z",
 "updatedAt": "2023-07-18T14:07:25.382Z",
 "version": "64f8a9df750465004742ae1d",
 "__v": 1,
 "isApi": false,
 "id": "64f8a9df750465004742ade5",
 "body_html": "## Receive money and display balance\n\nInitialize the SDK Client with your [generated mnemonic](https://dashplatform.readme.io/docs/dash-sdk-examples-generate-a-new-mnemonic) passed as an option.\n\n```js\nconst Dash = require(\"dash\");\nconst mnemonic = ''// your mnemonic here.\nconst client = new Dash.Client({\n  wallet: {\n    mnemonic,\n  }\n});\n\nasync function showBalance() {\n  const account = await client.wallet.getAccount();\n  const totalBalance = account.getTotalBalance();\n  console.log(`Account's total balance: ${totalBalance} duffs`);\n}\n```\n\nHaving your `client` instance set up, you will be able to access the `account` and `wallet` instance generated from your mnemonic.\n\nBy default `getAccount()` returns the first BIP44 account.  \nYou can read more on [how to use a different account](https://dashplatform.readme.io/docs/dash-sdk-examples-use-different-account).\n\n## Generate a receiving address\n\nDash wallet supports two different types of addresses: \n\n- `external` addresses used for receiving funds from other addresses\n- `internal` addresses used for change outputs of outgoing transactions  \n- For your privacy, you might want to generate a new address for each payment:\n\n```js\nasync function generateUnusedAddress() {\n  const account = await client.wallet.getAccount();\n  const { address } = account.getUnusedAddress();\n  console.log(`Unused external address: ${address}`);\n}\n```\n\nThis above code will generate a new unique (never used) address. \n\n## Displaying your balance\n\n_Dash Wallet returns the balance in duffs (1 Dash is equal to 100.000.000 duffs)_\n\n`getTotalBalance()` function takes into account `confirmed` and `unconfirmed` transactions (not included in a block).  \nIt is recommended to check the confirmed balance before making a payment:\n\n```js\nasync function showBalance() {\n  const account = await client.wallet.getAccount();\n  const totalBalance = account.getTotalBalance();\n  const confirmedBalance = account.getConfirmedBalance();\n  const unconfirmedBalance = account.getUnconfirmedBalance();\n  console.log(`Account balance:\n    Confirmed: ${confirmedBalance}\n    Unconfirmed: ${unconfirmedBalance}\n    Total: ${totalBalance}\n  `);\n}\n```\n\n## Listen for event on received transaction\n\nWhen a new unconfirmed transaction is received, you can receive an event, and then validate the address or perform an action if needed.   \n\n```js\n// FETCHED/UNCONFIRMED_TRANSACTION event is currently disabled\n\nasync function listenUnconfirmedTransaction() {\n  const account = await client.wallet.getAccount();\n  account.on('FETCHED/UNCONFIRMED_TRANSACTION', (data) => {\n    console.dir(data);\n  });\n}\n```\n\n## Get address at specific index\n\nIn case you want to retrieve an address at specific index: \n\n```js\nasync function getAddressAtIndex() {\n  const account = await client.wallet.getAccount();\n  const { address: externalAddress } = account.getAddress(2);\n  const { address: internalAddress } = account.getAddress(2, 'internal');\n}\n```"
}