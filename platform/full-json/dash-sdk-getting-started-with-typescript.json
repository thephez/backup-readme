{
 "metadata": {
  "image": [],
  "title": "",
  "description": ""
 },
 "api": {
  "method": "get",
  "url": "",
  "auth": "required",
  "results": {
   "codes": [
    {
     "name": "",
     "code": "{}",
     "language": "json",
     "status": 200
    },
    {
     "name": "",
     "code": "{}",
     "language": "json",
     "status": 400
    }
   ]
  },
  "params": [],
  "examples": {
   "codes": []
  }
 },
 "next": {
  "description": "",
  "pages": []
 },
 "algolia": {
  "recordCount": 1,
  "publishPending": false,
  "updatedAt": "2023-07-18T14:07:32.237Z"
 },
 "title": "With typescript",
 "icon": "",
 "updates": [],
 "type": "basic",
 "slug": "dash-sdk-getting-started-with-typescript",
 "excerpt": "",
 "body": "In order to use Dash SDK with TypeScript.    \n\nCreate an index.ts file  \n\n```js\nimport Dash from 'dash';\nconst clientOpts = {\n  wallet: {\n    mnemonic: null, // Will generate a new address, you should keep it.\n  },\n};\nconst client = new Dash.Client(clientOpts);\n\nconst initializeAccount = async () => {\n  const account = await client.wallet.getAccount();\n  const balance = account.getTotalBalance();\n  console.log(`Account balance: ${balance}`)\n}\n```\n\nHave a following `tsconfig.json` file\n\n```json\n{\n  \"compilerOptions\": {\n    \"module\": \"commonjs\",\n    \"moduleResolution\": \"node\",\n    \"esModuleInterop\": true\n  }\n}\n```\n\n**Compile:** `tsc -p tsconfig.json`  \n**Run:** `node index.js`",
 "order": 5,
 "isReference": false,
 "deprecated": false,
 "hidden": false,
 "sync_unique": "",
 "link_url": "",
 "link_external": false,
 "previousSlug": "with-typescript",
 "slugUpdatedAt": "2023-07-17T21:40:12.269Z",
 "revision": 6,
 "_id": "64b0163a24e51a000ac3c6a8",
 "user": "62b2101422da70001ee51d95",
 "project": "5bda01cad172e200499a20a9",
 "parentDoc": "64b00904fd3e740075fc4564",
 "category": "64999bbd928d7500763b43ad",
 "createdAt": "2023-07-13T15:20:26.178Z",
 "updatedAt": "2023-07-18T14:07:31.837Z",
 "version": "640776c254e610001146669e",
 "__v": 1,
 "isApi": false,
 "id": "64b0163a24e51a000ac3c6a8",
 "body_html": "<div class=\"magic-block-textarea\"><p>In order to use Dash SDK with TypeScript.    </p>\n<p>Create an index.ts file  </p>\n<pre><code class=\"lang-js\"><span class='cm-s-neo'><span class=\"cm-keyword\">import</span> <span class=\"cm-def\">Dash</span> <span class=\"cm-keyword\">from</span> <span class=\"cm-string\">'dash'</span>;\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">clientOpts</span> <span class=\"cm-operator\">=</span> {\n  <span class=\"cm-property\">wallet</span>: {\n    <span class=\"cm-property\">mnemonic</span>: <span class=\"cm-atom\">null</span>, <span class=\"cm-comment\">&#47;&#47; Will generate a new address, you should keep it.</span>\n  },\n};\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">client</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">new</span> <span class=\"cm-variable\">Dash</span>.<span class=\"cm-property\">Client</span>(<span class=\"cm-variable\">clientOpts</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">initializeAccount</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">async</span> () <span class=\"cm-operator\">=&gt;</span> {\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">account</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">wallet</span>.<span class=\"cm-property\">getAccount</span>();\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">balance</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable-2\">account</span>.<span class=\"cm-property\">getTotalBalance</span>();\n  <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-string-2\">`Account balance: ${</span><span class=\"cm-variable-2\">balance</span><span class=\"cm-string-2\">}`</span>)\n}</span>\n</code></pre>\n<p>Have a following <code>tsconfig.json</code> file</p>\n<pre><code class=\"lang-json\"><span class='cm-s-neo'>{\n  <span class=\"cm-property\">\"compilerOptions\"</span>: {\n    <span class=\"cm-property\">\"module\"</span>: <span class=\"cm-string\">\"commonjs\"</span>,\n    <span class=\"cm-property\">\"moduleResolution\"</span>: <span class=\"cm-string\">\"node\"</span>,\n    <span class=\"cm-property\">\"esModuleInterop\"</span>: <span class=\"cm-atom\">true</span>\n  }\n}</span>\n</code></pre>\n<p><strong>Compile:</strong> <code>tsc -p tsconfig.json</code><br><strong>Run:</strong> <code>node index.js</code></p>\n\n</div>"
}