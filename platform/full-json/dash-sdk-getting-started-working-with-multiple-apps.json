{
 "metadata": {
  "image": [],
  "title": "",
  "description": "",
  "keywords": "",
  "robots": "index"
 },
 "api": {
  "method": "get",
  "url": "",
  "auth": "required",
  "results": {
   "codes": [
    {
     "name": "",
     "code": "{}",
     "language": "json",
     "status": 200
    },
    {
     "name": "",
     "code": "{}",
     "language": "json",
     "status": 400
    }
   ]
  },
  "params": [],
  "examples": {
   "codes": []
  }
 },
 "next": {
  "description": "",
  "pages": []
 },
 "algolia": {
  "recordCount": 1,
  "publishPending": false,
  "translationFailure": false,
  "updatedAt": "2023-09-06T16:36:51.245Z"
 },
 "title": "Working with multiple apps",
 "icon": "",
 "updates": [],
 "type": "basic",
 "slug": "dash-sdk-getting-started-working-with-multiple-apps",
 "excerpt": "",
 "body": "# Working with multiple apps\n\nWhen working with other registered contracts, you will need to know their `contractId` and reference it in the SDK constructor.\n\nAssuming a contract DashPay has the following `contractId: \"77w8Xqn25HwJhjodrHW133aXhjuTsTv9ozQaYpSHACE3\"`. \nYou can then pass it as an option.\n\n```js\nconst client = new Dash.Client({\n  apps: {\n    dashpay: {\n      contractId: '77w8Xqn25HwJhjodrHW133aXhjuTsTv9ozQaYpSHACE3'\n    }\n  }\n});\n```\n\nThis allow the method `client.platform.documents.get` to provide you field selection. \nTherefore, if the contract has a `profile` field that you wish to access, the SDK will allow you to use dot-syntax for access :\n\n```js\nconst bobProfile = await client.platform.documents.get('dashpay.profile', { name: 'bob' });\n```",
 "order": 3,
 "isReference": false,
 "deprecated": false,
 "hidden": false,
 "sync_unique": "",
 "link_url": "",
 "link_external": false,
 "reusableContent": [],
 "previousSlug": "working-with-multiple-apps",
 "slugUpdatedAt": "2023-07-17T21:39:49.393Z",
 "revision": 5,
 "_id": "64f8a9df750465004742adec",
 "user": "62b2101422da70001ee51d95",
 "project": "5bda01cad172e200499a20a9",
 "parentDoc": "64f8a9df750465004742ade8",
 "category": "64f8a9df750465004742ad74",
 "createdAt": "2023-07-13T15:16:56.946Z",
 "updatedAt": "2023-07-18T14:07:31.837Z",
 "version": "64f8a9df750465004742ae1d",
 "__v": 1,
 "isApi": false,
 "id": "64f8a9df750465004742adec",
 "body_html": "# Working with multiple apps\n\nWhen working with other registered contracts, you will need to know their `contractId` and reference it in the SDK constructor.\n\nAssuming a contract DashPay has the following `contractId: \"77w8Xqn25HwJhjodrHW133aXhjuTsTv9ozQaYpSHACE3\"`. \nYou can then pass it as an option.\n\n```js\nconst client = new Dash.Client({\n  apps: {\n    dashpay: {\n      contractId: '77w8Xqn25HwJhjodrHW133aXhjuTsTv9ozQaYpSHACE3'\n    }\n  }\n});\n```\n\nThis allow the method `client.platform.documents.get` to provide you field selection. \nTherefore, if the contract has a `profile` field that you wish to access, the SDK will allow you to use dot-syntax for access :\n\n```js\nconst bobProfile = await client.platform.documents.get('dashpay.profile', { name: 'bob' });\n```"
}