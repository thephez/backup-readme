{
 "metadata": {
  "image": [],
  "title": "",
  "description": "",
  "keywords": "",
  "robots": "index"
 },
 "api": {
  "method": "get",
  "url": "",
  "auth": "required",
  "results": {
   "codes": [
    {
     "name": "",
     "code": "{}",
     "language": "json",
     "status": 200
    },
    {
     "name": "",
     "code": "{}",
     "language": "json",
     "status": 400
    }
   ]
  },
  "params": [],
  "examples": {
   "codes": []
  }
 },
 "next": {
  "description": "",
  "pages": []
 },
 "algolia": {
  "recordCount": 1,
  "publishPending": false,
  "updatedAt": "2023-09-06T16:36:51.245Z"
 },
 "title": "Working with multiple apps",
 "icon": "",
 "updates": [],
 "type": "basic",
 "slug": "dash-sdk-getting-started-working-with-multiple-apps",
 "excerpt": "",
 "body": "# Working with multiple apps\n\nWhen working with other registered contracts, you will need to know their `contractId` and reference it in the SDK constructor.\n\nAssuming a contract DashPay has the following `contractId: \"77w8Xqn25HwJhjodrHW133aXhjuTsTv9ozQaYpSHACE3\"`. \nYou can then pass it as an option.\n\n```js\nconst client = new Dash.Client({\n  apps: {\n    dashpay: {\n      contractId: '77w8Xqn25HwJhjodrHW133aXhjuTsTv9ozQaYpSHACE3'\n    }\n  }\n});\n```\n\nThis allow the method `client.platform.documents.get` to provide you field selection. \nTherefore, if the contract has a `profile` field that you wish to access, the SDK will allow you to use dot-syntax for access :\n\n```js\nconst bobProfile = await client.platform.documents.get('dashpay.profile', { name: 'bob' });\n```",
 "order": 3,
 "isReference": false,
 "deprecated": false,
 "hidden": false,
 "sync_unique": "",
 "link_url": "",
 "link_external": false,
 "reusableContent": [],
 "previousSlug": "working-with-multiple-apps",
 "slugUpdatedAt": "2023-07-17T21:39:49.393Z",
 "revision": 5,
 "_id": "64f8a9df750465004742adec",
 "user": "62b2101422da70001ee51d95",
 "project": "5bda01cad172e200499a20a9",
 "parentDoc": "64f8a9df750465004742ade8",
 "category": "64f8a9df750465004742ad74",
 "createdAt": "2023-07-13T15:16:56.946Z",
 "updatedAt": "2023-07-18T14:07:31.837Z",
 "version": "64f8a9df750465004742ae1d",
 "__v": 1,
 "isApi": false,
 "id": "64f8a9df750465004742adec",
 "body_html": "<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-working-with-multiple-apps\"></div>Working with multiple apps<a class=\"fa fa-anchor\" href=\"#section-working-with-multiple-apps\"></a></h1>\n<p>When working with other registered contracts, you will need to know their <code>contractId</code> and reference it in the SDK constructor.</p>\n<p>Assuming a contract DashPay has the following <code>contractId: &quot;77w8Xqn25HwJhjodrHW133aXhjuTsTv9ozQaYpSHACE3&quot;</code>.<br>You can then pass it as an option.</p>\n<pre><code class=\"lang-js\"><span class='cm-s-neo'><span class=\"cm-keyword\">const</span> <span class=\"cm-def\">client</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">new</span> <span class=\"cm-variable\">Dash</span>.<span class=\"cm-property\">Client</span>({\n  <span class=\"cm-property\">apps</span>: {\n    <span class=\"cm-property\">dashpay</span>: {\n      <span class=\"cm-property\">contractId</span>: <span class=\"cm-string\">'77w8Xqn25HwJhjodrHW133aXhjuTsTv9ozQaYpSHACE3'</span>\n    }\n  }\n});</span>\n</code></pre>\n<p>This allow the method <code>client.platform.documents.get</code> to provide you field selection.<br>Therefore, if the contract has a <code>profile</code> field that you wish to access, the SDK will allow you to use dot-syntax for access :</p>\n<pre><code class=\"lang-js\"><span class='cm-s-neo'><span class=\"cm-keyword\">const</span> <span class=\"cm-def\">bobProfile</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">platform</span>.<span class=\"cm-property\">documents</span>.<span class=\"cm-property\">get</span>(<span class=\"cm-string\">'dashpay.profile'</span>, { <span class=\"cm-property\">name</span>: <span class=\"cm-string\">'bob'</span> });</span>\n</code></pre>\n\n</div>"
}