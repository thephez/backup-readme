{
 "metadata": {
  "image": [],
  "title": "",
  "description": "",
  "keywords": "",
  "robots": "index"
 },
 "api": {
  "method": "get",
  "url": "",
  "auth": "required",
  "results": {
   "codes": [
    {
     "status": 200,
     "language": "json",
     "code": "{}",
     "name": ""
    },
    {
     "status": 400,
     "language": "json",
     "code": "{}",
     "name": ""
    }
   ]
  },
  "params": []
 },
 "next": {
  "description": "",
  "pages": [
   {
    "type": "doc",
    "icon": "file-text-o",
    "name": "Data Contract",
    "slug": "explanation-platform-protocol-data-contract",
    "category": "Explanations"
   },
   {
    "type": "doc",
    "icon": "file-text-o",
    "name": "State Transition",
    "slug": "explanation-platform-protocol-state-transition",
    "category": "Explanations"
   },
   {
    "category": "Explanations",
    "slug": "explanation-platform-protocol-data-trigger",
    "name": "Data Trigger",
    "icon": "file-text-o",
    "type": "doc"
   },
   {
    "type": "url",
    "icon": "file-text-o",
    "name": "Tutorial - Submit Documents",
    "value": "https://dashplatform.readme.io/docs/tutorial-submit-documents"
   },
   {
    "value": "https://dashplatform.readme.io/docs/tutorial-retrieve-documents",
    "name": "Tutorial - Retrieve Documents",
    "icon": "file-text-o",
    "type": "url"
   }
  ]
 },
 "algolia": {
  "recordCount": 9,
  "publishPending": false,
  "translationFailure": false,
  "updatedAt": "2023-09-06T16:36:40.465Z"
 },
 "title": "Document",
 "icon": "",
 "updates": [],
 "type": "basic",
 "slug": "explanation-platform-protocol-document",
 "excerpt": "Dash Platform application data",
 "body": "# Overview\n\nDash Platform is based on [document-oriented database](https://en.wikipedia.org/wiki/Document-oriented_database) concepts and uses related terminology. In short, JSON documents are stored into document collections which can then be fetched back using a [query language](reference-query-syntax) similar to common document-oriented databases like [MongoDB](https://www.mongodb.com/), [CouchDB](https://couchdb.apache.org/), or [Firebase](https://firebase.google.com/). \n\nDocuments are defined in an application's [Data Contract](explanation-platform-protocol-data-contract) and represent the structure of application-specific data. Each document consists of one or more fields and the indices necessary to support querying.\n\n# Details\n\n## Base Fields\n\nDash Platform Protocol (DPP) defines a set of base fields that must be present in all documents. For the [`js-dpp` reference implementation](https://github.com/dashevo/platform/tree/master/packages/js-dpp), the base fields shown below are defined in the [document base schema](https://github.com/dashevo/platform/blob/master/packages/js-dpp/schema/document/documentBase.json).\n\n| Field Name | Description |\n| - | - |\n| protocolVersion | The platform protocol version (currently `1`) |\n| $id | The document ID (32 bytes) |\n| $type | Document type defined in the referenced contract |\n| $revision | Document revision (=>1) |\n| $dataContractId | Data contract ID generated from the data contract's `ownerId` and `entropy` (32 bytes) |\n| $ownerId | [Identity](explanation-identity) of the user submitting the document (32 bytes) |\n| $createdAt | Time (in milliseconds) the document was created |\n| $updatedAt | Time (in milliseconds) the document was last updated |\n\n> \ud83d\udea7 Timestamp fields\n>\n> Note: The `$createdAt` and `$updatedAt` fields will only be present in documents that add them to the list of [required properties](reference-data-contracts#required-properties-optional).\n\n## Data Contract Fields\n\nEach application defines its own fields via document definitions in its data contract. Details of the [DPNS data contract documents](https://github.com/dashevo/platform/blob/master/packages/dpns-contract/schema/dpns-contract-documents.json) are described below as an example. This contract defines two document types (`preorder` and `domain`) and provides the functionality described in the [Name Service explanation](explanation-dpns).\n\n| Document Type | Field Name | Data Type |\n| - | - | - |\n| preorder | saltedDomainHash | string |\n| --- | --- | --- |\n| domain | label | string |\n| domain | normalizedLabel | string |\n| domain | normalizedParentvDomainName | string |\n| domain | preorderSalt | array (bytes) |\n| domain | records | object |\n| domain | records.dashUniqueIdentityId | array (bytes) |\n| domain | records.dashAliasIdentityId | array (bytes) |\n| domain | subdomainRules | object |\n| domain | subdomainRules.allowSubdomains | boolean |\n\n## Example Document\n\nThe following example shows the structure of a DPNS `domain` document as output from `JSON.stringify()`. Note the `$` prefix indicating the base fields.\n\n```json\n{\n  \"$protocolVersion\": 1,\n  \"$id\": \"5D8U1k6t6ax8TnyL6QGFFbtMhn39zsixrSMQaxZrYKf1\",\n  \"$type\": \"domain\",\n  \"$dataContractId\": \"GWRSAVFMjXx8HpQFaNJMqBV7MBgMK4br5UESsB4S31Ec\",\n  \"$ownerId\": \"9gU2ZnDhkakHgB4eLbqvEAwQPDBwhW12KD5xPZxybNjE\",\n  \"$revision\": 1,\n  \"label\": \"RT-Sylvan-71605\",\n  \"normalizedLabel\": \"rt-sylvan-71605\",\n  \"normalizedParentDomainName\": \"dash\",\n  \"preorderSalt\": \"zKaLWLe+kKHiRoBXdfSd7TSU9HdIseeoOly1eTYZ670=\",\n  \"records\": {\n    \"dashUniqueIdentityId\": \"9gU2ZnDhkakHgB4eLbqvEAwQPDBwhW12KD5xPZxybNjE\"\n  },\n  \"subdomainRules\": {\n    \"allowSubdomains\": false\n  }\n}\n``` \n\n# Document Submission\n\nOnce a document has been created, it must be encapsulated in a State Transition to be sent to the platform. The structure of a document state transition is shown below. For additional details, see the [State Transition](explanation-platform-protocol-state-transition) explanation.\n\n| Field Name | Description |\n| - | - | \n| protocolVersion | Dash Platform Protocol version (currently `0`) |\n| type | State transition type (`1` for documents) |\n| ownerId | Identity submitting the document(s) |\n| transitions |  Document `create`, `replace`, or `delete` transitions (up to 10 objects) |\n| signaturePublicKeyId | The `id` of the identity public key that signed the state transition |\n| signature | Signature of state transition data |\n\n## Document Create\n\nThe document create transition is used to create a new document on Dash Platform. The document create transition extends the [base schema](#base-fields) to include the following additional fields:\n\n| Field | Type | Description|\n| - | - | - |\n| $entropy | array (32 bytes) | Entropy used in creating the document ID |\n| $createdAt | integer | (Optional) Time (in milliseconds) the document was created |\n| $updatedAt | integer | (Optional) Time (in milliseconds) the document was last updated |\n\n## Document Replace\n\nThe document replace transition is used to update the data in an existing Dash Platform document. The document replace transition extends the [base schema](#base-fields) to include the following additional fields:\n\n| Field | Type | Description|\n| - | - | - |\n| $revision | integer | Document revision (=> 1) |\n| $updatedAt | integer | (Optional) Time (in milliseconds) the document was last updated |\n\n## Document Delete\n\nThe document delete transition is used to delete an existing Dash Platform document. It only requires the fields found in the base document transition.\n\n> \ud83d\udcd8\n>\n> For more detailed information, see the [Platform Protocol Reference - Document](platform-protocol-reference-document) page.",
 "order": 2,
 "isReference": false,
 "deprecated": false,
 "hidden": false,
 "sync_unique": "",
 "link_url": "",
 "link_external": false,
 "reusableContent": [],
 "previousSlug": "",
 "slugUpdatedAt": "2020-09-01T20:20:43.462Z",
 "revision": 2,
 "_id": "64f8a9df750465004742adad",
 "version": "64f8a9df750465004742ae1d",
 "project": "5bda01cad172e200499a20a9",
 "user": "62b2101422da70001ee51d95",
 "category": "64f8a9df750465004742ad71",
 "updatedAt": "2023-01-22T18:03:28.212Z",
 "createdAt": "2020-01-13T00:24:35.173Z",
 "__v": 5,
 "parentDoc": "64f8a9df750465004742ad9e",
 "pendingAlgoliaPublish": false,
 "isApi": false,
 "id": "64f8a9df750465004742adad",
 "body_html": "# Overview\n\nDash Platform is based on [document-oriented database](https://en.wikipedia.org/wiki/Document-oriented_database) concepts and uses related terminology. In short, JSON documents are stored into document collections which can then be fetched back using a [query language](reference-query-syntax) similar to common document-oriented databases like [MongoDB](https://www.mongodb.com/), [CouchDB](https://couchdb.apache.org/), or [Firebase](https://firebase.google.com/). \n\nDocuments are defined in an application's [Data Contract](explanation-platform-protocol-data-contract) and represent the structure of application-specific data. Each document consists of one or more fields and the indices necessary to support querying.\n\n# Details\n\n## Base Fields\n\nDash Platform Protocol (DPP) defines a set of base fields that must be present in all documents. For the [`js-dpp` reference implementation](https://github.com/dashevo/platform/tree/master/packages/js-dpp), the base fields shown below are defined in the [document base schema](https://github.com/dashevo/platform/blob/master/packages/js-dpp/schema/document/documentBase.json).\n\n| Field Name | Description |\n| - | - |\n| protocolVersion | The platform protocol version (currently `1`) |\n| $id | The document ID (32 bytes) |\n| $type | Document type defined in the referenced contract |\n| $revision | Document revision (=>1) |\n| $dataContractId | Data contract ID generated from the data contract's `ownerId` and `entropy` (32 bytes) |\n| $ownerId | [Identity](explanation-identity) of the user submitting the document (32 bytes) |\n| $createdAt | Time (in milliseconds) the document was created |\n| $updatedAt | Time (in milliseconds) the document was last updated |\n\n> \ud83d\udea7 Timestamp fields\n>\n> Note: The `$createdAt` and `$updatedAt` fields will only be present in documents that add them to the list of [required properties](reference-data-contracts#required-properties-optional).\n\n## Data Contract Fields\n\nEach application defines its own fields via document definitions in its data contract. Details of the [DPNS data contract documents](https://github.com/dashevo/platform/blob/master/packages/dpns-contract/schema/dpns-contract-documents.json) are described below as an example. This contract defines two document types (`preorder` and `domain`) and provides the functionality described in the [Name Service explanation](explanation-dpns).\n\n| Document Type | Field Name | Data Type |\n| - | - | - |\n| preorder | saltedDomainHash | string |\n| --- | --- | --- |\n| domain | label | string |\n| domain | normalizedLabel | string |\n| domain | normalizedParentvDomainName | string |\n| domain | preorderSalt | array (bytes) |\n| domain | records | object |\n| domain | records.dashUniqueIdentityId | array (bytes) |\n| domain | records.dashAliasIdentityId | array (bytes) |\n| domain | subdomainRules | object |\n| domain | subdomainRules.allowSubdomains | boolean |\n\n## Example Document\n\nThe following example shows the structure of a DPNS `domain` document as output from `JSON.stringify()`. Note the `$` prefix indicating the base fields.\n\n```json\n{\n  \"$protocolVersion\": 1,\n  \"$id\": \"5D8U1k6t6ax8TnyL6QGFFbtMhn39zsixrSMQaxZrYKf1\",\n  \"$type\": \"domain\",\n  \"$dataContractId\": \"GWRSAVFMjXx8HpQFaNJMqBV7MBgMK4br5UESsB4S31Ec\",\n  \"$ownerId\": \"9gU2ZnDhkakHgB4eLbqvEAwQPDBwhW12KD5xPZxybNjE\",\n  \"$revision\": 1,\n  \"label\": \"RT-Sylvan-71605\",\n  \"normalizedLabel\": \"rt-sylvan-71605\",\n  \"normalizedParentDomainName\": \"dash\",\n  \"preorderSalt\": \"zKaLWLe+kKHiRoBXdfSd7TSU9HdIseeoOly1eTYZ670=\",\n  \"records\": {\n    \"dashUniqueIdentityId\": \"9gU2ZnDhkakHgB4eLbqvEAwQPDBwhW12KD5xPZxybNjE\"\n  },\n  \"subdomainRules\": {\n    \"allowSubdomains\": false\n  }\n}\n``` \n\n# Document Submission\n\nOnce a document has been created, it must be encapsulated in a State Transition to be sent to the platform. The structure of a document state transition is shown below. For additional details, see the [State Transition](explanation-platform-protocol-state-transition) explanation.\n\n| Field Name | Description |\n| - | - | \n| protocolVersion | Dash Platform Protocol version (currently `0`) |\n| type | State transition type (`1` for documents) |\n| ownerId | Identity submitting the document(s) |\n| transitions |  Document `create`, `replace`, or `delete` transitions (up to 10 objects) |\n| signaturePublicKeyId | The `id` of the identity public key that signed the state transition |\n| signature | Signature of state transition data |\n\n## Document Create\n\nThe document create transition is used to create a new document on Dash Platform. The document create transition extends the [base schema](#base-fields) to include the following additional fields:\n\n| Field | Type | Description|\n| - | - | - |\n| $entropy | array (32 bytes) | Entropy used in creating the document ID |\n| $createdAt | integer | (Optional) Time (in milliseconds) the document was created |\n| $updatedAt | integer | (Optional) Time (in milliseconds) the document was last updated |\n\n## Document Replace\n\nThe document replace transition is used to update the data in an existing Dash Platform document. The document replace transition extends the [base schema](#base-fields) to include the following additional fields:\n\n| Field | Type | Description|\n| - | - | - |\n| $revision | integer | Document revision (=> 1) |\n| $updatedAt | integer | (Optional) Time (in milliseconds) the document was last updated |\n\n## Document Delete\n\nThe document delete transition is used to delete an existing Dash Platform document. It only requires the fields found in the base document transition.\n\n> \ud83d\udcd8\n>\n> For more detailed information, see the [Platform Protocol Reference - Document](platform-protocol-reference-document) page."
}