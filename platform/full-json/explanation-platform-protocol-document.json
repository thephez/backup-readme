{
 "pendingAlgoliaPublish": false, 
 "parentDoc": "5e95bfa43971fb0148efeb62", 
 "excerpt": "Application data records", 
 "api": {
  "url": "", 
  "params": [], 
  "method": "get", 
  "auth": "required", 
  "results": {
   "codes": [
    {
     "status": 200, 
     "code": "{}", 
     "name": "", 
     "language": "json"
    }, 
    {
     "status": 400, 
     "code": "{}", 
     "name": "", 
     "language": "json"
    }
   ]
  }
 }, 
 "updatedAt": "2020-05-04T15:46:57.772Z", 
 "id": "5e95bfa43971fb0148efeb76", 
 "sync_unique": "", 
 "isApi": false, 
 "createdAt": "2020-01-13T00:24:35.173Z", 
 "category": "5e95bfa43971fb0148efeb3b", 
 "title": "Document", 
 "next": {
  "description": "", 
  "pages": [
   {
    "category": "Explanations", 
    "slug": "explanation-platform-protocol-data-contract", 
    "type": "doc", 
    "name": "Data Contract", 
    "icon": "file-text-o"
   }, 
   {
    "category": "Explanations", 
    "slug": "explanation-platform-protocol-state-transition", 
    "type": "doc", 
    "name": "State Transition", 
    "icon": "file-text-o"
   }, 
   {
    "category": "Explanations", 
    "icon": "file-text-o", 
    "type": "doc", 
    "slug": "explanation-platform-protocol-data-trigger", 
    "name": "Data Trigger"
   }, 
   {
    "type": "url", 
    "name": "Tutorial - Submit Documents", 
    "value": "https://dashplatform.readme.io/docs/tutorial-submit-documents", 
    "icon": "file-text-o"
   }, 
   {
    "type": "url", 
    "name": "Tutorial - Retrieve Documents", 
    "value": "https://dashplatform.readme.io/docs/tutorial-retrieve-documents", 
    "icon": "file-text-o"
   }
  ]
 }, 
 "version": "5e95bfa43971fb0148efeb82", 
 "hidden": false, 
 "type": "basic", 
 "metadata": {
  "image": [], 
  "description": "", 
  "title": ""
 }, 
 "body": "# Overview\n\nDash Platform is based on [document-oriented database](https://en.wikipedia.org/wiki/Document-oriented_database) concepts and uses related terminology. In short, JSON documents are stored into document collections which can then be fetched back using a [query language](reference-query-syntax) similar to common document-oriented databases like MongoDB, CouchDB, or Firebase. \n\nDocuments are defined in an application's [Data Contract](explanation-platform-protocol-data-contract) and represent the structure of application-specific data. Each document consists of one or more fields and the indices necessary to support querying.\n[block:callout]\n{\n  \"type\": \"danger\",\n  \"title\": \"Work in Progress\",\n  \"body\": \"This document is an work in progress. Details may be missing or incomplete and are subject to change.\"\n}\n[/block]\n# Details\n\n## Base Fields\n\nDash Platform Protocol (DPP) defines a set of base fields that must be present in all documents. For the [`js-dpp` reference implementation](https://github.com/dashevo/js-dpp/), the base fields shown below are defined in the [document base schema](https://github.com/dashevo/js-dpp/blob/v0.12.1/schema/document/documentBase.json).\n\n| Field Name | Description |\n| - | - |\n| $id | Document ID |\n| $type | Type of document (must match one of the document types defined in the data contract) |\n| $dataContractId | Identity that registered the data contract defining this document  |\n| $ownerId | Identity submitting the document  |\n| $revision | Document revision |\n\n## Data Contract Fields\n\nEach application defines its own fields via document definitions in its data contract. Details of the DPNS data contract documents are described below as an example. This contract defines two document types (`preorder` and `domain`) and provides the functionality described in the [Name Service explanation](explanation-dpns).\n\n| Document Name | Field Name | Data Type |\n| - | - | - |\n| preorder | saltedDomainHash | string |\n| --- | --- | --- |\n| domain | nameHash | string |\n| domain | label | string |\n| domain | normalizedLabel | string |\n| domain | normalizedParentvDomainName | string |\n| domain | preorderSalt | string |\n| domain | records | object |\n\n## Document Submission\n\nOnce a document has been created, it must be encapsulated in a State Transition to be sent to the platform. The structure of a document state transition is shown below. For additional details, see the [State Transition](explanation-platform-protocol-state-transition) explanation.\n\n| Field Name | Description |\n| - | - | \n| protocolVersion | Dash Platform Protocol version (currently `0`) |\n| type | State transition type (`1` for documents) |\n| ownerId | Identity submitting the document(s) |\n| transitions |  Document `create`, `replace`, or `delete` transitions (up to 10 objects) |\n| signaturePublicKeyId | The `id` of the identity public key that signed the state transition |\n| signature | Signature of state transition data |\n\n# Example Document\n\nThe following example shows the structure of a DPNS `domain` document as output from the document `.toJSON()` method. Note the `$` prefix indicating the base fields.\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"{\\n  '$id': 'GbMwuXdxzN3BB9efMgLPRhbbqCA5jnyfka2jnbyvGyih',\\n  '$type': 'domain',\\n  '$dataContractId': '295xRRRMGYyAruG39XdAibaU9jMAzxhknkkAxFE7uVkW',\\n  '$ownerId': 'HjRuBghdteSmiN8w1VvGe9VHShdAxgt329xBHNQhyUGL',\\n  '$revision': 1,\\n  label: 'testName1234',\\n  records: {\\n    dashIdentity: 'HjRuBghdteSmiN8w1VvGe9VHShdAxgt329xBHNQhyUGL'\\n  },\\n  nameHash: '5620938ed72967fa06cfd9ebcd3bf9e5a5abf366563f5ea1f1874a531e7d78e75500',\\n  preorderSalt: 'ya9GK3VwCeLxyAS9jnQX7WTkGcXMJV96mX',\\n  normalizedLabel: 'testname1234',\\n  normalizedParentDomainName: 'dash'\\n}\",\n      \"language\": \"json\",\n      \"name\": \".toJSON()\"\n    }\n  ]\n}\n[/block]", 
 "link_external": false, 
 "body_html": "<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-overview\"></div>Overview<a class=\"fa fa-anchor\" href=\"#section-overview\"></a></h1>\n<p>Dash Platform is based on <a href=\"https://en.wikipedia.org/wiki/Document-oriented_database\">document-oriented database</a> concepts and uses related terminology. In short, JSON documents are stored into document collections which can then be fetched back using a <a href=\"reference-query-syntax\">query language</a> similar to common document-oriented databases like MongoDB, CouchDB, or Firebase. </p>\n<p>Documents are defined in an application&#39;s <a href=\"explanation-platform-protocol-data-contract\">Data Contract</a> and represent the structure of application-specific data. Each document consists of one or more fields and the indices necessary to support querying.</p>\n\n</div>\n<div class=\"magic-block-callout type-danger \">\n\t<h3><i title=\"Danger\" class=\"fa fa-exclamation-triangle\"></i>Work in Progress\n\t</h3>\n\t<div class=\"callout-body\"><p>This document is an work in progress. Details may be missing or incomplete and are subject to change.</p>\n\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-details\"></div>Details<a class=\"fa fa-anchor\" href=\"#section-details\"></a></h1>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-base-fields\"></div>Base Fields<a class=\"fa fa-anchor\" href=\"#section-base-fields\"></a></h2>\n<p>Dash Platform Protocol (DPP) defines a set of base fields that must be present in all documents. For the <a href=\"https://github.com/dashevo/js-dpp/\"><code>js-dpp</code> reference implementation</a>, the base fields shown below are defined in the <a href=\"https://github.com/dashevo/js-dpp/blob/v0.12.1/schema/document/documentBase.json\">document base schema</a>.</p>\n<div class=\"marked-table\"><table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$id</td>\n<td>Document ID</td>\n</tr>\n<tr>\n<td>$type</td>\n<td>Type of document (must match one of the document types defined in the data contract)</td>\n</tr>\n<tr>\n<td>$dataContractId</td>\n<td>Identity that registered the data contract defining this document</td>\n</tr>\n<tr>\n<td>$ownerId</td>\n<td>Identity submitting the document</td>\n</tr>\n<tr>\n<td>$revision</td>\n<td>Document revision</td>\n</tr>\n</tbody>\n</table></div>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-data-contract-fields\"></div>Data Contract Fields<a class=\"fa fa-anchor\" href=\"#section-data-contract-fields\"></a></h2>\n<p>Each application defines its own fields via document definitions in its data contract. Details of the DPNS data contract documents are described below as an example. This contract defines two document types (<code>preorder</code> and <code>domain</code>) and provides the functionality described in the <a href=\"explanation-dpns\">Name Service explanation</a>.</p>\n<div class=\"marked-table\"><table>\n<thead>\n<tr>\n<th>Document Name</th>\n<th>Field Name</th>\n<th>Data Type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>preorder</td>\n<td>saltedDomainHash</td>\n<td>string</td>\n</tr>\n<tr>\n<td>---</td>\n<td>---</td>\n<td>---</td>\n</tr>\n<tr>\n<td>domain</td>\n<td>nameHash</td>\n<td>string</td>\n</tr>\n<tr>\n<td>domain</td>\n<td>label</td>\n<td>string</td>\n</tr>\n<tr>\n<td>domain</td>\n<td>normalizedLabel</td>\n<td>string</td>\n</tr>\n<tr>\n<td>domain</td>\n<td>normalizedParentvDomainName</td>\n<td>string</td>\n</tr>\n<tr>\n<td>domain</td>\n<td>preorderSalt</td>\n<td>string</td>\n</tr>\n<tr>\n<td>domain</td>\n<td>records</td>\n<td>object</td>\n</tr>\n</tbody>\n</table></div>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-document-submission\"></div>Document Submission<a class=\"fa fa-anchor\" href=\"#section-document-submission\"></a></h2>\n<p>Once a document has been created, it must be encapsulated in a State Transition to be sent to the platform. The structure of a document state transition is shown below. For additional details, see the <a href=\"explanation-platform-protocol-state-transition\">State Transition</a> explanation.</p>\n<div class=\"marked-table\"><table>\n<thead>\n<tr>\n<th>Field Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>protocolVersion</td>\n<td>Dash Platform Protocol version (currently <code>0</code>)</td>\n</tr>\n<tr>\n<td>type</td>\n<td>State transition type (<code>1</code> for documents)</td>\n</tr>\n<tr>\n<td>ownerId</td>\n<td>Identity submitting the document(s)</td>\n</tr>\n<tr>\n<td>transitions</td>\n<td>Document <code>create</code>, <code>replace</code>, or <code>delete</code> transitions (up to 10 objects)</td>\n</tr>\n<tr>\n<td>signaturePublicKeyId</td>\n<td>The <code>id</code> of the identity public key that signed the state transition</td>\n</tr>\n<tr>\n<td>signature</td>\n<td>Signature of state transition data</td>\n</tr>\n</tbody>\n</table></div>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-example-document\"></div>Example Document<a class=\"fa fa-anchor\" href=\"#section-example-document\"></a></h1>\n<p>The following example shows the structure of a DPNS <code>domain</code> document as output from the document <code>.toJSON()</code> method. Note the <code>$</code> prefix indicating the base fields.</p>\n\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">.toJSON()</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(967)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-967\">{\n  '$id': 'GbMwuXdxzN3BB9efMgLPRhbbqCA5jnyfka2jnbyvGyih',\n  '$type': 'domain',\n  '$dataContractId': '295xRRRMGYyAruG39XdAibaU9jMAzxhknkkAxFE7uVkW',\n  '$ownerId': 'HjRuBghdteSmiN8w1VvGe9VHShdAxgt329xBHNQhyUGL',\n  '$revision': 1,\n  label: 'testName1234',\n  records: {\n    dashIdentity: 'HjRuBghdteSmiN8w1VvGe9VHShdAxgt329xBHNQhyUGL'\n  },\n  nameHash: '5620938ed72967fa06cfd9ebcd3bf9e5a5abf366563f5ea1f1874a531e7d78e75500',\n  preorderSalt: 'ya9GK3VwCeLxyAS9jnQX7WTkGcXMJV96mX',\n  normalizedLabel: 'testname1234',\n  normalizedParentDomainName: 'dash'\n}</textarea>\n\t\t\t<pre id=\"code-967\"><code><span class='cm-s-neo'>{\n  <span class=\"cm-property\">'$id'</span>: <span class=\"cm-string\">'GbMwuXdxzN3BB9efMgLPRhbbqCA5jnyfka2jnbyvGyih'</span>,\n  <span class=\"cm-property\">'$type'</span>: <span class=\"cm-string\">'domain'</span>,\n  <span class=\"cm-property\">'$dataContractId'</span>: <span class=\"cm-string\">'295xRRRMGYyAruG39XdAibaU9jMAzxhknkkAxFE7uVkW'</span>,\n  <span class=\"cm-property\">'$ownerId'</span>: <span class=\"cm-string\">'HjRuBghdteSmiN8w1VvGe9VHShdAxgt329xBHNQhyUGL'</span>,\n  <span class=\"cm-property\">'$revision'</span>: <span class=\"cm-number\">1</span>,\n  <span class=\"cm-property\">label</span>: <span class=\"cm-string\">'testName1234'</span>,\n  <span class=\"cm-property\">records</span>: {\n    <span class=\"cm-property\">dashIdentity</span>: <span class=\"cm-string\">'HjRuBghdteSmiN8w1VvGe9VHShdAxgt329xBHNQhyUGL'</span>\n  },\n  <span class=\"cm-property\">nameHash</span>: <span class=\"cm-string\">'5620938ed72967fa06cfd9ebcd3bf9e5a5abf366563f5ea1f1874a531e7d78e75500'</span>,\n  <span class=\"cm-property\">preorderSalt</span>: <span class=\"cm-string\">'ya9GK3VwCeLxyAS9jnQX7WTkGcXMJV96mX'</span>,\n  <span class=\"cm-property\">normalizedLabel</span>: <span class=\"cm-string\">'testname1234'</span>,\n  <span class=\"cm-property\">normalizedParentDomainName</span>: <span class=\"cm-string\">'dash'</span>\n}</span></code></pre></span>\n\t</div>\n</div>", 
 "user": "5b8400d7185d5e00036dcc3b", 
 "isReference": false, 
 "slug": "explanation-platform-protocol-document", 
 "link_url": "", 
 "project": "5bda01cad172e200499a20a9", 
 "__v": 5, 
 "_id": "5e95bfa43971fb0148efeb76", 
 "order": 2, 
 "updates": []
}