{
 "pendingAlgoliaPublish": false, 
 "parentDoc": "5de6677eb98a19003deadc27", 
 "excerpt": "The means of storing and updating platform data", 
 "api": {
  "url": "", 
  "params": [], 
  "method": "get", 
  "auth": "required", 
  "results": {
   "codes": [
    {
     "status": 200, 
     "code": "{}", 
     "name": "", 
     "language": "json"
    }, 
    {
     "status": 400, 
     "code": "{}", 
     "name": "", 
     "language": "json"
    }
   ]
  }
 }, 
 "updatedAt": "2020-01-16T15:48:23.324Z", 
 "id": "5dbaf43ec110f6017a83c8b1", 
 "sync_unique": "", 
 "isApi": false, 
 "createdAt": "2019-10-31T14:48:30.945Z", 
 "category": "5dbaf3fbe244390067b8e845", 
 "title": "State Transition", 
 "next": {
  "description": "", 
  "pages": [
   {
    "category": "Explanations", 
    "icon": "file-text-o", 
    "type": "doc", 
    "slug": "explanation-platform-protocol-document", 
    "name": "Document"
   }
  ]
 }, 
 "version": "5d2374d8d238fb004e8f9243", 
 "hidden": false, 
 "type": "basic", 
 "metadata": {
  "image": [], 
  "description": "", 
  "title": ""
 }, 
 "body": "# Overview\nAt any given point in time, the data stored by each application (and more broadly, the entire platform) is in a specific state. State transitions are the means for submitting data that creates, updates, or deletes platform data and results in a change to a new state.\n\nFor example, Alice may have already added Bob and Carol as friends in DashPay while also having a pending friend request to Dan. If Dan declines the friend request, the state will transition to a new one where Alice and Bob remain in Alice\u2019s friend list while Dan moves to the declined list.\n[block:image]\n{\n  \"images\": [\n    {\n      \"image\": [\n        \"https://files.readme.io/74f641a-State_Transition_example_4.png\",\n        \"State Transition example (4).png\",\n        644,\n        258,\n        \"#d7e1e9\"\n      ],\n      \"sizing\": \"smart\",\n      \"border\": false,\n      \"caption\": \"State Transition Example\"\n    }\n  ]\n}\n[/block]\n\n# Implementation Overview\n\nTo ensure the consistency and integrity of data stored on Layer 2, all data is governed by the [Dash Platform Protocol](explanation-platform-protocol) (DPP) which describes serialization and validation rules. Since state transitions are the vehicle for delivering data to the platform, the implementation of state transitions resides in DPP alongside the validation logic. \n\n## Structure\n\nTo support the various data types used on the platform and enable future updates, state transitions were designed to be flexible. Each state transition consists of a:\n1. Header - version and payload type\n2. Payload - contents vary depending on payload type\n3. Signature - signature of the header/payload by the identity submitting to state transition\n\nThe following table contains a list of currently defined payload types:\n\n| Payload Type | Payload Description |\n| - | - |\n| Data Contract (`1`) | Database schema for a single application |\n| Documents (`2`) | An array of 1 or more documents containing user application data |\n| Identity (`3`) | Identity creation information |\n\n## Application Usage\n\nState transitions are constructed by client-side libraries and then submitted to the platform via DAPI. Based on the validation rules described in DPP (and an application data contract where relevant), Dash Platform first validates the state transition. Some state transitions (e.g. data contracts, identity) are validated solely by explicit rules defined in DPP, while others (e.g. documents) are also subject to the rules defined by the relevant application\u2019s data contract. Once the state transition has been validated, the platform stores the data and updates the platform state.", 
 "link_external": false, 
 "body_html": "<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-overview\"></div>Overview<a class=\"fa fa-anchor\" href=\"#section-overview\"></a></h1>\n<p>At any given point in time, the data stored by each application (and more broadly, the entire platform) is in a specific state. State transitions are the means for submitting data that creates, updates, or deletes platform data and results in a change to a new state.</p>\n<p>For example, Alice may have already added Bob and Carol as friends in DashPay while also having a pending friend request to Dan. If Dan declines the friend request, the state will transition to a new one where Alice and Bob remain in Alice\u2019s friend list while Dan moves to the declined list.</p>\n\n</div>\n<div class=\"magic-block-image\">\n\t<figure><a href=\"https://files.readme.io/74f641a-State_Transition_example_4.png\" class=\"block-display-image-parent block-display-image-size-smart \"><img src=\"https://files.readme.io/74f641a-State_Transition_example_4.png\" alt=\"State Transition Example\"/></a>\n\t</figure>\n\t<figcaption><p>State Transition Example</p>\n</figcaption>\n</div>\n<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-implementation-overview\"></div>Implementation Overview<a class=\"fa fa-anchor\" href=\"#section-implementation-overview\"></a></h1>\n<p>To ensure the consistency and integrity of data stored on Layer 2, all data is governed by the <a href=\"explanation-platform-protocol\">Dash Platform Protocol</a> (DPP) which describes serialization and validation rules. Since state transitions are the vehicle for delivering data to the platform, the implementation of state transitions resides in DPP alongside the validation logic. </p>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-structure\"></div>Structure<a class=\"fa fa-anchor\" href=\"#section-structure\"></a></h2>\n<p>To support the various data types used on the platform and enable future updates, state transitions were designed to be flexible. Each state transition consists of a:</p>\n<ol>\n<li  value=\"1\">Header - version and payload type</li><li  value=\"2\">Payload - contents vary depending on payload type</li><li  value=\"3\">Signature - signature of the header/payload by the identity submitting to state transition</li></ol>\n<p>The following table contains a list of currently defined payload types:</p>\n<div class=\"marked-table\"><table>\n<thead>\n<tr>\n<th>Payload Type</th>\n<th>Payload Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Data Contract (<code>1</code>)</td>\n<td>Database schema for a single application</td>\n</tr>\n<tr>\n<td>Documents (<code>2</code>)</td>\n<td>An array of 1 or more documents containing user application data</td>\n</tr>\n<tr>\n<td>Identity (<code>3</code>)</td>\n<td>Identity creation information</td>\n</tr>\n</tbody>\n</table></div>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-application-usage\"></div>Application Usage<a class=\"fa fa-anchor\" href=\"#section-application-usage\"></a></h2>\n<p>State transitions are constructed by client-side libraries and then submitted to the platform via DAPI. Based on the validation rules described in DPP (and an application data contract where relevant), Dash Platform first validates the state transition. Some state transitions (e.g. data contracts, identity) are validated solely by explicit rules defined in DPP, while others (e.g. documents) are also subject to the rules defined by the relevant application\u2019s data contract. Once the state transition has been validated, the platform stores the data and updates the platform state.</p>\n\n</div>", 
 "user": "5b8400d7185d5e00036dcc3b", 
 "isReference": false, 
 "slug": "explanation-platform-protocol-state-transition", 
 "link_url": "", 
 "project": "5bda01cad172e200499a20a9", 
 "__v": 2, 
 "_id": "5dbaf43ec110f6017a83c8b1", 
 "order": 1, 
 "updates": []
}