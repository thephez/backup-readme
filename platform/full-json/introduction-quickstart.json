{
 "pendingAlgoliaPublish": false, 
 "parentDoc": null, 
 "excerpt": "Get up and running quickly with a Client library", 
 "api": {
  "url": "", 
  "params": [], 
  "method": "get", 
  "auth": "required", 
  "results": {
   "codes": [
    {
     "status": 200, 
     "code": "{}", 
     "name": "", 
     "language": "json"
    }, 
    {
     "status": 400, 
     "code": "{}", 
     "name": "", 
     "language": "json"
    }
   ]
  }
 }, 
 "previousSlug": "", 
 "updatedAt": "2019-12-12T18:01:43.907Z", 
 "id": "5f8f3fa8b257f9003428ff48", 
 "sync_unique": "", 
 "isApi": false, 
 "createdAt": "2019-01-07T15:46:42.687Z", 
 "category": "5f8f3fa8b257f9003428ff3f", 
 "title": "Quickstart", 
 "next": {
  "description": "", 
  "pages": []
 }, 
 "version": "5f8f3fa8b257f9003428ff97", 
 "slugUpdatedAt": "2021-01-20T10:22:04.167Z", 
 "hidden": true, 
 "type": "basic", 
 "metadata": {
  "image": [], 
  "description": "", 
  "title": ""
 }, 
 "body": "The quickest way to get started with Dash Platform is by completing these two simple steps:\n\n1. Install the Dash SDK to interact with the Dash Platform decentralized API (DAPI)\n2. Verify a successful API response to a DAPI test request\n\n# 1. Install the Dash SDK\n\nThe quickest way to start developing on Dash Platform is to use the Dash SDK. Currently, the SDK is available in Javascript, Objective-C, and Java. After navigating to your project directory, you can install the Javascript SDK by issuing the following command in your terminal or command line:\n\n```javascript\nnpm install dash\n```\n\nRequire the Dash SDK by adding the following code to your project\u2019s index:\n\n** add code to project index **\n\nSee the library source on [GitHub](https://github.com/dashevo/dashjs/).\n\n# 2. Verify a successful API response\n\nTo confirm proper installation, use `dash` to send a request to DAPI and check for a valid response. The example shown here requests the current height of the Dash blockchain:\n\n```javascript\nconst DAPIClient = require('@dashevo/dapi-client');\n\nvar client = new DAPIClient();\n\nvar blockHeight = client.getBestBlockHeight();\nblockHeight.then(height => {\n  console.log(`Best block height: ${height}`);\n});\n```\n\nA live example of this code can be run [here on Repl.it](https://repl.it/@thephez/DAPI-Client-Basic-Example)\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"title\": \"DAPI-Client Seed node(s)\",\n  \"body\": \"If using DAPI-Client in a devnet or testnet setting, at least one seed node must be provided in the constructor. For example,\\n```\\nvar client = new DAPIClient({\\n  seeds: [{\\n    service: 'example.com:20001',\\n    port: 3000\\n  }],\\n});\\n```\"\n}\n[/block]\nOnce you have verified dapi-client requests are working, you can move on to exploring the available endpoints.", 
 "link_external": false, 
 "body_html": "<div class=\"magic-block-textarea\"><p>The quickest way to get started with Dash Platform is by completing these two simple steps:</p>\n<ol>\n<li  value=\"1\">Install the Dash SDK to interact with the Dash Platform decentralized API (DAPI)</li><li  value=\"2\">Verify a successful API response to a DAPI test request</li></ol>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-1-install-the-dash-sdk\"></div>1. Install the Dash SDK<a class=\"fa fa-anchor\" href=\"#section-1-install-the-dash-sdk\"></a></h1>\n<p>The quickest way to start developing on Dash Platform is to use the Dash SDK. Currently, the SDK is available in Javascript, Objective-C, and Java. After navigating to your project directory, you can install the Javascript SDK by issuing the following command in your terminal or command line:</p>\n<pre><code class=\"lang-javascript\"><span class='cm-s-neo'><span class=\"cm-variable\">npm</span> <span class=\"cm-variable\">install</span> <span class=\"cm-variable\">dash</span></span>\n</code></pre>\n<p>Require the Dash SDK by adding the following code to your project\u2019s index:</p>\n<p><strong> add code to project index </strong></p>\n<p>See the library source on <a href=\"https://github.com/dashevo/dashjs/\">GitHub</a>.</p>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-2-verify-a-successful-api-response\"></div>2. Verify a successful API response<a class=\"fa fa-anchor\" href=\"#section-2-verify-a-successful-api-response\"></a></h1>\n<p>To confirm proper installation, use <code>dash</code> to send a request to DAPI and check for a valid response. The example shown here requests the current height of the Dash blockchain:</p>\n<pre><code class=\"lang-javascript\"><span class='cm-s-neo'><span class=\"cm-keyword\">const</span> <span class=\"cm-def\">DAPIClient</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">require</span>(<span class=\"cm-string\">'@dashevo&#47;dapi-client'</span>);\n\n<span class=\"cm-keyword\">var</span> <span class=\"cm-def\">client</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">new</span> <span class=\"cm-variable\">DAPIClient</span>();\n\n<span class=\"cm-keyword\">var</span> <span class=\"cm-def\">blockHeight</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">getBestBlockHeight</span>();\n<span class=\"cm-variable\">blockHeight</span>.<span class=\"cm-property\">then</span>(<span class=\"cm-def\">height</span> <span class=\"cm-operator\">=&gt;</span> {\n  <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-string-2\">`Best block height: ${</span><span class=\"cm-variable-2\">height</span><span class=\"cm-string-2\">}`</span>);\n});</span>\n</code></pre>\n<p>A live example of this code can be run <a href=\"https://repl.it/@thephez/DAPI-Client-Basic-Example\">here on Repl.it</a></p>\n\n</div>\n<div class=\"magic-block-callout type-warning \">\n\t<h3><i title=\"Warning\" class=\"fa fa-exclamation-circle\"></i>DAPI-Client Seed node(s)\n\t</h3>\n\t<div class=\"callout-body\"><p>If using DAPI-Client in a devnet or testnet setting, at least one seed node must be provided in the constructor. For example,</p>\n<pre><code>var client = new DAPIClient({\n  seeds: [{\n    service: &#39;example.com:20001&#39;,\n    port: 3000\n  }],\n});\n</code></pre>\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><p>Once you have verified dapi-client requests are working, you can move on to exploring the available endpoints.</p>\n\n</div>", 
 "updates": [], 
 "isReference": false, 
 "slug": "introduction-quickstart", 
 "link_url": "", 
 "project": "5bda01cad172e200499a20a9", 
 "__v": 6, 
 "_id": "5f8f3fa8b257f9003428ff48", 
 "order": 3, 
 "user": "5b8400d7185d5e00036dcc3b"
}