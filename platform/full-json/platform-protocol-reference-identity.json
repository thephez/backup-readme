{
 "pendingAlgoliaPublish": false, 
 "parentDoc": null, 
 "excerpt": "", 
 "api": {
  "url": "", 
  "params": [], 
  "method": "get", 
  "auth": "required", 
  "results": {
   "codes": [
    {
     "status": 200, 
     "code": "{}", 
     "name": "", 
     "language": "json"
    }, 
    {
     "status": 400, 
     "code": "{}", 
     "name": "", 
     "language": "json"
    }
   ]
  }
 }, 
 "previousSlug": "reference-identity", 
 "updatedAt": "2020-11-17T18:08:32.557Z", 
 "id": "5f8f3fa8b257f9003428ff90", 
 "sync_unique": "", 
 "isApi": false, 
 "createdAt": "2020-09-02T14:23:32.748Z", 
 "category": "5f8f3fa8b257f9003428ff46", 
 "title": "Identity", 
 "next": {
  "description": "", 
  "pages": []
 }, 
 "version": "5f8f3fa8b257f9003428ff97", 
 "slugUpdatedAt": "2020-11-17T18:27:09.014Z", 
 "hidden": false, 
 "type": "basic", 
 "metadata": {
  "image": [], 
  "description": "", 
  "title": ""
 }, 
 "body": "# Identity Overview\n\nIdentities are a low-level construct that provide the foundation for user-facing functionality on the platform. An identity is a public key (or set of public keys) recorded on the platform chain that can be used to prove ownership of data. Please see the [Identity DIP](https://github.com/dashpay/dips/blob/master/dip-0011.md) for additional information.\n\nIdentities consist of three components that are described in further detail in following sections:\n\n| Field | Type | Description|\n| - | - | - |\n| protocolVersion | integer | The identity version |\n| id | array of bytes | The identity id (32 bytes) |\n| publicKeys | array of keys | Public key(s) associated with the identity |\n| balance | integer | Credit balance associated with the identity |\n| revision | integer | Identity update revision |\n\nEach identity must comply with this JSON-Schema definition established in [js-dpp](https://github.com/dashevo/js-dpp/blob/v0.16.0/schema/identity/identity.json):\n\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-07/schema\",\n  \"properties\": {\n    \"protocolVersion\": {\n      \"type\": \"integer\",\n      \"minimum\": 0,\n      \"maximum\": 0,\n      \"$comment\": \"Maximum is the latest Identity protocol version\"\n    },\n    \"id\": {\n      \"type\": \"array\",\n      \"byteArray\": true,\n      \"minItems\": 32,\n      \"maxItems\": 32,\n      \"contentMediaType\": \"application/x.dash.dpp.identifier\"\n    },\n    \"publicKeys\": {\n      \"type\": \"array\",\n      \"minItems\": 1,\n      \"maxItems\": 100,\n      \"uniqueItems\": true\n    },\n    \"balance\": {\n      \"type\": \"integer\",\n      \"minimum\": 0\n    },\n    \"revision\": {\n      \"type\": \"integer\",\n      \"minimum\": 0,\n      \"description\": \"Identity update revision\"\n  }\n},\n  \"required\": [\n    \"protocolVersion\",\n    \"id\",\n    \"publicKeys\",\n    \"balance\",\n    \"revision\"\n  ]\n}\n```\n**Example Identity**\n\n```json\n{\n  \"protocolVersion\": 0,\n  \"id\": \"4ZJsE1Yg8AosmC4hAeo3GJgso4N9pCoa6eCTDeXsvdhn\",\n  \"publicKeys\": [\n    {\n      \"id\": 0,\n      \"type\": 0,\n      \"data\": \"Ao57Lp0174Svimn3OW+JUxOu/JhjhgRjBWzx9Gu/hyjo\"\n    }\n  ],\n  \"balance\": 0,\n  \"revision\": 0\n}\n```\n\n## Identity id\n\nThe identity `id` is calculated by Base58 encoding the double sha256 hash of the [outpoint](https://dashcore.readme.io/docs/core-additional-resources-glossary#section-outpoint) used to fund the identity creation.\n\n`id = base58(sha256(sha256(<identity create funding output>)))`\n\n### Example id creation\n```javascript\n// From the JavaScript reference implementation (js-dpp)\n// IdentityCreateTransition.js\n    this.identityId = new Identifier(\n      hash(this.lockedOutPoint),\n    );\n```\n\n**Note:** The identity `id` uses the Dash Platform specific `application/x.dash.dpp.identifier` content media type. For additional information, please refer to the [js-dpp PR 252](https://github.com/dashevo/js-dpp/pull/252) that introduced it and [Identifier.js](https://github.com/dashevo/js-dpp/blob/v0.16.0/lib/identifier/Identifier.js).\n\n## Identity publicKeys\n\nThe identity `publicKeys` array stores information regarding each public key associated with the identity. Each identity must have at least one public key.\n\n**Note:** As of Dash Platform Protocol [version 0.16](https://github.com/dashevo/js-dpp/pull/234), any public key(s) assigned to an identity must be unique (not already used by any identity). Prior versions checked (at most) the first key only.\n\nEach item in the `publicKeys` array consists an object containing:\n\n| Field | Type | Description|\n| - | - | - |\n| id | integer | The key id (all public keys must be unique) |\n| type | integer | Type of key (default: 0 - ECDSA) |\n| data | array of bytes | Public key (ECDSA: 33 bytes; BLS: 48 bytes) |\n\n**Note:** the `isEnabled` field was removed in [version 0.16](https://github.com/dashevo/js-dpp/pull/236).\n\nEach identity public key must comply with this JSON-Schema definition established in [js-dpp](https://github.com/dashevo/js-dpp/blob/v0.16.0/schema/identity/publicKey.json):\n\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-07/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"integer\",\n      \"minimum\": 0,\n      \"description\": \"Public key ID\",\n      \"$comment\": \"Must be unique for the identity. It can\u2019t be changed after adding a key. Included when signing state transitions to indicate which identity key was used to sign.\"\n    },\n    \"type\": {\n      \"type\": \"integer\",\n      \"enum\": [\n        0,\n        1\n      ],\n      \"description\": \"Public key type. 0 - ECDSA Secp256k1, 1 - BLS 12-381\",\n      \"$comment\": \"It can't be changed after adding a key\"\n    },\n    \"data\": {\n      \"type\": \"array\",\n      \"byteArray\": true,\n      \"description\": \"Raw public key\",\n      \"$commit\": \"It must be a valid key of the specified type and unique for the identity. It can\u2019t be changed after adding a key\"\n    }\n  },\n  \"allOf\": [\n    {\n      \"if\": {\n        \"properties\": {\n          \"type\": {\n            \"const\": 0\n          }\n        }\n      },\n      \"then\": {\n        \"properties\": {\n          \"data\": {\n            \"byteArray\": true,\n            \"minItems\": 33,\n            \"maxItems\": 33\n          }\n        }\n      }\n    },\n    {\n      \"if\": {\n        \"properties\": {\n          \"type\": {\n            \"const\": 1\n          }\n        }\n      },\n      \"then\": {\n        \"properties\": {\n          \"data\": {\n            \"byteArray\": true,\n            \"minItems\": 48,\n            \"maxItems\": 48\n          }\n        }\n      }\n    }\n  ],\n  \"required\": [\n    \"id\",\n    \"type\",\n    \"data\"\n  ],\n  \"additionalProperties\": false\n}\n```\n\n### Public Key `id`\n\nEach public key in an identity's `publicKeys` array must be assigned a unique index number (`id`).\n\n\n### Public Key `type`\n\nThe `type` field indicates the algorithm used to derive the key.\n\n| Type | Description |\n| :-: | - |\n| 0 | ECDSA (default) |\n| 1 | BLS (currently unused)|\n\n### Public Key `data`\n\nThe `data` field contains the compressed public key.\n\n#### Example data encode/decode\n\n**Encode**\n```javascript\n// From the JavaScript reference implementation (js-dpp)\n// AbstractStateTransitionIdentitySigned.js\npubKeyBase = new PublicKey({\n  ...privateKeyModel.toPublicKey().toObject(),\n  compressed: true,\n})\n  .toBuffer();\n```\n\n**Decode**\n```javascript\n// From the JavaScript reference implementation (js-dpp)\n// validatePublicKeysFactory.js\nconst dataHex = rawPublicKey.data.toString('hex');\n```\n\n## Identity balance\n\nEach identity has a balance of credits established by value locked via a layer 1 lock transaction. This credit balance is used to pay the fees associated with state transitions.\n\n# Identity Creation\n\nIdentities are created on the platform by submitting the identity information in an identity create state transition.\n\n| Field | Type | Description|\n| - | - | - |\n| protocolVersion | integer | The identity create protocol version (currently `0`) |\n| type | integer | State transition type (`2` for identity create) |\n| lockedOutPoint | array of bytes | Lock [outpoint]([https://dashcore.readme.io/docs/core-additional-resources-glossary#section-outpoint](https://dashcore.readme.io/docs/core-additional-resources-glossary#section-outpoint)) from the layer 1 locking transaction (36 bytes) |\n| publicKeys | array of keys | [Public key(s)](#identity-publickeys) associated with the identity |\n| signature | array of bytes | Signature of state transition data (65 bytes) |\n\n**Note:** The lock transaction that creates the `lockedOutPoint` is not covered in this document. The preliminary design simply uses an `OP_RETURN` output.\n\nEach identity must comply with this JSON-Schema definition established in [js-dpp](https://github.com/dashevo/js-dpp/blob/v0.16.0/schema/identity/stateTransition/identityCreate.json):\n\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-07/schema\",\n  \"properties\": {\n    \"protocolVersion\": {\n      \"type\": \"integer\",\n      \"minimum\": 0,\n      \"maximum\": 0,\n      \"$comment\": \"Maximum is the latest Identity Create Transition protocol version\"\n    },\n    \"type\": {\n      \"type\": \"integer\",\n      \"const\": 2\n    },\n    \"lockedOutPoint\": {\n      \"type\": \"array\",\n      \"byteArray\": true,\n      \"minItems\": 36,\n      \"maxItems\": 36\n    },\n    \"publicKeys\": {\n      \"type\": \"array\",\n      \"minItems\": 1,\n      \"maxItems\": 10,\n      \"uniqueItems\": true\n    },\n    \"signature\": {\n      \"type\": \"array\",\n      \"byteArray\": true,\n      \"minItems\": 65,\n      \"maxItems\": 65\n    }\n  },\n  \"additionalProperties\": false,\n  \"required\": [\n    \"protocolVersion\",\n    \"type\",\n    \"lockedOutPoint\",\n    \"publicKeys\",\n    \"signature\"\n  ]\n}\n```\n\n**Example State Transition**\n\n```json\n\n{\n  \"protocolVersion\": 0,\n  \"type\": 2,\n  \"signature\": \"ILoF6DKZPpDMJTlBjwiY05v7/3LEcJcLlwgmg6wvltT7St15F4oesX8cd+yNtosIQ6rgCx7o3m+OeJM49HWk880=\",\n  \"lockedOutPoint\": \"kSALb/mPrS7H83szmJ5EJYIKUPI1QFXN9Zv60lCSvIMAAAAA\",\n  \"publicKeys\": [\n    {\n      \"id\": 0,\n      \"type\": 0,\n      \"data\": \"A3imAPz+S1aP+keuUYpRvq9JD3Vn4+0nN5UydeV5JiIP\"\n    }\n  ]\n}\n```\n\n# Identity TopUp\n\nIdentity credit balances are increased by submitting the topup information in an identity topup state transition.\n\n| Field | Type | Description|\n| - | - | - |\n| protocolVersion | integer | The identity topup protocol version (currently `0`) |\n| type | integer | State transition type (`3` for identity topup) |\n| lockedOutPoint | array of bytes | Lock [outpoint]([https://dashcore.readme.io/docs/core-additional-resources-glossary#section-outpoint](https://dashcore.readme.io/docs/core-additional-resources-glossary#section-outpoint)) from the layer 1 locking transaction (36 bytes) |\n| identityId | array of bytes | An [Identity ID](#identity-id) for the identity receiving the topup (can be any identity) (32 bytes) |\n| signature | array of bytes | Signature of state transition data (65 bytes) |\n\n**Note:** The lock transaction that creates the `lockedOutPoint` is not covered in this document. The preliminary design simply uses an `OP_RETURN` output.\n\nEach identity must comply with this JSON-Schema definition established in [js-dpp](https://github.com/dashevo/js-dpp/blob/v0.16.0/schema/identity/stateTransition/identityTopUp.json):\n\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-07/schema\",\n  \"properties\": {\n    \"protocolVersion\": {\n      \"type\": \"integer\",\n      \"minimum\": 0,\n      \"maximum\": 0,\n      \"$comment\": \"Maximum is the latest Identity TopUp Transition protocol version\"\n    },\n    \"type\": {\n      \"type\": \"integer\",\n      \"const\": 3\n    },\n    \"lockedOutPoint\": {\n      \"type\": \"array\",\n      \"byteArray\": true,\n      \"minItems\": 36,\n      \"maxItems\": 36\n    },\n    \"identityId\": {\n      \"type\": \"array\",\n      \"byteArray\": true,\n      \"minItems\": 32,\n      \"maxItems\": 32,\n      \"contentMediaType\": \"application/x.dash.dpp.identifier\"\n    },\n    \"signature\": {\n      \"type\": \"array\",\n      \"byteArray\": true,\n      \"minItems\": 65,\n      \"maxItems\": 65\n    }\n  },\n  \"additionalProperties\": false,\n  \"required\": [\n    \"protocolVersion\",\n    \"type\",\n    \"lockedOutPoint\",\n    \"identityId\",\n    \"signature\"\n  ]\n}\n```\n\n**Example State Transition**\n\n```json\n{\n  \"protocolVersion\": 0,\n  \"type\": 3,\n  \"signature\": \"IGsZ6qDhSvrACTo+PpAvmWrlnnSzmKjNJVPBjXAMweFBVtPDPdDHBNomsEzzPo9BHPMPCTK9882omofGFot41iY=\",\n  \"identityId\": \"7NUbPf231ixt1kVBQsBvSMMBxd7AgPad8KtdtfFGhXDP\",\n  \"lockedOutPoint\": \"KSP1RVZdVG1R5OkaK8LTjccTC6eaWTWiAt+6YMp5fzwAAAAA\"\n}\n```\n\n# Identity State Transition Signing\n\n**Note:** The identity create and topup state transition signatures are unique in that they must be signed by the private key used in the layer 1 locking transaction. All other state transitions will be signed by a private key of the identity submitting them.\n\nThe process to sign an identity create state transition consists of the following steps:\n1. Canonical CBOR encode the state transition data - this include all ST fields except the `signature`\n2. Sign the encoded data with private key associated with a lock transaction public key\n3. Set the state transition `signature` to the value of the signature created in the previous step\n\n### Code snipits related to signing\n```javascript\n// From js-dpp\n// AbstractStateTransition.js\n// toBuffer encodes the object (excluding the signature-related fields) with canonical CBOR\nconst data = this.toBuffer({ skipSignature: true });\nconst privateKeyModel = new PrivateKey(privateKey);\n\nthis.setSignature(sign(data, privateKeyModel));\n\n// From dashcore-lib\n// signer.js\n/**\n* @param {Buffer} data\n* @param {string|PrivateKey} privateKey\n* @return {Buffer}\n*/\nfunction sign(data, privateKey) {\n\tvar hash = doubleSha(data);\n\treturn signHash(hash, privateKey);\n}\n\n/**\n* Sign hash.\n* @param {Buffer} hash\n* @param {string|PrivateKey} privateKey\n* @return {Buffer} - 65-bit compact signature\n*/\nfunction signHash(hash, privateKey) {\n\tif (typeof privateKey === 'string') {\n\t\tprivateKey = new PrivateKey(privateKey);\n\t}\n\n\tvar ecdsa = new ECDSA();\n\tecdsa.hashbuf = hash;\n\tecdsa.privkey = privateKey;\n\tecdsa.pubkey = privateKey.toPublicKey();\n\tecdsa.signRandomK();\n\tecdsa.calci();\n\treturn ecdsa.sig.toCompact();\n}\n```", 
 "link_external": false, 
 "body_html": "<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-identity-overview\"></div>Identity Overview<a class=\"fa fa-anchor\" href=\"#section-identity-overview\"></a></h1>\n<p>Identities are a low-level construct that provide the foundation for user-facing functionality on the platform. An identity is a public key (or set of public keys) recorded on the platform chain that can be used to prove ownership of data. Please see the <a href=\"https://github.com/dashpay/dips/blob/master/dip-0011.md\">Identity DIP</a> for additional information.</p>\n<p>Identities consist of three components that are described in further detail in following sections:</p>\n<div class=\"marked-table\"><table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>protocolVersion</td>\n<td>integer</td>\n<td>The identity version</td>\n</tr>\n<tr>\n<td>id</td>\n<td>array of bytes</td>\n<td>The identity id (32 bytes)</td>\n</tr>\n<tr>\n<td>publicKeys</td>\n<td>array of keys</td>\n<td>Public key(s) associated with the identity</td>\n</tr>\n<tr>\n<td>balance</td>\n<td>integer</td>\n<td>Credit balance associated with the identity</td>\n</tr>\n<tr>\n<td>revision</td>\n<td>integer</td>\n<td>Identity update revision</td>\n</tr>\n</tbody>\n</table></div>\n<p>Each identity must comply with this JSON-Schema definition established in <a href=\"https://github.com/dashevo/js-dpp/blob/v0.16.0/schema/identity/identity.json\">js-dpp</a>:</p>\n<pre><code class=\"lang-json\"><span class='cm-s-neo'>{\n  <span class=\"cm-property\">\"$schema\"</span>: <span class=\"cm-string\">\"http:&#47;&#47;json-schema.org&#47;draft-07&#47;schema\"</span>,\n  <span class=\"cm-property\">\"properties\"</span>: {\n    <span class=\"cm-property\">\"protocolVersion\"</span>: {\n      <span class=\"cm-property\">\"type\"</span>: <span class=\"cm-string\">\"integer\"</span>,\n      <span class=\"cm-property\">\"minimum\"</span>: <span class=\"cm-number\">0</span>,\n      <span class=\"cm-property\">\"maximum\"</span>: <span class=\"cm-number\">0</span>,\n      <span class=\"cm-property\">\"$comment\"</span>: <span class=\"cm-string\">\"Maximum is the latest Identity protocol version\"</span>\n    },\n    <span class=\"cm-property\">\"id\"</span>: {\n      <span class=\"cm-property\">\"type\"</span>: <span class=\"cm-string\">\"array\"</span>,\n      <span class=\"cm-property\">\"byteArray\"</span>: <span class=\"cm-atom\">true</span>,\n      <span class=\"cm-property\">\"minItems\"</span>: <span class=\"cm-number\">32</span>,\n      <span class=\"cm-property\">\"maxItems\"</span>: <span class=\"cm-number\">32</span>,\n      <span class=\"cm-property\">\"contentMediaType\"</span>: <span class=\"cm-string\">\"application&#47;x.dash.dpp.identifier\"</span>\n    },\n    <span class=\"cm-property\">\"publicKeys\"</span>: {\n      <span class=\"cm-property\">\"type\"</span>: <span class=\"cm-string\">\"array\"</span>,\n      <span class=\"cm-property\">\"minItems\"</span>: <span class=\"cm-number\">1</span>,\n      <span class=\"cm-property\">\"maxItems\"</span>: <span class=\"cm-number\">100</span>,\n      <span class=\"cm-property\">\"uniqueItems\"</span>: <span class=\"cm-atom\">true</span>\n    },\n    <span class=\"cm-property\">\"balance\"</span>: {\n      <span class=\"cm-property\">\"type\"</span>: <span class=\"cm-string\">\"integer\"</span>,\n      <span class=\"cm-property\">\"minimum\"</span>: <span class=\"cm-number\">0</span>\n    },\n    <span class=\"cm-property\">\"revision\"</span>: {\n      <span class=\"cm-property\">\"type\"</span>: <span class=\"cm-string\">\"integer\"</span>,\n      <span class=\"cm-property\">\"minimum\"</span>: <span class=\"cm-number\">0</span>,\n      <span class=\"cm-property\">\"description\"</span>: <span class=\"cm-string\">\"Identity update revision\"</span>\n  }\n},\n  <span class=\"cm-property\">\"required\"</span>: [\n    <span class=\"cm-string\">\"protocolVersion\"</span>,\n    <span class=\"cm-string\">\"id\"</span>,\n    <span class=\"cm-string\">\"publicKeys\"</span>,\n    <span class=\"cm-string\">\"balance\"</span>,\n    <span class=\"cm-string\">\"revision\"</span>\n  ]\n}</span>\n</code></pre>\n<p><strong>Example Identity</strong></p>\n<pre><code class=\"lang-json\"><span class='cm-s-neo'>{\n  <span class=\"cm-property\">\"protocolVersion\"</span>: <span class=\"cm-number\">0</span>,\n  <span class=\"cm-property\">\"id\"</span>: <span class=\"cm-string\">\"4ZJsE1Yg8AosmC4hAeo3GJgso4N9pCoa6eCTDeXsvdhn\"</span>,\n  <span class=\"cm-property\">\"publicKeys\"</span>: [\n    {\n      <span class=\"cm-property\">\"id\"</span>: <span class=\"cm-number\">0</span>,\n      <span class=\"cm-property\">\"type\"</span>: <span class=\"cm-number\">0</span>,\n      <span class=\"cm-property\">\"data\"</span>: <span class=\"cm-string\">\"Ao57Lp0174Svimn3OW+JUxOu&#47;JhjhgRjBWzx9Gu&#47;hyjo\"</span>\n    }\n  ],\n  <span class=\"cm-property\">\"balance\"</span>: <span class=\"cm-number\">0</span>,\n  <span class=\"cm-property\">\"revision\"</span>: <span class=\"cm-number\">0</span>\n}</span>\n</code></pre>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-identity-id\"></div>Identity id<a class=\"fa fa-anchor\" href=\"#section-identity-id\"></a></h2>\n<p>The identity <code>id</code> is calculated by Base58 encoding the double sha256 hash of the <a href=\"https://dashcore.readme.io/docs/core-additional-resources-glossary#section-outpoint\">outpoint</a> used to fund the identity creation.</p>\n<p><code>id = base58(sha256(sha256(&lt;identity create funding output&gt;)))</code></p>\n<h3 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-example-id-creation\"></div>Example id creation<a class=\"fa fa-anchor\" href=\"#section-example-id-creation\"></a></h3>\n<pre><code class=\"lang-javascript\"><span class='cm-s-neo'><span class=\"cm-comment\">&#47;&#47; From the JavaScript reference implementation (js-dpp)</span>\n<span class=\"cm-comment\">&#47;&#47; IdentityCreateTransition.js</span>\n    <span class=\"cm-keyword\">this</span>.<span class=\"cm-property\">identityId</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">new</span> <span class=\"cm-variable\">Identifier</span>(\n      <span class=\"cm-variable\">hash</span>(<span class=\"cm-keyword\">this</span>.<span class=\"cm-property\">lockedOutPoint</span>),\n    );</span>\n</code></pre>\n<p><strong>Note:</strong> The identity <code>id</code> uses the Dash Platform specific <code>application/x.dash.dpp.identifier</code> content media type. For additional information, please refer to the <a href=\"https://github.com/dashevo/js-dpp/pull/252\">js-dpp PR 252</a> that introduced it and <a href=\"https://github.com/dashevo/js-dpp/blob/v0.16.0/lib/identifier/Identifier.js\">Identifier.js</a>.</p>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-identity-public-keys\"></div>Identity publicKeys<a class=\"fa fa-anchor\" href=\"#section-identity-public-keys\"></a></h2>\n<p>The identity <code>publicKeys</code> array stores information regarding each public key associated with the identity. Each identity must have at least one public key.</p>\n<p><strong>Note:</strong> As of Dash Platform Protocol <a href=\"https://github.com/dashevo/js-dpp/pull/234\">version 0.16</a>, any public key(s) assigned to an identity must be unique (not already used by any identity). Prior versions checked (at most) the first key only.</p>\n<p>Each item in the <code>publicKeys</code> array consists an object containing:</p>\n<div class=\"marked-table\"><table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td>integer</td>\n<td>The key id (all public keys must be unique)</td>\n</tr>\n<tr>\n<td>type</td>\n<td>integer</td>\n<td>Type of key (default: 0 - ECDSA)</td>\n</tr>\n<tr>\n<td>data</td>\n<td>array of bytes</td>\n<td>Public key (ECDSA: 33 bytes; BLS: 48 bytes)</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>Note:</strong> the <code>isEnabled</code> field was removed in <a href=\"https://github.com/dashevo/js-dpp/pull/236\">version 0.16</a>.</p>\n<p>Each identity public key must comply with this JSON-Schema definition established in <a href=\"https://github.com/dashevo/js-dpp/blob/v0.16.0/schema/identity/publicKey.json\">js-dpp</a>:</p>\n<pre><code class=\"lang-json\"><span class='cm-s-neo'>{\n  <span class=\"cm-property\">\"$schema\"</span>: <span class=\"cm-string\">\"http:&#47;&#47;json-schema.org&#47;draft-07&#47;schema\"</span>,\n  <span class=\"cm-property\">\"type\"</span>: <span class=\"cm-string\">\"object\"</span>,\n  <span class=\"cm-property\">\"properties\"</span>: {\n    <span class=\"cm-property\">\"id\"</span>: {\n      <span class=\"cm-property\">\"type\"</span>: <span class=\"cm-string\">\"integer\"</span>,\n      <span class=\"cm-property\">\"minimum\"</span>: <span class=\"cm-number\">0</span>,\n      <span class=\"cm-property\">\"description\"</span>: <span class=\"cm-string\">\"Public key ID\"</span>,\n      <span class=\"cm-property\">\"$comment\"</span>: <span class=\"cm-string\">\"Must be unique for the identity. It can\u2019t be changed after adding a key. Included when signing state transitions to indicate which identity key was used to sign.\"</span>\n    },\n    <span class=\"cm-property\">\"type\"</span>: {\n      <span class=\"cm-property\">\"type\"</span>: <span class=\"cm-string\">\"integer\"</span>,\n      <span class=\"cm-property\">\"enum\"</span>: [\n        <span class=\"cm-number\">0</span>,\n        <span class=\"cm-number\">1</span>\n      ],\n      <span class=\"cm-property\">\"description\"</span>: <span class=\"cm-string\">\"Public key type. 0 - ECDSA Secp256k1, 1 - BLS 12-381\"</span>,\n      <span class=\"cm-property\">\"$comment\"</span>: <span class=\"cm-string\">\"It can't be changed after adding a key\"</span>\n    },\n    <span class=\"cm-property\">\"data\"</span>: {\n      <span class=\"cm-property\">\"type\"</span>: <span class=\"cm-string\">\"array\"</span>,\n      <span class=\"cm-property\">\"byteArray\"</span>: <span class=\"cm-atom\">true</span>,\n      <span class=\"cm-property\">\"description\"</span>: <span class=\"cm-string\">\"Raw public key\"</span>,\n      <span class=\"cm-property\">\"$commit\"</span>: <span class=\"cm-string\">\"It must be a valid key of the specified type and unique for the identity. It can\u2019t be changed after adding a key\"</span>\n    }\n  },\n  <span class=\"cm-property\">\"allOf\"</span>: [\n    {\n      <span class=\"cm-property\">\"if\"</span>: {\n        <span class=\"cm-property\">\"properties\"</span>: {\n          <span class=\"cm-property\">\"type\"</span>: {\n            <span class=\"cm-property\">\"const\"</span>: <span class=\"cm-number\">0</span>\n          }\n        }\n      },\n      <span class=\"cm-property\">\"then\"</span>: {\n        <span class=\"cm-property\">\"properties\"</span>: {\n          <span class=\"cm-property\">\"data\"</span>: {\n            <span class=\"cm-property\">\"byteArray\"</span>: <span class=\"cm-atom\">true</span>,\n            <span class=\"cm-property\">\"minItems\"</span>: <span class=\"cm-number\">33</span>,\n            <span class=\"cm-property\">\"maxItems\"</span>: <span class=\"cm-number\">33</span>\n          }\n        }\n      }\n    },\n    {\n      <span class=\"cm-property\">\"if\"</span>: {\n        <span class=\"cm-property\">\"properties\"</span>: {\n          <span class=\"cm-property\">\"type\"</span>: {\n            <span class=\"cm-property\">\"const\"</span>: <span class=\"cm-number\">1</span>\n          }\n        }\n      },\n      <span class=\"cm-property\">\"then\"</span>: {\n        <span class=\"cm-property\">\"properties\"</span>: {\n          <span class=\"cm-property\">\"data\"</span>: {\n            <span class=\"cm-property\">\"byteArray\"</span>: <span class=\"cm-atom\">true</span>,\n            <span class=\"cm-property\">\"minItems\"</span>: <span class=\"cm-number\">48</span>,\n            <span class=\"cm-property\">\"maxItems\"</span>: <span class=\"cm-number\">48</span>\n          }\n        }\n      }\n    }\n  ],\n  <span class=\"cm-property\">\"required\"</span>: [\n    <span class=\"cm-string\">\"id\"</span>,\n    <span class=\"cm-string\">\"type\"</span>,\n    <span class=\"cm-string\">\"data\"</span>\n  ],\n  <span class=\"cm-property\">\"additionalProperties\"</span>: <span class=\"cm-atom\">false</span>\n}</span>\n</code></pre>\n<h3 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-public-key-id\"></div>Public Key <code>id</code><a class=\"fa fa-anchor\" href=\"#section-public-key-id\"></a></h3>\n<p>Each public key in an identity&#39;s <code>publicKeys</code> array must be assigned a unique index number (<code>id</code>).</p>\n<h3 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-public-key-type\"></div>Public Key <code>type</code><a class=\"fa fa-anchor\" href=\"#section-public-key-type\"></a></h3>\n<p>The <code>type</code> field indicates the algorithm used to derive the key.</p>\n<div class=\"marked-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td>ECDSA (default)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td>BLS (currently unused)</td>\n</tr>\n</tbody>\n</table></div>\n<h3 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-public-key-data\"></div>Public Key <code>data</code><a class=\"fa fa-anchor\" href=\"#section-public-key-data\"></a></h3>\n<p>The <code>data</code> field contains the compressed public key.</p>\n<h4 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-example-data-encode-decode\"></div>Example data encode/decode<a class=\"fa fa-anchor\" href=\"#section-example-data-encode-decode\"></a></h4>\n<p><strong>Encode</strong></p>\n<pre><code class=\"lang-javascript\"><span class='cm-s-neo'><span class=\"cm-comment\">&#47;&#47; From the JavaScript reference implementation (js-dpp)</span>\n<span class=\"cm-comment\">&#47;&#47; AbstractStateTransitionIdentitySigned.js</span>\n<span class=\"cm-variable\">pubKeyBase</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">new</span> <span class=\"cm-variable\">PublicKey</span>({\n  <span class=\"cm-meta\">...</span><span class=\"cm-variable\">privateKeyModel</span>.<span class=\"cm-property\">toPublicKey</span>().<span class=\"cm-property\">toObject</span>(),\n  <span class=\"cm-property\">compressed</span>: <span class=\"cm-atom\">true</span>,\n})\n  .<span class=\"cm-property\">toBuffer</span>();</span>\n</code></pre>\n<p><strong>Decode</strong></p>\n<pre><code class=\"lang-javascript\"><span class='cm-s-neo'><span class=\"cm-comment\">&#47;&#47; From the JavaScript reference implementation (js-dpp)</span>\n<span class=\"cm-comment\">&#47;&#47; validatePublicKeysFactory.js</span>\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">dataHex</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">rawPublicKey</span>.<span class=\"cm-property\">data</span>.<span class=\"cm-property\">toString</span>(<span class=\"cm-string\">'hex'</span>);</span>\n</code></pre>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-identity-balance\"></div>Identity balance<a class=\"fa fa-anchor\" href=\"#section-identity-balance\"></a></h2>\n<p>Each identity has a balance of credits established by value locked via a layer 1 lock transaction. This credit balance is used to pay the fees associated with state transitions.</p>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-identity-creation\"></div>Identity Creation<a class=\"fa fa-anchor\" href=\"#section-identity-creation\"></a></h1>\n<p>Identities are created on the platform by submitting the identity information in an identity create state transition.</p>\n<div class=\"marked-table\"><table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>protocolVersion</td>\n<td>integer</td>\n<td>The identity create protocol version (currently <code>0</code>)</td>\n</tr>\n<tr>\n<td>type</td>\n<td>integer</td>\n<td>State transition type (<code>2</code> for identity create)</td>\n</tr>\n<tr>\n<td>lockedOutPoint</td>\n<td>array of bytes</td>\n<td>Lock <a href=\"[https://dashcore.readme.io/docs/core-additional-resources-glossary#section-outpoint](https://dashcore.readme.io/docs/core-additional-resources-glossary#section-outpoint\">outpoint</a>) from the layer 1 locking transaction (36 bytes)</td>\n</tr>\n<tr>\n<td>publicKeys</td>\n<td>array of keys</td>\n<td><a href=\"#identity-publickeys\">Public key(s)</a> associated with the identity</td>\n</tr>\n<tr>\n<td>signature</td>\n<td>array of bytes</td>\n<td>Signature of state transition data (65 bytes)</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>Note:</strong> The lock transaction that creates the <code>lockedOutPoint</code> is not covered in this document. The preliminary design simply uses an <code>OP_RETURN</code> output.</p>\n<p>Each identity must comply with this JSON-Schema definition established in <a href=\"https://github.com/dashevo/js-dpp/blob/v0.16.0/schema/identity/stateTransition/identityCreate.json\">js-dpp</a>:</p>\n<pre><code class=\"lang-json\"><span class='cm-s-neo'>{\n  <span class=\"cm-property\">\"$schema\"</span>: <span class=\"cm-string\">\"http:&#47;&#47;json-schema.org&#47;draft-07&#47;schema\"</span>,\n  <span class=\"cm-property\">\"properties\"</span>: {\n    <span class=\"cm-property\">\"protocolVersion\"</span>: {\n      <span class=\"cm-property\">\"type\"</span>: <span class=\"cm-string\">\"integer\"</span>,\n      <span class=\"cm-property\">\"minimum\"</span>: <span class=\"cm-number\">0</span>,\n      <span class=\"cm-property\">\"maximum\"</span>: <span class=\"cm-number\">0</span>,\n      <span class=\"cm-property\">\"$comment\"</span>: <span class=\"cm-string\">\"Maximum is the latest Identity Create Transition protocol version\"</span>\n    },\n    <span class=\"cm-property\">\"type\"</span>: {\n      <span class=\"cm-property\">\"type\"</span>: <span class=\"cm-string\">\"integer\"</span>,\n      <span class=\"cm-property\">\"const\"</span>: <span class=\"cm-number\">2</span>\n    },\n    <span class=\"cm-property\">\"lockedOutPoint\"</span>: {\n      <span class=\"cm-property\">\"type\"</span>: <span class=\"cm-string\">\"array\"</span>,\n      <span class=\"cm-property\">\"byteArray\"</span>: <span class=\"cm-atom\">true</span>,\n      <span class=\"cm-property\">\"minItems\"</span>: <span class=\"cm-number\">36</span>,\n      <span class=\"cm-property\">\"maxItems\"</span>: <span class=\"cm-number\">36</span>\n    },\n    <span class=\"cm-property\">\"publicKeys\"</span>: {\n      <span class=\"cm-property\">\"type\"</span>: <span class=\"cm-string\">\"array\"</span>,\n      <span class=\"cm-property\">\"minItems\"</span>: <span class=\"cm-number\">1</span>,\n      <span class=\"cm-property\">\"maxItems\"</span>: <span class=\"cm-number\">10</span>,\n      <span class=\"cm-property\">\"uniqueItems\"</span>: <span class=\"cm-atom\">true</span>\n    },\n    <span class=\"cm-property\">\"signature\"</span>: {\n      <span class=\"cm-property\">\"type\"</span>: <span class=\"cm-string\">\"array\"</span>,\n      <span class=\"cm-property\">\"byteArray\"</span>: <span class=\"cm-atom\">true</span>,\n      <span class=\"cm-property\">\"minItems\"</span>: <span class=\"cm-number\">65</span>,\n      <span class=\"cm-property\">\"maxItems\"</span>: <span class=\"cm-number\">65</span>\n    }\n  },\n  <span class=\"cm-property\">\"additionalProperties\"</span>: <span class=\"cm-atom\">false</span>,\n  <span class=\"cm-property\">\"required\"</span>: [\n    <span class=\"cm-string\">\"protocolVersion\"</span>,\n    <span class=\"cm-string\">\"type\"</span>,\n    <span class=\"cm-string\">\"lockedOutPoint\"</span>,\n    <span class=\"cm-string\">\"publicKeys\"</span>,\n    <span class=\"cm-string\">\"signature\"</span>\n  ]\n}</span>\n</code></pre>\n<p><strong>Example State Transition</strong></p>\n<pre><code class=\"lang-json\"><span class='cm-s-neo'>\n{\n  <span class=\"cm-property\">\"protocolVersion\"</span>: <span class=\"cm-number\">0</span>,\n  <span class=\"cm-property\">\"type\"</span>: <span class=\"cm-number\">2</span>,\n  <span class=\"cm-property\">\"signature\"</span>: <span class=\"cm-string\">\"ILoF6DKZPpDMJTlBjwiY05v7&#47;3LEcJcLlwgmg6wvltT7St15F4oesX8cd+yNtosIQ6rgCx7o3m+OeJM49HWk880=\"</span>,\n  <span class=\"cm-property\">\"lockedOutPoint\"</span>: <span class=\"cm-string\">\"kSALb&#47;mPrS7H83szmJ5EJYIKUPI1QFXN9Zv60lCSvIMAAAAA\"</span>,\n  <span class=\"cm-property\">\"publicKeys\"</span>: [\n    {\n      <span class=\"cm-property\">\"id\"</span>: <span class=\"cm-number\">0</span>,\n      <span class=\"cm-property\">\"type\"</span>: <span class=\"cm-number\">0</span>,\n      <span class=\"cm-property\">\"data\"</span>: <span class=\"cm-string\">\"A3imAPz+S1aP+keuUYpRvq9JD3Vn4+0nN5UydeV5JiIP\"</span>\n    }\n  ]\n}</span>\n</code></pre>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-identity-top-up\"></div>Identity TopUp<a class=\"fa fa-anchor\" href=\"#section-identity-top-up\"></a></h1>\n<p>Identity credit balances are increased by submitting the topup information in an identity topup state transition.</p>\n<div class=\"marked-table\"><table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>protocolVersion</td>\n<td>integer</td>\n<td>The identity topup protocol version (currently <code>0</code>)</td>\n</tr>\n<tr>\n<td>type</td>\n<td>integer</td>\n<td>State transition type (<code>3</code> for identity topup)</td>\n</tr>\n<tr>\n<td>lockedOutPoint</td>\n<td>array of bytes</td>\n<td>Lock <a href=\"[https://dashcore.readme.io/docs/core-additional-resources-glossary#section-outpoint](https://dashcore.readme.io/docs/core-additional-resources-glossary#section-outpoint\">outpoint</a>) from the layer 1 locking transaction (36 bytes)</td>\n</tr>\n<tr>\n<td>identityId</td>\n<td>array of bytes</td>\n<td>An <a href=\"#identity-id\">Identity ID</a> for the identity receiving the topup (can be any identity) (32 bytes)</td>\n</tr>\n<tr>\n<td>signature</td>\n<td>array of bytes</td>\n<td>Signature of state transition data (65 bytes)</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>Note:</strong> The lock transaction that creates the <code>lockedOutPoint</code> is not covered in this document. The preliminary design simply uses an <code>OP_RETURN</code> output.</p>\n<p>Each identity must comply with this JSON-Schema definition established in <a href=\"https://github.com/dashevo/js-dpp/blob/v0.16.0/schema/identity/stateTransition/identityTopUp.json\">js-dpp</a>:</p>\n<pre><code class=\"lang-json\"><span class='cm-s-neo'>{\n  <span class=\"cm-property\">\"$schema\"</span>: <span class=\"cm-string\">\"http:&#47;&#47;json-schema.org&#47;draft-07&#47;schema\"</span>,\n  <span class=\"cm-property\">\"properties\"</span>: {\n    <span class=\"cm-property\">\"protocolVersion\"</span>: {\n      <span class=\"cm-property\">\"type\"</span>: <span class=\"cm-string\">\"integer\"</span>,\n      <span class=\"cm-property\">\"minimum\"</span>: <span class=\"cm-number\">0</span>,\n      <span class=\"cm-property\">\"maximum\"</span>: <span class=\"cm-number\">0</span>,\n      <span class=\"cm-property\">\"$comment\"</span>: <span class=\"cm-string\">\"Maximum is the latest Identity TopUp Transition protocol version\"</span>\n    },\n    <span class=\"cm-property\">\"type\"</span>: {\n      <span class=\"cm-property\">\"type\"</span>: <span class=\"cm-string\">\"integer\"</span>,\n      <span class=\"cm-property\">\"const\"</span>: <span class=\"cm-number\">3</span>\n    },\n    <span class=\"cm-property\">\"lockedOutPoint\"</span>: {\n      <span class=\"cm-property\">\"type\"</span>: <span class=\"cm-string\">\"array\"</span>,\n      <span class=\"cm-property\">\"byteArray\"</span>: <span class=\"cm-atom\">true</span>,\n      <span class=\"cm-property\">\"minItems\"</span>: <span class=\"cm-number\">36</span>,\n      <span class=\"cm-property\">\"maxItems\"</span>: <span class=\"cm-number\">36</span>\n    },\n    <span class=\"cm-property\">\"identityId\"</span>: {\n      <span class=\"cm-property\">\"type\"</span>: <span class=\"cm-string\">\"array\"</span>,\n      <span class=\"cm-property\">\"byteArray\"</span>: <span class=\"cm-atom\">true</span>,\n      <span class=\"cm-property\">\"minItems\"</span>: <span class=\"cm-number\">32</span>,\n      <span class=\"cm-property\">\"maxItems\"</span>: <span class=\"cm-number\">32</span>,\n      <span class=\"cm-property\">\"contentMediaType\"</span>: <span class=\"cm-string\">\"application&#47;x.dash.dpp.identifier\"</span>\n    },\n    <span class=\"cm-property\">\"signature\"</span>: {\n      <span class=\"cm-property\">\"type\"</span>: <span class=\"cm-string\">\"array\"</span>,\n      <span class=\"cm-property\">\"byteArray\"</span>: <span class=\"cm-atom\">true</span>,\n      <span class=\"cm-property\">\"minItems\"</span>: <span class=\"cm-number\">65</span>,\n      <span class=\"cm-property\">\"maxItems\"</span>: <span class=\"cm-number\">65</span>\n    }\n  },\n  <span class=\"cm-property\">\"additionalProperties\"</span>: <span class=\"cm-atom\">false</span>,\n  <span class=\"cm-property\">\"required\"</span>: [\n    <span class=\"cm-string\">\"protocolVersion\"</span>,\n    <span class=\"cm-string\">\"type\"</span>,\n    <span class=\"cm-string\">\"lockedOutPoint\"</span>,\n    <span class=\"cm-string\">\"identityId\"</span>,\n    <span class=\"cm-string\">\"signature\"</span>\n  ]\n}</span>\n</code></pre>\n<p><strong>Example State Transition</strong></p>\n<pre><code class=\"lang-json\"><span class='cm-s-neo'>{\n  <span class=\"cm-property\">\"protocolVersion\"</span>: <span class=\"cm-number\">0</span>,\n  <span class=\"cm-property\">\"type\"</span>: <span class=\"cm-number\">3</span>,\n  <span class=\"cm-property\">\"signature\"</span>: <span class=\"cm-string\">\"IGsZ6qDhSvrACTo+PpAvmWrlnnSzmKjNJVPBjXAMweFBVtPDPdDHBNomsEzzPo9BHPMPCTK9882omofGFot41iY=\"</span>,\n  <span class=\"cm-property\">\"identityId\"</span>: <span class=\"cm-string\">\"7NUbPf231ixt1kVBQsBvSMMBxd7AgPad8KtdtfFGhXDP\"</span>,\n  <span class=\"cm-property\">\"lockedOutPoint\"</span>: <span class=\"cm-string\">\"KSP1RVZdVG1R5OkaK8LTjccTC6eaWTWiAt+6YMp5fzwAAAAA\"</span>\n}</span>\n</code></pre>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-identity-state-transition-signing\"></div>Identity State Transition Signing<a class=\"fa fa-anchor\" href=\"#section-identity-state-transition-signing\"></a></h1>\n<p><strong>Note:</strong> The identity create and topup state transition signatures are unique in that they must be signed by the private key used in the layer 1 locking transaction. All other state transitions will be signed by a private key of the identity submitting them.</p>\n<p>The process to sign an identity create state transition consists of the following steps:</p>\n<ol>\n<li  value=\"1\">Canonical CBOR encode the state transition data - this include all ST fields except the <code>signature</code></li><li  value=\"2\">Sign the encoded data with private key associated with a lock transaction public key</li><li  value=\"3\">Set the state transition <code>signature</code> to the value of the signature created in the previous step</li></ol>\n<h3 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-code-snipits-related-to-signing\"></div>Code snipits related to signing<a class=\"fa fa-anchor\" href=\"#section-code-snipits-related-to-signing\"></a></h3>\n<pre><code class=\"lang-javascript\"><span class='cm-s-neo'><span class=\"cm-comment\">&#47;&#47; From js-dpp</span>\n<span class=\"cm-comment\">&#47;&#47; AbstractStateTransition.js</span>\n<span class=\"cm-comment\">&#47;&#47; toBuffer encodes the object (excluding the signature-related fields) with canonical CBOR</span>\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">data</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">this</span>.<span class=\"cm-property\">toBuffer</span>({ <span class=\"cm-property\">skipSignature</span>: <span class=\"cm-atom\">true</span> });\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">privateKeyModel</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">new</span> <span class=\"cm-variable\">PrivateKey</span>(<span class=\"cm-variable\">privateKey</span>);\n\n<span class=\"cm-keyword\">this</span>.<span class=\"cm-property\">setSignature</span>(<span class=\"cm-variable\">sign</span>(<span class=\"cm-variable\">data</span>, <span class=\"cm-variable\">privateKeyModel</span>));\n\n<span class=\"cm-comment\">&#47;&#47; From dashcore-lib</span>\n<span class=\"cm-comment\">&#47;&#47; signer.js</span>\n<span class=\"cm-comment\">&#47;**</span>\n<span class=\"cm-comment\">* @param {Buffer} data</span>\n<span class=\"cm-comment\">* @param {string|PrivateKey} privateKey</span>\n<span class=\"cm-comment\">* @return {Buffer}</span>\n<span class=\"cm-comment\">*&#47;</span>\n<span class=\"cm-keyword\">function</span> <span class=\"cm-def\">sign</span>(<span class=\"cm-def\">data</span>, <span class=\"cm-def\">privateKey</span>) {\n    <span class=\"cm-keyword\">var</span> <span class=\"cm-def\">hash</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">doubleSha</span>(<span class=\"cm-variable-2\">data</span>);\n    <span class=\"cm-keyword\">return</span> <span class=\"cm-variable\">signHash</span>(<span class=\"cm-variable-2\">hash</span>, <span class=\"cm-variable-2\">privateKey</span>);\n}\n\n<span class=\"cm-comment\">&#47;**</span>\n<span class=\"cm-comment\">* Sign hash.</span>\n<span class=\"cm-comment\">* @param {Buffer} hash</span>\n<span class=\"cm-comment\">* @param {string|PrivateKey} privateKey</span>\n<span class=\"cm-comment\">* @return {Buffer} - 65-bit compact signature</span>\n<span class=\"cm-comment\">*&#47;</span>\n<span class=\"cm-keyword\">function</span> <span class=\"cm-def\">signHash</span>(<span class=\"cm-def\">hash</span>, <span class=\"cm-def\">privateKey</span>) {\n    <span class=\"cm-keyword\">if</span> (<span class=\"cm-keyword\">typeof</span> <span class=\"cm-variable-2\">privateKey</span> <span class=\"cm-operator\">===</span> <span class=\"cm-string\">'string'</span>) {\n        <span class=\"cm-variable-2\">privateKey</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">new</span> <span class=\"cm-variable\">PrivateKey</span>(<span class=\"cm-variable-2\">privateKey</span>);\n    }\n\n    <span class=\"cm-keyword\">var</span> <span class=\"cm-def\">ecdsa</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">new</span> <span class=\"cm-variable\">ECDSA</span>();\n    <span class=\"cm-variable-2\">ecdsa</span>.<span class=\"cm-property\">hashbuf</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable-2\">hash</span>;\n    <span class=\"cm-variable-2\">ecdsa</span>.<span class=\"cm-property\">privkey</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable-2\">privateKey</span>;\n    <span class=\"cm-variable-2\">ecdsa</span>.<span class=\"cm-property\">pubkey</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable-2\">privateKey</span>.<span class=\"cm-property\">toPublicKey</span>();\n    <span class=\"cm-variable-2\">ecdsa</span>.<span class=\"cm-property\">signRandomK</span>();\n    <span class=\"cm-variable-2\">ecdsa</span>.<span class=\"cm-property\">calci</span>();\n    <span class=\"cm-keyword\">return</span> <span class=\"cm-variable-2\">ecdsa</span>.<span class=\"cm-property\">sig</span>.<span class=\"cm-property\">toCompact</span>();\n}</span>\n</code></pre>\n\n</div>", 
 "user": "5b8400d7185d5e00036dcc3b", 
 "isReference": false, 
 "slug": "platform-protocol-reference-identity", 
 "link_url": "", 
 "project": "5bda01cad172e200499a20a9", 
 "__v": 0, 
 "_id": "5f8f3fa8b257f9003428ff90", 
 "order": 1, 
 "updates": []
}