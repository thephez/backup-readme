{
 "metadata": {
  "image": [],
  "title": "",
  "description": "",
  "keywords": "",
  "robots": "index"
 },
 "api": {
  "method": "get",
  "url": "",
  "auth": "required",
  "results": {
   "codes": [
    {
     "name": "",
     "code": "{}",
     "language": "json",
     "status": 200
    },
    {
     "name": "",
     "code": "{}",
     "language": "json",
     "status": 400
    }
   ]
  },
  "params": [],
  "examples": {
   "codes": []
  }
 },
 "next": {
  "description": "",
  "pages": []
 },
 "algolia": {
  "recordCount": 14,
  "publishPending": false,
  "translationFailure": false,
  "updatedAt": "2023-09-06T16:36:42.546Z"
 },
 "title": "State Transition",
 "icon": "",
 "updates": [],
 "type": "basic",
 "slug": "platform-protocol-reference-state-transition",
 "excerpt": "",
 "body": "# State Transition Overview\n\n State transitions are the means for submitting data that creates, updates, or deletes platform data and results in a change to a new state. Each one must contain:\n\n- [Common fields](#common-fields) present in all state transitions\n- Additional fields specific to the type of action the state transition provides (e.g. [creating an identity](platform-protocol-reference-identity#identity-creation))\n\n## Fees\n\nState transition fees are paid via the credits established when an identity is created. Credits are created at a rate of [1000 credits/satoshi](https://github.com/dashpay/platform/blob/v0.24.5/packages/rs-dpp/src/identity/credits_converter.rs#L3). Fees for actions vary based on parameters related to storage and computational effort that are defined in [rs-dpp](https://github.com/dashpay/platform/blob/v0.24.5/packages/rs-dpp/src/state_transition/fee/constants.rs).\n\n## Size\n\nAll serialized data (including state transitions) is limited to a maximum size of [16 KB](https://github.com/dashpay/platform/blob/v0.24.5/packages/rs-dpp/src/util/serializer.rs#L8).\n\n## Common Fields\n\nAll state transitions include the following fields:\n\n| Field           | Type           | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n| --------------- | -------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| protocolVersion | integer        | The platform protocol version (currently `1`)                                                                                                                                                                                                                                                                                                                                                                                                                                         |\n| type            | integer        | State transition type:<br>`0` - [data contract create](platform-protocol-reference-data-contract#data-contract-creation)<br>`1` - [documents batch](platform-protocol-reference-document#document-submission)<br>`2` - [identity create](platform-protocol-reference-identity#identity-creation)<br>`3` - [identity topup](identity.md#identity-topup)<br>`4` - [data contract update](data-contract.md#data-contract-update)<br>`5` - [identity update](identity.md#identity-update) |\n| signature       | array of bytes | Signature of state transition data (65 bytes)                                                                                                                                                                                                                                                                                                                                                                                                                                         |\n\nAdditionally, all state transitions except the identity create and topup state transitions include:\n\n| Field                | Type    | Description                                                                                                                               |\n| -------------------- | ------- | ----------------------------------------------------------------------------------------------------------------------------------------- |\n| signaturePublicKeyId | integer | The `id` of the [identity public key](platform-protocol-reference-identity#identity-publickeys) that signed the state transition (`=> 0`) |\n\n# State Transition Types\n\n## Data Contract Create\n\n| Field        | Type                                                                                   | Description                                                                                |\n| ------------ | -------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------ |\n| dataContract | [data contract object](platform-protocol-reference-data-contract#data-contract-object) | Object containing valid [data contract](platform-protocol-reference-data-contract) details |\n| entropy      | array of bytes                                                                         | Entropy used to generate the data contract ID (32 bytes)                                   |\n\nMore detailed information about the `dataContract` object can be found in the [data contract section](platform-protocol-reference-data-contract).\n\n### Entropy Generation\n\nEntropy is included in [Data Contracts](platform-protocol-reference-data-contract#data-contract-creation) and [Documents](platform-protocol-reference-document#document-create-transition).\n\n```rust\n// From the Rust reference implementation (rs-dpp)\n// entropyGenerator.js\nfn generate(&self) -> anyhow::Result<[u8; 32]> {\n  let mut buffer = [0u8; 32];\n  getrandom(&mut buffer).context(\"generating entropy failed\")?;\n  Ok(buffer)\n}\n```\n\n## Data Contract Update\n\n| Field        | Type                                                                                   | Description                                                                                |\n| ------------ | -------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------ |\n| dataContract | [data contract object](platform-protocol-reference-data-contract#data-contract-object) | Object containing valid [data contract](platform-protocol-reference-data-contract) details |\n\nMore detailed information about the `dataContract` object can be found in the [data contract section](platform-protocol-reference-data-contract).\n\n## Documents Batch\n\n| Field       | Type                        | Description                                                                            |\n| ----------- | --------------------------- | -------------------------------------------------------------------------------------- |\n| ownerId     | array of bytes              | [Identity](platform-protocol-reference-identity) submitting the document(s) (32 bytes) |\n| transitions | array of transition objects | Document `create`, `replace`, or `delete` transitions (up to 10 objects)               |\n\nMore detailed information about the `transitions` array can be found in the [document section](platform-protocol-reference-document).\n\n## Identity Create\n\n| Field          | Type           | Description                                                                                                                                          |\n| -------------- | -------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------- |\n| assetLockProof | array of bytes | Lock [outpoint](https://docs.dash.org/projects/core/en/stable/docs/resources/glossary.html#outpoint) from the layer 1 locking transaction (36 bytes) |\n| publicKeys     | array of keys  | [Public key(s)](platform-protocol-reference-identity#identity-publickeys) associated with the identity (maximum number of keys: `10`)                |\n\nMore detailed information about the `publicKeys` object can be found in the [identity section](platform-protocol-reference-identity).\n\n## Identity TopUp\n\n| Field          | Type           | Description                                                                                                                                          |\n| -------------- | -------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------- |\n| assetLockProof | array of bytes | Lock [outpoint](https://docs.dash.org/projects/core/en/stable/docs/resources/glossary.html#outpoint) from the layer 1 locking transaction (36 bytes) |\n| identityId     | array of bytes | An [Identity ID](platform-protocol-reference-identity#identity-id) for the identity receiving the topup (can be any identity) (32 bytes)             |\n\n## Identity Update\n\n| Field                | Type                 | Description                                                                                                                                                                                             |\n| -------------------- | -------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| identityId           | array of bytes       | The [Identity ID](platform-protocol-reference-identity#identity-id) for the identity being updated (32 bytes)                                                                                           |\n| revision             | integer              | Identity update revision. Used for optimistic concurrency control. Incremented by one with each new update so that the update will fail if the underlying data is modified between reading and writing. |\n| addPublicKeys        | array of public keys | (Optional) Array of up to 10 new public keys to add to the identity. Required if adding keys.                                                                                                           |\n| disablePublicKeys    | array of integers    | (Optional) Array of up to 10 existing identity public key ID(s) to disable for the identity. Required if disabling keys.                                                                                |\n| publicKeysDisabledAt | integer              | (Optional) Timestamp when keys were disabled. Required if `disablePublicKeys` is present.                                                                                                               |\n\n# State Transition Signing\n\nState transitions must be signed by a private key associated with the identity creating the state transition. Since v0.23, each identity must have at least two keys: a primary key (security level `0`) that is only used when signing identity update state transitions and an additional key (security level `2`) that is used to sign all other state transitions.\n\nThe process to sign a state transition consists of the following steps:\n\n1. Canonical CBOR encode the state transition data - this include all ST fields except the `signature` and `signaturePublicKeyId`\n2. Sign the encoded data with a private key associated with the identity creating the state transition\n3. Set the state transition `signature` to the value of the signature created in the previous step\n4. For all state transitions _other than identity create or topup_, set the state transition`signaturePublicKeyId` to the [public key `id`](platform-protocol-reference-identity#public-key-id) corresponding to the key used to sign\n\n## Signature Validation\n\nThe `signature` validation (see [js-dpp](https://github.com/dashpay/platform/blob/v0.24.5/packages/js-dpp/test/unit/stateTransition/validation/validateStateTransitionIdentitySignatureFactory.spec.js)) verifies that:\n\n1. The identity exists\n2. The identity has a public key\n3. The identity's public key is of type `ECDSA`\n4. The state transition signature is valid\n\nThe example test output below shows the necessary criteria:\n\n```text\nvalidateStateTransitionIdentitySignatureFactory\n  \u2714 should pass properly signed state transition\n  \u2714 should return invalid result if owner id doesn't exist\n  \u2714 should return MissingPublicKeyError if the identity doesn't have a matching public key\n  \u2714 should return InvalidIdentityPublicKeyTypeError if type is not exist\n  \u2714 should return InvalidStateTransitionSignatureError if signature is invalid\n  Consensus errors\n    \u2714 should return InvalidSignaturePublicKeySecurityLevelConsensusError if InvalidSignaturePublicKeySecurityLevelError was thrown\n    \u2714 should return PublicKeySecurityLevelNotMetConsensusError if PublicKeySecurityLevelNotMetError was thrown\n    \u2714 should return WrongPublicKeyPurposeConsensusError if WrongPublicKeyPurposeError was thrown\n    \u2714 should return PublicKeyIsDisabledConsensusError if PublicKeyIsDisabledError was thrown\n    \u2714 should return InvalidStateTransitionSignatureError if DPPError was thrown\n    \u2714 should throw unknown error\n    \u2714 should not verify signature on dry run\n```",
 "order": 3,
 "isReference": false,
 "deprecated": false,
 "hidden": false,
 "sync_unique": "",
 "link_url": "",
 "link_external": false,
 "reusableContent": [],
 "previousSlug": "reference-state-transition",
 "slugUpdatedAt": "2020-11-17T18:27:29.245Z",
 "revision": 3,
 "_id": "64f8a9df750465004742adbc",
 "pendingAlgoliaPublish": false,
 "createdAt": "2020-09-02T14:22:06.081Z",
 "updatedAt": "2023-08-15T20:37:23.212Z",
 "user": "5b8400d7185d5e00036dcc3b",
 "category": "64f8a9df750465004742ad73",
 "project": "5bda01cad172e200499a20a9",
 "version": "64f8a9df750465004742ae1d",
 "__v": 0,
 "parentDoc": null,
 "isApi": false,
 "id": "64f8a9df750465004742adbc",
 "body_html": "# State Transition Overview\n\n State transitions are the means for submitting data that creates, updates, or deletes platform data and results in a change to a new state. Each one must contain:\n\n- [Common fields](#common-fields) present in all state transitions\n- Additional fields specific to the type of action the state transition provides (e.g. [creating an identity](platform-protocol-reference-identity#identity-creation))\n\n## Fees\n\nState transition fees are paid via the credits established when an identity is created. Credits are created at a rate of [1000 credits/satoshi](https://github.com/dashpay/platform/blob/v0.24.5/packages/rs-dpp/src/identity/credits_converter.rs#L3). Fees for actions vary based on parameters related to storage and computational effort that are defined in [rs-dpp](https://github.com/dashpay/platform/blob/v0.24.5/packages/rs-dpp/src/state_transition/fee/constants.rs).\n\n## Size\n\nAll serialized data (including state transitions) is limited to a maximum size of [16 KB](https://github.com/dashpay/platform/blob/v0.24.5/packages/rs-dpp/src/util/serializer.rs#L8).\n\n## Common Fields\n\nAll state transitions include the following fields:\n\n| Field           | Type           | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n| --------------- | -------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| protocolVersion | integer        | The platform protocol version (currently `1`)                                                                                                                                                                                                                                                                                                                                                                                                                                         |\n| type            | integer        | State transition type:<br>`0` - [data contract create](platform-protocol-reference-data-contract#data-contract-creation)<br>`1` - [documents batch](platform-protocol-reference-document#document-submission)<br>`2` - [identity create](platform-protocol-reference-identity#identity-creation)<br>`3` - [identity topup](identity.md#identity-topup)<br>`4` - [data contract update](data-contract.md#data-contract-update)<br>`5` - [identity update](identity.md#identity-update) |\n| signature       | array of bytes | Signature of state transition data (65 bytes)                                                                                                                                                                                                                                                                                                                                                                                                                                         |\n\nAdditionally, all state transitions except the identity create and topup state transitions include:\n\n| Field                | Type    | Description                                                                                                                               |\n| -------------------- | ------- | ----------------------------------------------------------------------------------------------------------------------------------------- |\n| signaturePublicKeyId | integer | The `id` of the [identity public key](platform-protocol-reference-identity#identity-publickeys) that signed the state transition (`=> 0`) |\n\n# State Transition Types\n\n## Data Contract Create\n\n| Field        | Type                                                                                   | Description                                                                                |\n| ------------ | -------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------ |\n| dataContract | [data contract object](platform-protocol-reference-data-contract#data-contract-object) | Object containing valid [data contract](platform-protocol-reference-data-contract) details |\n| entropy      | array of bytes                                                                         | Entropy used to generate the data contract ID (32 bytes)                                   |\n\nMore detailed information about the `dataContract` object can be found in the [data contract section](platform-protocol-reference-data-contract).\n\n### Entropy Generation\n\nEntropy is included in [Data Contracts](platform-protocol-reference-data-contract#data-contract-creation) and [Documents](platform-protocol-reference-document#document-create-transition).\n\n```rust\n// From the Rust reference implementation (rs-dpp)\n// entropyGenerator.js\nfn generate(&self) -> anyhow::Result<[u8; 32]> {\n  let mut buffer = [0u8; 32];\n  getrandom(&mut buffer).context(\"generating entropy failed\")?;\n  Ok(buffer)\n}\n```\n\n## Data Contract Update\n\n| Field        | Type                                                                                   | Description                                                                                |\n| ------------ | -------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------ |\n| dataContract | [data contract object](platform-protocol-reference-data-contract#data-contract-object) | Object containing valid [data contract](platform-protocol-reference-data-contract) details |\n\nMore detailed information about the `dataContract` object can be found in the [data contract section](platform-protocol-reference-data-contract).\n\n## Documents Batch\n\n| Field       | Type                        | Description                                                                            |\n| ----------- | --------------------------- | -------------------------------------------------------------------------------------- |\n| ownerId     | array of bytes              | [Identity](platform-protocol-reference-identity) submitting the document(s) (32 bytes) |\n| transitions | array of transition objects | Document `create`, `replace`, or `delete` transitions (up to 10 objects)               |\n\nMore detailed information about the `transitions` array can be found in the [document section](platform-protocol-reference-document).\n\n## Identity Create\n\n| Field          | Type           | Description                                                                                                                                          |\n| -------------- | -------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------- |\n| assetLockProof | array of bytes | Lock [outpoint](https://docs.dash.org/projects/core/en/stable/docs/resources/glossary.html#outpoint) from the layer 1 locking transaction (36 bytes) |\n| publicKeys     | array of keys  | [Public key(s)](platform-protocol-reference-identity#identity-publickeys) associated with the identity (maximum number of keys: `10`)                |\n\nMore detailed information about the `publicKeys` object can be found in the [identity section](platform-protocol-reference-identity).\n\n## Identity TopUp\n\n| Field          | Type           | Description                                                                                                                                          |\n| -------------- | -------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------- |\n| assetLockProof | array of bytes | Lock [outpoint](https://docs.dash.org/projects/core/en/stable/docs/resources/glossary.html#outpoint) from the layer 1 locking transaction (36 bytes) |\n| identityId     | array of bytes | An [Identity ID](platform-protocol-reference-identity#identity-id) for the identity receiving the topup (can be any identity) (32 bytes)             |\n\n## Identity Update\n\n| Field                | Type                 | Description                                                                                                                                                                                             |\n| -------------------- | -------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| identityId           | array of bytes       | The [Identity ID](platform-protocol-reference-identity#identity-id) for the identity being updated (32 bytes)                                                                                           |\n| revision             | integer              | Identity update revision. Used for optimistic concurrency control. Incremented by one with each new update so that the update will fail if the underlying data is modified between reading and writing. |\n| addPublicKeys        | array of public keys | (Optional) Array of up to 10 new public keys to add to the identity. Required if adding keys.                                                                                                           |\n| disablePublicKeys    | array of integers    | (Optional) Array of up to 10 existing identity public key ID(s) to disable for the identity. Required if disabling keys.                                                                                |\n| publicKeysDisabledAt | integer              | (Optional) Timestamp when keys were disabled. Required if `disablePublicKeys` is present.                                                                                                               |\n\n# State Transition Signing\n\nState transitions must be signed by a private key associated with the identity creating the state transition. Since v0.23, each identity must have at least two keys: a primary key (security level `0`) that is only used when signing identity update state transitions and an additional key (security level `2`) that is used to sign all other state transitions.\n\nThe process to sign a state transition consists of the following steps:\n\n1. Canonical CBOR encode the state transition data - this include all ST fields except the `signature` and `signaturePublicKeyId`\n2. Sign the encoded data with a private key associated with the identity creating the state transition\n3. Set the state transition `signature` to the value of the signature created in the previous step\n4. For all state transitions _other than identity create or topup_, set the state transition`signaturePublicKeyId` to the [public key `id`](platform-protocol-reference-identity#public-key-id) corresponding to the key used to sign\n\n## Signature Validation\n\nThe `signature` validation (see [js-dpp](https://github.com/dashpay/platform/blob/v0.24.5/packages/js-dpp/test/unit/stateTransition/validation/validateStateTransitionIdentitySignatureFactory.spec.js)) verifies that:\n\n1. The identity exists\n2. The identity has a public key\n3. The identity's public key is of type `ECDSA`\n4. The state transition signature is valid\n\nThe example test output below shows the necessary criteria:\n\n```text\nvalidateStateTransitionIdentitySignatureFactory\n  \u2714 should pass properly signed state transition\n  \u2714 should return invalid result if owner id doesn't exist\n  \u2714 should return MissingPublicKeyError if the identity doesn't have a matching public key\n  \u2714 should return InvalidIdentityPublicKeyTypeError if type is not exist\n  \u2714 should return InvalidStateTransitionSignatureError if signature is invalid\n  Consensus errors\n    \u2714 should return InvalidSignaturePublicKeySecurityLevelConsensusError if InvalidSignaturePublicKeySecurityLevelError was thrown\n    \u2714 should return PublicKeySecurityLevelNotMetConsensusError if PublicKeySecurityLevelNotMetError was thrown\n    \u2714 should return WrongPublicKeyPurposeConsensusError if WrongPublicKeyPurposeError was thrown\n    \u2714 should return PublicKeyIsDisabledConsensusError if PublicKeyIsDisabledError was thrown\n    \u2714 should return InvalidStateTransitionSignatureError if DPPError was thrown\n    \u2714 should throw unknown error\n    \u2714 should not verify signature on dry run\n```"
}