{
 "pendingAlgoliaPublish": false, 
 "parentDoc": null, 
 "excerpt": "", 
 "api": {
  "url": "", 
  "params": [], 
  "method": "get", 
  "auth": "required", 
  "results": {
   "codes": [
    {
     "status": 200, 
     "code": "{}", 
     "name": "", 
     "language": "json"
    }, 
    {
     "status": 400, 
     "code": "{}", 
     "name": "", 
     "language": "json"
    }
   ]
  }
 }, 
 "previousSlug": "reference-state-transition", 
 "updatedAt": "2021-07-13T21:43:21.332Z", 
 "id": "60e604b4762bd40057ebe128", 
 "sync_unique": "", 
 "isApi": false, 
 "createdAt": "2020-09-02T14:22:06.081Z", 
 "category": "60e604b4762bd40057ebe0df", 
 "title": "State Transition", 
 "next": {
  "description": "", 
  "pages": []
 }, 
 "version": "60e604b4762bd40057ebe142", 
 "slugUpdatedAt": "2020-11-17T18:27:29.245Z", 
 "hidden": false, 
 "type": "basic", 
 "metadata": {
  "image": [], 
  "description": "", 
  "title": ""
 }, 
 "body": "# State Transition Overview\n\n State transitions are the means for submitting data that creates, updates, or deletes platform data and results in a change to a new state. Each one must contain:\n\n - [Common fields](#common-fields) present in all state transitions\n - Additional fields specific to the type of action the state transition provides (e.g. [creating an identity](platform-protocol-reference-identity#identity-create-schema))\n\n## Fees\n\nState transition fees are paid via the credits established when an identity is created. Credits are created at a rate of [1000 credits/satoshi](https://github.com/dashevo/js-dpp/blob/v0.20.0/lib/identity/creditsConverter.js#L1). The current fee rate is [1 credit/byte](https://github.com/dashevo/js-dpp/blob/v0.20.0/lib/stateTransition/calculateStateTransitionFee.js#L1).\n\n## Size\n\nAll serialized data (including state transitions) is limited to a maximum size of [16 KB](https://github.com/dashevo/js-dpp/blob/v0.20.0/lib/util/serializer.js#L5).\n\n## Common Fields\n\nAll state transitions include the following fields:\n\n| Field | Type | Description|\n| - | - | - |\n| protocolVersion | integer | The platform protocol version (currently `0`) |\n| type | integer | State transition type:<br>`0` - [data contract](platform-protocol-reference-data-contract#data-contract-creation)<br>`1` - [documents batch](platform-protocol-reference-document#document-submission)<br>`2` - [identity create](platform-protocol-reference-identity#identity-creation)<br>`3` - [identity topup](platform-protocol-reference-identity#identity-topup) |\n| signature | array of bytes | Signature of state transition data (65 bytes) |\n\nAdditionally, all state transitions except the identity create and topup state transitions include:\n\n| Field | Type | Description|\n| - | - | - |\n| signaturePublicKeyId | integer | The `id` of the [identity public key](platform-protocol-reference-identity#identity-publickeys) that signed the state transition (`=> 0`)|\n\n# State Transition Types\n\n## Data Contract\n\n| Field | Type | Description|\n| - | - | - |\n| dataContract | [data contract object](platform-protocol-reference-data-contract#data-contract-object) | Object containing valid [data contract](platform-protocol-reference-data-contract) details |\n| entropy | array of bytes | Entropy used to generate the data contract ID (32 bytes) |\n\nMore detailed information about the `dataContract` object can be found in the [data contract section](platform-protocol-reference-data-contract).\n\n### Entropy Generation\n\nEntropy is included in [Data Contracts](platform-protocol-reference-data-contract#data-contract-creation) and [Documents](platform-protocol-reference-document#document-create-transition).\n\n```javascript\n// From the JavaScript reference implementation (js-dpp)\n// generateEntropy.js\nfunction generate() {\n  return crypto.randomBytes(32);\n}\n```\n\n## Documents Batch\n\n| Field | Type | Description|\n| - | - | - |\n| ownerId | array of bytes | [Identity](platform-protocol-reference-identity) submitting the document(s) (32 bytes) |\n| transitions | array of transition objects | Document `create`, `replace`, or `delete` transitions (up to 10 objects) |\n\nMore detailed information about the `transitions` array can be found in the [document section](platform-protocol-reference-document).\n\n## Identity Create\n\n| Field | Type | Description|\n| - | - | - |\n| lockedOutPoint | array of bytes | Lock [outpoint](https://dashcore.readme.io/docs/core-additional-resources-glossary#section-outpoint) from the layer 1 locking transaction (36 bytes) |\n| publicKeys | array of keys | [Public key(s)](platform-protocol-reference-identity#identity-publickeys) associated with the identity (maximum number of keys: `10`)|\n\nMore detailed information about the `publicKeys` object can be found in the [identity section](platform-protocol-reference-identity).\n\n## Identity TopUp\n\n| Field | Type | Description|\n| - | - | - |\n| lockedOutPoint | array of bytes | Lock [outpoint](https://dashcore.readme.io/docs/core-additional-resources-glossary#section-outpoint) from the layer 1 locking transaction (36 bytes) |\n| identityId | array of bytes | An [Identity ID](platform-protocol-reference-identity#identity-id) for the identity receiving the topup (can be any identity) (32 bytes) |\n\n# State Transition Signing\n\nState transitions must be signed by a private key associated with the identity creating the state transition.\n\nThe process to sign a state transition consists of the following steps:\n\n1. Canonical CBOR encode the state transition data - this include all ST fields except the `signature` and `signaturePublicKeyId`\n2. Sign the encoded data with a private key associated with the identity creating the state transition\n3. Set the state transition `signature` to the value of the signature created in the previous step\n4. For all state transitions _other than identity create or topup_, set the state transition`signaturePublicKeyId` to the [public key `id`](platform-protocol-reference-identity#public-key-id) corresponding to the key used to sign\n\n## Signature Validation\n\nThe `signature` validation (see [js-dpp](https://github.com/dashevo/js-dpp/blob/v0.20.0/test/unit/stateTransition/validation/validateStateTransitionSignatureFactory.spec.js)) verifies that:\n\n1. The identity has a public key\n2. The identity's public key is of type `ECDSA`\n3. The state transition signature is valid\n\nThe example test output below shows the necessary criteria:\n\n```text\nvalidateStateTransitionSignatureFactory\n  \u2713 should pass properly signed state transition\n  \u2713 should return MissingPublicKeyError if the identity doesn't have a matching public key\n  \u2713 should return InvalidIdentityPublicKeyTypeError if type is not ECDSA_SECP256K1\n  \u2713 should return InvalidStateTransitionSignatureError if signature is invalid\n```", 
 "link_external": false, 
 "body_html": "<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-state-transition-overview\"></div>State Transition Overview<a class=\"fa fa-anchor\" href=\"#section-state-transition-overview\"></a></h1>\n<p> State transitions are the means for submitting data that creates, updates, or deletes platform data and results in a change to a new state. Each one must contain:</p>\n<ul>\n<li ><a href=\"#common-fields\">Common fields</a> present in all state transitions</li><li >Additional fields specific to the type of action the state transition provides (e.g. <a href=\"platform-protocol-reference-identity#identity-create-schema\">creating an identity</a>)</li></ul>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-fees\"></div>Fees<a class=\"fa fa-anchor\" href=\"#section-fees\"></a></h2>\n<p>State transition fees are paid via the credits established when an identity is created. Credits are created at a rate of <a href=\"https://github.com/dashevo/js-dpp/blob/v0.20.0/lib/identity/creditsConverter.js#L1\">1000 credits/satoshi</a>. The current fee rate is <a href=\"https://github.com/dashevo/js-dpp/blob/v0.20.0/lib/stateTransition/calculateStateTransitionFee.js#L1\">1 credit/byte</a>.</p>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-size\"></div>Size<a class=\"fa fa-anchor\" href=\"#section-size\"></a></h2>\n<p>All serialized data (including state transitions) is limited to a maximum size of <a href=\"https://github.com/dashevo/js-dpp/blob/v0.20.0/lib/util/serializer.js#L5\">16 KB</a>.</p>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-common-fields\"></div>Common Fields<a class=\"fa fa-anchor\" href=\"#section-common-fields\"></a></h2>\n<p>All state transitions include the following fields:</p>\n<div class=\"marked-table\"><table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>protocolVersion</td>\n<td>integer</td>\n<td>The platform protocol version (currently <code>0</code>)</td>\n</tr>\n<tr>\n<td>type</td>\n<td>integer</td>\n<td>State transition type:<br><code>0</code> - <a href=\"platform-protocol-reference-data-contract#data-contract-creation\">data contract</a><br><code>1</code> - <a href=\"platform-protocol-reference-document#document-submission\">documents batch</a><br><code>2</code> - <a href=\"platform-protocol-reference-identity#identity-creation\">identity create</a><br><code>3</code> - <a href=\"platform-protocol-reference-identity#identity-topup\">identity topup</a></td>\n</tr>\n<tr>\n<td>signature</td>\n<td>array of bytes</td>\n<td>Signature of state transition data (65 bytes)</td>\n</tr>\n</tbody>\n</table></div>\n<p>Additionally, all state transitions except the identity create and topup state transitions include:</p>\n<div class=\"marked-table\"><table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>signaturePublicKeyId</td>\n<td>integer</td>\n<td>The <code>id</code> of the <a href=\"platform-protocol-reference-identity#identity-publickeys\">identity public key</a> that signed the state transition (<code>=&gt; 0</code>)</td>\n</tr>\n</tbody>\n</table></div>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-state-transition-types\"></div>State Transition Types<a class=\"fa fa-anchor\" href=\"#section-state-transition-types\"></a></h1>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-data-contract\"></div>Data Contract<a class=\"fa fa-anchor\" href=\"#section-data-contract\"></a></h2>\n<div class=\"marked-table\"><table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>dataContract</td>\n<td><a href=\"platform-protocol-reference-data-contract#data-contract-object\">data contract object</a></td>\n<td>Object containing valid <a href=\"platform-protocol-reference-data-contract\">data contract</a> details</td>\n</tr>\n<tr>\n<td>entropy</td>\n<td>array of bytes</td>\n<td>Entropy used to generate the data contract ID (32 bytes)</td>\n</tr>\n</tbody>\n</table></div>\n<p>More detailed information about the <code>dataContract</code> object can be found in the <a href=\"platform-protocol-reference-data-contract\">data contract section</a>.</p>\n<h3 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-entropy-generation\"></div>Entropy Generation<a class=\"fa fa-anchor\" href=\"#section-entropy-generation\"></a></h3>\n<p>Entropy is included in <a href=\"platform-protocol-reference-data-contract#data-contract-creation\">Data Contracts</a> and <a href=\"platform-protocol-reference-document#document-create-transition\">Documents</a>.</p>\n<pre><code class=\"lang-javascript\"><span class='cm-s-neo'><span class=\"cm-comment\">&#47;&#47; From the JavaScript reference implementation (js-dpp)</span>\n<span class=\"cm-comment\">&#47;&#47; generateEntropy.js</span>\n<span class=\"cm-keyword\">function</span> <span class=\"cm-def\">generate</span>() {\n  <span class=\"cm-keyword\">return</span> <span class=\"cm-variable\">crypto</span>.<span class=\"cm-property\">randomBytes</span>(<span class=\"cm-number\">32</span>);\n}</span>\n</code></pre>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-documents-batch\"></div>Documents Batch<a class=\"fa fa-anchor\" href=\"#section-documents-batch\"></a></h2>\n<div class=\"marked-table\"><table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ownerId</td>\n<td>array of bytes</td>\n<td><a href=\"platform-protocol-reference-identity\">Identity</a> submitting the document(s) (32 bytes)</td>\n</tr>\n<tr>\n<td>transitions</td>\n<td>array of transition objects</td>\n<td>Document <code>create</code>, <code>replace</code>, or <code>delete</code> transitions (up to 10 objects)</td>\n</tr>\n</tbody>\n</table></div>\n<p>More detailed information about the <code>transitions</code> array can be found in the <a href=\"platform-protocol-reference-document\">document section</a>.</p>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-identity-create\"></div>Identity Create<a class=\"fa fa-anchor\" href=\"#section-identity-create\"></a></h2>\n<div class=\"marked-table\"><table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>lockedOutPoint</td>\n<td>array of bytes</td>\n<td>Lock <a href=\"https://dashcore.readme.io/docs/core-additional-resources-glossary#section-outpoint\">outpoint</a> from the layer 1 locking transaction (36 bytes)</td>\n</tr>\n<tr>\n<td>publicKeys</td>\n<td>array of keys</td>\n<td><a href=\"platform-protocol-reference-identity#identity-publickeys\">Public key(s)</a> associated with the identity (maximum number of keys: <code>10</code>)</td>\n</tr>\n</tbody>\n</table></div>\n<p>More detailed information about the <code>publicKeys</code> object can be found in the <a href=\"platform-protocol-reference-identity\">identity section</a>.</p>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-identity-top-up\"></div>Identity TopUp<a class=\"fa fa-anchor\" href=\"#section-identity-top-up\"></a></h2>\n<div class=\"marked-table\"><table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>lockedOutPoint</td>\n<td>array of bytes</td>\n<td>Lock <a href=\"https://dashcore.readme.io/docs/core-additional-resources-glossary#section-outpoint\">outpoint</a> from the layer 1 locking transaction (36 bytes)</td>\n</tr>\n<tr>\n<td>identityId</td>\n<td>array of bytes</td>\n<td>An <a href=\"platform-protocol-reference-identity#identity-id\">Identity ID</a> for the identity receiving the topup (can be any identity) (32 bytes)</td>\n</tr>\n</tbody>\n</table></div>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-state-transition-signing\"></div>State Transition Signing<a class=\"fa fa-anchor\" href=\"#section-state-transition-signing\"></a></h1>\n<p>State transitions must be signed by a private key associated with the identity creating the state transition.</p>\n<p>The process to sign a state transition consists of the following steps:</p>\n<ol>\n<li  value=\"1\">Canonical CBOR encode the state transition data - this include all ST fields except the <code>signature</code> and <code>signaturePublicKeyId</code></li><li  value=\"2\">Sign the encoded data with a private key associated with the identity creating the state transition</li><li  value=\"3\">Set the state transition <code>signature</code> to the value of the signature created in the previous step</li><li  value=\"4\">For all state transitions <em>other than identity create or topup</em>, set the state transition<code>signaturePublicKeyId</code> to the <a href=\"platform-protocol-reference-identity#public-key-id\">public key <code>id</code></a> corresponding to the key used to sign</li></ol>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-signature-validation\"></div>Signature Validation<a class=\"fa fa-anchor\" href=\"#section-signature-validation\"></a></h2>\n<p>The <code>signature</code> validation (see <a href=\"https://github.com/dashevo/js-dpp/blob/v0.20.0/test/unit/stateTransition/validation/validateStateTransitionSignatureFactory.spec.js\">js-dpp</a>) verifies that:</p>\n<ol>\n<li  value=\"1\">The identity has a public key</li><li  value=\"2\">The identity&#39;s public key is of type <code>ECDSA</code></li><li  value=\"3\">The state transition signature is valid</li></ol>\n<p>The example test output below shows the necessary criteria:</p>\n<pre><code class=\"lang-text\">validateStateTransitionSignatureFactory\n  \u2713 should pass properly signed state transition\n  \u2713 should return MissingPublicKeyError if the identity doesn&#39;t have a matching public key\n  \u2713 should return InvalidIdentityPublicKeyTypeError if type is not ECDSA_SECP256K1\n  \u2713 should return InvalidStateTransitionSignatureError if signature is invalid\n</code></pre>\n\n</div>", 
 "user": "5b8400d7185d5e00036dcc3b", 
 "isReference": false, 
 "slug": "platform-protocol-reference-state-transition", 
 "link_url": "", 
 "project": "5bda01cad172e200499a20a9", 
 "__v": 0, 
 "_id": "60e604b4762bd40057ebe128", 
 "order": 3, 
 "updates": []
}