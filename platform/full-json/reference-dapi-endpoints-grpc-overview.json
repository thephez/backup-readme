{
 "metadata": {
  "image": [],
  "title": "gRPC Overview",
  "description": "The gRPC endpoints provide access to information from Dash Platform (layer 2) as well as streaming of events related to blocks and transactions/transitions."
 },
 "api": {
  "method": "get",
  "url": "",
  "auth": "required",
  "results": {
   "codes": [
    {
     "status": 200,
     "language": "json",
     "code": "{}",
     "name": ""
    },
    {
     "status": 400,
     "language": "json",
     "code": "{}",
     "name": ""
    }
   ]
  },
  "params": []
 },
 "next": {
  "description": "",
  "pages": []
 },
 "title": "gRPC Overview",
 "icon": "",
 "updates": [],
 "type": "basic",
 "slug": "reference-dapi-endpoints-grpc-overview",
 "excerpt": "",
 "body": "The gRPC endpoints provide access to information from Dash Platform (layer 2) as well as streaming of events related to blocks and transactions/transitions.\n\n# Connecting to gRPC\n\n## Auto-generated Clients\n\nClients for a number of languages are built automatically from the protocol definitions and are available in the `packages/dapi-grpc/clients` folder of the [platform](https://github.com/dashevo/platform/) repository. The protocol definitions are available in the `protos` folder.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"Pull Requests welcome\",\n  \"body\": \"Pull requests are welcome to add support for additional languages that are not currently being built.\"\n}\n[/block]\n## Command Line Examples\n\nSome examples shown in the endpoint details pages use a command-line tool named [gRPCurl](https://github.com/fullstorydev/grpcurl) that allows interacting with gRPC servers in a similar way as `curl` does for the [JSON-RPCs](reference-dapi-endpoints-json-rpc-endpoints). Additional information may be found in the [gRPC documentation](https://grpc.io/docs/guides/).\n\nTo use gRPCurl as shown in the detailed examples, clone the [platform](https://github.com/dashevo/platform/) repository and execute the example requests from the `packages/dapi-grpc` directory of that repository as shown in this example:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"# Clone the dapi-grpc repository\\ngit clone https://github.com/dashevo/platform.git\\ncd platform/packages/dapi-grpc\\n\\n# Execute gRPCurl command\\ngrpcurl -plaintext -proto protos/...\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n# Data Encoding\n\nThe data submitted/received from the gRPC endpoints is encoded using both [CBOR](https://tools.ietf.org/html/rfc7049) and Base64. Data is first encoded with CBOR and the resulting output is then encoded in Base64 before being sent. \n[block:callout]\n{\n  \"type\": \"warning\",\n  \"title\": \"Canonical Encoding\",\n  \"body\": \"Canonical encoding is used for state transitions, identities, data contracts, and documents. This puts the object's data fields in a sorted order to ensure the same hash is produced every time regardless of the actual order received by the encoder. Reproducible hashes are necessary to support validation of request/response data.\"\n}\n[/block]\nLibraries such as [`cbor` (JavaScript)](https://www.npmjs.com/package/cbor) and [`cbor2` (Python)](https://pypi.org/project/cbor2/) can be used to encode/decode data for DAPI gRPC endpoints.\n\nThe examples below use the response from a [`getIdentity` gPRC request](reference-dapi-endpoints-platform-endpoints#getidentity) to demonstrate how to both encode data for sending and decode received data:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"const cbor = require('cbor');\\n\\nconst grpc_identity_response = 'o2JpZHgsQ2JZVnlvS25HeGtIYUJydWNDQWhQRUJjcHV6OGoxNWNuWVlpdjFDRUhCTnhkdHlwZQFqcHVibGljS2V5c4GkYmlkAWRkYXRheCxBbXpSMkZNNGZZd0NtWnhHWjFOMnRhMkZmdUo5NU93K0xMQXJaREx1WUJqdGR0eXBlAWlpc0VuYWJsZWT1'\\n\\nconst identity_cbor = Buffer.from(grpc_identity_response, 'base64').toJSON();\\nconst identity = cbor.decode(Buffer.from(identity_cbor));\\n\\nconsole.log('Identity details');\\nconsole.dir(identity);\",\n      \"language\": \"javascript\",\n      \"name\": \"NodeJS - Decode Identity\"\n    },\n    {\n      \"code\": \"from base64 import b64decode, b64encode\\nimport json\\nimport cbor2\\n\\ngrpc_identity_response = 'o2JpZHgsQ2JZVnlvS25HeGtIYUJydWNDQWhQRUJjcHV6OGoxNWNuWVlpdjFDRUhCTnhkdHlwZQFqcHVibGljS2V5c4GkYmlkAWRkYXRheCxBbXpSMkZNNGZZd0NtWnhHWjFOMnRhMkZmdUo5NU93K0xMQXJaREx1WUJqdGR0eXBlAWlpc0VuYWJsZWT1'\\n\\nidentity_cbor = b64decode(grpc_identity_response)\\nidentity = cbor2.loads(identity_cbor)\\n\\nprint('Identity details:\\\\n{}\\\\n'.format(json.dumps(identity, indent=2)))\",\n      \"language\": \"python\",\n      \"name\": \"Python - Decode Identity\"\n    },\n    {\n      \"code\": \"from base64 import b64decode, b64encode\\nimport json\\nimport cbor2\\n\\n# Encode an identity\\nidentity = {\\n  \\\"id\\\": \\\"CbYVyoKnGxkHaBrucCAhPEBcpuz8j15cnYYiv1CEHBNx\\\",  \\n  \\\"type\\\": 1,\\n  \\\"publicKeys\\\": [\\n    {\\n      \\\"id\\\": 1,\\n      \\\"data\\\": \\\"AmzR2FM4fYwCmZxGZ1N2ta2FfuJ95Ow+LLArZDLuYBjt\\\",\\n      \\\"type\\\": 1,\\n      \\\"isEnabled\\\": True\\n    }\\n  ]\\n}\\n\\nidentity_cbor = cbor2.dumps(identity)\\nidentity_grpc = b64encode(identity_cbor)\\nprint('Identity gRPC data: {}'.format(identity_grpc))\\n\",\n      \"language\": \"python\",\n      \"name\": \"Python - Encode Identity\"\n    }\n  ]\n}\n[/block]",
 "order": 1,
 "isReference": false,
 "deprecated": false,
 "hidden": false,
 "sync_unique": "",
 "link_url": "",
 "link_external": false,
 "pendingAlgoliaPublish": false,
 "previousSlug": "",
 "slugUpdatedAt": "2020-09-03T12:45:33.797Z",
 "revision": 1,
 "_id": "61d70ca155d45f0293817080",
 "version": "61d70ca155d45f02938170a3",
 "project": "5bda01cad172e200499a20a9",
 "user": "62b2101422da70001ee51d95",
 "parentDoc": "61d70ca155d45f029381707b",
 "category": "61d70ca155d45f029381703d",
 "updatedAt": "2021-11-30T19:54:40.484Z",
 "createdAt": "2020-02-13T10:35:19.343Z",
 "__v": 0,
 "isApi": false,
 "id": "61d70ca155d45f0293817080",
 "body_html": "<div class=\"magic-block-textarea\"><p>The gRPC endpoints provide access to information from Dash Platform (layer 2) as well as streaming of events related to blocks and transactions/transitions.</p>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-connecting-to-g-rpc\"></div>Connecting to gRPC<a class=\"fa fa-anchor\" href=\"#section-connecting-to-g-rpc\"></a></h1>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-auto-generated-clients\"></div>Auto-generated Clients<a class=\"fa fa-anchor\" href=\"#section-auto-generated-clients\"></a></h2>\n<p>Clients for a number of languages are built automatically from the protocol definitions and are available in the <code>packages/dapi-grpc/clients</code> folder of the <a href=\"https://github.com/dashevo/platform/\">platform</a> repository. The protocol definitions are available in the <code>protos</code> folder.</p>\n\n</div>\n<div class=\"magic-block-callout type-info \">\n\t<h3><i title=\"Info\" class=\"fa fa-info-circle\"></i>Pull Requests welcome\n\t</h3>\n\t<div class=\"callout-body\"><p>Pull requests are welcome to add support for additional languages that are not currently being built.</p>\n\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-command-line-examples\"></div>Command Line Examples<a class=\"fa fa-anchor\" href=\"#section-command-line-examples\"></a></h2>\n<p>Some examples shown in the endpoint details pages use a command-line tool named <a href=\"https://github.com/fullstorydev/grpcurl\">gRPCurl</a> that allows interacting with gRPC servers in a similar way as <code>curl</code> does for the <a href=\"reference-dapi-endpoints-json-rpc-endpoints\">JSON-RPCs</a>. Additional information may be found in the <a href=\"https://grpc.io/docs/guides/\">gRPC documentation</a>.</p>\n<p>To use gRPCurl as shown in the detailed examples, clone the <a href=\"https://github.com/dashevo/platform/\">platform</a> repository and execute the example requests from the <code>packages/dapi-grpc</code> directory of that repository as shown in this example:</p>\n\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">Shell</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(36)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-36\"># Clone the dapi-grpc repository\ngit clone https://github.com/dashevo/platform.git\ncd platform/packages/dapi-grpc\n\n# Execute gRPCurl command\ngrpcurl -plaintext -proto protos/...</textarea>\n\t\t\t<pre id=\"code-36\"><code><span class='cm-s-neo'><span class=\"cm-comment\"># Clone the dapi-grpc repository</span>\n<span class=\"cm-builtin\">git</span> clone https:&#47;&#47;github.com&#47;dashevo&#47;platform.git\n<span class=\"cm-builtin\">cd</span> platform&#47;packages&#47;dapi-grpc\n\n<span class=\"cm-comment\"># Execute gRPCurl command</span>\ngrpcurl <span class=\"cm-attribute\">-plaintext</span> <span class=\"cm-attribute\">-proto</span> protos&#47;...</span></code></pre></span>\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-data-encoding\"></div>Data Encoding<a class=\"fa fa-anchor\" href=\"#section-data-encoding\"></a></h1>\n<p>The data submitted/received from the gRPC endpoints is encoded using both <a href=\"https://tools.ietf.org/html/rfc7049\">CBOR</a> and Base64. Data is first encoded with CBOR and the resulting output is then encoded in Base64 before being sent. </p>\n\n</div>\n<div class=\"magic-block-callout type-warning \">\n\t<h3><i title=\"Warning\" class=\"fa fa-exclamation-circle\"></i>Canonical Encoding\n\t</h3>\n\t<div class=\"callout-body\"><p>Canonical encoding is used for state transitions, identities, data contracts, and documents. This puts the object&#39;s data fields in a sorted order to ensure the same hash is produced every time regardless of the actual order received by the encoder. Reproducible hashes are necessary to support validation of request/response data.</p>\n\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><p>Libraries such as <a href=\"https://www.npmjs.com/package/cbor\"><code>cbor</code> (JavaScript)</a> and <a href=\"https://pypi.org/project/cbor2/\"><code>cbor2</code> (Python)</a> can be used to encode/decode data for DAPI gRPC endpoints.</p>\n<p>The examples below use the response from a <a href=\"reference-dapi-endpoints-platform-endpoints#getidentity\"><code>getIdentity</code> gPRC request</a> to demonstrate how to both encode data for sending and decode received data:</p>\n\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">NodeJS - Decode Identity</a></li>\n\t\t<li><a href=\"\" ng-click=\"showCode(1)\" ng-class=\"{active: (1 == tab)}\">Python - Decode Identity</a></li>\n\t\t<li><a href=\"\" ng-click=\"showCode(2)\" ng-class=\"{active: (2 == tab)}\">Python - Encode Identity</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(921)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-921\">const cbor = require('cbor');\n\nconst grpc_identity_response = 'o2JpZHgsQ2JZVnlvS25HeGtIYUJydWNDQWhQRUJjcHV6OGoxNWNuWVlpdjFDRUhCTnhkdHlwZQFqcHVibGljS2V5c4GkYmlkAWRkYXRheCxBbXpSMkZNNGZZd0NtWnhHWjFOMnRhMkZmdUo5NU93K0xMQXJaREx1WUJqdGR0eXBlAWlpc0VuYWJsZWT1'\n\nconst identity_cbor = Buffer.from(grpc_identity_response, 'base64').toJSON();\nconst identity = cbor.decode(Buffer.from(identity_cbor));\n\nconsole.log('Identity details');\nconsole.dir(identity);</textarea>\n\t\t\t<pre id=\"code-921\"><code><span class='cm-s-neo'><span class=\"cm-keyword\">const</span> <span class=\"cm-def\">cbor</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">require</span>(<span class=\"cm-string\">'cbor'</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">grpc_identity_response</span> <span class=\"cm-operator\">=</span> <span class=\"cm-string\">'o2JpZHgsQ2JZVnlvS25HeGtIYUJydWNDQWhQRUJjcHV6OGoxNWNuWVlpdjFDRUhCTnhkdHlwZQFqcHVibGljS2V5c4GkYmlkAWRkYXRheCxBbXpSMkZNNGZZd0NtWnhHWjFOMnRhMkZmdUo5NU93K0xMQXJaREx1WUJqdGR0eXBlAWlpc0VuYWJsZWT1'</span>\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">identity_cbor</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">Buffer</span>.<span class=\"cm-property\">from</span>(<span class=\"cm-variable\">grpc_identity_response</span>, <span class=\"cm-string\">'base64'</span>).<span class=\"cm-property\">toJSON</span>();\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">identity</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">cbor</span>.<span class=\"cm-property\">decode</span>(<span class=\"cm-variable\">Buffer</span>.<span class=\"cm-property\">from</span>(<span class=\"cm-variable\">identity_cbor</span>));\n\n<span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-string\">'Identity details'</span>);\n<span class=\"cm-variable\">console</span>.<span class=\"cm-property\">dir</span>(<span class=\"cm-variable\">identity</span>);</span></code></pre></span><span ng-if=\"tab == 1\">\n\t\t\t<button ng-click=\"copyCode(363)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-363\">from base64 import b64decode, b64encode\nimport json\nimport cbor2\n\ngrpc_identity_response = 'o2JpZHgsQ2JZVnlvS25HeGtIYUJydWNDQWhQRUJjcHV6OGoxNWNuWVlpdjFDRUhCTnhkdHlwZQFqcHVibGljS2V5c4GkYmlkAWRkYXRheCxBbXpSMkZNNGZZd0NtWnhHWjFOMnRhMkZmdUo5NU93K0xMQXJaREx1WUJqdGR0eXBlAWlpc0VuYWJsZWT1'\n\nidentity_cbor = b64decode(grpc_identity_response)\nidentity = cbor2.loads(identity_cbor)\n\nprint('Identity details:\\n{}\\n'.format(json.dumps(identity, indent=2)))</textarea>\n\t\t\t<pre id=\"code-363\"><code><span class='cm-s-neo'><span class=\"cm-keyword\">from</span> <span class=\"cm-variable\">base64</span> <span class=\"cm-keyword\">import</span> <span class=\"cm-variable\">b64decode</span>, <span class=\"cm-variable\">b64encode</span>\n<span class=\"cm-keyword\">import</span> <span class=\"cm-variable\">json</span>\n<span class=\"cm-keyword\">import</span> <span class=\"cm-variable\">cbor2</span>\n\n<span class=\"cm-variable\">grpc_identity_response</span> <span class=\"cm-operator\">=</span> <span class=\"cm-string\">'o2JpZHgsQ2JZVnlvS25HeGtIYUJydWNDQWhQRUJjcHV6OGoxNWNuWVlpdjFDRUhCTnhkdHlwZQFqcHVibGljS2V5c4GkYmlkAWRkYXRheCxBbXpSMkZNNGZZd0NtWnhHWjFOMnRhMkZmdUo5NU93K0xMQXJaREx1WUJqdGR0eXBlAWlpc0VuYWJsZWT1'</span>\n\n<span class=\"cm-variable\">identity_cbor</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">b64decode</span>(<span class=\"cm-variable\">grpc_identity_response</span>)\n<span class=\"cm-variable\">identity</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">cbor2</span>.<span class=\"cm-property\">loads</span>(<span class=\"cm-variable\">identity_cbor</span>)\n\n<span class=\"cm-builtin\">print</span>(<span class=\"cm-string\">'Identity details:\\n{}\\n'</span>.<span class=\"cm-property\">format</span>(<span class=\"cm-variable\">json</span>.<span class=\"cm-property\">dumps</span>(<span class=\"cm-variable\">identity</span>, <span class=\"cm-variable\">indent</span><span class=\"cm-operator\">=</span><span class=\"cm-number\">2</span>)))</span></code></pre></span><span ng-if=\"tab == 2\">\n\t\t\t<button ng-click=\"copyCode(992)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-992\">from base64 import b64decode, b64encode\nimport json\nimport cbor2\n\n# Encode an identity\nidentity = {\n  &quot;id&quot;: &quot;CbYVyoKnGxkHaBrucCAhPEBcpuz8j15cnYYiv1CEHBNx&quot;,  \n  &quot;type&quot;: 1,\n  &quot;publicKeys&quot;: [\n    {\n      &quot;id&quot;: 1,\n      &quot;data&quot;: &quot;AmzR2FM4fYwCmZxGZ1N2ta2FfuJ95Ow+LLArZDLuYBjt&quot;,\n      &quot;type&quot;: 1,\n      &quot;isEnabled&quot;: True\n    }\n  ]\n}\n\nidentity_cbor = cbor2.dumps(identity)\nidentity_grpc = b64encode(identity_cbor)\nprint('Identity gRPC data: {}'.format(identity_grpc))\n</textarea>\n\t\t\t<pre id=\"code-992\"><code><span class='cm-s-neo'><span class=\"cm-keyword\">from</span> <span class=\"cm-variable\">base64</span> <span class=\"cm-keyword\">import</span> <span class=\"cm-variable\">b64decode</span>, <span class=\"cm-variable\">b64encode</span>\n<span class=\"cm-keyword\">import</span> <span class=\"cm-variable\">json</span>\n<span class=\"cm-keyword\">import</span> <span class=\"cm-variable\">cbor2</span>\n\n<span class=\"cm-comment\"># Encode an identity</span>\n<span class=\"cm-variable\">identity</span> <span class=\"cm-operator\">=</span> {\n  <span class=\"cm-string\">\"id\"</span>: <span class=\"cm-string\">\"CbYVyoKnGxkHaBrucCAhPEBcpuz8j15cnYYiv1CEHBNx\"</span>,  \n  <span class=\"cm-string\">\"type\"</span>: <span class=\"cm-number\">1</span>,\n  <span class=\"cm-string\">\"publicKeys\"</span>: [\n    {\n      <span class=\"cm-string\">\"id\"</span>: <span class=\"cm-number\">1</span>,\n      <span class=\"cm-string\">\"data\"</span>: <span class=\"cm-string\">\"AmzR2FM4fYwCmZxGZ1N2ta2FfuJ95Ow+LLArZDLuYBjt\"</span>,\n      <span class=\"cm-string\">\"type\"</span>: <span class=\"cm-number\">1</span>,\n      <span class=\"cm-string\">\"isEnabled\"</span>: <span class=\"cm-keyword\">True</span>\n    }\n  ]\n}\n\n<span class=\"cm-variable\">identity_cbor</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">cbor2</span>.<span class=\"cm-property\">dumps</span>(<span class=\"cm-variable\">identity</span>)\n<span class=\"cm-variable\">identity_grpc</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">b64encode</span>(<span class=\"cm-variable\">identity_cbor</span>)\n<span class=\"cm-builtin\">print</span>(<span class=\"cm-string\">'Identity gRPC data: {}'</span>.<span class=\"cm-property\">format</span>(<span class=\"cm-variable\">identity_grpc</span>))\n</span></code></pre></span>\n\t</div>\n</div>"
}