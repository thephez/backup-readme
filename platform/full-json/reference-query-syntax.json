{
 "metadata": {
  "image": [],
  "title": "",
  "description": ""
 },
 "api": {
  "method": "get",
  "url": "",
  "auth": "required",
  "results": {
   "codes": [
    {
     "status": 200,
     "language": "json",
     "code": "{}",
     "name": ""
    },
    {
     "status": 400,
     "language": "json",
     "code": "{}",
     "name": ""
    }
   ]
  },
  "params": []
 },
 "next": {
  "description": "",
  "pages": []
 },
 "algolia": {
  "recordCount": 11,
  "publishPending": false,
  "updatedAt": "2023-02-19T20:23:12.016Z"
 },
 "title": "Query Syntax",
 "icon": "",
 "updates": [
  "5e162ddcfe1f09001806494b",
  "600f19bc59b27e0018b8b446",
  "600f1a1b77276400122b924b",
  "600f20a574e76300449ba946",
  "61ad3870f1fc3c0225e61b22",
  "629efc4fd4b057009aca612d"
 ],
 "type": "basic",
 "slug": "reference-query-syntax",
 "excerpt": "",
 "body": "# Overview\n\nGenerally queries will consist of a `where` clause plus optional [modifiers](#query-modifiers) controlling the specific subset of results returned. \n\n> \ud83d\udea7 Query limitations\n>\n> Dash Platform v0.22 introduced a number of limitations due to the switch to using [GroveDB](https://github.com/dashevo/grovedb). See details in pull requests [77](https://github.com/dashevo/platform/pull/77) and [230](https://github.com/dashevo/platform/pull/230) that implemented these changes.\n>\n> Query validation details may be found [here](https://github.com/dashevo/platform/blob/master/packages/js-drive/lib/document/query/validateQueryFactory.js) along with the associated validation [tests](https://github.com/dashevo/platform/blob/master/packages/js-drive/test/unit/document/query/validateQueryFactory.spec.js).\n\n# Where Clause\n\nThe Where clause must be a non-empty array containing not more than 10 conditions. For some operators, `value` will be an array. See the following general syntax example:\n\n>\u2757\ufe0f\n>\n> As of Dash Platform v0.22, _all fields_ referenced in a query's where clause must be defined in the _same index_. This includes `$createdAt` and `$updatedAt`.\n\n```json\n{\n  where: [\n    [<fieldName>, <operator>, <value>],\n    [<fieldName>, <array operator>, [<value1>, <value2>]] \n  ] \n}\n``` \n\n## Fields\n\nValid fields consist of the indices defined for the document being queried. For example, the [DPNS data contract](https://github.com/dashevo/platform/blob/master/packages/dpns-contract/schema/dpns-contract-documents.json) defines three indices:\n\n| Index Field(s) | Index Type | Unique |\n| - | - | :-: | \n| [normalizedParentDomainName, normalizedLabel](https://github.com/dashevo/platform/blob/master/packages/dpns-contract/schema/dpns-contract-documents.json#L5-L16) | Compound | Yes |\n| [records.dashUniqueIdentityId](https://github.com/dashevo/platform/blob/master/packages/dpns-contract/schema/dpns-contract-documents.json#L17-L25) | Single Field | Yes |\n| [records.dashAliasIdentityId](https://github.com/dashevo/platform/blob/master/packages/dpns-contract/schema/dpns-contract-documents.json#L26-L33) | Single Field | No |\n\n```html Custom HTML / CSS\n<div></div>\n<!--\nSpecial fields - `$id`, `$userId`\n-->\n<style></style>\n```\n\n## Comparison Operators\n\n### Equal\n\n| Name | Description |\n| :-: | - |\n| == | Matches values that are equal to a specified value |\n\n### Range\n\n> \ud83d\udea7 Dash Platform v0.22 notes\n>\n> - Only one range operator is allowed in a query (except for between behavior)\n> - The `in` operator is only allowed for last two indexed properties\n> - Range operators are only allowed after `==` and `in` operators\n> - Range operators are only allowed for the last two fields used in the where condition\n> - Queries using range operators must also include an `orderBy` statement\n\n| Name | Description |\n| :-: | - |\n| < | Matches values that are less than a specified value |\n| <= | Matches values that are less than or equal to a specified value |\n| >= | Matches values that are greater than or equal to a specified value |\n| > | Matches values that are greater than a specified value |\n| in | Matches all document(s) where the value of the field equals any value in the specified array <br>Array may include up to 100 (unique) elements |\n\n## Array Operators\n\n| Name | Description |\n| :-: | - |\n| length | **Not available in Dash Platform v0.22**<br>Selects documents if the array field is a specified size (integer) |\n| contains | **Not available in Dash Platform v0.22**<br>- Matches arrays that contain all elements specified in the query condition array <br>- 100 element maximum\n| elementMatch |  **Not available in Dash Platform v0.22**<br>- Matches documents that contain an array field with at least one element that matches all the criteria in the query condition array <br>- Two or more conditions must be provided\n\n## Evaluation Operators\n\n| Name | Description |\n| :-: | - |\n| startsWith | Selects documents where the value of a field begins with the specified characters (string, <= 255 characters). Must include an `orderBy` statement. |\n\n## Operator Examples\n\n```json <\n{\n  where: [\n    ['nameHash', '<', '56116861626961756e6176657a382e64617368'],\n  ],\n}\n```\n```json in\n{\n  where: [\n      ['normalizedParentDomainName', '==', 'dash'],\n      // Return all matching names from the provided array\n      ['normalizedLabel', 'in', ['alice', 'bob']],\n    ]\n}\n```\n```json startsWith\n{\n  where: [\n      ['normalizedParentDomainName', '==', 'dash'],\n      // Return any names beginning with \"al\" (e.g. alice, alfred)\n      ['normalizedLabel', 'startsWith', 'al'],\n    ]\n}\n```\n```json length\n// Not available in Dash Platform v0.22\n// See https://github.com/dashevo/platform/pull/77\n{\n  where: [\n      // Return documents that have 5 values in their `items` array\n      ['items', 'length', 5],\n    ]\n}\n```\n```json contains\n// Not available in Dash Platform v0.22\n// See https://github.com/dashevo/platform/pull/77\n{\n  where: [\n      // Return documents that have both \"red\" and \"blue\" \n      // in the `colors` array\n      ['colors', 'contains', ['red', 'blue']],\n    ]\n}\n```\n```json elementMatch\n// Not available in Dash Platform v0.22\n// See https://github.com/dashevo/platform/pull/77\n{\n  where: [\n    // Return `scores` documents where the results contain \n    // elements in the range 80-90\n    ['scores', 'elementMatch',\n      [\n        ['results', '>=', '80'],\n        ['results', '<=', '90']\n      ],\n    ],\n  ]\n}\n```\n\n# Query Modifiers\nThe query modifiers described here determine how query results will be sorted and what subset of data matching the query will be returned.\n\n>\u2757\ufe0f Breaking changes\n>\n> Starting with Dash Platform v0.22, `startAt` and `startAfter` must be provided with a document ID rather than an integer.\n\n| Modifier | Effect | Example |\n| - | - | - |\n| `limit` | Restricts the number of results returned (maximum: 100) | `limit: 10` |\n| `orderBy` | Returns records sorted by the field(s) provided (maximum: 2). Sorting must be by the last indexed property. Can only be used with `>`, `<`, `>=`, `<=`, and `startsWith` queries. | `orderBy: [['normalizedLabel', 'asc']]`\n| `startAt` | Returns records beginning with the document ID provided | `startAt: Buffer.from(Identifier.from(<document ID>))` |\n| `startAfter` | Returns records beginning after the document ID provided | `startAfter: Buffer.from(Identifier.from(<document ID>))` |\n\n> \ud83d\udea7 Compound Index Constraints\n>\n> For indices composed of multiple fields ([example from the DPNS data contract](https://github.com/dashevo/platform/blob/master/packages/dpns-contract/schema/dpns-contract-documents.json)), the sort order in an `orderBy` must either match the order defined in the data contract OR be the inverse order.\n>\n> Please refer to [pull request 230](https://github.com/dashevo/platform/pull/230) for additional information related to compound index constraints in Platform v0.22.\n\n# Example query\nThe following query combines both a where clause and query modifiers.\n\n```javascript\nimport Dash from \"dash\"\n\nconst { Essentials: { Buffer }, PlatformProtocol: { Identifier } } = Dash;\n\nconst query = {\n  limit: 5,\n  startAt: Buffer.from(Identifier.from('4Qp3menV9QjE92hc3BzkUCusAmHLxh1AU6gsVsPF4L2q')),\n  where: [\n    ['normalizedParentDomainName', '==', 'dash'],\n    ['normalizedLabel', 'startsWith', 'test'],\n  ],\n  orderBy: [\n    ['normalizedLabel', 'asc'],\n  ],\n}\n```",
 "order": 1,
 "isReference": false,
 "deprecated": false,
 "hidden": false,
 "sync_unique": "",
 "link_url": "",
 "link_external": false,
 "previousSlug": "",
 "slugUpdatedAt": "2020-10-28T05:49:05.115Z",
 "revision": 7,
 "_id": "62b226d1fcc32e002300c546",
 "version": "62b226d1fcc32e002300c574",
 "project": "5bda01cad172e200499a20a9",
 "user": "62b2101422da70001ee51d95",
 "category": "62b226d1fcc32e002300c50b",
 "updatedAt": "2023-02-19T20:23:11.655Z",
 "createdAt": "2020-01-07T13:44:04.059Z",
 "__v": 6,
 "parentDoc": null,
 "pendingAlgoliaPublish": false,
 "isApi": false,
 "id": "62b226d1fcc32e002300c546",
 "body_html": "<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-overview\"></div>Overview<a class=\"fa fa-anchor\" href=\"#section-overview\"></a></h1>\n<p>Generally queries will consist of a <code>where</code> clause plus optional <a href=\"#query-modifiers\">modifiers</a> controlling the specific subset of results returned. </p>\n<blockquote>\n<p>\ud83d\udea7 Query limitations</p>\n<p>Dash Platform v0.22 introduced a number of limitations due to the switch to using <a href=\"https://github.com/dashevo/grovedb\">GroveDB</a>. See details in pull requests <a href=\"https://github.com/dashevo/platform/pull/77\">77</a> and <a href=\"https://github.com/dashevo/platform/pull/230\">230</a> that implemented these changes.</p>\n<p>Query validation details may be found <a href=\"https://github.com/dashevo/platform/blob/master/packages/js-drive/lib/document/query/validateQueryFactory.js\">here</a> along with the associated validation <a href=\"https://github.com/dashevo/platform/blob/master/packages/js-drive/test/unit/document/query/validateQueryFactory.spec.js\">tests</a>.</p>\n</blockquote>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-where-clause\"></div>Where Clause<a class=\"fa fa-anchor\" href=\"#section-where-clause\"></a></h1>\n<p>The Where clause must be a non-empty array containing not more than 10 conditions. For some operators, <code>value</code> will be an array. See the following general syntax example:</p>\n<blockquote>\n<p>\u2757\ufe0f</p>\n<p>As of Dash Platform v0.22, <em>all fields</em> referenced in a query&#39;s where clause must be defined in the <em>same index</em>. This includes <code>$createdAt</code> and <code>$updatedAt</code>.</p>\n</blockquote>\n<pre><code class=\"lang-json\"><span class='cm-s-neo'>{\n  <span class=\"cm-property\">where</span>: [\n    [<span class=\"cm-operator\">&lt;</span><span class=\"cm-variable\">fieldName</span><span class=\"cm-operator\">&gt;</span>, <span class=\"cm-operator\">&lt;</span><span class=\"cm-variable\">operator</span><span class=\"cm-operator\">&gt;</span>, <span class=\"cm-operator\">&lt;</span><span class=\"cm-variable\">value</span><span class=\"cm-operator\">&gt;</span>],\n    [<span class=\"cm-operator\">&lt;</span><span class=\"cm-variable\">fieldName</span><span class=\"cm-operator\">&gt;</span>, <span class=\"cm-operator\">&lt;</span><span class=\"cm-variable\">array</span> <span class=\"cm-variable\">operator</span><span class=\"cm-operator\">&gt;</span>, [<span class=\"cm-operator\">&lt;</span><span class=\"cm-variable\">value1</span><span class=\"cm-operator\">&gt;</span>, <span class=\"cm-operator\">&lt;</span><span class=\"cm-variable\">value2</span><span class=\"cm-operator\">&gt;</span>]] \n  ] \n}</span>\n</code></pre>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-fields\"></div>Fields<a class=\"fa fa-anchor\" href=\"#section-fields\"></a></h2>\n<p>Valid fields consist of the indices defined for the document being queried. For example, the <a href=\"https://github.com/dashevo/platform/blob/master/packages/dpns-contract/schema/dpns-contract-documents.json\">DPNS data contract</a> defines three indices:</p>\n<div class=\"marked-table\"><table>\n<thead>\n<tr>\n<th>Index Field(s)</th>\n<th>Index Type</th>\n<th style=\"text-align:center\">Unique</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/dashevo/platform/blob/master/packages/dpns-contract/schema/dpns-contract-documents.json#L5-L16\">normalizedParentDomainName, normalizedLabel</a></td>\n<td>Compound</td>\n<td style=\"text-align:center\">Yes</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/dashevo/platform/blob/master/packages/dpns-contract/schema/dpns-contract-documents.json#L17-L25\">records.dashUniqueIdentityId</a></td>\n<td>Single Field</td>\n<td style=\"text-align:center\">Yes</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/dashevo/platform/blob/master/packages/dpns-contract/schema/dpns-contract-documents.json#L26-L33\">records.dashAliasIdentityId</a></td>\n<td>Single Field</td>\n<td style=\"text-align:center\">No</td>\n</tr>\n</tbody>\n</table></div>\n<p>```html Custom HTML / CSS</p>\n<p><div></div><br>&lt;!--\nSpecial fields - `$id`, `$userId`\n--&gt;</p>\n<p>&lt;style&gt;&lt;/style&gt;</p>\n<pre><code>\n## Comparison Operators\n\n### Equal\n\n| Name | Description |\n| :-: | - |\n| == | Matches values that are equal to a specified value |\n\n### Range\n\n&gt; \ud83d\udea7 Dash Platform v0.22 notes\n&gt;\n&gt; - Only one range operator is allowed in a query (except for between behavior)\n&gt; - The `in` operator is only allowed for last two indexed properties\n&gt; - Range operators are only allowed after `==` and `in` operators\n&gt; - Range operators are only allowed for the last two fields used in the where condition\n&gt; - Queries using range operators must also include an `orderBy` statement\n\n| Name | Description |\n| :-: | - |\n| &lt; | Matches values that are less than a specified value |\n| &lt;= | Matches values that are less than or equal to a specified value |\n| &gt;= | Matches values that are greater than or equal to a specified value |\n| &gt; | Matches values that are greater than a specified value |\n| in | Matches all document(s) where the value of the field equals any value in the specified array &lt;br&gt;Array may include up to 100 (unique) elements |\n\n## Array Operators\n\n| Name | Description |\n| :-: | - |\n| length | **Not available in Dash Platform v0.22**&lt;br&gt;Selects documents if the array field is a specified size (integer) |\n| contains | **Not available in Dash Platform v0.22**&lt;br&gt;- Matches arrays that contain all elements specified in the query condition array &lt;br&gt;- 100 element maximum\n| elementMatch |  **Not available in Dash Platform v0.22**&lt;br&gt;- Matches documents that contain an array field with at least one element that matches all the criteria in the query condition array &lt;br&gt;- Two or more conditions must be provided\n\n## Evaluation Operators\n\n| Name | Description |\n| :-: | - |\n| startsWith | Selects documents where the value of a field begins with the specified characters (string, &lt;= 255 characters). Must include an `orderBy` statement. |\n\n## Operator Examples\n\n```json &lt;\n{\n  where: [\n    [&#39;nameHash&#39;, &#39;&lt;&#39;, &#39;56116861626961756e6176657a382e64617368&#39;],\n  ],\n}\n</code></pre><p>```json in<br>{<br>  where: [<br>      [&#39;normalizedParentDomainName&#39;, &#39;==&#39;, &#39;dash&#39;],<br>      // Return all matching names from the provided array<br>      [&#39;normalizedLabel&#39;, &#39;in&#39;, [&#39;alice&#39;, &#39;bob&#39;]],<br>    ]<br>}</p>\n<pre><code>```json startsWith\n{\n  where: [\n      [&#39;normalizedParentDomainName&#39;, &#39;==&#39;, &#39;dash&#39;],\n      // Return any names beginning with &quot;al&quot; (e.g. alice, alfred)\n      [&#39;normalizedLabel&#39;, &#39;startsWith&#39;, &#39;al&#39;],\n    ]\n}\n</code></pre><p><code>``json length\n// Not available in Dash Platform v0.22\n// See https://github.com/dashevo/platform/pull/77\n{\n  where: [\n      // Return documents that have 5 values in their</code>items` array<br>      [&#39;items&#39;, &#39;length&#39;, 5],<br>    ]<br>}</p>\n<pre><code>```json contains\n// Not available in Dash Platform v0.22\n// See https://github.com/dashevo/platform/pull/77\n{\n  where: [\n      // Return documents that have both &quot;red&quot; and &quot;blue&quot; \n      // in the `colors` array\n      [&#39;colors&#39;, &#39;contains&#39;, [&#39;red&#39;, &#39;blue&#39;]],\n    ]\n}\n</code></pre><p><code>``json elementMatch\n// Not available in Dash Platform v0.22\n// See https://github.com/dashevo/platform/pull/77\n{\n  where: [\n    // Return</code>scores` documents where the results contain<br>    // elements in the range 80-90<br>    [&#39;scores&#39;, &#39;elementMatch&#39;,<br>      [<br>        [&#39;results&#39;, &#39;&gt;=&#39;, &#39;80&#39;],<br>        [&#39;results&#39;, &#39;&lt;=&#39;, &#39;90&#39;]<br>      ],<br>    ],<br>  ]<br>}</p>\n<pre><code>\n# Query Modifiers\nThe query modifiers described here determine how query results will be sorted and what subset of data matching the query will be returned.\n\n&gt;\u2757\ufe0f Breaking changes\n&gt;\n&gt; Starting with Dash Platform v0.22, `startAt` and `startAfter` must be provided with a document ID rather than an integer.\n\n| Modifier | Effect | Example |\n| - | - | - |\n| `limit` | Restricts the number of results returned (maximum: 100) | `limit: 10` |\n| `orderBy` | Returns records sorted by the field(s) provided (maximum: 2). Sorting must be by the last indexed property. Can only be used with `&gt;`, `&lt;`, `&gt;=`, `&lt;=`, and `startsWith` queries. | `orderBy: [[&#39;normalizedLabel&#39;, &#39;asc&#39;]]`\n| `startAt` | Returns records beginning with the document ID provided | `startAt: Buffer.from(Identifier.from(&lt;document ID&gt;))` |\n| `startAfter` | Returns records beginning after the document ID provided | `startAfter: Buffer.from(Identifier.from(&lt;document ID&gt;))` |\n\n&gt; \ud83d\udea7 Compound Index Constraints\n&gt;\n&gt; For indices composed of multiple fields ([example from the DPNS data contract](https://github.com/dashevo/platform/blob/master/packages/dpns-contract/schema/dpns-contract-documents.json)), the sort order in an `orderBy` must either match the order defined in the data contract OR be the inverse order.\n&gt;\n&gt; Please refer to [pull request 230](https://github.com/dashevo/platform/pull/230) for additional information related to compound index constraints in Platform v0.22.\n\n# Example query\nThe following query combines both a where clause and query modifiers.\n\n```javascript\nimport Dash from &quot;dash&quot;\n\nconst { Essentials: { Buffer }, PlatformProtocol: { Identifier } } = Dash;\n\nconst query = {\n  limit: 5,\n  startAt: Buffer.from(Identifier.from(&#39;4Qp3menV9QjE92hc3BzkUCusAmHLxh1AU6gsVsPF4L2q&#39;)),\n  where: [\n    [&#39;normalizedParentDomainName&#39;, &#39;==&#39;, &#39;dash&#39;],\n    [&#39;normalizedLabel&#39;, &#39;startsWith&#39;, &#39;test&#39;],\n  ],\n  orderBy: [\n    [&#39;normalizedLabel&#39;, &#39;asc&#39;],\n  ],\n}\n</code></pre>\n</div>"
}