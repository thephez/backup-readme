{
 "pendingAlgoliaPublish": false, 
 "parentDoc": null, 
 "excerpt": "", 
 "api": {
  "url": "", 
  "params": [], 
  "method": "get", 
  "auth": "required", 
  "results": {
   "codes": [
    {
     "status": 200, 
     "code": "{}", 
     "name": "", 
     "language": "json"
    }, 
    {
     "status": 400, 
     "code": "{}", 
     "name": "", 
     "language": "json"
    }
   ]
  }
 }, 
 "previousSlug": "", 
 "updatedAt": "2021-01-25T20:30:31.663Z", 
 "id": "6035408f7bfb31002c3da300", 
 "sync_unique": "", 
 "isApi": false, 
 "createdAt": "2020-01-07T13:44:04.059Z", 
 "category": "6035408f7bfb31002c3da2c3", 
 "title": "Query Syntax", 
 "next": {
  "description": "", 
  "pages": []
 }, 
 "version": "6035408f7bfb31002c3da325", 
 "slugUpdatedAt": "2020-10-28T05:49:05.115Z", 
 "hidden": false, 
 "type": "basic", 
 "metadata": {
  "image": [], 
  "description": "", 
  "title": ""
 }, 
 "body": "# Overview\n\nGenerally queries will consist of a `where` clause plus optional [modifiers](#query-modifiers) controlling the specific subset of results returned. \n\n# Where Clause\n\nThe Where clause must be a non-empty array containing not more than 10 conditions. For some operators, `value` will be an array. See the following general syntax example:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"{\\n  where: [\\n    [<fieldName>, <operator>, <value>],\\n    [<fieldName>, <array operator>, [<value1>, <value2>]] \\n  ] \\n}\",\n      \"language\": \"json\",\n      \"name\": \"Syntax\"\n    }\n  ]\n}\n[/block]\n## Fields\nValid fields consist of the indices defined for the document being queried. For example, the [DPNS data contract](https://github.com/dashevo/dpns-contract/blob/master/schema/dpns-contract-documents.json) defines three indices:\n\n| Index Field(s) | Index Type | Unique |\n| - | - | :-: | \n| [normalizedParentDomainName, normalizedLabel](https://github.com/dashevo/dpns-contract/blob/master/schema/dpns-contract-documents.json#L4-L14) | Compound | Yes |\n| [records.dashUniqueIdentityId](https://github.com/dashevo/dpns-contract/blob/master/schema/dpns-contract-documents.json#L15-L22) | Single Field | Yes |\n| [records.dashAliasIdentityId](https://github.com/dashevo/dpns-contract/blob/master/schema/dpns-contract-documents.json#L23-L29) | Single Field | No |\n\n\n[block:html]\n{\n  \"html\": \"<div></div>\\n<!--\\nSpecial fields - `$id`, `$userId`\\n-->\\n<style></style>\"\n}\n[/block]\n## Comparison Operators\n\n| Name | Description |\n| :-: | - |\n| < | Matches values that are less than a specified value |\n| <= | Matches values that are less than or equal to a specified value |\n| == | Matches values that are equal to a specified value |\n| => | Matches values that are greater than or equal to a specified value |\n| > | Matches values that are greater than a specified value |\n| in | Matches all document(s) where the value of the field equals any value in the specified array <br>Array may include up to 100 (unique) elements |\n\n## Array Operators\n\n| Name | Description |\n| :-: | - |\n| length | Selects documents if the array field is a specified size (integer) |\n| contains | - Matches arrays that contain all elements specified in the query condition array <br>- 100 element maximum\n| elementMatch |  - Matches documents that contain an array field with at least one element that matches all the criteria in the query condition array <br>- Two or more conditions must be provided\n\n## Evaluation Operators\n\n| Name | Description |\n| :-: | - |\n| startsWith | Selects documents where the value of a field begins with the specified characters (string, <= 255 characters) |\n\n## Operator Examples\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"{\\n  where: [\\n    ['nameHash', '<', '56116861626961756e6176657a382e64617368'],\\n  ],\\n}\",\n      \"language\": \"json\",\n      \"name\": \"<\"\n    },\n    {\n      \"code\": \"{\\n  where: [\\n      ['normalizedParentDomainName', '==', 'dash'],\\n      // Return all matching names from the provided array\\n      ['normalizedLabel', 'in', ['alice', 'bob']],\\n    ]\\n}\",\n      \"language\": \"json\",\n      \"name\": \"in\"\n    },\n    {\n      \"code\": \"{\\n  where: [\\n      ['normalizedParentDomainName', '==', 'dash'],\\n      // Return any names beginning with \\\"al\\\" (e.g. alice, alfred)\\n      ['normalizedLabel', 'startsWith', 'al'],\\n    ]\\n}\",\n      \"language\": \"json\",\n      \"name\": \"startsWith\"\n    },\n    {\n      \"code\": \"{\\n  where: [\\n      // Return documents that have 5 values in their `items` array\\n      ['items', 'length', 5],\\n    ]\\n}\",\n      \"language\": \"json\",\n      \"name\": \"length\"\n    },\n    {\n      \"code\": \"{\\n  where: [\\n      // Return documents that have both \\\"red\\\" and \\\"blue\\\" \\n      // in the `colors` array\\n      ['colors', 'contains', ['red', 'blue']],\\n    ]\\n}\",\n      \"language\": \"json\",\n      \"name\": \"contains\"\n    },\n    {\n      \"code\": \"{\\n  where: [\\n    // Return `scores` documents where the results contain \\n    // elements in the range 80-90\\n    ['scores', 'elementMatch',\\n      [\\n        ['results', '>=', '80'],\\n        ['results', '<=', '90']\\n      ],\\n    ],\\n  ]\\n}\",\n      \"language\": \"json\",\n      \"name\": \"elementMatch\"\n    }\n  ]\n}\n[/block]\n# Query Modifiers\nThe query modifiers described here determine how query results will be sorted and what subset of data matching the query will be returned.\n\n| Modifier | Effect | Example |\n| - | - | - |\n| `limit` | Restricts the number of results returned (maximum: 100) | `limit: 10` |\n| `orderBy` | Returns records sorted by the field(s) provided (maximum: 2) | `orderBy: [['normalizedLabel', 'asc']]`\n| `startAt` | Returns records beginning with the index provided (minimum: 1, maximum: 20000) | `startAt: 100` |\n| `startAfter` | Returns records beginning after the index provided  (maximum: 20000) | `startAfter: 50` |\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"title\": \"Compound Index Constraints\",\n  \"body\": \"For indices composed of multiple fields ([example from the DPNS data contract](https://github.com/dashevo/dpns-contract/blob/master/schema/dpns-contract-documents.json)), the sort order in an `orderBy` must either match the order defined in the data contract OR be the inverse order. Please see the [mongoDB documention](https://docs.mongodb.com/manual/core/index-compound/#sort-order) for further details related to this topic.\\nAdditionally, the order in which the properties are defined in a compound index affects how queries may be constructed per this [mongoDB documentation](https://docs.mongodb.com/manual/core/index-compound/#prefixes). For example, a DPNS query for `normalizedLabel` must also include `normalizedParentDomainName` while the inverse is not true ([index definition](https://github.com/dashevo/dpns-contract/blob/master/schema/dpns-contract-documents.json) in the DPNS contract).\"\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"danger\",\n  \"body\": \"Currently inverse sort functionality for compound indices is not available on Evonet. [Drive PR #313](https://github.com/dashevo/drive/pull/313) will enable this functionality once deployed.\",\n  \"title\": \"Compound Index Inverse Sort\"\n}\n[/block]\n# Example query\nThe following query combines both a where clause and query modifiers.\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"{\\n    where: [\\n        ['normalizedParentDomainName', '==', 'dash'],\\n        ['normalizedLabel', 'startsWith', 'test'],\\n    ],\\n    startAt: 15,\\n    limit: 20,\\n    orderBy: [\\n        ['records.dashUniqueIdentityId', 'asc']\\n    ]\\n}\",\n      \"language\": \"json\"\n    }\n  ]\n}\n[/block]\n# MongoDB Comparision\n\nCurrently Dash Platform uses mongoDB for storage. The following table shows a mapping of platform operators to the underlying mongoDB operators that are used internally:\n\n| Platform Operator | mongoDB Operator | \n| :-: | :-: | \n| < | [$lt](https://docs.mongodb.com/manual/reference/operator/query/lt) |\n| <= | [$lte](https://docs.mongodb.com/manual/reference/operator/query/lte) |\n| == | [$eq](https://docs.mongodb.com/manual/reference/operator/query/eq) |\n| => | [$gte](https://docs.mongodb.com/manual/reference/operator/query/gte) |\n| > | [$gt](https://docs.mongodb.com/manual/reference/operator/query/gt) |\n| in | [$in](https://docs.mongodb.com/manual/reference/operator/query/in) |\n| length | [$size](https://docs.mongodb.com/manual/reference/operator/query/size/) |\n| startsWith | [$regex](https://docs.mongodb.com/manual/reference/operator/query/regex/) |\n| elementMatch | [$elemMatch](https://docs.mongodb.com/manual/reference/operator/query/elemMatch) |\n| contains | [$all](https://docs.mongodb.com/manual/reference/operator/query/all) |", 
 "link_external": false, 
 "body_html": "<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-overview\"></div>Overview<a class=\"fa fa-anchor\" href=\"#section-overview\"></a></h1>\n<p>Generally queries will consist of a <code>where</code> clause plus optional <a href=\"#query-modifiers\">modifiers</a> controlling the specific subset of results returned. </p>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-where-clause\"></div>Where Clause<a class=\"fa fa-anchor\" href=\"#section-where-clause\"></a></h1>\n<p>The Where clause must be a non-empty array containing not more than 10 conditions. For some operators, <code>value</code> will be an array. See the following general syntax example:</p>\n\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">Syntax</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(991)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-991\">{\n  where: [\n    [&lt;fieldName&gt;, &lt;operator&gt;, &lt;value&gt;],\n    [&lt;fieldName&gt;, &lt;array operator&gt;, [&lt;value1&gt;, &lt;value2&gt;]] \n  ] \n}</textarea>\n\t\t\t<pre id=\"code-991\"><code><span class='cm-s-neo'>{\n  <span class=\"cm-property\">where</span>: [\n    [<span class=\"cm-operator\">&lt;</span><span class=\"cm-variable\">fieldName</span><span class=\"cm-operator\">&gt;</span>, <span class=\"cm-operator\">&lt;</span><span class=\"cm-variable\">operator</span><span class=\"cm-operator\">&gt;</span>, <span class=\"cm-operator\">&lt;</span><span class=\"cm-variable\">value</span><span class=\"cm-operator\">&gt;</span>],\n    [<span class=\"cm-operator\">&lt;</span><span class=\"cm-variable\">fieldName</span><span class=\"cm-operator\">&gt;</span>, <span class=\"cm-operator\">&lt;</span><span class=\"cm-variable\">array</span> <span class=\"cm-variable\">operator</span><span class=\"cm-operator\">&gt;</span>, [<span class=\"cm-operator\">&lt;</span><span class=\"cm-variable\">value1</span><span class=\"cm-operator\">&gt;</span>, <span class=\"cm-operator\">&lt;</span><span class=\"cm-variable\">value2</span><span class=\"cm-operator\">&gt;</span>]] \n  ] \n}</span></code></pre></span>\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-fields\"></div>Fields<a class=\"fa fa-anchor\" href=\"#section-fields\"></a></h2>\n<p>Valid fields consist of the indices defined for the document being queried. For example, the <a href=\"https://github.com/dashevo/dpns-contract/blob/master/schema/dpns-contract-documents.json\">DPNS data contract</a> defines three indices:</p>\n<div class=\"marked-table\"><table>\n<thead>\n<tr>\n<th>Index Field(s)</th>\n<th>Index Type</th>\n<th style=\"text-align:center\">Unique</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/dashevo/dpns-contract/blob/master/schema/dpns-contract-documents.json#L4-L14\">normalizedParentDomainName, normalizedLabel</a></td>\n<td>Compound</td>\n<td style=\"text-align:center\">Yes</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/dashevo/dpns-contract/blob/master/schema/dpns-contract-documents.json#L15-L22\">records.dashUniqueIdentityId</a></td>\n<td>Single Field</td>\n<td style=\"text-align:center\">Yes</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/dashevo/dpns-contract/blob/master/schema/dpns-contract-documents.json#L23-L29\">records.dashAliasIdentityId</a></td>\n<td>Single Field</td>\n<td style=\"text-align:center\">No</td>\n</tr>\n</tbody>\n</table></div>\n\n</div>\n<div class=\"magic-block-html\"><div></div>\n<!--\nSpecial fields - `$id`, `$userId`\n-->\n<style></style>\n</div>\n<div class=\"magic-block-textarea\"><h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-comparison-operators\"></div>Comparison Operators<a class=\"fa fa-anchor\" href=\"#section-comparison-operators\"></a></h2>\n<div class=\"marked-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">&lt;</td>\n<td>Matches values that are less than a specified value</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;=</td>\n<td>Matches values that are less than or equal to a specified value</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">==</td>\n<td>Matches values that are equal to a specified value</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">=&gt;</td>\n<td>Matches values that are greater than or equal to a specified value</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt;</td>\n<td>Matches values that are greater than a specified value</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">in</td>\n<td>Matches all document(s) where the value of the field equals any value in the specified array <br>Array may include up to 100 (unique) elements</td>\n</tr>\n</tbody>\n</table></div>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-array-operators\"></div>Array Operators<a class=\"fa fa-anchor\" href=\"#section-array-operators\"></a></h2>\n<div class=\"marked-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">length</td>\n<td>Selects documents if the array field is a specified size (integer)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">contains</td>\n<td>- Matches arrays that contain all elements specified in the query condition array <br>- 100 element maximum</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">elementMatch</td>\n<td>- Matches documents that contain an array field with at least one element that matches all the criteria in the query condition array <br>- Two or more conditions must be provided</td>\n</tr>\n</tbody>\n</table></div>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-evaluation-operators\"></div>Evaluation Operators<a class=\"fa fa-anchor\" href=\"#section-evaluation-operators\"></a></h2>\n<div class=\"marked-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">startsWith</td>\n<td>Selects documents where the value of a field begins with the specified characters (string, &lt;= 255 characters)</td>\n</tr>\n</tbody>\n</table></div>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-operator-examples\"></div>Operator Examples<a class=\"fa fa-anchor\" href=\"#section-operator-examples\"></a></h2>\n\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">&lt;</a></li>\n\t\t<li><a href=\"\" ng-click=\"showCode(1)\" ng-class=\"{active: (1 == tab)}\">in</a></li>\n\t\t<li><a href=\"\" ng-click=\"showCode(2)\" ng-class=\"{active: (2 == tab)}\">startsWith</a></li>\n\t\t<li><a href=\"\" ng-click=\"showCode(3)\" ng-class=\"{active: (3 == tab)}\">length</a></li>\n\t\t<li><a href=\"\" ng-click=\"showCode(4)\" ng-class=\"{active: (4 == tab)}\">contains</a></li>\n\t\t<li><a href=\"\" ng-click=\"showCode(5)\" ng-class=\"{active: (5 == tab)}\">elementMatch</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(589)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-589\">{\n  where: [\n    ['nameHash', '&lt;', '56116861626961756e6176657a382e64617368'],\n  ],\n}</textarea>\n\t\t\t<pre id=\"code-589\"><code><span class='cm-s-neo'>{\n  <span class=\"cm-property\">where</span>: [\n    [<span class=\"cm-string\">'nameHash'</span>, <span class=\"cm-string\">'&lt;'</span>, <span class=\"cm-string\">'56116861626961756e6176657a382e64617368'</span>],\n  ],\n}</span></code></pre></span><span ng-if=\"tab == 1\">\n\t\t\t<button ng-click=\"copyCode(149)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-149\">{\n  where: [\n      ['normalizedParentDomainName', '==', 'dash'],\n      // Return all matching names from the provided array\n      ['normalizedLabel', 'in', ['alice', 'bob']],\n    ]\n}</textarea>\n\t\t\t<pre id=\"code-149\"><code><span class='cm-s-neo'>{\n  <span class=\"cm-property\">where</span>: [\n      [<span class=\"cm-string\">'normalizedParentDomainName'</span>, <span class=\"cm-string\">'=='</span>, <span class=\"cm-string\">'dash'</span>],\n      <span class=\"cm-comment\">&#47;&#47; Return all matching names from the provided array</span>\n      [<span class=\"cm-string\">'normalizedLabel'</span>, <span class=\"cm-string\">'in'</span>, [<span class=\"cm-string\">'alice'</span>, <span class=\"cm-string\">'bob'</span>]],\n    ]\n}</span></code></pre></span><span ng-if=\"tab == 2\">\n\t\t\t<button ng-click=\"copyCode(951)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-951\">{\n  where: [\n      ['normalizedParentDomainName', '==', 'dash'],\n      // Return any names beginning with &quot;al&quot; (e.g. alice, alfred)\n      ['normalizedLabel', 'startsWith', 'al'],\n    ]\n}</textarea>\n\t\t\t<pre id=\"code-951\"><code><span class='cm-s-neo'>{\n  <span class=\"cm-property\">where</span>: [\n      [<span class=\"cm-string\">'normalizedParentDomainName'</span>, <span class=\"cm-string\">'=='</span>, <span class=\"cm-string\">'dash'</span>],\n      <span class=\"cm-comment\">&#47;&#47; Return any names beginning with \"al\" (e.g. alice, alfred)</span>\n      [<span class=\"cm-string\">'normalizedLabel'</span>, <span class=\"cm-string\">'startsWith'</span>, <span class=\"cm-string\">'al'</span>],\n    ]\n}</span></code></pre></span><span ng-if=\"tab == 3\">\n\t\t\t<button ng-click=\"copyCode(817)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-817\">{\n  where: [\n      // Return documents that have 5 values in their `items` array\n      ['items', 'length', 5],\n    ]\n}</textarea>\n\t\t\t<pre id=\"code-817\"><code><span class='cm-s-neo'>{\n  <span class=\"cm-property\">where</span>: [\n      <span class=\"cm-comment\">&#47;&#47; Return documents that have 5 values in their `items` array</span>\n      [<span class=\"cm-string\">'items'</span>, <span class=\"cm-string\">'length'</span>, <span class=\"cm-number\">5</span>],\n    ]\n}</span></code></pre></span><span ng-if=\"tab == 4\">\n\t\t\t<button ng-click=\"copyCode(184)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-184\">{\n  where: [\n      // Return documents that have both &quot;red&quot; and &quot;blue&quot; \n      // in the `colors` array\n      ['colors', 'contains', ['red', 'blue']],\n    ]\n}</textarea>\n\t\t\t<pre id=\"code-184\"><code><span class='cm-s-neo'>{\n  <span class=\"cm-property\">where</span>: [\n      <span class=\"cm-comment\">&#47;&#47; Return documents that have both \"red\" and \"blue\" </span>\n      <span class=\"cm-comment\">&#47;&#47; in the `colors` array</span>\n      [<span class=\"cm-string\">'colors'</span>, <span class=\"cm-string\">'contains'</span>, [<span class=\"cm-string\">'red'</span>, <span class=\"cm-string\">'blue'</span>]],\n    ]\n}</span></code></pre></span><span ng-if=\"tab == 5\">\n\t\t\t<button ng-click=\"copyCode(761)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-761\">{\n  where: [\n    // Return `scores` documents where the results contain \n    // elements in the range 80-90\n    ['scores', 'elementMatch',\n      [\n        ['results', '&gt;=', '80'],\n        ['results', '&lt;=', '90']\n      ],\n    ],\n  ]\n}</textarea>\n\t\t\t<pre id=\"code-761\"><code><span class='cm-s-neo'>{\n  <span class=\"cm-property\">where</span>: [\n    <span class=\"cm-comment\">&#47;&#47; Return `scores` documents where the results contain </span>\n    <span class=\"cm-comment\">&#47;&#47; elements in the range 80-90</span>\n    [<span class=\"cm-string\">'scores'</span>, <span class=\"cm-string\">'elementMatch'</span>,\n      [\n        [<span class=\"cm-string\">'results'</span>, <span class=\"cm-string\">'&gt;='</span>, <span class=\"cm-string\">'80'</span>],\n        [<span class=\"cm-string\">'results'</span>, <span class=\"cm-string\">'&lt;='</span>, <span class=\"cm-string\">'90'</span>]\n      ],\n    ],\n  ]\n}</span></code></pre></span>\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-query-modifiers\"></div>Query Modifiers<a class=\"fa fa-anchor\" href=\"#section-query-modifiers\"></a></h1>\n<p>The query modifiers described here determine how query results will be sorted and what subset of data matching the query will be returned.</p>\n<div class=\"marked-table\"><table>\n<thead>\n<tr>\n<th>Modifier</th>\n<th>Effect</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>limit</code></td>\n<td>Restricts the number of results returned (maximum: 100)</td>\n<td><code>limit: 10</code></td>\n</tr>\n<tr>\n<td><code>orderBy</code></td>\n<td>Returns records sorted by the field(s) provided (maximum: 2)</td>\n<td><code>orderBy: [[&#39;normalizedLabel&#39;, &#39;asc&#39;]]</code></td>\n</tr>\n<tr>\n<td><code>startAt</code></td>\n<td>Returns records beginning with the index provided (minimum: 1, maximum: 20000)</td>\n<td><code>startAt: 100</code></td>\n</tr>\n<tr>\n<td><code>startAfter</code></td>\n<td>Returns records beginning after the index provided  (maximum: 20000)</td>\n<td><code>startAfter: 50</code></td>\n</tr>\n</tbody>\n</table></div>\n\n</div>\n<div class=\"magic-block-callout type-warning \">\n\t<h3><i title=\"Warning\" class=\"fa fa-exclamation-circle\"></i>Compound Index Constraints\n\t</h3>\n\t<div class=\"callout-body\"><p>For indices composed of multiple fields (<a href=\"https://github.com/dashevo/dpns-contract/blob/master/schema/dpns-contract-documents.json\">example from the DPNS data contract</a>), the sort order in an <code>orderBy</code> must either match the order defined in the data contract OR be the inverse order. Please see the <a href=\"https://docs.mongodb.com/manual/core/index-compound/#sort-order\">mongoDB documention</a> for further details related to this topic.<br>Additionally, the order in which the properties are defined in a compound index affects how queries may be constructed per this <a href=\"https://docs.mongodb.com/manual/core/index-compound/#prefixes\">mongoDB documentation</a>. For example, a DPNS query for <code>normalizedLabel</code> must also include <code>normalizedParentDomainName</code> while the inverse is not true (<a href=\"https://github.com/dashevo/dpns-contract/blob/master/schema/dpns-contract-documents.json\">index definition</a> in the DPNS contract).</p>\n\n\t</div>\n</div>\n<div class=\"magic-block-callout type-danger \">\n\t<h3><i title=\"Danger\" class=\"fa fa-exclamation-triangle\"></i>Compound Index Inverse Sort\n\t</h3>\n\t<div class=\"callout-body\"><p>Currently inverse sort functionality for compound indices is not available on Evonet. <a href=\"https://github.com/dashevo/drive/pull/313\">Drive PR #313</a> will enable this functionality once deployed.</p>\n\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-example-query\"></div>Example query<a class=\"fa fa-anchor\" href=\"#section-example-query\"></a></h1>\n<p>The following query combines both a where clause and query modifiers.</p>\n\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">JSON</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(74)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-74\">{\n    where: [\n        ['normalizedParentDomainName', '==', 'dash'],\n        ['normalizedLabel', 'startsWith', 'test'],\n    ],\n    startAt: 15,\n    limit: 20,\n    orderBy: [\n        ['records.dashUniqueIdentityId', 'asc']\n    ]\n}</textarea>\n\t\t\t<pre id=\"code-74\"><code><span class='cm-s-neo'>{\n    <span class=\"cm-property\">where</span>: [\n        [<span class=\"cm-string\">'normalizedParentDomainName'</span>, <span class=\"cm-string\">'=='</span>, <span class=\"cm-string\">'dash'</span>],\n        [<span class=\"cm-string\">'normalizedLabel'</span>, <span class=\"cm-string\">'startsWith'</span>, <span class=\"cm-string\">'test'</span>],\n    ],\n    <span class=\"cm-property\">startAt</span>: <span class=\"cm-number\">15</span>,\n    <span class=\"cm-property\">limit</span>: <span class=\"cm-number\">20</span>,\n    <span class=\"cm-property\">orderBy</span>: [\n        [<span class=\"cm-string\">'records.dashUniqueIdentityId'</span>, <span class=\"cm-string\">'asc'</span>]\n    ]\n}</span></code></pre></span>\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-mongo-db-comparision\"></div>MongoDB Comparision<a class=\"fa fa-anchor\" href=\"#section-mongo-db-comparision\"></a></h1>\n<p>Currently Dash Platform uses mongoDB for storage. The following table shows a mapping of platform operators to the underlying mongoDB operators that are used internally:</p>\n<div class=\"marked-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Platform Operator</th>\n<th style=\"text-align:center\">mongoDB Operator</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">&lt;</td>\n<td style=\"text-align:center\"><a href=\"https://docs.mongodb.com/manual/reference/operator/query/lt\">$lt</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;=</td>\n<td style=\"text-align:center\"><a href=\"https://docs.mongodb.com/manual/reference/operator/query/lte\">$lte</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">==</td>\n<td style=\"text-align:center\"><a href=\"https://docs.mongodb.com/manual/reference/operator/query/eq\">$eq</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">=&gt;</td>\n<td style=\"text-align:center\"><a href=\"https://docs.mongodb.com/manual/reference/operator/query/gte\">$gte</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt;</td>\n<td style=\"text-align:center\"><a href=\"https://docs.mongodb.com/manual/reference/operator/query/gt\">$gt</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">in</td>\n<td style=\"text-align:center\"><a href=\"https://docs.mongodb.com/manual/reference/operator/query/in\">$in</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">length</td>\n<td style=\"text-align:center\"><a href=\"https://docs.mongodb.com/manual/reference/operator/query/size/\">$size</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">startsWith</td>\n<td style=\"text-align:center\"><a href=\"https://docs.mongodb.com/manual/reference/operator/query/regex/\">$regex</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">elementMatch</td>\n<td style=\"text-align:center\"><a href=\"https://docs.mongodb.com/manual/reference/operator/query/elemMatch\">$elemMatch</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">contains</td>\n<td style=\"text-align:center\"><a href=\"https://docs.mongodb.com/manual/reference/operator/query/all\">$all</a></td>\n</tr>\n</tbody>\n</table></div>\n\n</div>", 
 "user": "5b8400d7185d5e00036dcc3b", 
 "isReference": false, 
 "slug": "reference-query-syntax", 
 "link_url": "", 
 "project": "5bda01cad172e200499a20a9", 
 "__v": 4, 
 "_id": "6035408f7bfb31002c3da300", 
 "order": 0, 
 "updates": [
  "5e162ddcfe1f09001806494b", 
  "600f19bc59b27e0018b8b446", 
  "600f1a1b77276400122b924b", 
  "600f20a574e76300449ba946"
 ]
}