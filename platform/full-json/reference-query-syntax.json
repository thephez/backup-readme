{
 "parentDoc": null, 
 "excerpt": "", 
 "api": {
  "url": "", 
  "params": [], 
  "method": "get", 
  "auth": "required", 
  "results": {
   "codes": [
    {
     "status": 200, 
     "code": "{}", 
     "name": "", 
     "language": "json"
    }, 
    {
     "status": 400, 
     "code": "{}", 
     "name": "", 
     "language": "json"
    }
   ]
  }
 }, 
 "updatedAt": "2020-03-04T21:57:04.866Z", 
 "id": "5e148da377fd86001956eddb", 
 "sync_unique": "", 
 "isApi": false, 
 "createdAt": "2020-01-07T13:44:04.059Z", 
 "category": "5d6583437fe5090066c64397", 
 "title": "Query Syntax", 
 "next": {
  "description": "", 
  "pages": []
 }, 
 "version": "5d2374d8d238fb004e8f9243", 
 "hidden": false, 
 "type": "basic", 
 "metadata": {
  "image": [], 
  "description": "", 
  "title": ""
 }, 
 "body": "# Overview\n\nGenerally queries will consist of a `where` clause plus optional modifiers controlling the specific subset of results returned. \n\n# Modifier Details\nThe query modifiers described here determine how query results will be sorted and what subset of data matching the query will be returned.\n\n| Modifier | Effect | Example |\n| - | - | - |\n| `limit` | Restricts the number of results returned (maximum: 100) | `limit: 10` |\n| `orderBy` | Returns records sorted by the field(s) provided (maximum: 2) | `orderBy: [['normalizedLabel', 'asc']]`\n| `startAt` | Returns records beginning with the index provided (maximum: 20000) | `startAt: 100` |\n| `startAfter` | Returns records beginning after the index provided  (maximum: 20000) | `startAfter: 50` |\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"title\": \"Compound Index Constraints\",\n  \"body\": \"For indices composed of multiple fields ([example from the DPNS data contract](https://github.com/dashevo/dpns-contract/blob/master/src/schema/dpns-documents.json#L11-L14)), the sort order in an `orderBy` must either match the order defined in the data contract OR be the inverse order. Please see the [mongoDB documention](https://docs.mongodb.com/manual/core/index-compound/#sort-order) for further details related to this topic.\"\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"danger\",\n  \"body\": \"Currently inverse sort functionality for compound indices is not available on Evonet. [Drive PR #313](https://github.com/dashevo/drive/pull/313) will enable this functionality once deployed.\",\n  \"title\": \"Compound Index Inverse Sort\"\n}\n[/block]\n# Where Clause Details\n\nThe Where clause must be a non-empty array containing not more than 10 conditions. See the following general syntax example:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"{\\n  where: [\\n    [<fieldName>, <operator>, <condition>],\\n    [<fieldName>, <operator>, <condition>] \\n  ] \\n}\",\n      \"language\": \"json\",\n      \"name\": \"Syntax\"\n    }\n  ]\n}\n[/block]\n## Fields\nValid fields consist of the indices defined for the document being queried. For example, the [DPNS data contract](https://github.com/dashevo/dpns-contract/blob/master/src/schema/dpns-documents.json) defines three indices:\n\n| Index Field(s) | Index Type | Unique |\n| - | - | :-: | \n| [nameHash](https://github.com/dashevo/dpns-contract/blob/master/src/schema/dpns-documents.json#L4-L9) | Single Field | Yes |\n| [normalizedParentDomain, normalizedLabel](https://github.com/dashevo/dpns-contract/blob/master/src/schema/dpns-documents.json#L10-L15) | Compound | No |\n| [records.dashIdentity](https://github.com/dashevo/dpns-contract/blob/master/src/schema/dpns-documents.json#L16-L20) | Single Field | Yes |\n\n\n[block:html]\n{\n  \"html\": \"<div></div>\\n<!--\\nSpecial fields - `$id`, `$userId`\\n-->\\n<style></style>\"\n}\n[/block]\n## Operators\nThe operators described below provide ways to locate data stored in documents on the platform.\n\n### Comparison Operators\n\n| Name | Description |\n| :-: | - |\n| < | Matches values that are less than a specified value |\n| <= | Matches values that are less than or equal to a specified value |\n| == | Matches values that are equal to a specified value |\n| => | Matches values that are greater than or equal to a specified value |\n| > | Matches values that are greater than a specified value |\n\n### Other Operators\n\n| | |\n| - | - |\n| in |  - Selects the documents where the value of a field equals any value in the specified array<br> - Array may only include <= 100 (unique) elements\n| startsWith|  - Selects documents where the value of a field begins with the specified characters\n| length |\n| contains |\n| elementMatch |  - Matches documents that contain an array field with at least one element that matches all the specified query criteria <br>- Two or more conditions must be provided\n\n`in`\n - Selects the documents where the value of the field matches any value in the specified array\n - Array may only include <= 100 (unique) elements\n<br>\n\n`startsWith` (string, <= 255 characters)\n - Selects documents where the value of a field begins with the specified characters\n<br>\n\n`length`  (0 or positive integer)\n<br>\n`contains` (scalar or array of scalars only, 100 element maximum, unique elements)\n<br>\n`elementMatch` \n - Matches documents that contain an array field with at least one element that matches all the specified query criteria\n - Two or more conditions must be provided\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"{\\n  where: [\\n    ['nameHash', '<', '56116861626961756e6176657a382e64617368'],\\n  ],\\n}\",\n      \"language\": \"json\",\n      \"name\": \"<\"\n    },\n    {\n      \"code\": \"{\\n  where: [\\n      ['normalizedParentDomainName', '==', 'dash'],\\n      // Return all matching names from the provided array\\n      ['normalizedLabel', 'in', ['alice', 'bob']],\\n    ]\\n}\",\n      \"language\": \"json\",\n      \"name\": \"in\"\n    },\n    {\n      \"code\": \"{\\n  where: [\\n      ['normalizedParentDomainName', '==', 'dash'],\\n      // Return any names beginning with \\\"al\\\" (e.g. alice, alfred)\\n      ['normalizedLabel', 'startsWith', 'al'],\\n    ]\\n}\",\n      \"language\": \"json\",\n      \"name\": \"startsWith\"\n    },\n    {\n      \"code\": \"{\\n  where: [\\n      ['normalizedParentDomainName', '==', 'dash'],\\n      // Return ...\\n      ['normalizedLabel', 'contains', ['alice']],\\n    ]\\n}\",\n      \"language\": \"json\",\n      \"name\": \"contains\"\n    },\n    {\n      \"code\": \"{\\n  where: [\\n    // Return scores documents where the results contain elements in a range\\n    ['scores', 'elementMatch',\\n      [\\n        ['results', '>=', '80'],\\n        ['results', '<=', '90']\\n      ],\\n    ],\\n  ]\\n}\",\n      \"language\": \"json\",\n      \"name\": \"elementMatch\"\n    }\n  ]\n}\n[/block]\n# Example query\nThe following query combines both a where clause and query modifiers.\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"{\\n    where: [\\n        ['normalizedParentDomainName', '==', 'dash'],\\n        ['normalizedLabel', 'startsWith', 'test'],\\n    ],\\n    startAt: 15,\\n    limit: 20,\\n    orderBy: [\\n        ['nameHash', 'asc']\\n    ]\\n}\",\n      \"language\": \"json\"\n    }\n  ]\n}\n[/block]", 
 "link_external": false, 
 "body_html": "<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-overview\"></div>Overview<a class=\"fa fa-anchor\" href=\"#section-overview\"></a></h1>\n<p>Generally queries will consist of a <code>where</code> clause plus optional modifiers controlling the specific subset of results returned. </p>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-modifier-details\"></div>Modifier Details<a class=\"fa fa-anchor\" href=\"#section-modifier-details\"></a></h1>\n<p>The query modifiers described here determine how query results will be sorted and what subset of data matching the query will be returned.</p>\n<div class=\"marked-table\"><table>\n<thead>\n<tr>\n<th>Modifier</th>\n<th>Effect</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>limit</code></td>\n<td>Restricts the number of results returned (maximum: 100)</td>\n<td><code>limit: 10</code></td>\n</tr>\n<tr>\n<td><code>orderBy</code></td>\n<td>Returns records sorted by the field(s) provided (maximum: 2)</td>\n<td><code>orderBy: [[&#39;normalizedLabel&#39;, &#39;asc&#39;]]</code></td>\n</tr>\n<tr>\n<td><code>startAt</code></td>\n<td>Returns records beginning with the index provided (maximum: 20000)</td>\n<td><code>startAt: 100</code></td>\n</tr>\n<tr>\n<td><code>startAfter</code></td>\n<td>Returns records beginning after the index provided  (maximum: 20000)</td>\n<td><code>startAfter: 50</code></td>\n</tr>\n</tbody>\n</table></div>\n\n</div>\n<div class=\"magic-block-callout type-warning \">\n\t<h3><i title=\"Warning\" class=\"fa fa-exclamation-circle\"></i>Compound Index Constraints\n\t</h3>\n\t<div class=\"callout-body\"><p>For indices composed of multiple fields (<a href=\"https://github.com/dashevo/dpns-contract/blob/master/src/schema/dpns-documents.json#L11-L14\">example from the DPNS data contract</a>), the sort order in an <code>orderBy</code> must either match the order defined in the data contract OR be the inverse order. Please see the <a href=\"https://docs.mongodb.com/manual/core/index-compound/#sort-order\">mongoDB documention</a> for further details related to this topic.</p>\n\n\t</div>\n</div>\n<div class=\"magic-block-callout type-danger \">\n\t<h3><i title=\"Danger\" class=\"fa fa-exclamation-triangle\"></i>Compound Index Inverse Sort\n\t</h3>\n\t<div class=\"callout-body\"><p>Currently inverse sort functionality for compound indices is not available on Evonet. <a href=\"https://github.com/dashevo/drive/pull/313\">Drive PR #313</a> will enable this functionality once deployed.</p>\n\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-where-clause-details\"></div>Where Clause Details<a class=\"fa fa-anchor\" href=\"#section-where-clause-details\"></a></h1>\n<p>The Where clause must be a non-empty array containing not more than 10 conditions. See the following general syntax example:</p>\n\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">Syntax</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(455)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-455\">{\n  where: [\n    [&lt;fieldName&gt;, &lt;operator&gt;, &lt;condition&gt;],\n    [&lt;fieldName&gt;, &lt;operator&gt;, &lt;condition&gt;] \n  ] \n}</textarea>\n\t\t\t<pre id=\"code-455\"><code><span class='cm-s-neo'>{\n  <span class=\"cm-property\">where</span>: [\n    [<span class=\"cm-operator\">&lt;</span><span class=\"cm-variable\">fieldName</span><span class=\"cm-operator\">&gt;</span>, <span class=\"cm-operator\">&lt;</span><span class=\"cm-variable\">operator</span><span class=\"cm-operator\">&gt;</span>, <span class=\"cm-operator\">&lt;</span><span class=\"cm-variable\">condition</span><span class=\"cm-operator\">&gt;</span>],\n    [<span class=\"cm-operator\">&lt;</span><span class=\"cm-variable\">fieldName</span><span class=\"cm-operator\">&gt;</span>, <span class=\"cm-operator\">&lt;</span><span class=\"cm-variable\">operator</span><span class=\"cm-operator\">&gt;</span>, <span class=\"cm-operator\">&lt;</span><span class=\"cm-variable\">condition</span><span class=\"cm-operator\">&gt;</span>] \n  ] \n}</span></code></pre></span>\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-fields\"></div>Fields<a class=\"fa fa-anchor\" href=\"#section-fields\"></a></h2>\n<p>Valid fields consist of the indices defined for the document being queried. For example, the <a href=\"https://github.com/dashevo/dpns-contract/blob/master/src/schema/dpns-documents.json\">DPNS data contract</a> defines three indices:</p>\n<div class=\"marked-table\"><table>\n<thead>\n<tr>\n<th>Index Field(s)</th>\n<th>Index Type</th>\n<th style=\"text-align:center\">Unique</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/dashevo/dpns-contract/blob/master/src/schema/dpns-documents.json#L4-L9\">nameHash</a></td>\n<td>Single Field</td>\n<td style=\"text-align:center\">Yes</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/dashevo/dpns-contract/blob/master/src/schema/dpns-documents.json#L10-L15\">normalizedParentDomain, normalizedLabel</a></td>\n<td>Compound</td>\n<td style=\"text-align:center\">No</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/dashevo/dpns-contract/blob/master/src/schema/dpns-documents.json#L16-L20\">records.dashIdentity</a></td>\n<td>Single Field</td>\n<td style=\"text-align:center\">Yes</td>\n</tr>\n</tbody>\n</table></div>\n\n</div>\n<div class=\"magic-block-html\"><div></div>\n<!--\nSpecial fields - `$id`, `$userId`\n-->\n<style></style>\n</div>\n<div class=\"magic-block-textarea\"><h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-operators\"></div>Operators<a class=\"fa fa-anchor\" href=\"#section-operators\"></a></h2>\n<p>The operators described below provide ways to locate data stored in documents on the platform.</p>\n<h3 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-comparison-operators\"></div>Comparison Operators<a class=\"fa fa-anchor\" href=\"#section-comparison-operators\"></a></h3>\n<div class=\"marked-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">&lt;</td>\n<td>Matches values that are less than a specified value</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;=</td>\n<td>Matches values that are less than or equal to a specified value</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">==</td>\n<td>Matches values that are equal to a specified value</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">=&gt;</td>\n<td>Matches values that are greater than or equal to a specified value</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt;</td>\n<td>Matches values that are greater than a specified value</td>\n</tr>\n</tbody>\n</table></div>\n<h3 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-other-operators\"></div>Other Operators<a class=\"fa fa-anchor\" href=\"#section-other-operators\"></a></h3>\n<div class=\"marked-table\"><table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>in</td>\n<td>- Selects the documents where the value of a field equals any value in the specified array<br> - Array may only include &lt;= 100 (unique) elements</td>\n</tr>\n<tr>\n<td>startsWith</td>\n<td>- Selects documents where the value of a field begins with the specified characters</td>\n</tr>\n<tr>\n<td>length</td>\n</tr>\n<tr>\n<td>contains</td>\n</tr>\n<tr>\n<td>elementMatch</td>\n<td>- Matches documents that contain an array field with at least one element that matches all the specified query criteria <br>- Two or more conditions must be provided</td>\n</tr>\n</tbody>\n</table></div>\n<p><code>in</code></p>\n<ul>\n<li >Selects the documents where the value of the field matches any value in the specified array</li><li >Array may only include &lt;= 100 (unique) elements<br><br></li></ul>\n<p><code>startsWith</code> (string, &lt;= 255 characters)</p>\n<ul>\n<li >Selects documents where the value of a field begins with the specified characters<br><br></li></ul>\n<p><code>length</code>  (0 or positive integer)<br><br><br><code>contains</code> (scalar or array of scalars only, 100 element maximum, unique elements)<br><br><br><code>elementMatch</code> </p>\n<ul>\n<li >Matches documents that contain an array field with at least one element that matches all the specified query criteria</li><li >Two or more conditions must be provided</li></ul>\n\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">&lt;</a></li>\n\t\t<li><a href=\"\" ng-click=\"showCode(1)\" ng-class=\"{active: (1 == tab)}\">in</a></li>\n\t\t<li><a href=\"\" ng-click=\"showCode(2)\" ng-class=\"{active: (2 == tab)}\">startsWith</a></li>\n\t\t<li><a href=\"\" ng-click=\"showCode(3)\" ng-class=\"{active: (3 == tab)}\">contains</a></li>\n\t\t<li><a href=\"\" ng-click=\"showCode(4)\" ng-class=\"{active: (4 == tab)}\">elementMatch</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(819)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-819\">{\n  where: [\n    ['nameHash', '&lt;', '56116861626961756e6176657a382e64617368'],\n  ],\n}</textarea>\n\t\t\t<pre id=\"code-819\"><code><span class='cm-s-neo'>{\n  <span class=\"cm-property\">where</span>: [\n    [<span class=\"cm-string\">'nameHash'</span>, <span class=\"cm-string\">'&lt;'</span>, <span class=\"cm-string\">'56116861626961756e6176657a382e64617368'</span>],\n  ],\n}</span></code></pre></span><span ng-if=\"tab == 1\">\n\t\t\t<button ng-click=\"copyCode(612)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-612\">{\n  where: [\n      ['normalizedParentDomainName', '==', 'dash'],\n      // Return all matching names from the provided array\n      ['normalizedLabel', 'in', ['alice', 'bob']],\n    ]\n}</textarea>\n\t\t\t<pre id=\"code-612\"><code><span class='cm-s-neo'>{\n  <span class=\"cm-property\">where</span>: [\n      [<span class=\"cm-string\">'normalizedParentDomainName'</span>, <span class=\"cm-string\">'=='</span>, <span class=\"cm-string\">'dash'</span>],\n      <span class=\"cm-comment\">&#47;&#47; Return all matching names from the provided array</span>\n      [<span class=\"cm-string\">'normalizedLabel'</span>, <span class=\"cm-string\">'in'</span>, [<span class=\"cm-string\">'alice'</span>, <span class=\"cm-string\">'bob'</span>]],\n    ]\n}</span></code></pre></span><span ng-if=\"tab == 2\">\n\t\t\t<button ng-click=\"copyCode(281)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-281\">{\n  where: [\n      ['normalizedParentDomainName', '==', 'dash'],\n      // Return any names beginning with &quot;al&quot; (e.g. alice, alfred)\n      ['normalizedLabel', 'startsWith', 'al'],\n    ]\n}</textarea>\n\t\t\t<pre id=\"code-281\"><code><span class='cm-s-neo'>{\n  <span class=\"cm-property\">where</span>: [\n      [<span class=\"cm-string\">'normalizedParentDomainName'</span>, <span class=\"cm-string\">'=='</span>, <span class=\"cm-string\">'dash'</span>],\n      <span class=\"cm-comment\">&#47;&#47; Return any names beginning with \"al\" (e.g. alice, alfred)</span>\n      [<span class=\"cm-string\">'normalizedLabel'</span>, <span class=\"cm-string\">'startsWith'</span>, <span class=\"cm-string\">'al'</span>],\n    ]\n}</span></code></pre></span><span ng-if=\"tab == 3\">\n\t\t\t<button ng-click=\"copyCode(203)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-203\">{\n  where: [\n      ['normalizedParentDomainName', '==', 'dash'],\n      // Return ...\n      ['normalizedLabel', 'contains', ['alice']],\n    ]\n}</textarea>\n\t\t\t<pre id=\"code-203\"><code><span class='cm-s-neo'>{\n  <span class=\"cm-property\">where</span>: [\n      [<span class=\"cm-string\">'normalizedParentDomainName'</span>, <span class=\"cm-string\">'=='</span>, <span class=\"cm-string\">'dash'</span>],\n      <span class=\"cm-comment\">&#47;&#47; Return ...</span>\n      [<span class=\"cm-string\">'normalizedLabel'</span>, <span class=\"cm-string\">'contains'</span>, [<span class=\"cm-string\">'alice'</span>]],\n    ]\n}</span></code></pre></span><span ng-if=\"tab == 4\">\n\t\t\t<button ng-click=\"copyCode(516)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-516\">{\n  where: [\n    // Return scores documents where the results contain elements in a range\n    ['scores', 'elementMatch',\n      [\n        ['results', '&gt;=', '80'],\n        ['results', '&lt;=', '90']\n      ],\n    ],\n  ]\n}</textarea>\n\t\t\t<pre id=\"code-516\"><code><span class='cm-s-neo'>{\n  <span class=\"cm-property\">where</span>: [\n    <span class=\"cm-comment\">&#47;&#47; Return scores documents where the results contain elements in a range</span>\n    [<span class=\"cm-string\">'scores'</span>, <span class=\"cm-string\">'elementMatch'</span>,\n      [\n        [<span class=\"cm-string\">'results'</span>, <span class=\"cm-string\">'&gt;='</span>, <span class=\"cm-string\">'80'</span>],\n        [<span class=\"cm-string\">'results'</span>, <span class=\"cm-string\">'&lt;='</span>, <span class=\"cm-string\">'90'</span>]\n      ],\n    ],\n  ]\n}</span></code></pre></span>\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-example-query\"></div>Example query<a class=\"fa fa-anchor\" href=\"#section-example-query\"></a></h1>\n<p>The following query combines both a where clause and query modifiers.</p>\n\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">JSON</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(712)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-712\">{\n    where: [\n        ['normalizedParentDomainName', '==', 'dash'],\n        ['normalizedLabel', 'startsWith', 'test'],\n    ],\n    startAt: 15,\n    limit: 20,\n    orderBy: [\n        ['nameHash', 'asc']\n    ]\n}</textarea>\n\t\t\t<pre id=\"code-712\"><code><span class='cm-s-neo'>{\n    <span class=\"cm-property\">where</span>: [\n        [<span class=\"cm-string\">'normalizedParentDomainName'</span>, <span class=\"cm-string\">'=='</span>, <span class=\"cm-string\">'dash'</span>],\n        [<span class=\"cm-string\">'normalizedLabel'</span>, <span class=\"cm-string\">'startsWith'</span>, <span class=\"cm-string\">'test'</span>],\n    ],\n    <span class=\"cm-property\">startAt</span>: <span class=\"cm-number\">15</span>,\n    <span class=\"cm-property\">limit</span>: <span class=\"cm-number\">20</span>,\n    <span class=\"cm-property\">orderBy</span>: [\n        [<span class=\"cm-string\">'nameHash'</span>, <span class=\"cm-string\">'asc'</span>]\n    ]\n}</span></code></pre></span>\n\t</div>\n</div>", 
 "user": "5b8400d7185d5e00036dcc3b", 
 "isReference": false, 
 "slug": "reference-query-syntax", 
 "link_url": "", 
 "project": "5bda01cad172e200499a20a9", 
 "__v": 1, 
 "_id": "5e148da377fd86001956eddb", 
 "order": 0, 
 "updates": [
  "5e162ddcfe1f09001806494b"
 ]
}