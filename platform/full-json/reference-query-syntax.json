{
 "metadata": {
  "image": [],
  "title": "Query Syntax for Dash Platform",
  "description": "Generally queries will consist of a `where` clause plus optional modifiers controlling the specific subset of results returned."
 },
 "api": {
  "method": "get",
  "url": "",
  "auth": "required",
  "results": {
   "codes": [
    {
     "status": 200,
     "language": "json",
     "code": "{}",
     "name": ""
    },
    {
     "status": 400,
     "language": "json",
     "code": "{}",
     "name": ""
    }
   ]
  },
  "params": []
 },
 "next": {
  "description": "",
  "pages": []
 },
 "title": "Query Syntax",
 "updates": [
  "5e162ddcfe1f09001806494b",
  "600f19bc59b27e0018b8b446",
  "600f1a1b77276400122b924b",
  "600f20a574e76300449ba946",
  "61ad3870f1fc3c0225e61b22",
  "629efc4fd4b057009aca612d"
 ],
 "type": "basic",
 "slug": "reference-query-syntax",
 "excerpt": "",
 "body": "# Overview\n\nGenerally queries will consist of a `where` clause plus optional [modifiers](#query-modifiers) controlling the specific subset of results returned. \n[block:callout]\n{\n  \"type\": \"warning\",\n  \"title\": \"Query limitations\",\n  \"body\": \"Dash Platform v0.22 introduced a number of limitations due to the switch to using [GroveDB](https://github.com/dashevo/grovedb). See details in pull requests [77](https://github.com/dashevo/platform/pull/77) and [230](https://github.com/dashevo/platform/pull/230) that implemented these changes.\\n\\nQuery validation details may be found [here](https://github.com/dashevo/platform/blob/master/packages/js-drive/lib/document/query/validateQueryFactory.js) along with the associated validation [tests](https://github.com/dashevo/platform/blob/master/packages/js-drive/test/unit/document/query/validateQueryFactory.spec.js).\"\n}\n[/block]\n# Where Clause\n\nThe Where clause must be a non-empty array containing not more than 10 conditions. For some operators, `value` will be an array. See the following general syntax example:\n[block:callout]\n{\n  \"type\": \"danger\",\n  \"body\": \"As of Dash Platform v0.22, _all fields_ referenced in a query's where clause must be defined in the _same index_. This includes `$createdAt` and `$updatedAt`.\"\n}\n[/block]\n\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"{\\n  where: [\\n    [<fieldName>, <operator>, <value>],\\n    [<fieldName>, <array operator>, [<value1>, <value2>]] \\n  ] \\n}\",\n      \"language\": \"json\",\n      \"name\": \"Syntax\"\n    }\n  ]\n}\n[/block]\n## Fields\n\nValid fields consist of the indices defined for the document being queried. For example, the [DPNS data contract](https://github.com/dashevo/platform/blob/master/packages/dpns-contract/schema/dpns-contract-documents.json) defines three indices:\n\n| Index Field(s) | Index Type | Unique |\n| - | - | :-: | \n| [normalizedParentDomainName, normalizedLabel](https://github.com/dashevo/platform/blob/master/packages/dpns-contract/schema/dpns-contract-documents.json#L5-L16) | Compound | Yes |\n| [records.dashUniqueIdentityId](https://github.com/dashevo/platform/blob/master/packages/dpns-contract/schema/dpns-contract-documents.json#L17-L25) | Single Field | Yes |\n| [records.dashAliasIdentityId](https://github.com/dashevo/platform/blob/master/packages/dpns-contract/schema/dpns-contract-documents.json#L26-L33) | Single Field | No |\n[block:html]\n{\n  \"html\": \"<div></div>\\n<!--\\nSpecial fields - `$id`, `$userId`\\n-->\\n<style></style>\"\n}\n[/block]\n## Comparison Operators\n\n### Equal\n\n| Name | Description |\n| :-: | - |\n| == | Matches values that are equal to a specified value |\n\n### Range\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"title\": \"Dash Platform v0.22 notes\",\n  \"body\": \"- Only one range operator is allowed in a query (except for between behavior)\\n- The `in` operator is only allowed for last two indexed properties\\n- Range operators are only allowed after `==` and `in` operators\\n- Range operators are only allowed for the last two fields used in the where condition\\n- Queries using range operators must also include an `orderBy` statement\"\n}\n[/block]\n| Name | Description |\n| :-: | - |\n| < | Matches values that are less than a specified value |\n| <= | Matches values that are less than or equal to a specified value |\n| >= | Matches values that are greater than or equal to a specified value |\n| > | Matches values that are greater than a specified value |\n| in | Matches all document(s) where the value of the field equals any value in the specified array <br>Array may include up to 100 (unique) elements |\n\n## Array Operators\n[block:callout]\n{\n  \"type\": \"danger\",\n  \"title\": \"NOTE\",\n  \"body\": \"The following operators are not available in Dash Platform v0.22.\"\n}\n[/block]\n| Name | Description |\n| :-: | - |\n| length | Selects documents if the array field is a specified size (integer) |\n| contains | - Matches arrays that contain all elements specified in the query condition array <br>- 100 element maximum\n| elementMatch | - Matches documents that contain an array field with at least one element that matches all the criteria in the query condition array <br>- Two or more conditions must be provided\n\n## Evaluation Operators\n\n| Name | Description |\n| :-: | - |\n| startsWith | Selects documents where the value of a field begins with the specified characters (string, <= 255 characters). Must include an `orderBy` statement. |\n\n## Operator Examples\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"{\\n  where: [\\n    ['nameHash', '<', '56116861626961756e6176657a382e64617368'],\\n  ],\\n}\",\n      \"language\": \"json\",\n      \"name\": \"<\"\n    },\n    {\n      \"code\": \"{\\n  where: [\\n      ['normalizedParentDomainName', '==', 'dash'],\\n      // Return all matching names from the provided array\\n      ['normalizedLabel', 'in', ['alice', 'bob']],\\n    ]\\n}\",\n      \"language\": \"json\",\n      \"name\": \"in\"\n    },\n    {\n      \"code\": \"{\\n  where: [\\n      ['normalizedParentDomainName', '==', 'dash'],\\n      // Return any names beginning with \\\"al\\\" (e.g. alice, alfred)\\n      ['normalizedLabel', 'startsWith', 'al'],\\n    ]\\n}\",\n      \"language\": \"json\",\n      \"name\": \"startsWith\"\n    },\n    {\n      \"code\": \"// Not available in Dash Platform v0.22\\n// See https://github.com/dashevo/platform/pull/77\\n{\\n  where: [\\n      // Return documents that have 5 values in their `items` array\\n      ['items', 'length', 5],\\n    ]\\n}\",\n      \"language\": \"json\",\n      \"name\": \"length\"\n    },\n    {\n      \"code\": \"// Not available in Dash Platform v0.22\\n// See https://github.com/dashevo/platform/pull/77\\n{\\n  where: [\\n      // Return documents that have both \\\"red\\\" and \\\"blue\\\" \\n      // in the `colors` array\\n      ['colors', 'contains', ['red', 'blue']],\\n    ]\\n}\",\n      \"language\": \"json\",\n      \"name\": \"contains\"\n    },\n    {\n      \"code\": \"// Not available in Dash Platform v0.22\\n// See https://github.com/dashevo/platform/pull/77\\n{\\n  where: [\\n    // Return `scores` documents where the results contain \\n    // elements in the range 80-90\\n    ['scores', 'elementMatch',\\n      [\\n        ['results', '>=', '80'],\\n        ['results', '<=', '90']\\n      ],\\n    ],\\n  ]\\n}\",\n      \"language\": \"json\",\n      \"name\": \"elementMatch\"\n    }\n  ]\n}\n[/block]\n# Query Modifiers\nThe query modifiers described here determine how query results will be sorted and what subset of data matching the query will be returned.\n[block:callout]\n{\n  \"type\": \"danger\",\n  \"title\": \"Breaking changes\",\n  \"body\": \"Starting with Dash Platform v0.22, `startAt` and `startAfter` must be provided with a document ID rather than an integer.\"\n}\n[/block]\n| Modifier | Effect | Example |\n| - | - | - |\n| `limit` | Restricts the number of results returned (maximum: 100) | `limit: 10` |\n| `orderBy` | Returns records sorted by the field(s) provided (maximum: 2). Sorting must be by the last indexed property. Can only be used with `>`, `<`, `>=`, `<=`, and `startsWith` queries. | `orderBy: [['normalizedLabel', 'asc']]`\n| `startAt` | Returns records beginning with the document ID provided | `startAt: Buffer.from(Identifier.from(<document ID>))` |\n| `startAfter` | Returns records beginning after the document ID provided | `startAfter: Buffer.from(Identifier.from(<document ID>))` |\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"title\": \"Compound Index Constraints\",\n  \"body\": \"For indices composed of multiple fields ([example from the DPNS data contract](https://github.com/dashevo/platform/blob/master/packages/dpns-contract/schema/dpns-contract-documents.json)), the sort order in an `orderBy` must either match the order defined in the data contract OR be the inverse order.\\n\\nPlease refer to [pull request 230](https://github.com/dashevo/platform/pull/230) for additional information related to compound index constraints in Platform v0.22.\"\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"danger\",\n  \"body\": \"Inverse sort functionality for compound indices is not available.\",\n  \"title\": \"Compound Index Inverse Sort\"\n}\n[/block]\n# Example query\nThe following query combines both a where clause and query modifiers.\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"import Dash from \\\"dash\\\"\\n\\nconst { Essentials: { Buffer }, PlatformProtocol: { Identifier } } = Dash;\\n\\nconst query = {\\n  limit: 5,\\n  startAt: Buffer.from(Identifier.from('4Qp3menV9QjE92hc3BzkUCusAmHLxh1AU6gsVsPF4L2q')),\\n  where: [\\n    ['normalizedParentDomainName', '==', 'dash'],\\n    ['normalizedLabel', 'startsWith', 'test'],\\n  ],\\n  orderBy: [\\n    ['normalizedLabel', 'asc'],\\n  ],\\n}\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]",
 "order": 0,
 "isReference": false,
 "deprecated": false,
 "hidden": false,
 "sync_unique": "",
 "link_url": "",
 "link_external": false,
 "pendingAlgoliaPublish": false,
 "previousSlug": "",
 "slugUpdatedAt": "2020-10-28T05:49:05.115Z",
 "_id": "61d70ca155d45f0293817078",
 "version": "61d70ca155d45f02938170a3",
 "project": "5bda01cad172e200499a20a9",
 "user": "5b8400d7185d5e00036dcc3b",
 "category": "61d70ca155d45f029381703d",
 "updatedAt": "2022-06-28T16:01:42.161Z",
 "createdAt": "2020-01-07T13:44:04.059Z",
 "__v": 6,
 "parentDoc": null,
 "isApi": false,
 "id": "61d70ca155d45f0293817078",
 "body_html": "<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-overview\"></div>Overview<a class=\"fa fa-anchor\" href=\"#section-overview\"></a></h1>\n<p>Generally queries will consist of a <code>where</code> clause plus optional <a href=\"#query-modifiers\">modifiers</a> controlling the specific subset of results returned. </p>\n\n</div>\n<div class=\"magic-block-callout type-warning \">\n\t<h3><i title=\"Warning\" class=\"fa fa-exclamation-circle\"></i>Query limitations\n\t</h3>\n\t<div class=\"callout-body\"><p>Dash Platform v0.22 introduced a number of limitations due to the switch to using <a href=\"https://github.com/dashevo/grovedb\">GroveDB</a>. See details in pull requests <a href=\"https://github.com/dashevo/platform/pull/77\">77</a> and <a href=\"https://github.com/dashevo/platform/pull/230\">230</a> that implemented these changes.</p>\n<p>Query validation details may be found <a href=\"https://github.com/dashevo/platform/blob/master/packages/js-drive/lib/document/query/validateQueryFactory.js\">here</a> along with the associated validation <a href=\"https://github.com/dashevo/platform/blob/master/packages/js-drive/test/unit/document/query/validateQueryFactory.spec.js\">tests</a>.</p>\n\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-where-clause\"></div>Where Clause<a class=\"fa fa-anchor\" href=\"#section-where-clause\"></a></h1>\n<p>The Where clause must be a non-empty array containing not more than 10 conditions. For some operators, <code>value</code> will be an array. See the following general syntax example:</p>\n\n</div>\n<div class=\"magic-block-callout type-danger no-title\"><span class=\"noTitleIcon\"><i title=\"Danger\" class=\"fa fa-exclamation-triangle\"></i></span>\n\t<div class=\"callout-body\"><p>As of Dash Platform v0.22, <em>all fields</em> referenced in a query&#39;s where clause must be defined in the <em>same index</em>. This includes <code>$createdAt</code> and <code>$updatedAt</code>.</p>\n\n\t</div>\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">Syntax</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(771)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-771\">{\n  where: [\n    [&lt;fieldName&gt;, &lt;operator&gt;, &lt;value&gt;],\n    [&lt;fieldName&gt;, &lt;array operator&gt;, [&lt;value1&gt;, &lt;value2&gt;]] \n  ] \n}</textarea>\n\t\t\t<pre id=\"code-771\"><code><span class='cm-s-neo'>{\n  <span class=\"cm-property\">where</span>: [\n    [<span class=\"cm-operator\">&lt;</span><span class=\"cm-variable\">fieldName</span><span class=\"cm-operator\">&gt;</span>, <span class=\"cm-operator\">&lt;</span><span class=\"cm-variable\">operator</span><span class=\"cm-operator\">&gt;</span>, <span class=\"cm-operator\">&lt;</span><span class=\"cm-variable\">value</span><span class=\"cm-operator\">&gt;</span>],\n    [<span class=\"cm-operator\">&lt;</span><span class=\"cm-variable\">fieldName</span><span class=\"cm-operator\">&gt;</span>, <span class=\"cm-operator\">&lt;</span><span class=\"cm-variable\">array</span> <span class=\"cm-variable\">operator</span><span class=\"cm-operator\">&gt;</span>, [<span class=\"cm-operator\">&lt;</span><span class=\"cm-variable\">value1</span><span class=\"cm-operator\">&gt;</span>, <span class=\"cm-operator\">&lt;</span><span class=\"cm-variable\">value2</span><span class=\"cm-operator\">&gt;</span>]] \n  ] \n}</span></code></pre></span>\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-fields\"></div>Fields<a class=\"fa fa-anchor\" href=\"#section-fields\"></a></h2>\n<p>Valid fields consist of the indices defined for the document being queried. For example, the <a href=\"https://github.com/dashevo/platform/blob/master/packages/dpns-contract/schema/dpns-contract-documents.json\">DPNS data contract</a> defines three indices:</p>\n<div class=\"marked-table\"><table>\n<thead>\n<tr>\n<th>Index Field(s)</th>\n<th>Index Type</th>\n<th style=\"text-align:center\">Unique</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/dashevo/platform/blob/master/packages/dpns-contract/schema/dpns-contract-documents.json#L5-L16\">normalizedParentDomainName, normalizedLabel</a></td>\n<td>Compound</td>\n<td style=\"text-align:center\">Yes</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/dashevo/platform/blob/master/packages/dpns-contract/schema/dpns-contract-documents.json#L17-L25\">records.dashUniqueIdentityId</a></td>\n<td>Single Field</td>\n<td style=\"text-align:center\">Yes</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/dashevo/platform/blob/master/packages/dpns-contract/schema/dpns-contract-documents.json#L26-L33\">records.dashAliasIdentityId</a></td>\n<td>Single Field</td>\n<td style=\"text-align:center\">No</td>\n</tr>\n</tbody>\n</table></div>\n\n</div>\n<div class=\"magic-block-html\"><div></div>\n<!--\nSpecial fields - `$id`, `$userId`\n-->\n<style></style>\n</div>\n<div class=\"magic-block-textarea\"><h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-comparison-operators\"></div>Comparison Operators<a class=\"fa fa-anchor\" href=\"#section-comparison-operators\"></a></h2>\n<h3 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-equal\"></div>Equal<a class=\"fa fa-anchor\" href=\"#section-equal\"></a></h3>\n<div class=\"marked-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">==</td>\n<td>Matches values that are equal to a specified value</td>\n</tr>\n</tbody>\n</table></div>\n<h3 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-range\"></div>Range<a class=\"fa fa-anchor\" href=\"#section-range\"></a></h3>\n\n</div>\n<div class=\"magic-block-callout type-warning \">\n\t<h3><i title=\"Warning\" class=\"fa fa-exclamation-circle\"></i>Dash Platform v0.22 notes\n\t</h3>\n\t<div class=\"callout-body\"><ul>\n<li >Only one range operator is allowed in a query (except for between behavior)</li><li >The <code>in</code> operator is only allowed for last two indexed properties</li><li >Range operators are only allowed after <code>==</code> and <code>in</code> operators</li><li >Range operators are only allowed for the last two fields used in the where condition</li><li >Queries using range operators must also include an <code>orderBy</code> statement</li></ul>\n\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><div class=\"marked-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">&lt;</td>\n<td>Matches values that are less than a specified value</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;=</td>\n<td>Matches values that are less than or equal to a specified value</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt;=</td>\n<td>Matches values that are greater than or equal to a specified value</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt;</td>\n<td>Matches values that are greater than a specified value</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">in</td>\n<td>Matches all document(s) where the value of the field equals any value in the specified array <br>Array may include up to 100 (unique) elements</td>\n</tr>\n</tbody>\n</table></div>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-array-operators\"></div>Array Operators<a class=\"fa fa-anchor\" href=\"#section-array-operators\"></a></h2>\n\n</div>\n<div class=\"magic-block-callout type-danger \">\n\t<h3><i title=\"Danger\" class=\"fa fa-exclamation-triangle\"></i>NOTE\n\t</h3>\n\t<div class=\"callout-body\"><p>The following operators are not available in Dash Platform v0.22.</p>\n\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><div class=\"marked-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">length</td>\n<td>Selects documents if the array field is a specified size (integer)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">contains</td>\n<td>- Matches arrays that contain all elements specified in the query condition array <br>- 100 element maximum</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">elementMatch</td>\n<td>- Matches documents that contain an array field with at least one element that matches all the criteria in the query condition array <br>- Two or more conditions must be provided</td>\n</tr>\n</tbody>\n</table></div>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-evaluation-operators\"></div>Evaluation Operators<a class=\"fa fa-anchor\" href=\"#section-evaluation-operators\"></a></h2>\n<div class=\"marked-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">startsWith</td>\n<td>Selects documents where the value of a field begins with the specified characters (string, &lt;= 255 characters). Must include an <code>orderBy</code> statement.</td>\n</tr>\n</tbody>\n</table></div>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-operator-examples\"></div>Operator Examples<a class=\"fa fa-anchor\" href=\"#section-operator-examples\"></a></h2>\n\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">&lt;</a></li>\n\t\t<li><a href=\"\" ng-click=\"showCode(1)\" ng-class=\"{active: (1 == tab)}\">in</a></li>\n\t\t<li><a href=\"\" ng-click=\"showCode(2)\" ng-class=\"{active: (2 == tab)}\">startsWith</a></li>\n\t\t<li><a href=\"\" ng-click=\"showCode(3)\" ng-class=\"{active: (3 == tab)}\">length</a></li>\n\t\t<li><a href=\"\" ng-click=\"showCode(4)\" ng-class=\"{active: (4 == tab)}\">contains</a></li>\n\t\t<li><a href=\"\" ng-click=\"showCode(5)\" ng-class=\"{active: (5 == tab)}\">elementMatch</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(520)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-520\">{\n  where: [\n    ['nameHash', '&lt;', '56116861626961756e6176657a382e64617368'],\n  ],\n}</textarea>\n\t\t\t<pre id=\"code-520\"><code><span class='cm-s-neo'>{\n  <span class=\"cm-property\">where</span>: [\n    [<span class=\"cm-string\">'nameHash'</span>, <span class=\"cm-string\">'&lt;'</span>, <span class=\"cm-string\">'56116861626961756e6176657a382e64617368'</span>],\n  ],\n}</span></code></pre></span><span ng-if=\"tab == 1\">\n\t\t\t<button ng-click=\"copyCode(865)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-865\">{\n  where: [\n      ['normalizedParentDomainName', '==', 'dash'],\n      // Return all matching names from the provided array\n      ['normalizedLabel', 'in', ['alice', 'bob']],\n    ]\n}</textarea>\n\t\t\t<pre id=\"code-865\"><code><span class='cm-s-neo'>{\n  <span class=\"cm-property\">where</span>: [\n      [<span class=\"cm-string\">'normalizedParentDomainName'</span>, <span class=\"cm-string\">'=='</span>, <span class=\"cm-string\">'dash'</span>],\n      <span class=\"cm-comment\">&#47;&#47; Return all matching names from the provided array</span>\n      [<span class=\"cm-string\">'normalizedLabel'</span>, <span class=\"cm-string\">'in'</span>, [<span class=\"cm-string\">'alice'</span>, <span class=\"cm-string\">'bob'</span>]],\n    ]\n}</span></code></pre></span><span ng-if=\"tab == 2\">\n\t\t\t<button ng-click=\"copyCode(876)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-876\">{\n  where: [\n      ['normalizedParentDomainName', '==', 'dash'],\n      // Return any names beginning with &quot;al&quot; (e.g. alice, alfred)\n      ['normalizedLabel', 'startsWith', 'al'],\n    ]\n}</textarea>\n\t\t\t<pre id=\"code-876\"><code><span class='cm-s-neo'>{\n  <span class=\"cm-property\">where</span>: [\n      [<span class=\"cm-string\">'normalizedParentDomainName'</span>, <span class=\"cm-string\">'=='</span>, <span class=\"cm-string\">'dash'</span>],\n      <span class=\"cm-comment\">&#47;&#47; Return any names beginning with \"al\" (e.g. alice, alfred)</span>\n      [<span class=\"cm-string\">'normalizedLabel'</span>, <span class=\"cm-string\">'startsWith'</span>, <span class=\"cm-string\">'al'</span>],\n    ]\n}</span></code></pre></span><span ng-if=\"tab == 3\">\n\t\t\t<button ng-click=\"copyCode(131)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-131\">// Not available in Dash Platform v0.22\n// See https://github.com/dashevo/platform/pull/77\n{\n  where: [\n      // Return documents that have 5 values in their `items` array\n      ['items', 'length', 5],\n    ]\n}</textarea>\n\t\t\t<pre id=\"code-131\"><code><span class='cm-s-neo'><span class=\"cm-comment\">&#47;&#47; Not available in Dash Platform v0.22</span>\n<span class=\"cm-comment\">&#47;&#47; See https:&#47;&#47;github.com&#47;dashevo&#47;platform&#47;pull&#47;77</span>\n{\n  <span class=\"cm-property\">where</span>: [\n      <span class=\"cm-comment\">&#47;&#47; Return documents that have 5 values in their `items` array</span>\n      [<span class=\"cm-string\">'items'</span>, <span class=\"cm-string\">'length'</span>, <span class=\"cm-number\">5</span>],\n    ]\n}</span></code></pre></span><span ng-if=\"tab == 4\">\n\t\t\t<button ng-click=\"copyCode(909)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-909\">// Not available in Dash Platform v0.22\n// See https://github.com/dashevo/platform/pull/77\n{\n  where: [\n      // Return documents that have both &quot;red&quot; and &quot;blue&quot; \n      // in the `colors` array\n      ['colors', 'contains', ['red', 'blue']],\n    ]\n}</textarea>\n\t\t\t<pre id=\"code-909\"><code><span class='cm-s-neo'><span class=\"cm-comment\">&#47;&#47; Not available in Dash Platform v0.22</span>\n<span class=\"cm-comment\">&#47;&#47; See https:&#47;&#47;github.com&#47;dashevo&#47;platform&#47;pull&#47;77</span>\n{\n  <span class=\"cm-property\">where</span>: [\n      <span class=\"cm-comment\">&#47;&#47; Return documents that have both \"red\" and \"blue\" </span>\n      <span class=\"cm-comment\">&#47;&#47; in the `colors` array</span>\n      [<span class=\"cm-string\">'colors'</span>, <span class=\"cm-string\">'contains'</span>, [<span class=\"cm-string\">'red'</span>, <span class=\"cm-string\">'blue'</span>]],\n    ]\n}</span></code></pre></span><span ng-if=\"tab == 5\">\n\t\t\t<button ng-click=\"copyCode(417)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-417\">// Not available in Dash Platform v0.22\n// See https://github.com/dashevo/platform/pull/77\n{\n  where: [\n    // Return `scores` documents where the results contain \n    // elements in the range 80-90\n    ['scores', 'elementMatch',\n      [\n        ['results', '&gt;=', '80'],\n        ['results', '&lt;=', '90']\n      ],\n    ],\n  ]\n}</textarea>\n\t\t\t<pre id=\"code-417\"><code><span class='cm-s-neo'><span class=\"cm-comment\">&#47;&#47; Not available in Dash Platform v0.22</span>\n<span class=\"cm-comment\">&#47;&#47; See https:&#47;&#47;github.com&#47;dashevo&#47;platform&#47;pull&#47;77</span>\n{\n  <span class=\"cm-property\">where</span>: [\n    <span class=\"cm-comment\">&#47;&#47; Return `scores` documents where the results contain </span>\n    <span class=\"cm-comment\">&#47;&#47; elements in the range 80-90</span>\n    [<span class=\"cm-string\">'scores'</span>, <span class=\"cm-string\">'elementMatch'</span>,\n      [\n        [<span class=\"cm-string\">'results'</span>, <span class=\"cm-string\">'&gt;='</span>, <span class=\"cm-string\">'80'</span>],\n        [<span class=\"cm-string\">'results'</span>, <span class=\"cm-string\">'&lt;='</span>, <span class=\"cm-string\">'90'</span>]\n      ],\n    ],\n  ]\n}</span></code></pre></span>\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-query-modifiers\"></div>Query Modifiers<a class=\"fa fa-anchor\" href=\"#section-query-modifiers\"></a></h1>\n<p>The query modifiers described here determine how query results will be sorted and what subset of data matching the query will be returned.</p>\n\n</div>\n<div class=\"magic-block-callout type-danger \">\n\t<h3><i title=\"Danger\" class=\"fa fa-exclamation-triangle\"></i>Breaking changes\n\t</h3>\n\t<div class=\"callout-body\"><p>Starting with Dash Platform v0.22, <code>startAt</code> and <code>startAfter</code> must be provided with a document ID rather than an integer.</p>\n\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><div class=\"marked-table\"><table>\n<thead>\n<tr>\n<th>Modifier</th>\n<th>Effect</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>limit</code></td>\n<td>Restricts the number of results returned (maximum: 100)</td>\n<td><code>limit: 10</code></td>\n</tr>\n<tr>\n<td><code>orderBy</code></td>\n<td>Returns records sorted by the field(s) provided (maximum: 2). Sorting must be by the last indexed property. Can only be used with <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code>, and <code>startsWith</code> queries.</td>\n<td><code>orderBy: [[&#39;normalizedLabel&#39;, &#39;asc&#39;]]</code></td>\n</tr>\n<tr>\n<td><code>startAt</code></td>\n<td>Returns records beginning with the document ID provided</td>\n<td><code>startAt: Buffer.from(Identifier.from(&lt;document ID&gt;))</code></td>\n</tr>\n<tr>\n<td><code>startAfter</code></td>\n<td>Returns records beginning after the document ID provided</td>\n<td><code>startAfter: Buffer.from(Identifier.from(&lt;document ID&gt;))</code></td>\n</tr>\n</tbody>\n</table></div>\n\n</div>\n<div class=\"magic-block-callout type-warning \">\n\t<h3><i title=\"Warning\" class=\"fa fa-exclamation-circle\"></i>Compound Index Constraints\n\t</h3>\n\t<div class=\"callout-body\"><p>For indices composed of multiple fields (<a href=\"https://github.com/dashevo/platform/blob/master/packages/dpns-contract/schema/dpns-contract-documents.json\">example from the DPNS data contract</a>), the sort order in an <code>orderBy</code> must either match the order defined in the data contract OR be the inverse order.</p>\n<p>Please refer to <a href=\"https://github.com/dashevo/platform/pull/230\">pull request 230</a> for additional information related to compound index constraints in Platform v0.22.</p>\n\n\t</div>\n</div>\n<div class=\"magic-block-callout type-danger \">\n\t<h3><i title=\"Danger\" class=\"fa fa-exclamation-triangle\"></i>Compound Index Inverse Sort\n\t</h3>\n\t<div class=\"callout-body\"><p>Inverse sort functionality for compound indices is not available.</p>\n\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-example-query\"></div>Example query<a class=\"fa fa-anchor\" href=\"#section-example-query\"></a></h1>\n<p>The following query combines both a where clause and query modifiers.</p>\n\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">JavaScript</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(123)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-123\">import Dash from &quot;dash&quot;\n\nconst { Essentials: { Buffer }, PlatformProtocol: { Identifier } } = Dash;\n\nconst query = {\n  limit: 5,\n  startAt: Buffer.from(Identifier.from('4Qp3menV9QjE92hc3BzkUCusAmHLxh1AU6gsVsPF4L2q')),\n  where: [\n    ['normalizedParentDomainName', '==', 'dash'],\n    ['normalizedLabel', 'startsWith', 'test'],\n  ],\n  orderBy: [\n    ['normalizedLabel', 'asc'],\n  ],\n}</textarea>\n\t\t\t<pre id=\"code-123\"><code><span class='cm-s-neo'><span class=\"cm-keyword\">import</span> <span class=\"cm-def\">Dash</span> <span class=\"cm-keyword\">from</span> <span class=\"cm-string\">\"dash\"</span>\n\n<span class=\"cm-keyword\">const</span> { <span class=\"cm-property\">Essentials</span>: { <span class=\"cm-def\">Buffer</span> }, <span class=\"cm-property\">PlatformProtocol</span>: { <span class=\"cm-def\">Identifier</span> } } <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">Dash</span>;\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">query</span> <span class=\"cm-operator\">=</span> {\n  <span class=\"cm-property\">limit</span>: <span class=\"cm-number\">5</span>,\n  <span class=\"cm-property\">startAt</span>: <span class=\"cm-variable\">Buffer</span>.<span class=\"cm-property\">from</span>(<span class=\"cm-variable\">Identifier</span>.<span class=\"cm-property\">from</span>(<span class=\"cm-string\">'4Qp3menV9QjE92hc3BzkUCusAmHLxh1AU6gsVsPF4L2q'</span>)),\n  <span class=\"cm-property\">where</span>: [\n    [<span class=\"cm-string\">'normalizedParentDomainName'</span>, <span class=\"cm-string\">'=='</span>, <span class=\"cm-string\">'dash'</span>],\n    [<span class=\"cm-string\">'normalizedLabel'</span>, <span class=\"cm-string\">'startsWith'</span>, <span class=\"cm-string\">'test'</span>],\n  ],\n  <span class=\"cm-property\">orderBy</span>: [\n    [<span class=\"cm-string\">'normalizedLabel'</span>, <span class=\"cm-string\">'asc'</span>],\n  ],\n}</span></code></pre></span>\n\t</div>\n</div>"
}