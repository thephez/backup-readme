{
 "pendingAlgoliaPublish": false, 
 "parentDoc": null, 
 "excerpt": "The Dash Platform development network", 
 "api": {
  "url": "", 
  "params": [], 
  "method": "get", 
  "auth": "required", 
  "results": {
   "codes": [
    {
     "status": 200, 
     "code": "{}", 
     "name": "", 
     "language": "json"
    }, 
    {
     "status": 400, 
     "code": "{}", 
     "name": "", 
     "language": "json"
    }
   ]
  }
 }, 
 "updatedAt": "2020-03-27T14:25:38.298Z", 
 "id": "5d9c67146e2afa005d3e1951", 
 "sync_unique": "", 
 "isApi": false, 
 "createdAt": "2019-10-08T10:38:12.102Z", 
 "category": "5d261b31d8f6ed004c24cbbe", 
 "title": "Connecting to Evonet", 
 "next": {
  "description": "", 
  "pages": [
   {
    "category": "Tutorials", 
    "slug": "tutorial-create-and-fund-a-wallet", 
    "type": "doc", 
    "name": "Create and Fund a Wallet", 
    "icon": "file-text-o"
   }
  ]
 }, 
 "version": "5d2374d8d238fb004e8f9243", 
 "hidden": false, 
 "type": "basic", 
 "metadata": {
  "image": [], 
  "description": "", 
  "title": ""
 }, 
 "body": "The purpose of this tutorial is to walk through the steps necessary to access the network.\n\n# Overview\nEvonet is the initial development network provided for experimentation and evaluation of Dash Platform features.\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"body\": \"As a development network, Evonet may be subject to frequent updates and changes that break backwards compatibility.\",\n  \"title\": \"Evonet Stability\"\n}\n[/block]\nPlatform services are provided via a combination of HTTP and gRPC connections to DAPI, and some connections to an Insight API. Although one could interact with DAPI by connecting to these directly, or by using [DAPI-client](https://github.com/dashevo/dapi-client), the easiest approach is to use the [JavaScript Dash SDK](https://github.com/dashevo/DashJS/).\n\n# Prerequisites\n- An installation of [NodeJS](https://nodejs.org/en/download/)\n\n# Connect via Dash SDK\n\n## 1. Install the Dash SDK\nThe JavaScript SDK package is available from npmjs.com and can be installed by running `npm install dash` (from the command line):\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"npm install dash\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n## 2. Connect to Dash platform\nCreate a file with the following contents. Then run it by typing `node <file.js>` (from the command line):\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"const Dash = require('dash');\\n\\nconst clientOpts = {\\n  network: 'testnet',\\n};\\nconst client = new Dash.Client(clientOpts);\\n\\nasync function connect() {\\n  try {\\n    await client.isReady();\\n    console.log('connected');\\n  } catch (e) {\\n    console.error('Something went wrong:', e);\\n  } finally {\\n    client.disconnect();\\n  }\\n}\\n\\nconnect();\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\nOnce this returns successfully, you're ready to begin developing! For details on all SDK options and methods, please refer to the [SDK documentation](https://dashevo.github.io/DashJS/).\n\n# Connect Directly to DAPI (Optional) \n[block:callout]\n{\n  \"type\": \"warning\",\n  \"title\": \"Advanced Topic\",\n  \"body\": \"Normally, the Dash SDK, dapi-client, or another library should be used to interact with DAPI. This may be helpful for debugging in some cases, but generally is not required.\"\n}\n[/block]\nThe example below demonstrates retrieving the hash of the best block hash directly from a DAPI node via command line and several languages:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"curl --request POST \\\\\\n  --url http://evonet.thephez.com:3000/ \\\\\\n  --header 'content-type: application/json' \\\\\\n  --data '{\\\"method\\\":\\\"getBlockHash\\\",\\\"id\\\":1,\\\"jsonrpc\\\":\\\"2.0\\\",\\\"params\\\":{\\\"height\\\": 100 }}'\",\n      \"language\": \"shell\",\n      \"name\": null\n    },\n    {\n      \"code\": \"import requests\\n\\nurl = \\\"http://evonet.thephez.com:3000/\\\"\\n\\npayload = \\\"{\\\\\\\"method\\\\\\\":\\\\\\\"getBlockHash\\\\\\\",\\\\\\\"id\\\\\\\":1,\\\\\\\"jsonrpc\\\\\\\":\\\\\\\"2.0\\\\\\\",\\\\\\\"params\\\\\\\":{\\\\\\\"height\\\\\\\":100}}\\\"\\nheaders = {'content-type': 'application/json'}\\n\\nresponse = requests.request(\\\"POST\\\", url, data=payload, headers=headers)\\n\\nprint(response.text)\\n\",\n      \"language\": \"python\",\n      \"name\": \"Python\"\n    },\n    {\n      \"code\": \"require 'uri'\\nrequire 'net/http'\\n\\nurl = URI(\\\"http://evonet.thephez.com:3000/\\\")\\n\\nhttp = Net::HTTP.new(url.host, url.port)\\n\\nrequest = Net::HTTP::Post.new(url)\\nrequest[\\\"content-type\\\"] = 'application/json'\\nrequest.body = \\\"{\\\\\\\"method\\\\\\\":\\\\\\\"getBlockHash\\\\\\\",\\\\\\\"id\\\\\\\":1,\\\\\\\"jsonrpc\\\\\\\":\\\\\\\"2.0\\\\\\\",\\\\\\\"params\\\\\\\":{\\\\\\\"height\\\\\\\":100}}\\\"\\n\\nresponse = http.request(request)\\nputs response.read_body\",\n      \"language\": \"ruby\"\n    }\n  ]\n}\n[/block]", 
 "link_external": false, 
 "body_html": "<div class=\"magic-block-textarea\"><p>The purpose of this tutorial is to walk through the steps necessary to access the network.</p>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-overview\"></div>Overview<a class=\"fa fa-anchor\" href=\"#section-overview\"></a></h1>\n<p>Evonet is the initial development network provided for experimentation and evaluation of Dash Platform features.</p>\n\n</div>\n<div class=\"magic-block-callout type-warning \">\n\t<h3><i title=\"Warning\" class=\"fa fa-exclamation-circle\"></i>Evonet Stability\n\t</h3>\n\t<div class=\"callout-body\"><p>As a development network, Evonet may be subject to frequent updates and changes that break backwards compatibility.</p>\n\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><p>Platform services are provided via a combination of HTTP and gRPC connections to DAPI, and some connections to an Insight API. Although one could interact with DAPI by connecting to these directly, or by using <a href=\"https://github.com/dashevo/dapi-client\">DAPI-client</a>, the easiest approach is to use the <a href=\"https://github.com/dashevo/DashJS/\">JavaScript Dash SDK</a>.</p>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-prerequisites\"></div>Prerequisites<a class=\"fa fa-anchor\" href=\"#section-prerequisites\"></a></h1>\n<ul>\n<li >An installation of <a href=\"https://nodejs.org/en/download/\">NodeJS</a></li></ul>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-connect-via-dash-sdk\"></div>Connect via Dash SDK<a class=\"fa fa-anchor\" href=\"#section-connect-via-dash-sdk\"></a></h1>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-1-install-the-dash-sdk\"></div>1. Install the Dash SDK<a class=\"fa fa-anchor\" href=\"#section-1-install-the-dash-sdk\"></a></h2>\n<p>The JavaScript SDK package is available from npmjs.com and can be installed by running <code>npm install dash</code> (from the command line):</p>\n\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">Shell</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(724)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-724\">npm install dash</textarea>\n\t\t\t<pre id=\"code-724\"><code><span class='cm-s-neo'><span class=\"cm-builtin\">npm</span> install dash</span></code></pre></span>\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-2-connect-to-dash-platform\"></div>2. Connect to Dash platform<a class=\"fa fa-anchor\" href=\"#section-2-connect-to-dash-platform\"></a></h2>\n<p>Create a file with the following contents. Then run it by typing <code>node &lt;file.js&gt;</code> (from the command line):</p>\n\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">JavaScript</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(700)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-700\">const Dash = require('dash');\n\nconst clientOpts = {\n  network: 'testnet',\n};\nconst client = new Dash.Client(clientOpts);\n\nasync function connect() {\n  try {\n    await client.isReady();\n    console.log('connected');\n  } catch (e) {\n    console.error('Something went wrong:', e);\n  } finally {\n    client.disconnect();\n  }\n}\n\nconnect();</textarea>\n\t\t\t<pre id=\"code-700\"><code><span class='cm-s-neo'><span class=\"cm-keyword\">const</span> <span class=\"cm-def\">Dash</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">require</span>(<span class=\"cm-string\">'dash'</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">clientOpts</span> <span class=\"cm-operator\">=</span> {\n  <span class=\"cm-property\">network</span>: <span class=\"cm-string\">'testnet'</span>,\n};\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">client</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">new</span> <span class=\"cm-variable\">Dash</span>.<span class=\"cm-property\">Client</span>(<span class=\"cm-variable\">clientOpts</span>);\n\n<span class=\"cm-keyword\">async</span> <span class=\"cm-keyword\">function</span> <span class=\"cm-def\">connect</span>() {\n  <span class=\"cm-keyword\">try</span> {\n    <span class=\"cm-keyword\">await</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">isReady</span>();\n    <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-string\">'connected'</span>);\n  } <span class=\"cm-keyword\">catch</span> (<span class=\"cm-def\">e</span>) {\n    <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">error</span>(<span class=\"cm-string\">'Something went wrong:'</span>, <span class=\"cm-variable-2\">e</span>);\n  } <span class=\"cm-keyword\">finally</span> {\n    <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">disconnect</span>();\n  }\n}\n\n<span class=\"cm-variable\">connect</span>();</span></code></pre></span>\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><p>Once this returns successfully, you&#39;re ready to begin developing! For details on all SDK options and methods, please refer to the <a href=\"https://dashevo.github.io/DashJS/\">SDK documentation</a>.</p>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-connect-directly-to-dapi-optional\"></div>Connect Directly to DAPI (Optional)<a class=\"fa fa-anchor\" href=\"#section-connect-directly-to-dapi-optional\"></a></h1>\n\n</div>\n<div class=\"magic-block-callout type-warning \">\n\t<h3><i title=\"Warning\" class=\"fa fa-exclamation-circle\"></i>Advanced Topic\n\t</h3>\n\t<div class=\"callout-body\"><p>Normally, the Dash SDK, dapi-client, or another library should be used to interact with DAPI. This may be helpful for debugging in some cases, but generally is not required.</p>\n\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><p>The example below demonstrates retrieving the hash of the best block hash directly from a DAPI node via command line and several languages:</p>\n\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">Shell</a></li>\n\t\t<li><a href=\"\" ng-click=\"showCode(1)\" ng-class=\"{active: (1 == tab)}\">Python</a></li>\n\t\t<li><a href=\"\" ng-click=\"showCode(2)\" ng-class=\"{active: (2 == tab)}\">Ruby</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(936)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-936\">curl --request POST \\\n  --url http://evonet.thephez.com:3000/ \\\n  --header 'content-type: application/json' \\\n  --data '{&quot;method&quot;:&quot;getBlockHash&quot;,&quot;id&quot;:1,&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;params&quot;:{&quot;height&quot;: 100 &#125;&#125;</span>'</textarea>\n\t\t\t<pre id=\"code-936\"><code><span class='cm-s-neo'><span class=\"cm-builtin\">curl</span> <span class=\"cm-attribute\">--request</span> POST \\\n  <span class=\"cm-attribute\">--url</span> http:&#47;&#47;evonet.thephez.com:3000&#47; \\\n  <span class=\"cm-attribute\">--header</span> <span class=\"cm-string\">'content-type: application&#47;json'</span> \\\n  <span class=\"cm-attribute\">--data</span> <span class=\"cm-string\">'{\"method\":\"getBlockHash\",\"id\":1,\"jsonrpc\":\"2.0\",\"params\":{\"height\": 100 &#125;<span></span>&#125;'</span></span></code></pre></span><span ng-if=\"tab == 1\">\n\t\t\t<button ng-click=\"copyCode(678)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-678\">import requests\n\nurl = &quot;http://evonet.thephez.com:3000/&quot;\n\npayload = &quot;{\\&quot;method\\&quot;:\\&quot;getBlockHash\\&quot;,\\&quot;id\\&quot;:1,\\&quot;jsonrpc\\&quot;:\\&quot;2.0\\&quot;,\\&quot;params\\&quot;:{\\&quot;height\\&quot;:100&#125;&#125;</span>&quot;\nheaders = {'content-type': 'application/json'}\n\nresponse = requests.request(&quot;POST&quot;, url, data=payload, headers=headers)\n\nprint(response.text)\n</textarea>\n\t\t\t<pre id=\"code-678\"><code><span class='cm-s-neo'><span class=\"cm-keyword\">import</span> <span class=\"cm-variable\">requests</span>\n\n<span class=\"cm-variable\">url</span> <span class=\"cm-operator\">=</span> <span class=\"cm-string\">\"http:&#47;&#47;evonet.thephez.com:3000&#47;\"</span>\n\n<span class=\"cm-variable\">payload</span> <span class=\"cm-operator\">=</span> <span class=\"cm-string\">\"{\\\"method\\\":\\\"getBlockHash\\\",\\\"id\\\":1,\\\"jsonrpc\\\":\\\"2.0\\\",\\\"params\\\":{\\\"height\\\":100&#125;<span></span>&#125;\"</span>\n<span class=\"cm-variable\">headers</span> <span class=\"cm-operator\">=</span> {<span class=\"cm-string\">'content-type'</span>: <span class=\"cm-string\">'application&#47;json'</span>}\n\n<span class=\"cm-variable\">response</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">requests</span>.<span class=\"cm-property\">request</span>(<span class=\"cm-string\">\"POST\"</span>, <span class=\"cm-variable\">url</span>, <span class=\"cm-variable\">data</span><span class=\"cm-operator\">=</span><span class=\"cm-variable\">payload</span>, <span class=\"cm-variable\">headers</span><span class=\"cm-operator\">=</span><span class=\"cm-variable\">headers</span>)\n\n<span class=\"cm-builtin\">print</span>(<span class=\"cm-variable\">response</span>.<span class=\"cm-property\">text</span>)\n</span></code></pre></span><span ng-if=\"tab == 2\">\n\t\t\t<button ng-click=\"copyCode(853)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-853\">require 'uri'\nrequire 'net/http'\n\nurl = URI(&quot;http://evonet.thephez.com:3000/&quot;)\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest[&quot;content-type&quot;] = 'application/json'\nrequest.body = &quot;{\\&quot;method\\&quot;:\\&quot;getBlockHash\\&quot;,\\&quot;id\\&quot;:1,\\&quot;jsonrpc\\&quot;:\\&quot;2.0\\&quot;,\\&quot;params\\&quot;:{\\&quot;height\\&quot;:100&#125;&#125;</span>&quot;\n\nresponse = http.request(request)\nputs response.read_body</textarea>\n\t\t\t<pre id=\"code-853\"><code><span class='cm-s-neo'><span class=\"cm-keyword\">require</span> <span class=\"cm-string\">'uri'</span>\n<span class=\"cm-keyword\">require</span> <span class=\"cm-string\">'net&#47;http'</span>\n\n<span class=\"cm-variable\">url</span> <span class=\"cm-operator\">=</span> <span class=\"cm-tag\">URI</span>(<span class=\"cm-string\">\"http:&#47;&#47;evonet.thephez.com:3000&#47;\"</span>)\n\n<span class=\"cm-variable\">http</span> <span class=\"cm-operator\">=</span> <span class=\"cm-atom\">Net::HTTP</span><span class=\"cm-operator\">.</span><span class=\"cm-property\">new</span>(<span class=\"cm-variable\">url</span><span class=\"cm-operator\">.</span><span class=\"cm-property\">host</span>, <span class=\"cm-variable\">url</span><span class=\"cm-operator\">.</span><span class=\"cm-property\">port</span>)\n\n<span class=\"cm-variable\">request</span> <span class=\"cm-operator\">=</span> <span class=\"cm-atom\">Net::HTTP::</span><span class=\"cm-tag\">Post</span><span class=\"cm-operator\">.</span><span class=\"cm-property\">new</span>(<span class=\"cm-variable\">url</span>)\n<span class=\"cm-variable\">request</span>[<span class=\"cm-string\">\"content-type\"</span>] <span class=\"cm-operator\">=</span> <span class=\"cm-string\">'application&#47;json'</span>\n<span class=\"cm-variable\">request</span><span class=\"cm-operator\">.</span><span class=\"cm-property\">body</span> <span class=\"cm-operator\">=</span> <span class=\"cm-string\">\"{\\\"method\\\":\\\"getBlockHash\\\",\\\"id\\\":1,\\\"jsonrpc\\\":\\\"2.0\\\",\\\"params\\\":{\\\"height\\\":100&#125;<span></span>&#125;\"</span>\n\n<span class=\"cm-variable\">response</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">http</span><span class=\"cm-operator\">.</span><span class=\"cm-property\">request</span>(<span class=\"cm-variable\">request</span>)\n<span class=\"cm-variable\">puts</span> <span class=\"cm-variable\">response</span><span class=\"cm-operator\">.</span><span class=\"cm-property\">read_body</span></span></code></pre></span>\n\t</div>\n</div>", 
 "user": "5b8400d7185d5e00036dcc3b", 
 "isReference": false, 
 "slug": "tutorial-connecting-to-evonet", 
 "link_url": "", 
 "project": "5bda01cad172e200499a20a9", 
 "__v": 4, 
 "_id": "5d9c67146e2afa005d3e1951", 
 "order": 1, 
 "updates": [
  "5e17e0fc0e1cef0012773e09", 
  "5e395a48470bc3002d78d889", 
  "5e7dfff822c6cb0306043f8c"
 ]
}