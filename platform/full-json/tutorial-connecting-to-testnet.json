{
 "pendingAlgoliaPublish": false, 
 "parentDoc": null, 
 "excerpt": "The Dash test network", 
 "api": {
  "url": "", 
  "params": [], 
  "method": "get", 
  "auth": "required", 
  "results": {
   "codes": [
    {
     "status": 200, 
     "code": "{}", 
     "name": "", 
     "language": "json"
    }, 
    {
     "status": 400, 
     "code": "{}", 
     "name": "", 
     "language": "json"
    }
   ]
  }
 }, 
 "previousSlug": "tutorial-connecting-to-evonet", 
 "updatedAt": "2021-10-14T15:05:21.902Z", 
 "id": "612fe724e9fa2b0026f5fa83", 
 "sync_unique": "", 
 "isApi": false, 
 "createdAt": "2019-10-08T10:38:12.102Z", 
 "category": "612fe724e9fa2b0026f5fa65", 
 "title": "Connect to a Network", 
 "next": {
  "description": "", 
  "pages": [
   {
    "category": "Tutorials", 
    "slug": "tutorial-create-and-fund-a-wallet", 
    "type": "doc", 
    "name": "Create and Fund a Wallet", 
    "icon": "file-text-o"
   }, 
   {
    "category": "Tutorials", 
    "slug": "tutorial-use-dapi-client-methods", 
    "type": "doc", 
    "name": "Use DAPI Client Methods", 
    "icon": "file-text-o"
   }
  ]
 }, 
 "version": "612fe724e9fa2b0026f5face", 
 "slugUpdatedAt": "2021-02-08T20:54:54.846Z", 
 "hidden": false, 
 "type": "basic", 
 "metadata": {
  "image": [], 
  "description": "", 
  "title": ""
 }, 
 "body": "The purpose of this tutorial is to walk through the steps necessary to access the network.\n\n# Overview\n\nPlatform services are provided via a combination of HTTP and gRPC connections to DAPI, and some connections to an Insight API. Although one could interact with DAPI by connecting to these directly, or by using [DAPI-client](https://github.com/dashevo/dapi-client), the easiest approach is to use the [JavaScript Dash SDK](https://github.com/dashevo/js-dash-sdk/).\n\n# Prerequisites\n- An installation of [NodeJS](https://nodejs.org/en/download/)\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"Minimum Supported Version\",\n  \"body\": \"As of Dash Platform v0.16, NodeJS v12 or higher must be used\"\n}\n[/block]\n# Connect via Dash SDK\n\n## 1. Install the Dash SDK\nThe JavaScript SDK package is available from npmjs.com and can be installed by running `npm install dash` (from the command line):\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"npm install dash\",\n      \"language\": \"shell\"\n    }\n  ]\n}\n[/block]\n## 2. Connect to Dash Platform\nCreate a file with the following contents. Then run it by typing `node <file.js>` (from the command line):\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"As of Dash Platform v0.17.0, the SDK connects to testnet by default.\"\n}\n[/block]\n\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"const Dash = require('dash');\\n\\nconst client = new Dash.Client();\\n\\nasync function connect() {\\n  return await client.getDAPIClient().core.getBestBlockHash();\\n}\\n\\nconnect()\\n  .then((d) => console.log('Connected. Best block hash:\\\\n', d))\\n  .catch((e) => console.error('Something went wrong:\\\\n', e))\\n  .finally(() => client.disconnect());\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\nOnce this returns successfully, you're ready to begin developing! For details on all SDK options and methods, please refer to the [SDK documentation](https://dashevo.github.io/js-dash-sdk).\n\n# Connect to a Devnet\n\nThe SDK also supports connecting to development networks (devnets). Since devnets can be created by anyone, the client library will be unaware of them unless connection information is provided using one of the options described below.\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Devnets may not be configured provide seed node capabilities (e.g. local devnets created using the [dashmate tool](tutorial-connect-to-a-network-dash-masternode#local-development-network)). In these cases, use the second method described below ([connect via address](#connect-via-address)).\"\n}\n[/block]\n## Connect via Seed\n\nUsing a seed node is the preferred method when one is available. The client uses the provided seed node to a retrieve a list of available masternodes on the network so requests can be spread across the entire network.\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"const Dash = require('dash');\\n\\nconst client = new Dash.Client({\\n  seeds: [{\\n    host: 'seed-1.testnet.networks.dash.org',\\n    httpPort: 3000,\\n    grpcPort: 3010,\\n  }],\\n});\\n\\nasync function connect() {\\n  return await client.getDAPIClient().core.getBestBlockHash();\\n}\\n\\nconnect()\\n  .then((d) => console.log('Connected. Best block hash:\\\\n', d))\\n  .catch((e) => console.error('Something went wrong:\\\\n', e))\\n  .finally(() => client.disconnect());\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\n## Connect via Address\n\nCustom addresses may be directly specified via `dapiAddresses` on networks that do not provide a seed node or in cases where it is beneficial to know exactly what node(s) are being accessed (e.g. debugging, local development, etc.).\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"const Dash = require('dash');\\n\\nconst client = new Dash.Client({\\n  dapiAddresses: [\\n    '127.0.0.1:3000:3010',\\n    '127.0.0.2:3000:3010',\\n  ],\\n});\\n\\nasync function connect() {\\n  return await client.getDAPIClient().core.getBestBlockHash();\\n}\\n\\nconnect()\\n  .then((d) => console.log('Connected. Best block hash:\\\\n', d))\\n  .catch((e) => console.error('Something went wrong:\\\\n', e))\\n  .finally(() => client.disconnect());\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\n# Connect Directly to DAPI (Optional) \n[block:callout]\n{\n  \"type\": \"warning\",\n  \"title\": \"Advanced Topic\",\n  \"body\": \"Normally, the Dash SDK, dapi-client, or another library should be used to interact with DAPI. This may be helpful for debugging in some cases, but generally is not required.\"\n}\n[/block]\nThe example below demonstrates retrieving the hash of the best block hash directly from a DAPI node via command line and several languages:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"curl --request POST \\\\\\n  --url http://seed-1.testnet.networks.dash.org:3000/ \\\\\\n  --header 'content-type: application/json' \\\\\\n  --data '{\\\"method\\\":\\\"getBlockHash\\\",\\\"id\\\":1,\\\"jsonrpc\\\":\\\"2.0\\\",\\\"params\\\":{\\\"height\\\": 100 }}'\",\n      \"language\": \"shell\",\n      \"name\": null\n    },\n    {\n      \"code\": \"import requests\\n\\nurl = \\\"http://seed-1.testnet.networks.dash.org:3000/\\\"\\n\\npayload = \\\"{\\\\\\\"method\\\\\\\":\\\\\\\"getBlockHash\\\\\\\",\\\\\\\"id\\\\\\\":1,\\\\\\\"jsonrpc\\\\\\\":\\\\\\\"2.0\\\\\\\",\\\\\\\"params\\\\\\\":{\\\\\\\"height\\\\\\\":100}}\\\"\\nheaders = {'content-type': 'application/json'}\\n\\nresponse = requests.request(\\\"POST\\\", url, data=payload, headers=headers)\\n\\nprint(response.text)\\n\",\n      \"language\": \"python\",\n      \"name\": \"Python\"\n    },\n    {\n      \"code\": \"require 'uri'\\nrequire 'net/http'\\n\\nurl = URI(\\\"http://seed-1.testnet.networks.dash.org:3000/\\\")\\n\\nhttp = Net::HTTP.new(url.host, url.port)\\n\\nrequest = Net::HTTP::Post.new(url)\\nrequest[\\\"content-type\\\"] = 'application/json'\\nrequest.body = \\\"{\\\\\\\"method\\\\\\\":\\\\\\\"getBlockHash\\\\\\\",\\\\\\\"id\\\\\\\":1,\\\\\\\"jsonrpc\\\\\\\":\\\\\\\"2.0\\\\\\\",\\\\\\\"params\\\\\\\":{\\\\\\\"height\\\\\\\":100}}\\\"\\n\\nresponse = http.request(request)\\nputs response.read_body\",\n      \"language\": \"ruby\"\n    }\n  ]\n}\n[/block]", 
 "link_external": false, 
 "body_html": "<div class=\"magic-block-textarea\"><p>The purpose of this tutorial is to walk through the steps necessary to access the network.</p>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-overview\"></div>Overview<a class=\"fa fa-anchor\" href=\"#section-overview\"></a></h1>\n<p>Platform services are provided via a combination of HTTP and gRPC connections to DAPI, and some connections to an Insight API. Although one could interact with DAPI by connecting to these directly, or by using <a href=\"https://github.com/dashevo/dapi-client\">DAPI-client</a>, the easiest approach is to use the <a href=\"https://github.com/dashevo/js-dash-sdk/\">JavaScript Dash SDK</a>.</p>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-prerequisites\"></div>Prerequisites<a class=\"fa fa-anchor\" href=\"#section-prerequisites\"></a></h1>\n<ul>\n<li >An installation of <a href=\"https://nodejs.org/en/download/\">NodeJS</a></li></ul>\n\n</div>\n<div class=\"magic-block-callout type-info \">\n\t<h3><i title=\"Info\" class=\"fa fa-info-circle\"></i>Minimum Supported Version\n\t</h3>\n\t<div class=\"callout-body\"><p>As of Dash Platform v0.16, NodeJS v12 or higher must be used</p>\n\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-connect-via-dash-sdk\"></div>Connect via Dash SDK<a class=\"fa fa-anchor\" href=\"#section-connect-via-dash-sdk\"></a></h1>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-1-install-the-dash-sdk\"></div>1. Install the Dash SDK<a class=\"fa fa-anchor\" href=\"#section-1-install-the-dash-sdk\"></a></h2>\n<p>The JavaScript SDK package is available from npmjs.com and can be installed by running <code>npm install dash</code> (from the command line):</p>\n\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">Shell</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(226)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-226\">npm install dash</textarea>\n\t\t\t<pre id=\"code-226\"><code><span class='cm-s-neo'><span class=\"cm-builtin\">npm</span> install dash</span></code></pre></span>\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-2-connect-to-dash-platform\"></div>2. Connect to Dash Platform<a class=\"fa fa-anchor\" href=\"#section-2-connect-to-dash-platform\"></a></h2>\n<p>Create a file with the following contents. Then run it by typing <code>node &lt;file.js&gt;</code> (from the command line):</p>\n\n</div>\n<div class=\"magic-block-callout type-info no-title\"><span class=\"noTitleIcon\"><i title=\"Info\" class=\"fa fa-info-circle\"></i></span>\n\t<div class=\"callout-body\"><p>As of Dash Platform v0.17.0, the SDK connects to testnet by default.</p>\n\n\t</div>\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">JavaScript</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(278)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-278\">const Dash = require('dash');\n\nconst client = new Dash.Client();\n\nasync function connect() {\n  return await client.getDAPIClient().core.getBestBlockHash();\n}\n\nconnect()\n  .then((d) =&gt; console.log('Connected. Best block hash:\\n', d))\n  .catch((e) =&gt; console.error('Something went wrong:\\n', e))\n  .finally(() =&gt; client.disconnect());</textarea>\n\t\t\t<pre id=\"code-278\"><code><span class='cm-s-neo'><span class=\"cm-keyword\">const</span> <span class=\"cm-def\">Dash</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">require</span>(<span class=\"cm-string\">'dash'</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">client</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">new</span> <span class=\"cm-variable\">Dash</span>.<span class=\"cm-property\">Client</span>();\n\n<span class=\"cm-keyword\">async</span> <span class=\"cm-keyword\">function</span> <span class=\"cm-def\">connect</span>() {\n  <span class=\"cm-keyword\">return</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">getDAPIClient</span>().<span class=\"cm-property\">core</span>.<span class=\"cm-property\">getBestBlockHash</span>();\n}\n\n<span class=\"cm-variable\">connect</span>()\n  .<span class=\"cm-property\">then</span>((<span class=\"cm-def\">d</span>) <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-string\">'Connected. Best block hash:\\n'</span>, <span class=\"cm-variable-2\">d</span>))\n  .<span class=\"cm-property\">catch</span>((<span class=\"cm-def\">e</span>) <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">error</span>(<span class=\"cm-string\">'Something went wrong:\\n'</span>, <span class=\"cm-variable-2\">e</span>))\n  .<span class=\"cm-property\">finally</span>(() <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">disconnect</span>());</span></code></pre></span>\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><p>Once this returns successfully, you&#39;re ready to begin developing! For details on all SDK options and methods, please refer to the <a href=\"https://dashevo.github.io/js-dash-sdk\">SDK documentation</a>.</p>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-connect-to-a-devnet\"></div>Connect to a Devnet<a class=\"fa fa-anchor\" href=\"#section-connect-to-a-devnet\"></a></h1>\n<p>The SDK also supports connecting to development networks (devnets). Since devnets can be created by anyone, the client library will be unaware of them unless connection information is provided using one of the options described below.</p>\n\n</div>\n<div class=\"magic-block-callout type-info no-title\"><span class=\"noTitleIcon\"><i title=\"Info\" class=\"fa fa-info-circle\"></i></span>\n\t<div class=\"callout-body\"><p>Devnets may not be configured provide seed node capabilities (e.g. local devnets created using the <a href=\"tutorial-connect-to-a-network-dash-masternode#local-development-network\">dashmate tool</a>). In these cases, use the second method described below (<a href=\"#connect-via-address\">connect via address</a>).</p>\n\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-connect-via-seed\"></div>Connect via Seed<a class=\"fa fa-anchor\" href=\"#section-connect-via-seed\"></a></h2>\n<p>Using a seed node is the preferred method when one is available. The client uses the provided seed node to a retrieve a list of available masternodes on the network so requests can be spread across the entire network.</p>\n\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">JavaScript</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(188)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-188\">const Dash = require('dash');\n\nconst client = new Dash.Client({\n  seeds: [{\n    host: 'seed-1.testnet.networks.dash.org',\n    httpPort: 3000,\n    grpcPort: 3010,\n  }],\n});\n\nasync function connect() {\n  return await client.getDAPIClient().core.getBestBlockHash();\n}\n\nconnect()\n  .then((d) =&gt; console.log('Connected. Best block hash:\\n', d))\n  .catch((e) =&gt; console.error('Something went wrong:\\n', e))\n  .finally(() =&gt; client.disconnect());</textarea>\n\t\t\t<pre id=\"code-188\"><code><span class='cm-s-neo'><span class=\"cm-keyword\">const</span> <span class=\"cm-def\">Dash</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">require</span>(<span class=\"cm-string\">'dash'</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">client</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">new</span> <span class=\"cm-variable\">Dash</span>.<span class=\"cm-property\">Client</span>({\n  <span class=\"cm-property\">seeds</span>: [{\n    <span class=\"cm-property\">host</span>: <span class=\"cm-string\">'seed-1.testnet.networks.dash.org'</span>,\n    <span class=\"cm-property\">httpPort</span>: <span class=\"cm-number\">3000</span>,\n    <span class=\"cm-property\">grpcPort</span>: <span class=\"cm-number\">3010</span>,\n  }],\n});\n\n<span class=\"cm-keyword\">async</span> <span class=\"cm-keyword\">function</span> <span class=\"cm-def\">connect</span>() {\n  <span class=\"cm-keyword\">return</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">getDAPIClient</span>().<span class=\"cm-property\">core</span>.<span class=\"cm-property\">getBestBlockHash</span>();\n}\n\n<span class=\"cm-variable\">connect</span>()\n  .<span class=\"cm-property\">then</span>((<span class=\"cm-def\">d</span>) <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-string\">'Connected. Best block hash:\\n'</span>, <span class=\"cm-variable-2\">d</span>))\n  .<span class=\"cm-property\">catch</span>((<span class=\"cm-def\">e</span>) <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">error</span>(<span class=\"cm-string\">'Something went wrong:\\n'</span>, <span class=\"cm-variable-2\">e</span>))\n  .<span class=\"cm-property\">finally</span>(() <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">disconnect</span>());</span></code></pre></span>\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-connect-via-address\"></div>Connect via Address<a class=\"fa fa-anchor\" href=\"#section-connect-via-address\"></a></h2>\n<p>Custom addresses may be directly specified via <code>dapiAddresses</code> on networks that do not provide a seed node or in cases where it is beneficial to know exactly what node(s) are being accessed (e.g. debugging, local development, etc.).</p>\n\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">JavaScript</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(966)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-966\">const Dash = require('dash');\n\nconst client = new Dash.Client({\n  dapiAddresses: [\n    '127.0.0.1:3000:3010',\n    '127.0.0.2:3000:3010',\n  ],\n});\n\nasync function connect() {\n  return await client.getDAPIClient().core.getBestBlockHash();\n}\n\nconnect()\n  .then((d) =&gt; console.log('Connected. Best block hash:\\n', d))\n  .catch((e) =&gt; console.error('Something went wrong:\\n', e))\n  .finally(() =&gt; client.disconnect());</textarea>\n\t\t\t<pre id=\"code-966\"><code><span class='cm-s-neo'><span class=\"cm-keyword\">const</span> <span class=\"cm-def\">Dash</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">require</span>(<span class=\"cm-string\">'dash'</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">client</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">new</span> <span class=\"cm-variable\">Dash</span>.<span class=\"cm-property\">Client</span>({\n  <span class=\"cm-property\">dapiAddresses</span>: [\n    <span class=\"cm-string\">'127.0.0.1:3000:3010'</span>,\n    <span class=\"cm-string\">'127.0.0.2:3000:3010'</span>,\n  ],\n});\n\n<span class=\"cm-keyword\">async</span> <span class=\"cm-keyword\">function</span> <span class=\"cm-def\">connect</span>() {\n  <span class=\"cm-keyword\">return</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">getDAPIClient</span>().<span class=\"cm-property\">core</span>.<span class=\"cm-property\">getBestBlockHash</span>();\n}\n\n<span class=\"cm-variable\">connect</span>()\n  .<span class=\"cm-property\">then</span>((<span class=\"cm-def\">d</span>) <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-string\">'Connected. Best block hash:\\n'</span>, <span class=\"cm-variable-2\">d</span>))\n  .<span class=\"cm-property\">catch</span>((<span class=\"cm-def\">e</span>) <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">error</span>(<span class=\"cm-string\">'Something went wrong:\\n'</span>, <span class=\"cm-variable-2\">e</span>))\n  .<span class=\"cm-property\">finally</span>(() <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">disconnect</span>());</span></code></pre></span>\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-connect-directly-to-dapi-optional\"></div>Connect Directly to DAPI (Optional)<a class=\"fa fa-anchor\" href=\"#section-connect-directly-to-dapi-optional\"></a></h1>\n\n</div>\n<div class=\"magic-block-callout type-warning \">\n\t<h3><i title=\"Warning\" class=\"fa fa-exclamation-circle\"></i>Advanced Topic\n\t</h3>\n\t<div class=\"callout-body\"><p>Normally, the Dash SDK, dapi-client, or another library should be used to interact with DAPI. This may be helpful for debugging in some cases, but generally is not required.</p>\n\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><p>The example below demonstrates retrieving the hash of the best block hash directly from a DAPI node via command line and several languages:</p>\n\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">Shell</a></li>\n\t\t<li><a href=\"\" ng-click=\"showCode(1)\" ng-class=\"{active: (1 == tab)}\">Python</a></li>\n\t\t<li><a href=\"\" ng-click=\"showCode(2)\" ng-class=\"{active: (2 == tab)}\">Ruby</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(785)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-785\">curl --request POST \\\n  --url http://seed-1.testnet.networks.dash.org:3000/ \\\n  --header 'content-type: application/json' \\\n  --data '{&quot;method&quot;:&quot;getBlockHash&quot;,&quot;id&quot;:1,&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;params&quot;:{&quot;height&quot;: 100 &#125;&#125;</span>'</textarea>\n\t\t\t<pre id=\"code-785\"><code><span class='cm-s-neo'><span class=\"cm-builtin\">curl</span> <span class=\"cm-attribute\">--request</span> POST \\\n  <span class=\"cm-attribute\">--url</span> http:&#47;&#47;seed-1.testnet.networks.dash.org:3000&#47; \\\n  <span class=\"cm-attribute\">--header</span> <span class=\"cm-string\">'content-type: application&#47;json'</span> \\\n  <span class=\"cm-attribute\">--data</span> <span class=\"cm-string\">'{\"method\":\"getBlockHash\",\"id\":1,\"jsonrpc\":\"2.0\",\"params\":{\"height\": 100 &#125;<span></span>&#125;'</span></span></code></pre></span><span ng-if=\"tab == 1\">\n\t\t\t<button ng-click=\"copyCode(540)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-540\">import requests\n\nurl = &quot;http://seed-1.testnet.networks.dash.org:3000/&quot;\n\npayload = &quot;{\\&quot;method\\&quot;:\\&quot;getBlockHash\\&quot;,\\&quot;id\\&quot;:1,\\&quot;jsonrpc\\&quot;:\\&quot;2.0\\&quot;,\\&quot;params\\&quot;:{\\&quot;height\\&quot;:100&#125;&#125;</span>&quot;\nheaders = {'content-type': 'application/json'}\n\nresponse = requests.request(&quot;POST&quot;, url, data=payload, headers=headers)\n\nprint(response.text)\n</textarea>\n\t\t\t<pre id=\"code-540\"><code><span class='cm-s-neo'><span class=\"cm-keyword\">import</span> <span class=\"cm-variable\">requests</span>\n\n<span class=\"cm-variable\">url</span> <span class=\"cm-operator\">=</span> <span class=\"cm-string\">\"http:&#47;&#47;seed-1.testnet.networks.dash.org:3000&#47;\"</span>\n\n<span class=\"cm-variable\">payload</span> <span class=\"cm-operator\">=</span> <span class=\"cm-string\">\"{\\\"method\\\":\\\"getBlockHash\\\",\\\"id\\\":1,\\\"jsonrpc\\\":\\\"2.0\\\",\\\"params\\\":{\\\"height\\\":100&#125;<span></span>&#125;\"</span>\n<span class=\"cm-variable\">headers</span> <span class=\"cm-operator\">=</span> {<span class=\"cm-string\">'content-type'</span>: <span class=\"cm-string\">'application&#47;json'</span>}\n\n<span class=\"cm-variable\">response</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">requests</span>.<span class=\"cm-property\">request</span>(<span class=\"cm-string\">\"POST\"</span>, <span class=\"cm-variable\">url</span>, <span class=\"cm-variable\">data</span><span class=\"cm-operator\">=</span><span class=\"cm-variable\">payload</span>, <span class=\"cm-variable\">headers</span><span class=\"cm-operator\">=</span><span class=\"cm-variable\">headers</span>)\n\n<span class=\"cm-builtin\">print</span>(<span class=\"cm-variable\">response</span>.<span class=\"cm-property\">text</span>)\n</span></code></pre></span><span ng-if=\"tab == 2\">\n\t\t\t<button ng-click=\"copyCode(627)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-627\">require 'uri'\nrequire 'net/http'\n\nurl = URI(&quot;http://seed-1.testnet.networks.dash.org:3000/&quot;)\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest[&quot;content-type&quot;] = 'application/json'\nrequest.body = &quot;{\\&quot;method\\&quot;:\\&quot;getBlockHash\\&quot;,\\&quot;id\\&quot;:1,\\&quot;jsonrpc\\&quot;:\\&quot;2.0\\&quot;,\\&quot;params\\&quot;:{\\&quot;height\\&quot;:100&#125;&#125;</span>&quot;\n\nresponse = http.request(request)\nputs response.read_body</textarea>\n\t\t\t<pre id=\"code-627\"><code><span class='cm-s-neo'><span class=\"cm-keyword\">require</span> <span class=\"cm-string\">'uri'</span>\n<span class=\"cm-keyword\">require</span> <span class=\"cm-string\">'net&#47;http'</span>\n\n<span class=\"cm-variable\">url</span> <span class=\"cm-operator\">=</span> <span class=\"cm-tag\">URI</span>(<span class=\"cm-string\">\"http:&#47;&#47;seed-1.testnet.networks.dash.org:3000&#47;\"</span>)\n\n<span class=\"cm-variable\">http</span> <span class=\"cm-operator\">=</span> <span class=\"cm-atom\">Net::HTTP</span><span class=\"cm-operator\">.</span><span class=\"cm-property\">new</span>(<span class=\"cm-variable\">url</span><span class=\"cm-operator\">.</span><span class=\"cm-property\">host</span>, <span class=\"cm-variable\">url</span><span class=\"cm-operator\">.</span><span class=\"cm-property\">port</span>)\n\n<span class=\"cm-variable\">request</span> <span class=\"cm-operator\">=</span> <span class=\"cm-atom\">Net::HTTP::</span><span class=\"cm-tag\">Post</span><span class=\"cm-operator\">.</span><span class=\"cm-property\">new</span>(<span class=\"cm-variable\">url</span>)\n<span class=\"cm-variable\">request</span>[<span class=\"cm-string\">\"content-type\"</span>] <span class=\"cm-operator\">=</span> <span class=\"cm-string\">'application&#47;json'</span>\n<span class=\"cm-variable\">request</span><span class=\"cm-operator\">.</span><span class=\"cm-property\">body</span> <span class=\"cm-operator\">=</span> <span class=\"cm-string\">\"{\\\"method\\\":\\\"getBlockHash\\\",\\\"id\\\":1,\\\"jsonrpc\\\":\\\"2.0\\\",\\\"params\\\":{\\\"height\\\":100&#125;<span></span>&#125;\"</span>\n\n<span class=\"cm-variable\">response</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">http</span><span class=\"cm-operator\">.</span><span class=\"cm-property\">request</span>(<span class=\"cm-variable\">request</span>)\n<span class=\"cm-variable\">puts</span> <span class=\"cm-variable\">response</span><span class=\"cm-operator\">.</span><span class=\"cm-property\">read_body</span></span></code></pre></span>\n\t</div>\n</div>", 
 "updates": [
  "5e17e0fc0e1cef0012773e09", 
  "5e395a48470bc3002d78d889", 
  "5e7dfff822c6cb0306043f8c", 
  "5f278e7e4514dc0049ec6d09", 
  "5f2cff377244320032275be0", 
  "5f4e6749e8746f0012f178a4"
 ], 
 "isReference": false, 
 "slug": "tutorial-connecting-to-testnet", 
 "deprecated": false, 
 "link_url": "", 
 "project": "5bda01cad172e200499a20a9", 
 "__v": 8, 
 "_id": "612fe724e9fa2b0026f5fa83", 
 "order": 3, 
 "user": "5b8400d7185d5e00036dcc3b"
}