{
 "metadata": {
  "image": [],
  "title": "",
  "description": "",
  "keywords": "",
  "robots": "index"
 },
 "api": {
  "method": "get",
  "url": "",
  "auth": "required",
  "results": {
   "codes": [
    {
     "status": 200,
     "language": "json",
     "code": "{}",
     "name": ""
    },
    {
     "status": 400,
     "language": "json",
     "code": "{}",
     "name": ""
    }
   ]
  },
  "params": [],
  "examples": {
   "codes": []
  }
 },
 "next": {
  "description": "",
  "pages": [
   {
    "type": "doc",
    "icon": "file-text-o",
    "name": "Create and Fund a Wallet",
    "slug": "tutorial-create-and-fund-a-wallet",
    "category": "Tutorials"
   },
   {
    "type": "doc",
    "icon": "file-text-o",
    "name": "Use DAPI Client Methods",
    "slug": "tutorial-use-dapi-client-methods",
    "category": "Tutorials"
   }
  ]
 },
 "algolia": {
  "recordCount": 10,
  "publishPending": false,
  "translationFailure": false,
  "updatedAt": "2023-09-20T20:33:45.267Z"
 },
 "title": "Connect to a Network",
 "icon": "",
 "updates": [
  "5e17e0fc0e1cef0012773e09",
  "5e395a48470bc3002d78d889",
  "5e7dfff822c6cb0306043f8c",
  "5f278e7e4514dc0049ec6d09",
  "5f2cff377244320032275be0",
  "5f4e6749e8746f0012f178a4"
 ],
 "type": "basic",
 "slug": "tutorial-connecting-to-testnet",
 "excerpt": "The Dash test network",
 "body": "The purpose of this tutorial is to walk through the steps necessary to access the network.\n\n# Overview\n\nPlatform services are provided via a combination of HTTP and gRPC connections to DAPI, and some connections to an Insight API. Although one could interact with DAPI by connecting to these directly, or by using [DAPI-client](https://github.com/dashevo/platform/tree/master/packages/js-dapi-client), the easiest approach is to use the [JavaScript Dash SDK](https://github.com/dashevo/platform/tree/master/packages/js-dash-sdk). The Dash SDK connects to the testnet by default.\n\n# Prerequisites\n\n- An installation of [NodeJS v16 or higher](https://nodejs.org/en/download/)\n\n# Connect via Dash SDK\n\n## 1. Install the Dash SDK\n\nThe JavaScript SDK package is available from npmjs.com and can be installed by running `npm install dash` from the command line:\n\n```shell\nnpm install dash@0.25-dev\n```\n\n## 2. Connect to Dash Platform\n\nCreate a file named `dashConnect.js` with the following contents. Then run it by typing `node dashConnect.js` from the command line:\n\n```javascript dashConnect.js\nconst Dash = require('dash');\n\nconst client = new Dash.Client({ network: 'testnet' });\n\nasync function connect() {\n  return await client.getDAPIClient().core.getBestBlockHash();\n}\n\nconnect()\n  .then((d) => console.log('Connected. Best block hash:\\n', d))\n  .catch((e) => console.error('Something went wrong:\\n', e))\n  .finally(() => client.disconnect());\n```\n\nOnce this returns successfully, you're ready to begin developing! See the [Quickstart](tutorials-introduction#quickstart) for recommended next steps. For details on all SDK options and methods, please refer to the [SDK documentation](https://dashevo.github.io/platform/SDK/).\n\n# Connect to a Devnet\n\nThe SDK also supports connecting to development networks (devnets). Since devnets can be created by anyone, the client library will be unaware of them unless connection information is provided using one of the options described below.\n\n## Connect via Seed\n\nUsing a seed node is the preferred method in most cases. The client uses the provided seed node to a retrieve a list of available masternodes on the network so requests can be spread across the entire network.\n\n```javascript\nconst Dash = require('dash');\n\nconst client = new Dash.Client({\n  seeds: [{\n    host: 'seed-1.testnet.networks.dash.org:1443',\n  }],\n});\n\nasync function connect() {\n  return await client.getDAPIClient().core.getBestBlockHash();\n}\n\nconnect()\n  .then((d) => console.log('Connected. Best block hash:\\n', d))\n  .catch((e) => console.error('Something went wrong:\\n', e))\n  .finally(() => client.disconnect());\n```\n\n## Connect via Address\n\nCustom addresses may be directly specified via `dapiAddresses` in cases where it is beneficial to know exactly what node(s) are being accessed (e.g. debugging, local development, etc.).\n\n```javascript\nconst Dash = require('dash');\n\nconst client = new Dash.Client({\n  dapiAddresses: [\n    '127.0.0.1:3000:3010',\n    '127.0.0.2:3000:3010',\n  ],\n});\n\nasync function connect() {\n  return await client.getDAPIClient().core.getBestBlockHash();\n}\n\nconnect()\n  .then((d) => console.log('Connected. Best block hash:\\n', d))\n  .catch((e) => console.error('Something went wrong:\\n', e))\n  .finally(() => client.disconnect());\n```\n\n# Connect Directly to DAPI (Optional)\n\n> \ud83d\udea7 Advanced Topic\n> \n> Normally, the Dash SDK, dapi-client, or another library should be used to interact with DAPI. This may be helpful for debugging in some cases, but generally is not required.\n\nThe example below demonstrates retrieving the hash of the best block hash directly from a DAPI node via command line and several languages:\n\n```shell\ncurl --request POST \\\n  --url https://seed-1.testnet.networks.dash.org:1443/ \\\n  --header 'content-type: application/json' \\\n  --data '{\"method\":\"getBlockHash\",\"id\":1,\"jsonrpc\":\"2.0\",\"params\":{\"height\": 100 }}'\n```\n```python\nimport requests\n\nurl = \"https://seed-1.testnet.networks.dash.org:1443/\"\n\npayload = \"{\\\"method\\\":\\\"getBlockHash\\\",\\\"id\\\":1,\\\"jsonrpc\\\":\\\"2.0\\\",\\\"params\\\":{\\\"height\\\":100}}\"\nheaders = {'content-type': 'application/json'}\n\nresponse = requests.request(\"POST\", url, data=payload, headers=headers)\n\nprint(response.text)\n```\n```ruby\nrequire 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://seed-1.testnet.networks.dash.org:1443/\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\\"method\\\":\\\"getBlockHash\\\",\\\"id\\\":1,\\\"jsonrpc\\\":\\\"2.0\\\",\\\"params\\\":{\\\"height\\\":100}}\"\n\nresponse = http.request(request)\nputs response.read_body\n```",
 "order": 3,
 "isReference": false,
 "deprecated": false,
 "hidden": false,
 "sync_unique": "",
 "link_url": "",
 "link_external": false,
 "reusableContent": [],
 "previousSlug": "tutorial-connecting-to-evonet",
 "slugUpdatedAt": "2021-02-08T20:54:54.846Z",
 "revision": 18,
 "_id": "64f8a9df750465004742ad8e",
 "version": "64f8a9df750465004742ae1d",
 "updatedAt": "2023-09-20T20:33:44.914Z",
 "createdAt": "2019-10-08T10:38:12.102Z",
 "project": "5bda01cad172e200499a20a9",
 "user": "5b8400d7185d5e00036dcc3b",
 "category": "64f8a9df750465004742ad6e",
 "__v": 8,
 "parentDoc": null,
 "pendingAlgoliaPublish": false,
 "isApi": false,
 "id": "64f8a9df750465004742ad8e",
 "body_html": "<p>The purpose of this tutorial is to walk through the steps necessary to access the network.</p>\n<h1 class=\"heading heading-1 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"overview\"></div><div class=\"heading-text\"><div id=\"section-overview\" class=\"heading-anchor_backwardsCompatibility\"></div>Overview</div><a aria-label=\"Skip link to Overview\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#overview\"></a></h1>\n<p>Platform services are provided via a combination of HTTP and gRPC connections to DAPI, and some connections to an Insight API. Although one could interact with DAPI by connecting to these directly, or by using <a href=\"https://github.com/dashevo/platform/tree/master/packages/js-dapi-client\" target=\"\" title=\"\">DAPI-client</a>, the easiest approach is to use the <a href=\"https://github.com/dashevo/platform/tree/master/packages/js-dash-sdk\" target=\"\" title=\"\">JavaScript Dash SDK</a>. The Dash SDK connects to the testnet by default.</p>\n<h1 class=\"heading heading-1 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"prerequisites\"></div><div class=\"heading-text\"><div id=\"section-prerequisites\" class=\"heading-anchor_backwardsCompatibility\"></div>Prerequisites</div><a aria-label=\"Skip link to Prerequisites\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#prerequisites\"></a></h1>\n<ul>\n<li>An installation of <a href=\"https://nodejs.org/en/download/\" target=\"\" title=\"\">NodeJS v16 or higher</a></li>\n</ul>\n<h1 class=\"heading heading-1 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"connect-via-dash-sdk\"></div><div class=\"heading-text\"><div id=\"section-connect-via-dash-sdk\" class=\"heading-anchor_backwardsCompatibility\"></div>Connect via Dash SDK</div><a aria-label=\"Skip link to Connect via Dash SDK\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#connect-via-dash-sdk\"></a></h1>\n<h2 class=\"heading heading-2 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"1-install-the-dash-sdk\"></div><div class=\"heading-text\"><div id=\"section-1-install-the-dash-sdk\" class=\"heading-anchor_backwardsCompatibility\"></div>1. Install the Dash SDK</div><a aria-label=\"Skip link to 1. Install the Dash SDK\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#1-install-the-dash-sdk\"></a></h2>\n<p>The JavaScript SDK package is available from npmjs.com and can be installed by running <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">npm install dash</code> from the command line:</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Shell</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-shell theme-light\" data-lang=\"shell\" name=\"\" tabindex=\"0\">npm install dash@0.25-dev\n</code></pre></div></div>\n<h2 class=\"heading heading-2 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"2-connect-to-dash-platform\"></div><div class=\"heading-text\"><div id=\"section-2-connect-to-dash-platform\" class=\"heading-anchor_backwardsCompatibility\"></div>2. Connect to Dash Platform</div><a aria-label=\"Skip link to 2. Connect to Dash Platform\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#2-connect-to-dash-platform\"></a></h2>\n<p>Create a file named <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">dashConnect.js</code> with the following contents. Then run it by typing <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">node dashConnect.js</code> from the command line:</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">dashConnect.js</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-javascript theme-light\" data-lang=\"javascript\" name=\"dashConnect.js\" tabindex=\"0\">const Dash = require(&#x27;dash&#x27;);\n\nconst client = new Dash.Client({ network: &#x27;testnet&#x27; });\n\nasync function connect() {\n  return await client.getDAPIClient().core.getBestBlockHash();\n}\n\nconnect()\n  .then((d) =&gt; console.log(&#x27;Connected. Best block hash:\\n&#x27;, d))\n  .catch((e) =&gt; console.error(&#x27;Something went wrong:\\n&#x27;, e))\n  .finally(() =&gt; client.disconnect());\n</code></pre></div></div>\n<p>Once this returns successfully, you&#x27;re ready to begin developing! See the <a href=\"tutorials-introduction#quickstart\" target=\"\" title=\"\">Quickstart</a> for recommended next steps. For details on all SDK options and methods, please refer to the <a href=\"https://dashevo.github.io/platform/SDK/\" target=\"\" title=\"\">SDK documentation</a>.</p>\n<h1 class=\"heading heading-1 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"connect-to-a-devnet\"></div><div class=\"heading-text\"><div id=\"section-connect-to-a-devnet\" class=\"heading-anchor_backwardsCompatibility\"></div>Connect to a Devnet</div><a aria-label=\"Skip link to Connect to a Devnet\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#connect-to-a-devnet\"></a></h1>\n<p>The SDK also supports connecting to development networks (devnets). Since devnets can be created by anyone, the client library will be unaware of them unless connection information is provided using one of the options described below.</p>\n<h2 class=\"heading heading-2 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"connect-via-seed\"></div><div class=\"heading-text\"><div id=\"section-connect-via-seed\" class=\"heading-anchor_backwardsCompatibility\"></div>Connect via Seed</div><a aria-label=\"Skip link to Connect via Seed\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#connect-via-seed\"></a></h2>\n<p>Using a seed node is the preferred method in most cases. The client uses the provided seed node to a retrieve a list of available masternodes on the network so requests can be spread across the entire network.</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">JavaScript</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-javascript theme-light\" data-lang=\"javascript\" name=\"\" tabindex=\"0\">const Dash = require(&#x27;dash&#x27;);\n\nconst client = new Dash.Client({\n  seeds: [{\n    host: &#x27;seed-1.testnet.networks.dash.org:1443&#x27;,\n  }],\n});\n\nasync function connect() {\n  return await client.getDAPIClient().core.getBestBlockHash();\n}\n\nconnect()\n  .then((d) =&gt; console.log(&#x27;Connected. Best block hash:\\n&#x27;, d))\n  .catch((e) =&gt; console.error(&#x27;Something went wrong:\\n&#x27;, e))\n  .finally(() =&gt; client.disconnect());\n</code></pre></div></div>\n<h2 class=\"heading heading-2 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"connect-via-address\"></div><div class=\"heading-text\"><div id=\"section-connect-via-address\" class=\"heading-anchor_backwardsCompatibility\"></div>Connect via Address</div><a aria-label=\"Skip link to Connect via Address\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#connect-via-address\"></a></h2>\n<p>Custom addresses may be directly specified via <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">dapiAddresses</code> in cases where it is beneficial to know exactly what node(s) are being accessed (e.g. debugging, local development, etc.).</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">JavaScript</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-javascript theme-light\" data-lang=\"javascript\" name=\"\" tabindex=\"0\">const Dash = require(&#x27;dash&#x27;);\n\nconst client = new Dash.Client({\n  dapiAddresses: [\n    &#x27;127.0.0.1:3000:3010&#x27;,\n    &#x27;127.0.0.2:3000:3010&#x27;,\n  ],\n});\n\nasync function connect() {\n  return await client.getDAPIClient().core.getBestBlockHash();\n}\n\nconnect()\n  .then((d) =&gt; console.log(&#x27;Connected. Best block hash:\\n&#x27;, d))\n  .catch((e) =&gt; console.error(&#x27;Something went wrong:\\n&#x27;, e))\n  .finally(() =&gt; client.disconnect());\n</code></pre></div></div>\n<h1 class=\"heading heading-1 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"connect-directly-to-dapi-optional\"></div><div class=\"heading-text\"><div id=\"section-connect-directly-to-dapi-optional\" class=\"heading-anchor_backwardsCompatibility\"></div>Connect Directly to DAPI (Optional)</div><a aria-label=\"Skip link to Connect Directly to DAPI (Optional)\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#connect-directly-to-dapi-optional\"></a></h1>\n<blockquote class=\"callout callout_warn\" theme=\"\ud83d\udea7\"><h2 class=\"callout-heading\"><span class=\"callout-icon\">\ud83d\udea7</span><p>Advanced Topic</p></h2><p>Normally, the Dash SDK, dapi-client, or another library should be used to interact with DAPI. This may be helpful for debugging in some cases, but generally is not required.</p></blockquote>\n<p>The example below demonstrates retrieving the hash of the best block hash directly from a DAPI node via command line and several languages:</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">Shell</button><button aria-selected=\"false\" class=\"\" role=\"tab\" type=\"button\">Python</button><button aria-selected=\"false\" class=\"\" role=\"tab\" type=\"button\">Ruby</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-shell theme-light\" data-lang=\"shell\" name=\"\" tabindex=\"0\">curl --request POST \\\n  --url https://seed-1.testnet.networks.dash.org:1443/ \\\n  --header &#x27;content-type: application/json&#x27; \\\n  --data &#x27;{&quot;method&quot;:&quot;getBlockHash&quot;,&quot;id&quot;:1,&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;params&quot;:{&quot;height&quot;: 100 }}&#x27;\n</code></pre><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-python theme-light\" data-lang=\"python\" name=\"\" tabindex=\"0\">import requests\n\nurl = &quot;https://seed-1.testnet.networks.dash.org:1443/&quot;\n\npayload = &quot;{\\&quot;method\\&quot;:\\&quot;getBlockHash\\&quot;,\\&quot;id\\&quot;:1,\\&quot;jsonrpc\\&quot;:\\&quot;2.0\\&quot;,\\&quot;params\\&quot;:{\\&quot;height\\&quot;:100}}&quot;\nheaders = {&#x27;content-type&#x27;: &#x27;application/json&#x27;}\n\nresponse = requests.request(&quot;POST&quot;, url, data=payload, headers=headers)\n\nprint(response.text)\n</code></pre><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-ruby theme-light\" data-lang=\"ruby\" name=\"\" tabindex=\"0\">require &#x27;uri&#x27;\nrequire &#x27;net/http&#x27;\n\nurl = URI(&quot;https://seed-1.testnet.networks.dash.org:1443/&quot;)\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest[&quot;content-type&quot;] = &#x27;application/json&#x27;\nrequest.body = &quot;{\\&quot;method\\&quot;:\\&quot;getBlockHash\\&quot;,\\&quot;id\\&quot;:1,\\&quot;jsonrpc\\&quot;:\\&quot;2.0\\&quot;,\\&quot;params\\&quot;:{\\&quot;height\\&quot;:100}}&quot;\n\nresponse = http.request(request)\nputs response.read_body\n</code></pre></div></div>"
}