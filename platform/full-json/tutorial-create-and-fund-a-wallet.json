{
 "pendingAlgoliaPublish": false, 
 "parentDoc": null, 
 "excerpt": "", 
 "api": {
  "url": "", 
  "params": [], 
  "method": "get", 
  "auth": "required", 
  "results": {
   "codes": [
    {
     "status": 200, 
     "code": "{}", 
     "name": "", 
     "language": "json"
    }, 
    {
     "status": 400, 
     "code": "{}", 
     "name": "", 
     "language": "json"
    }
   ]
  }
 }, 
 "previousSlug": "", 
 "updatedAt": "2020-11-03T20:53:03.373Z", 
 "id": "5f8f3fa8b257f9003428ff7c", 
 "sync_unique": "", 
 "isApi": false, 
 "createdAt": "2019-12-30T03:21:06.334Z", 
 "category": "5f8f3fa8b257f9003428ff41", 
 "title": "Create and Fund a Wallet", 
 "next": {
  "description": "", 
  "pages": [
   {
    "category": "Tutorials", 
    "slug": "tutorial-send-funds", 
    "type": "doc", 
    "name": "Send Funds", 
    "icon": "file-text-o"
   }, 
   {
    "category": "Tutorials", 
    "icon": "file-text-o", 
    "type": "doc", 
    "slug": "tutorial-register-an-identity", 
    "name": "Register an Identity"
   }
  ]
 }, 
 "version": "5f8f3fa8b257f9003428ff97", 
 "slugUpdatedAt": "2020-08-07T04:56:30.848Z", 
 "hidden": false, 
 "type": "basic", 
 "metadata": {
  "image": [], 
  "description": "", 
  "title": ""
 }, 
 "body": "# Overview\n\nIn order to make changes on Dash platform, you need a wallet with a balance. This tutorial explains how to generate a new wallet, retrieve an address from it, and transfer test funds to the address from a faucet.\n\n## Prerequisites\n- [node.js](https://nodejs.org/en/) (v12+)\n- Basic familiarity with JavaScript asychronous functions using [async/await](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await)\n- The Dash JavaScript SDK is initialized (covered in [Connecting to EvoNet](tutorial-connecting-to-evonet))\n\n# Code\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"const Dash = require('dash');\\n\\nconst clientOpts = {\\n  network: 'evonet',\\n  wallet: {\\n    mnemonic: null, // this indicates that we want a new wallet to be generated\\n                    // if you want to get a new address for an existing wallet\\n                    // replace 'null' with an existing wallet mnemonic\\n  },\\n};\\n\\nconst client = new Dash.Client(clientOpts);\\n\\nconst createWallet = async () => {\\n  const account = await client.getWalletAccount();\\n\\n  const mnemonic = client.wallet.exportWallet();\\n  const address = account.getUnusedAddress();\\n  console.log('Mnemonic:', mnemonic);\\n  console.log('Unused address:', address.address);\\n};\\n\\ncreateWallet()\\n  .catch((e) => console.error('Something went wrong:\\\\n', e))\\n  .finally(() => client.disconnect());\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\n\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"Mnemonic: thrive wolf habit timber birth service crystal patient tiny depart tower focus\\nUnused address: yXF7LsyajRvJGX96vPHBmo9Dwy9zEvzkbh\",\n      \"language\": \"text\",\n      \"name\": \"Example output\"\n    }\n  ]\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"body\": \"**Please save your mnemonic for the next step and for re-use in subsequent tutorials throughout the documentation.**\",\n  \"title\": \"\"\n}\n[/block]\n# What's Happening\n\nOnce we connect to Evonet, we output the newly generated mnemonic from `client.wallet.exportWallet()` and an unused address from the wallet from `account.getUnusedAddress()`.\n\n# Next Step\n\nUsing the Evonet faucet at http://faucet.evonet.networks.dash.org/, send test funds to the \"unused address\" from the console output. You will need to wait until the funds are confirmed to use them. There is an Evonet block explorer running at http://insight.evonet.networks.dash.org:3001/insight/ which can be used to check confirmations.", 
 "link_external": false, 
 "body_html": "<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-overview\"></div>Overview<a class=\"fa fa-anchor\" href=\"#section-overview\"></a></h1>\n<p>In order to make changes on Dash platform, you need a wallet with a balance. This tutorial explains how to generate a new wallet, retrieve an address from it, and transfer test funds to the address from a faucet.</p>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-prerequisites\"></div>Prerequisites<a class=\"fa fa-anchor\" href=\"#section-prerequisites\"></a></h2>\n<ul>\n<li ><a href=\"https://nodejs.org/en/\">node.js</a> (v12+)</li><li >Basic familiarity with JavaScript asychronous functions using <a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await\">async/await</a></li><li >The Dash JavaScript SDK is initialized (covered in <a href=\"tutorial-connecting-to-evonet\">Connecting to EvoNet</a>)</li></ul>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-code\"></div>Code<a class=\"fa fa-anchor\" href=\"#section-code\"></a></h1>\n\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">JavaScript</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(811)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-811\">const Dash = require('dash');\n\nconst clientOpts = {\n  network: 'evonet',\n  wallet: {\n    mnemonic: null, // this indicates that we want a new wallet to be generated\n                    // if you want to get a new address for an existing wallet\n                    // replace 'null' with an existing wallet mnemonic\n  },\n};\n\nconst client = new Dash.Client(clientOpts);\n\nconst createWallet = async () =&gt; {\n  const account = await client.getWalletAccount();\n\n  const mnemonic = client.wallet.exportWallet();\n  const address = account.getUnusedAddress();\n  console.log('Mnemonic:', mnemonic);\n  console.log('Unused address:', address.address);\n};\n\ncreateWallet()\n  .catch((e) =&gt; console.error('Something went wrong:\\n', e))\n  .finally(() =&gt; client.disconnect());</textarea>\n\t\t\t<pre id=\"code-811\"><code><span class='cm-s-neo'><span class=\"cm-keyword\">const</span> <span class=\"cm-def\">Dash</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">require</span>(<span class=\"cm-string\">'dash'</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">clientOpts</span> <span class=\"cm-operator\">=</span> {\n  <span class=\"cm-property\">network</span>: <span class=\"cm-string\">'evonet'</span>,\n  <span class=\"cm-property\">wallet</span>: {\n    <span class=\"cm-property\">mnemonic</span>: <span class=\"cm-atom\">null</span>, <span class=\"cm-comment\">&#47;&#47; this indicates that we want a new wallet to be generated</span>\n                    <span class=\"cm-comment\">&#47;&#47; if you want to get a new address for an existing wallet</span>\n                    <span class=\"cm-comment\">&#47;&#47; replace 'null' with an existing wallet mnemonic</span>\n  },\n};\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">client</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">new</span> <span class=\"cm-variable\">Dash</span>.<span class=\"cm-property\">Client</span>(<span class=\"cm-variable\">clientOpts</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">createWallet</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">async</span> () <span class=\"cm-operator\">=&gt;</span> {\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">account</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">getWalletAccount</span>();\n\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">mnemonic</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">wallet</span>.<span class=\"cm-property\">exportWallet</span>();\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">address</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable-2\">account</span>.<span class=\"cm-property\">getUnusedAddress</span>();\n  <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-string\">'Mnemonic:'</span>, <span class=\"cm-variable-2\">mnemonic</span>);\n  <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-string\">'Unused address:'</span>, <span class=\"cm-variable-2\">address</span>.<span class=\"cm-property\">address</span>);\n};\n\n<span class=\"cm-variable\">createWallet</span>()\n  .<span class=\"cm-property\">catch</span>((<span class=\"cm-def\">e</span>) <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">error</span>(<span class=\"cm-string\">'Something went wrong:\\n'</span>, <span class=\"cm-variable-2\">e</span>))\n  .<span class=\"cm-property\">finally</span>(() <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">disconnect</span>());</span></code></pre></span>\n\t</div>\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">Example output</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(169)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-169\">Mnemonic: thrive wolf habit timber birth service crystal patient tiny depart tower focus\nUnused address: yXF7LsyajRvJGX96vPHBmo9Dwy9zEvzkbh</textarea>\n\t\t\t<pre id=\"code-169\"><code>Mnemonic: thrive wolf habit timber birth service crystal patient tiny depart tower focus\nUnused address: yXF7LsyajRvJGX96vPHBmo9Dwy9zEvzkbh</code></pre></span>\n\t</div>\n</div>\n<div class=\"magic-block-callout type-warning no-title\"><span class=\"noTitleIcon\"><i title=\"Warning\" class=\"fa fa-exclamation-circle\"></i></span>\n\t<div class=\"callout-body\"><p><strong>Please save your mnemonic for the next step and for re-use in subsequent tutorials throughout the documentation.</strong></p>\n\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-whats-happening\"></div>What&#39;s Happening<a class=\"fa fa-anchor\" href=\"#section-whats-happening\"></a></h1>\n<p>Once we connect to Evonet, we output the newly generated mnemonic from <code>client.wallet.exportWallet()</code> and an unused address from the wallet from <code>account.getUnusedAddress()</code>.</p>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-next-step\"></div>Next Step<a class=\"fa fa-anchor\" href=\"#section-next-step\"></a></h1>\n<p>Using the Evonet faucet at <a href=\"http://faucet.evonet.networks.dash.org/\">http://faucet.evonet.networks.dash.org/</a>, send test funds to the &quot;unused address&quot; from the console output. You will need to wait until the funds are confirmed to use them. There is an Evonet block explorer running at <a href=\"http://insight.evonet.networks.dash.org:3001/insight/\">http://insight.evonet.networks.dash.org:3001/insight/</a> which can be used to check confirmations.</p>\n\n</div>", 
 "user": "5b8400d7185d5e00036dcc3b", 
 "isReference": false, 
 "slug": "tutorial-create-and-fund-a-wallet", 
 "link_url": "", 
 "project": "5bda01cad172e200499a20a9", 
 "__v": 7, 
 "_id": "5f8f3fa8b257f9003428ff7c", 
 "order": 3, 
 "updates": [
  "5e0a98f872e3a9002428381f", 
  "5e17df431ec14f006f610a3a", 
  "5e1907e4031eca001b75a561", 
  "5e7e005268a13700678019f8", 
  "5f2cff4a5871fb03e29dad8f"
 ]
}