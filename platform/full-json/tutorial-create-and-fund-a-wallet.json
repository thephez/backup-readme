{
 "metadata": {
  "image": [],
  "title": "",
  "description": ""
 },
 "api": {
  "method": "get",
  "url": "",
  "auth": "required",
  "results": {
   "codes": [
    {
     "status": 200,
     "language": "json",
     "code": "{}",
     "name": ""
    },
    {
     "status": 400,
     "language": "json",
     "code": "{}",
     "name": ""
    }
   ]
  },
  "params": []
 },
 "next": {
  "description": "",
  "pages": [
   {
    "category": "Tutorials",
    "slug": "tutorial-register-an-identity",
    "name": "Register an Identity",
    "icon": "file-text-o",
    "type": "doc"
   },
   {
    "type": "doc",
    "icon": "file-text-o",
    "name": "Send Funds",
    "slug": "tutorial-send-funds",
    "category": "Tutorials"
   }
  ]
 },
 "title": "Create and Fund a Wallet",
 "updates": [
  "5e0a98f872e3a9002428381f",
  "5e17df431ec14f006f610a3a",
  "5e1907e4031eca001b75a561",
  "5e7e005268a13700678019f8",
  "5f2cff4a5871fb03e29dad8f"
 ],
 "type": "basic",
 "slug": "tutorial-create-and-fund-a-wallet",
 "excerpt": "",
 "body": "# Overview\n\nIn order to make changes on Dash Platform, you need a wallet with a balance. This tutorial explains how to generate a new wallet, retrieve an address from it, and transfer test funds to the address from a faucet.\n\n## Prerequisites\n\n- [General prerequisites](tutorials-introduction#prerequisites) (Node.js / Dash SDK installed)\n\n# Code\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"const Dash = require('dash');\\n\\nconst clientOpts = {\\n  network: 'testnet',\\n  wallet: {\\n    mnemonic: null, // this indicates that we want a new wallet to be generated\\n                    // if you want to get a new address for an existing wallet\\n                    // replace 'null' with an existing wallet mnemonic\\n    offlineMode: true,  // this indicates we don't want to sync the chain\\n                        // it can only be used when the mnemonic is set to 'null'\\n  },\\n};\\n\\nconst client = new Dash.Client(clientOpts);\\n\\nconst createWallet = async () => {\\n  const account = await client.getWalletAccount();\\n\\n  const mnemonic = client.wallet.exportWallet();\\n  const address = account.getUnusedAddress();\\n  console.log('Mnemonic:', mnemonic);\\n  console.log('Unused address:', address.address);\\n};\\n\\ncreateWallet()\\n  .catch((e) => console.error('Something went wrong:\\\\n', e))\\n  .finally(() => client.disconnect());\\n\\n// Handle wallet async errors\\nclient.on('error', (error, context) => {\\n  console.error(`Client error: ${error.name}`);\\n  console.error(context);\\n});\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\n\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"Mnemonic: thrive wolf habit timber birth service crystal patient tiny depart tower focus\\nUnused address: yXF7LsyajRvJGX96vPHBmo9Dwy9zEvzkbh\",\n      \"language\": \"text\",\n      \"name\": \"Example output\"\n    }\n  ]\n}\n[/block]\n\n> \ud83d\udea7 \n>\n> **Please save your mnemonic for the next step and for re-use in subsequent tutorials throughout the documentation.**\n\n# What's Happening\n\nOnce we connect, we output the newly generated mnemonic from `client.wallet.exportWallet()` and an unused address from the wallet from `account.getUnusedAddress()`.\n\n# Next Step\n\nUsing the faucet at https://testnet-faucet.dash.org/, send test funds to the \"unused address\" from the console output. You will need to wait until the funds are confirmed to use them. There is a block explorer running at https://testnet-insight.dashevo.org/insight/ which can be used to check confirmations.",
 "order": 4,
 "isReference": false,
 "deprecated": false,
 "hidden": false,
 "sync_unique": "",
 "link_url": "",
 "link_external": false,
 "pendingAlgoliaPublish": false,
 "previousSlug": "",
 "slugUpdatedAt": "2020-08-07T04:56:30.848Z",
 "_id": "61d70ca155d45f0293817076",
 "version": "61d70ca155d45f02938170a3",
 "project": "5bda01cad172e200499a20a9",
 "user": "5b8400d7185d5e00036dcc3b",
 "category": "61d70ca155d45f029381703b",
 "updatedAt": "2022-05-12T16:31:23.065Z",
 "createdAt": "2019-12-30T03:21:06.334Z",
 "__v": 8,
 "parentDoc": null,
 "isApi": false,
 "id": "61d70ca155d45f0293817076",
 "body_html": "<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-overview\"></div>Overview<a class=\"fa fa-anchor\" href=\"#section-overview\"></a></h1>\n<p>In order to make changes on Dash Platform, you need a wallet with a balance. This tutorial explains how to generate a new wallet, retrieve an address from it, and transfer test funds to the address from a faucet.</p>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-prerequisites\"></div>Prerequisites<a class=\"fa fa-anchor\" href=\"#section-prerequisites\"></a></h2>\n<ul>\n<li ><a href=\"tutorials-introduction#prerequisites\">General prerequisites</a> (Node.js / Dash SDK installed)</li></ul>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-code\"></div>Code<a class=\"fa fa-anchor\" href=\"#section-code\"></a></h1>\n\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">JavaScript</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(950)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-950\">const Dash = require('dash');\n\nconst clientOpts = {\n  network: 'testnet',\n  wallet: {\n    mnemonic: null, // this indicates that we want a new wallet to be generated\n                    // if you want to get a new address for an existing wallet\n                    // replace 'null' with an existing wallet mnemonic\n    offlineMode: true,  // this indicates we don't want to sync the chain\n                        // it can only be used when the mnemonic is set to 'null'\n  },\n};\n\nconst client = new Dash.Client(clientOpts);\n\nconst createWallet = async () =&gt; {\n  const account = await client.getWalletAccount();\n\n  const mnemonic = client.wallet.exportWallet();\n  const address = account.getUnusedAddress();\n  console.log('Mnemonic:', mnemonic);\n  console.log('Unused address:', address.address);\n};\n\ncreateWallet()\n  .catch((e) =&gt; console.error('Something went wrong:\\n', e))\n  .finally(() =&gt; client.disconnect());\n\n// Handle wallet async errors\nclient.on('error', (error, context) =&gt; {\n  console.error(`Client error: ${error.name}`);\n  console.error(context);\n});</textarea>\n\t\t\t<pre id=\"code-950\"><code><span class='cm-s-neo'><span class=\"cm-keyword\">const</span> <span class=\"cm-def\">Dash</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">require</span>(<span class=\"cm-string\">'dash'</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">clientOpts</span> <span class=\"cm-operator\">=</span> {\n  <span class=\"cm-property\">network</span>: <span class=\"cm-string\">'testnet'</span>,\n  <span class=\"cm-property\">wallet</span>: {\n    <span class=\"cm-property\">mnemonic</span>: <span class=\"cm-atom\">null</span>, <span class=\"cm-comment\">&#47;&#47; this indicates that we want a new wallet to be generated</span>\n                    <span class=\"cm-comment\">&#47;&#47; if you want to get a new address for an existing wallet</span>\n                    <span class=\"cm-comment\">&#47;&#47; replace 'null' with an existing wallet mnemonic</span>\n    <span class=\"cm-property\">offlineMode</span>: <span class=\"cm-atom\">true</span>,  <span class=\"cm-comment\">&#47;&#47; this indicates we don't want to sync the chain</span>\n                        <span class=\"cm-comment\">&#47;&#47; it can only be used when the mnemonic is set to 'null'</span>\n  },\n};\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">client</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">new</span> <span class=\"cm-variable\">Dash</span>.<span class=\"cm-property\">Client</span>(<span class=\"cm-variable\">clientOpts</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">createWallet</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">async</span> () <span class=\"cm-operator\">=&gt;</span> {\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">account</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">getWalletAccount</span>();\n\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">mnemonic</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">wallet</span>.<span class=\"cm-property\">exportWallet</span>();\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">address</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable-2\">account</span>.<span class=\"cm-property\">getUnusedAddress</span>();\n  <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-string\">'Mnemonic:'</span>, <span class=\"cm-variable-2\">mnemonic</span>);\n  <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-string\">'Unused address:'</span>, <span class=\"cm-variable-2\">address</span>.<span class=\"cm-property\">address</span>);\n};\n\n<span class=\"cm-variable\">createWallet</span>()\n  .<span class=\"cm-property\">catch</span>((<span class=\"cm-def\">e</span>) <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">error</span>(<span class=\"cm-string\">'Something went wrong:\\n'</span>, <span class=\"cm-variable-2\">e</span>))\n  .<span class=\"cm-property\">finally</span>(() <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">disconnect</span>());\n\n<span class=\"cm-comment\">&#47;&#47; Handle wallet async errors</span>\n<span class=\"cm-variable\">client</span>.<span class=\"cm-property\">on</span>(<span class=\"cm-string\">'error'</span>, (<span class=\"cm-def\">error</span>, <span class=\"cm-def\">context</span>) <span class=\"cm-operator\">=&gt;</span> {\n  <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">error</span>(<span class=\"cm-string-2\">`Client error: ${</span><span class=\"cm-variable-2\">error</span>.<span class=\"cm-property\">name</span><span class=\"cm-string-2\">}`</span>);\n  <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">error</span>(<span class=\"cm-variable-2\">context</span>);\n});</span></code></pre></span>\n\t</div>\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">Example output</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(989)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-989\">Mnemonic: thrive wolf habit timber birth service crystal patient tiny depart tower focus\nUnused address: yXF7LsyajRvJGX96vPHBmo9Dwy9zEvzkbh</textarea>\n\t\t\t<pre id=\"code-989\"><code>Mnemonic: thrive wolf habit timber birth service crystal patient tiny depart tower focus\nUnused address: yXF7LsyajRvJGX96vPHBmo9Dwy9zEvzkbh</code></pre></span>\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><blockquote>\n<p>\ud83d\udea7 </p>\n<p><strong>Please save your mnemonic for the next step and for re-use in subsequent tutorials throughout the documentation.</strong></p>\n</blockquote>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-whats-happening\"></div>What&#39;s Happening<a class=\"fa fa-anchor\" href=\"#section-whats-happening\"></a></h1>\n<p>Once we connect, we output the newly generated mnemonic from <code>client.wallet.exportWallet()</code> and an unused address from the wallet from <code>account.getUnusedAddress()</code>.</p>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-next-step\"></div>Next Step<a class=\"fa fa-anchor\" href=\"#section-next-step\"></a></h1>\n<p>Using the faucet at <a href=\"https://testnet-faucet.dash.org/\">https://testnet-faucet.dash.org/</a>, send test funds to the &quot;unused address&quot; from the console output. You will need to wait until the funds are confirmed to use them. There is a block explorer running at <a href=\"https://testnet-insight.dashevo.org/insight/\">https://testnet-insight.dashevo.org/insight/</a> which can be used to check confirmations.</p>\n\n</div>"
}