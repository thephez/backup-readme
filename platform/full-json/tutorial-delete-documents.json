{
 "metadata": {
  "image": [],
  "title": "",
  "description": "",
  "keywords": "",
  "robots": "index"
 },
 "api": {
  "method": "get",
  "url": "",
  "auth": "required",
  "results": {
   "codes": [
    {
     "status": 200,
     "language": "json",
     "code": "{}",
     "name": ""
    },
    {
     "status": 400,
     "language": "json",
     "code": "{}",
     "name": ""
    }
   ]
  },
  "params": [],
  "examples": {
   "codes": []
  }
 },
 "next": {
  "description": "",
  "pages": []
 },
 "algolia": {
  "recordCount": 4,
  "publishPending": false,
  "translationFailure": false,
  "updatedAt": "2023-09-12T13:20:52.585Z"
 },
 "title": "Delete Documents",
 "icon": "",
 "updates": [
  "6438208b9948e400fbd33a23"
 ],
 "type": "basic",
 "slug": "tutorial-delete-documents",
 "excerpt": "Delete data stored on Dash Platform",
 "body": "# Overview\n\nIn this tutorial we will update delete data from Dash Platform. Data is stored in the form of [documents](explanation-platform-protocol-document) which are encapsulated in a [state transition](explanation-platform-protocol-state-transition) before being submitted to DAPI. \n\n## Prerequisites\n\n- [General prerequisites](tutorials-introduction#prerequisites) (Node.js / Dash SDK installed)\n- A wallet mnemonic with some funds in it: [Tutorial: Create and Fund a Wallet](tutorial-create-and-fund-a-wallet)\n- Access to a previously created document (e.g., one created using the [Submit Documents tutorial](tutorial-submit-documents))\n\n# Code\n\n```javascript\nconst Dash = require('dash');\n\nconst clientOpts = {\n  network: 'testnet',\n  wallet: {\n    mnemonic: 'a Dash wallet mnemonic with funds goes here',\n    unsafeOptions: {\n      skipSynchronizationBeforeHeight: 650000, // only sync from early-2022\n    },\n  },\n  apps: {\n    tutorialContract: {\n      contractId: '8cvMFwa2YbEsNNoc1PXfTacy2PVq2SzVnkZLeQSzjfi6',\n    },\n  },\n};\nconst client = new Dash.Client(clientOpts);\n\nconst deleteNoteDocument = async () => {\n  const { platform } = client;\n  const identity = await platform.identities.get('an identity ID goes here');\n  const documentId = 'an existing document ID goes here';\n\n  // Retrieve the existing document\n  const [document] = await client.platform.documents.get(\n    'tutorialContract.note',\n    { where: [['$id', '==', documentId]] },\n  );\n\n  // Sign and submit the document delete transition\n  await platform.documents.broadcast({ delete: [document] }, identity);\n  return document;  \n};\n\ndeleteNoteDocument()\n  .then((d) => console.log('Document deleted:\\n', d.toJSON()))\n  .catch((e) => console.error('Something went wrong:\\n', e))\n  .finally(() => client.disconnect());\n```\n\n> \ud83d\udc4d Initializing the Client with a contract identity\n> \n> The example above shows how access to contract documents via `<contract name>.<contract document>` syntax (e.g. `tutorialContract.note`) can be enabled by passing a contract identity to the constructor. Please refer to the [Dash SDK documentation](https://github.com/dashevo/platform/blob/master/packages/js-dash-sdk/docs/getting-started/multiple-apps.md) for details.\n\n# What's happening\n\nAfter we initialize the Client, we retrieve the document to be deleted via `platform.documents.get` using its `id`. \n\nOnce the document has been retrieved, we must submit it to [DAPI](explanation-dapi). Documents are submitted in batches that may contain multiple documents to be created, replaced, or deleted. In this example, a single document is being deleted.\n\nThe `platform.documents.broadcast` method takes the document batch (e.g. `{delete: [documents[0]]}`) and an identity parameter. Internally, it creates a [State Transition](explanation-platform-protocol-state-transition) containing the previously created document, signs the state transition, and submits the signed state transition to DAPI.\n\n> \ud83d\udcd8 Wallet Operations\n> \n> The JavaScript SDK does not cache wallet information. It re-syncs the entire Core chain for some wallet operations (e.g. `client.getWalletAccount()`) which can result in wait times of  5+ minutes. \n> \n> A future release will add caching so that access is much faster after the initial sync. For now, the `skipSynchronizationBeforeHeight` option can be used to sync the wallet starting at a certain block height.",
 "order": 6,
 "isReference": false,
 "deprecated": false,
 "hidden": false,
 "sync_unique": "",
 "link_url": "",
 "link_external": false,
 "reusableContent": [],
 "previousSlug": "",
 "slugUpdatedAt": "2020-10-20T04:35:09.872Z",
 "revision": 7,
 "_id": "64f8a9df750465004742adc3",
 "pendingAlgoliaPublish": false,
 "createdAt": "2020-10-20T17:02:54.975Z",
 "updatedAt": "2023-09-12T13:20:52.259Z",
 "user": "5b8400d7185d5e00036dcc3b",
 "category": "64f8a9df750465004742ad6e",
 "project": "5bda01cad172e200499a20a9",
 "version": "64f8a9df750465004742ae1d",
 "__v": 1,
 "parentDoc": "64f8a9df750465004742adc8",
 "isApi": false,
 "id": "64f8a9df750465004742adc3",
 "body_html": "# Overview\n\nIn this tutorial we will update delete data from Dash Platform. Data is stored in the form of [documents](explanation-platform-protocol-document) which are encapsulated in a [state transition](explanation-platform-protocol-state-transition) before being submitted to DAPI. \n\n## Prerequisites\n\n- [General prerequisites](tutorials-introduction#prerequisites) (Node.js / Dash SDK installed)\n- A wallet mnemonic with some funds in it: [Tutorial: Create and Fund a Wallet](tutorial-create-and-fund-a-wallet)\n- Access to a previously created document (e.g., one created using the [Submit Documents tutorial](tutorial-submit-documents))\n\n# Code\n\n```javascript\nconst Dash = require('dash');\n\nconst clientOpts = {\n  network: 'testnet',\n  wallet: {\n    mnemonic: 'a Dash wallet mnemonic with funds goes here',\n    unsafeOptions: {\n      skipSynchronizationBeforeHeight: 650000, // only sync from early-2022\n    },\n  },\n  apps: {\n    tutorialContract: {\n      contractId: '8cvMFwa2YbEsNNoc1PXfTacy2PVq2SzVnkZLeQSzjfi6',\n    },\n  },\n};\nconst client = new Dash.Client(clientOpts);\n\nconst deleteNoteDocument = async () => {\n  const { platform } = client;\n  const identity = await platform.identities.get('an identity ID goes here');\n  const documentId = 'an existing document ID goes here';\n\n  // Retrieve the existing document\n  const [document] = await client.platform.documents.get(\n    'tutorialContract.note',\n    { where: [['$id', '==', documentId]] },\n  );\n\n  // Sign and submit the document delete transition\n  await platform.documents.broadcast({ delete: [document] }, identity);\n  return document;  \n};\n\ndeleteNoteDocument()\n  .then((d) => console.log('Document deleted:\\n', d.toJSON()))\n  .catch((e) => console.error('Something went wrong:\\n', e))\n  .finally(() => client.disconnect());\n```\n\n> \ud83d\udc4d Initializing the Client with a contract identity\n> \n> The example above shows how access to contract documents via `<contract name>.<contract document>` syntax (e.g. `tutorialContract.note`) can be enabled by passing a contract identity to the constructor. Please refer to the [Dash SDK documentation](https://github.com/dashevo/platform/blob/master/packages/js-dash-sdk/docs/getting-started/multiple-apps.md) for details.\n\n# What's happening\n\nAfter we initialize the Client, we retrieve the document to be deleted via `platform.documents.get` using its `id`. \n\nOnce the document has been retrieved, we must submit it to [DAPI](explanation-dapi). Documents are submitted in batches that may contain multiple documents to be created, replaced, or deleted. In this example, a single document is being deleted.\n\nThe `platform.documents.broadcast` method takes the document batch (e.g. `{delete: [documents[0]]}`) and an identity parameter. Internally, it creates a [State Transition](explanation-platform-protocol-state-transition) containing the previously created document, signs the state transition, and submits the signed state transition to DAPI.\n\n> \ud83d\udcd8 Wallet Operations\n> \n> The JavaScript SDK does not cache wallet information. It re-syncs the entire Core chain for some wallet operations (e.g. `client.getWalletAccount()`) which can result in wait times of  5+ minutes. \n> \n> A future release will add caching so that access is much faster after the initial sync. For now, the `skipSynchronizationBeforeHeight` option can be used to sync the wallet starting at a certain block height."
}