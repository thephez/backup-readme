{
 "metadata": {
  "image": [],
  "title": "",
  "description": "",
  "keywords": ""
 },
 "api": {
  "method": "get",
  "url": "",
  "auth": "required",
  "results": {
   "codes": [
    {
     "name": "",
     "code": "{}",
     "language": "json",
     "status": 200
    },
    {
     "name": "",
     "code": "{}",
     "language": "json",
     "status": 400
    }
   ]
  },
  "params": []
 },
 "next": {
  "description": "",
  "pages": []
 },
 "algolia": {
  "recordCount": 1,
  "publishPending": false,
  "updatedAt": "2023-09-06T16:36:48.667Z"
 },
 "title": "Delete",
 "icon": "",
 "updates": [],
 "type": "basic",
 "slug": "tutorial-grovedb-delete",
 "excerpt": "",
 "body": "# Tutorial\n\nGroveDB uses the `delete()` function to [delete](https://github.com/dashpay/grovedb/blob/009787b79538dae833ed6711253852046dfcc59d/grovedb/src/operations/delete/mod.rs) key-values from storage. It takes four arguments as shown below.\n\n``` rust\n// Delete Element from GroveDB\npub fn delete<'p, P>(\n    &self,\n    // Tree path to where the key is located ([] for root)\n    path: P,\n    // Key to be deleted\n    key: &'p [u8],\n    // Delete options\n    options: Option<DeleteOptions>,\n    // Transaction that the delete operation should be included in\n    transaction: TransactionArg,\n) -> CostResult<(), Error>\n```\n\nThis tutorial assumes the reader has already inserted the two key-values from Insert Tutorial, but should be easy to follow anyways. It uses `get()` to check if the values are there first, then deletes them, and checks if they\u2019re there again.\n\nThe following code can be run with ```cargo run --bin delete```.\n\n``` rust\nuse grovedb::GroveDb;\n\nfn main() {\n\n   // Specify a path and open GroveDB at the path as db\n   let path = String::from(\"../storage\");\n   let db = GroveDb::open(path).unwrap();\n\n   // Check the key-values are there\n   let key1 = b\"hello\";\n   let key2 = b\"grovedb\";\n   let result1 = db.get([], key1, None).unwrap();\n   let result2 = db.get([], key2, None).unwrap();\n   println!(\"Before deleting, we have key1: {:?}\", result1);\n   println!(\"Before deleting, we have key2: {:?}\", result2);\n\n   // Delete the values\n   db.delete([], key1, None, None)\n      .unwrap()\n      .expect(\"successfully deleted key1\");\n   db.delete([], key2, None, None)\n      .unwrap()\n      .expect(\"successfully deleted key2\");\n\n   // Check the key-values again\n   let result3 = db.get([], key1, None).unwrap();\n   let result4 = db.get([], key2, None).unwrap();\n   println!(\"After deleting, we have key1: {:?}\", result3);\n   println!(\"After deleting, we have key2: {:?}\", result4);\n}\n```\n\nThe terminal should output:\n\n``` text\nBefore deleting, we have key1 Ok(item: [hex: 776f726c64, str: world])\nBefore deleting, we have key2 Ok(item: [hex: 726f636b73, str: rocks])\nAfter deleting, we have key1 Err(PathKeyNotFound(\"key not found in Merk for get: 68656c6c6f\"))\nAfter deleting, we have key2 Err(PathKeyNotFound(\"key not found in Merk for get: 67726f76656462\"))\n```",
 "order": 2,
 "isReference": false,
 "deprecated": false,
 "hidden": true,
 "sync_unique": "",
 "link_url": "",
 "link_external": false,
 "reusableContent": [],
 "previousSlug": "",
 "slugUpdatedAt": "2023-02-08T19:25:15.853Z",
 "revision": 8,
 "_id": "64f8a9df750465004742addd",
 "user": "5b8400d7185d5e00036dcc3b",
 "project": "5bda01cad172e200499a20a9",
 "parentDoc": "64f8a9df750465004742addb",
 "category": "64f8a9df750465004742ad6e",
 "createdAt": "2023-02-08T20:17:15.117Z",
 "updatedAt": "2023-03-07T18:06:47.818Z",
 "version": "64f8a9df750465004742ae1d",
 "__v": 0,
 "isApi": false,
 "id": "64f8a9df750465004742addd",
 "body_html": "<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-tutorial\"></div>Tutorial<a class=\"fa fa-anchor\" href=\"#section-tutorial\"></a></h1>\n<p>GroveDB uses the <code>delete()</code> function to <a href=\"https://github.com/dashpay/grovedb/blob/009787b79538dae833ed6711253852046dfcc59d/grovedb/src/operations/delete/mod.rs\">delete</a> key-values from storage. It takes four arguments as shown below.</p>\n<pre><code class=\"lang-rust\"><span class='cm-s-neo'><span class=\"cm-comment\">&#47;&#47; Delete Element from GroveDB</span>\n<span class=\"cm-keyword\">pub</span> <span class=\"cm-keyword\">fn</span> <span class=\"cm-def\">delete</span><span class=\"cm-operator\">&lt;</span>'<span class=\"cm-variable\">p</span>, <span class=\"cm-variable\">P</span><span class=\"cm-operator\">&gt;</span>(\n    &amp;<span class=\"cm-keyword\">self</span>,\n    <span class=\"cm-comment\">&#47;&#47; Tree path to where the key is located ([] for root)</span>\n    <span class=\"cm-variable\">path</span>: <span class=\"cm-variable\">P</span>,\n    <span class=\"cm-comment\">&#47;&#47; Key to be deleted</span>\n    <span class=\"cm-variable\">key</span>: &amp;'<span class=\"cm-variable\">p</span> [<span class=\"cm-atom\">u8</span>],\n    <span class=\"cm-comment\">&#47;&#47; Delete options</span>\n    <span class=\"cm-variable\">options</span>: <span class=\"cm-atom\">Option</span><span class=\"cm-operator\">&lt;</span><span class=\"cm-variable\">DeleteOptions</span><span class=\"cm-operator\">&gt;</span>,\n    <span class=\"cm-comment\">&#47;&#47; Transaction that the delete operation should be included in</span>\n    <span class=\"cm-variable\">transaction</span>: <span class=\"cm-variable\">TransactionArg</span>,\n) <span class=\"cm-operator\">-&gt;</span> <span class=\"cm-variable\">CostResult</span><span class=\"cm-operator\">&lt;</span>(), <span class=\"cm-variable\">Error</span><span class=\"cm-operator\">&gt;</span></span>\n</code></pre>\n<p>This tutorial assumes the reader has already inserted the two key-values from Insert Tutorial, but should be easy to follow anyways. It uses <code>get()</code> to check if the values are there first, then deletes them, and checks if they\u2019re there again.</p>\n<p>The following code can be run with <code>cargo run --bin delete</code>.</p>\n<pre><code class=\"lang-rust\"><span class='cm-s-neo'><span class=\"cm-keyword\">use</span> <span class=\"cm-variable\">grovedb</span>::<span class=\"cm-variable\">GroveDb</span>;\n\n<span class=\"cm-keyword\">fn</span> <span class=\"cm-def\">main</span>() {\n\n   <span class=\"cm-comment\">&#47;&#47; Specify a path and open GroveDB at the path as db</span>\n   <span class=\"cm-keyword\">let</span> <span class=\"cm-def\">path</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">String</span>::<span class=\"cm-variable\">from</span>(<span class=\"cm-string\">\"..&#47;storage\"</span>);\n   <span class=\"cm-keyword\">let</span> <span class=\"cm-def\">db</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">GroveDb</span>::<span class=\"cm-variable\">open</span>(<span class=\"cm-variable\">path</span>).<span class=\"cm-variable\">unwrap</span>();\n\n   <span class=\"cm-comment\">&#47;&#47; Check the key-values are there</span>\n   <span class=\"cm-keyword\">let</span> <span class=\"cm-def\">key1</span> <span class=\"cm-operator\">=</span> <span class=\"cm-string\">b\"hello\"</span>;\n   <span class=\"cm-keyword\">let</span> <span class=\"cm-def\">key2</span> <span class=\"cm-operator\">=</span> <span class=\"cm-string\">b\"grovedb\"</span>;\n   <span class=\"cm-keyword\">let</span> <span class=\"cm-def\">result1</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">db</span>.<span class=\"cm-variable\">get</span>([], <span class=\"cm-variable\">key1</span>, <span class=\"cm-builtin\">None</span>).<span class=\"cm-variable\">unwrap</span>();\n   <span class=\"cm-keyword\">let</span> <span class=\"cm-def\">result2</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">db</span>.<span class=\"cm-variable\">get</span>([], <span class=\"cm-variable\">key2</span>, <span class=\"cm-builtin\">None</span>).<span class=\"cm-variable\">unwrap</span>();\n   <span class=\"cm-variable-3\">println!</span>(<span class=\"cm-string\">\"Before deleting, we have key1: {:?}\"</span>, <span class=\"cm-variable\">result1</span>);\n   <span class=\"cm-variable-3\">println!</span>(<span class=\"cm-string\">\"Before deleting, we have key2: {:?}\"</span>, <span class=\"cm-variable\">result2</span>);\n\n   <span class=\"cm-comment\">&#47;&#47; Delete the values</span>\n   <span class=\"cm-variable\">db</span>.<span class=\"cm-variable\">delete</span>([], <span class=\"cm-variable\">key1</span>, <span class=\"cm-builtin\">None</span>, <span class=\"cm-builtin\">None</span>)\n      .<span class=\"cm-variable\">unwrap</span>()\n      .<span class=\"cm-variable\">expect</span>(<span class=\"cm-string\">\"successfully deleted key1\"</span>);\n   <span class=\"cm-variable\">db</span>.<span class=\"cm-variable\">delete</span>([], <span class=\"cm-variable\">key2</span>, <span class=\"cm-builtin\">None</span>, <span class=\"cm-builtin\">None</span>)\n      .<span class=\"cm-variable\">unwrap</span>()\n      .<span class=\"cm-variable\">expect</span>(<span class=\"cm-string\">\"successfully deleted key2\"</span>);\n\n   <span class=\"cm-comment\">&#47;&#47; Check the key-values again</span>\n   <span class=\"cm-keyword\">let</span> <span class=\"cm-def\">result3</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">db</span>.<span class=\"cm-variable\">get</span>([], <span class=\"cm-variable\">key1</span>, <span class=\"cm-builtin\">None</span>).<span class=\"cm-variable\">unwrap</span>();\n   <span class=\"cm-keyword\">let</span> <span class=\"cm-def\">result4</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">db</span>.<span class=\"cm-variable\">get</span>([], <span class=\"cm-variable\">key2</span>, <span class=\"cm-builtin\">None</span>).<span class=\"cm-variable\">unwrap</span>();\n   <span class=\"cm-variable-3\">println!</span>(<span class=\"cm-string\">\"After deleting, we have key1: {:?}\"</span>, <span class=\"cm-variable\">result3</span>);\n   <span class=\"cm-variable-3\">println!</span>(<span class=\"cm-string\">\"After deleting, we have key2: {:?}\"</span>, <span class=\"cm-variable\">result4</span>);\n}</span>\n</code></pre>\n<p>The terminal should output:</p>\n<pre><code class=\"lang-text\">Before deleting, we have key1 Ok(item: [hex: 776f726c64, str: world])\nBefore deleting, we have key2 Ok(item: [hex: 726f636b73, str: rocks])\nAfter deleting, we have key1 Err(PathKeyNotFound(&quot;key not found in Merk for get: 68656c6c6f&quot;))\nAfter deleting, we have key2 Err(PathKeyNotFound(&quot;key not found in Merk for get: 67726f76656462&quot;))\n</code></pre>\n\n</div>"
}