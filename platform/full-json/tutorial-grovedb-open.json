{
 "metadata": {
  "image": [],
  "title": "",
  "description": "",
  "keywords": "",
  "robots": "index"
 },
 "api": {
  "method": "get",
  "url": "",
  "auth": "required",
  "results": {
   "codes": [
    {
     "name": "",
     "code": "{}",
     "language": "json",
     "status": 200
    },
    {
     "name": "",
     "code": "{}",
     "language": "json",
     "status": 400
    }
   ]
  },
  "params": []
 },
 "next": {
  "description": "",
  "pages": []
 },
 "algolia": {
  "recordCount": 1,
  "publishPending": false,
  "translationFailure": false,
  "updatedAt": "2023-09-06T16:36:49.030Z"
 },
 "title": "Open",
 "icon": "",
 "updates": [],
 "type": "basic",
 "slug": "tutorial-grovedb-open",
 "excerpt": "",
 "body": "# Tutorial\n\nGroveDB uses the `open()` function to [open](https://github.com/dashpay/grovedb/blob/master/grovedb/src/lib.rs) an existing instance of GroveDB at the given path in your filesystem, unless there is no existing instance, in which case a new one will be created with an empty root tree. The only argument for `open()` is the filesystem path.\n\nThe following code can be run with ```cargo run --bin open```.\n\n``` rust\nuse grovedb::GroveDb;\n\nfn main() {\n\n   // Specify the path where you want to set up the GroveDB instance\n   let path = String::from(\"../storage\");\n  \n   // Open a new GroveDB at the path\n   GroveDb::open(path).unwrap();\n\n   // Print to terminal\n   println!(\"Opened {:?}\", path);\n\n}\n```\n\nA folder called \u201cstorage\u201d should have appeared in your grovedb-tutorials directory, populated with a bunch of files. GroveDB is set up and ready for us to insert some data.",
 "order": 0,
 "isReference": false,
 "deprecated": false,
 "hidden": true,
 "sync_unique": "",
 "link_url": "",
 "link_external": false,
 "reusableContent": [],
 "previousSlug": "open",
 "slugUpdatedAt": "2023-03-07T18:11:29.402Z",
 "revision": 3,
 "_id": "64f8a9df750465004742ade0",
 "user": "5b8400d7185d5e00036dcc3b",
 "project": "5bda01cad172e200499a20a9",
 "parentDoc": "64f8a9df750465004742addb",
 "category": "64f8a9df750465004742ad6e",
 "createdAt": "2023-03-07T18:05:37.279Z",
 "updatedAt": "2023-03-07T18:05:37.279Z",
 "version": "64f8a9df750465004742ae1d",
 "__v": 0,
 "isApi": false,
 "id": "64f8a9df750465004742ade0",
 "body_html": "# Tutorial\n\nGroveDB uses the `open()` function to [open](https://github.com/dashpay/grovedb/blob/master/grovedb/src/lib.rs) an existing instance of GroveDB at the given path in your filesystem, unless there is no existing instance, in which case a new one will be created with an empty root tree. The only argument for `open()` is the filesystem path.\n\nThe following code can be run with ```cargo run --bin open```.\n\n``` rust\nuse grovedb::GroveDb;\n\nfn main() {\n\n   // Specify the path where you want to set up the GroveDB instance\n   let path = String::from(\"../storage\");\n  \n   // Open a new GroveDB at the path\n   GroveDb::open(path).unwrap();\n\n   // Print to terminal\n   println!(\"Opened {:?}\", path);\n\n}\n```\n\nA folder called \u201cstorage\u201d should have appeared in your grovedb-tutorials directory, populated with a bunch of files. GroveDB is set up and ready for us to insert some data."
}