{
 "metadata": {
  "image": [],
  "title": "",
  "description": ""
 },
 "api": {
  "method": "get",
  "url": "",
  "auth": "required",
  "results": {
   "codes": [
    {
     "status": 200,
     "language": "json",
     "code": "{}",
     "name": ""
    },
    {
     "status": 400,
     "language": "json",
     "code": "{}",
     "name": ""
    }
   ]
  },
  "params": []
 },
 "next": {
  "description": "",
  "pages": [
   {
    "type": "doc",
    "icon": "file-text-o",
    "name": "Submit Documents",
    "slug": "tutorial-submit-documents",
    "category": "Tutorials"
   },
   {
    "type": "doc",
    "icon": "file-text-o",
    "name": "Retrieve Documents",
    "slug": "tutorial-retrieve-documents",
    "category": "Tutorials"
   }
  ]
 },
 "title": "Register a Data Contract",
 "updates": [],
 "type": "basic",
 "slug": "tutorial-register-a-data-contract",
 "excerpt": "",
 "body": "# Overview\n\nIn this tutorial we will register a data contract.\n\nFor this tutorial you will need:\n\n- A wallet mnemonic with some funds in it: [Tutorial: Create and Fund a Wallet](tutorial-create-and-fund-a-wallet)\n- A dash platform identity: [Tutorial: Register an Identity](tutorial-register-an-identity) \n\n# Code\n\n## Defining contract documents\n\nAs described in the [data contract explanation](explanation-platform-protocol-data-contract#structure), data contracts must include one or more developer-defined [documents](explanation-platform-protocol-document). \n\nThe most basic example below (tab 1) demonstrates a data contract containing a single document type (`note`) which has a single string property (`message`). \n\nThe second tab shows the same data contract with an index defined on the `$ownerId` field. This would allow querying for documents owned by a specific identity using a [where clause](reference-query-syntax#where-clause).\n\nThe third tab shows a data contract using the [JSON-Schema $ref feature](https://json-schema.org/understanding-json-schema/structuring.html#reuse) that enables reuse of defined objects.\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"{\\n  \\\"note\\\": {\\n    \\\"properties\\\": {\\n      \\\"message\\\": {\\n        \\\"type\\\": \\\"string\\\"\\n      }\\n    },\\n    \\\"additionalProperties\\\": false\\n  }\\n}\",\n      \"language\": \"json\",\n      \"name\": \"1. Data contract document (basic)\"\n    },\n    {\n      \"code\": \"{\\n  \\\"note\\\": {\\n    \\\"indices\\\": [\\n      {\\n        \\\"properties\\\": [{ \\\"$ownerId\\\": \\\"asc\\\" }], \\\"unique\\\": false },\\n    ],\\n    \\\"properties\\\": {\\n      \\\"message\\\": {\\n        \\\"type\\\": \\\"string\\\"\\n      }\\n    },\\n    \\\"additionalProperties\\\": false\\n  }\\n}\\n\\n/*\\nAn identity's documents are accessible via a query including a where clause like:\\n{\\n  where: [['$ownerId', '==', 'an identity id']],\\n}\\n*/\\n\",\n      \"language\": \"json\",\n      \"name\": \"2. Data contract document (with index)\"\n    },\n    {\n      \"code\": \"{\\n  customer: {\\n    properties: {\\n      name: { type: \\\"string\\\" },\\n      billing_address: { $ref: \\\"#/definitions/address\\\" },\\n      shipping_address: { $ref: \\\"#/definitions/address\\\" }\\n    },\\n    additionalProperties: false\\n  },\\n}\\n\\n/*\\nThe contract document defined above is dependent on the following object \\nbeing added to the contract via the contracts `.setDefinitions` method:\\n\\n{\\n  address: {\\n    type: \\\"object\\\",\\n    properties: {\\n      street_address: { type: \\\"string\\\" },\\n      city:           { type: \\\"string\\\" },\\n      state:          { type: \\\"string\\\" }\\n    },\\n    required: [\\\"street_address\\\", \\\"city\\\", \\\"state\\\"],\\n    additionalProperties: false\\n  }\\n}\\n*/\",\n      \"language\": \"json\",\n      \"name\": \"Data contract document (with $ref)\"\n    }\n  ]\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Please refer to the [data contract reference page](reference-data-contracts) for more comprehensive details related to contracts and documents.\"\n}\n[/block]\n## Registering the data contract\n\nThe following examples demonstrate the details of creating contracts using the features [described above](#defining-contract-documents):\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"const Dash = require('dash');\\n\\nconst clientOpts = {\\n  network: 'testnet',\\n  wallet: {\\n  \\tmnemonic: 'a Dash wallet mnemonic with evonet funds goes here',\\n  }\\n};\\nconst client = new Dash.Client(clientOpts);\\n\\nconst registerContract = async function () {\\n  try {\\n    const platform = client.platform;\\n    const identity = await platform.identities.get('an identity ID goes here');\\n    \\n    const contractDocuments = {\\n      note: {\\n        properties: {\\n          message: {\\n            type: \\\"string\\\"\\n          }\\n        },\\n        additionalProperties: false\\n      }};\\n    \\n    const contract = await platform.contracts.create(contractDocuments, identity);\\n    console.dir({contract});\\n\\n    // Make sure contract passes validation checks\\n    const validationResult = await platform.dpp.dataContract.validate(contract);\\n\\n    if (validationResult.isValid()) {\\n      console.log(\\\"validation passed, broadcasting contract..\\\");\\n      // Sign and submit the data contract\\n      await platform.contracts.broadcast(contract, identity);\\n    } else {\\n      console.error(validationResult) // An array of detailed validation errors\\n      throw validationResult.errors[0];\\n    }\\n    \\n  } catch (e) {\\n    console.error('Something went wrong:', e);\\n  } finally {\\n    client.disconnect();\\n  }\\n}\\n\\nregisterContract();\",\n      \"language\": \"javascript\",\n      \"name\": \"JavaScript (Basic)\"\n    },\n    {\n      \"code\": \"const Dash = require('dash');\\n\\nconst clientOpts = {\\n  network: 'testnet',\\n  wallet: {\\n  \\tmnemonic: 'a Dash wallet mnemonic with evonet funds goes here',\\n  }\\n};\\nconst client = new Dash.Client(clientOpts);\\n\\nconst registerContract = async function () {\\n  try {\\n    const platform = client.platform;\\n    const identity = await platform.identities.get('an identity ID goes here');\\n    \\n    const contractDocuments = {\\n  \\t  note: {\\n       indices: [\\n          {\\n           properties: [{ \\\"$ownerId\\\": \\\"asc\\\" }], unique: false },\\n        ],\\n        properties: {\\n          message: {\\n            type: \\\"string\\\"\\n          }\\n        },\\n        additionalProperties: false\\n      }};\\n    \\n    const contract = await platform.contracts.create(contractDocuments, identity);\\n    console.dir({contract});\\n\\n    // Make sure contract passes validation checks\\n    const validationResult = await platform.dpp.dataContract.validate(contract);\\n\\n    if (validationResult.isValid()) {\\n      console.log(\\\"validation passed, broadcasting contract..\\\");\\n      // Sign and submit the data contract\\n      await platform.contracts.broadcast(contract, identity);\\n    } else {\\n      console.error(validationResult) // An array of detailed validation errors\\n      throw validationResult.errors[0];\\n    }\\n    \\n  } catch (e) {\\n    console.error('Something went wrong:', e);\\n  } finally {\\n    client.disconnect();\\n  }\\n}\\n\\nregisterContract();\",\n      \"language\": \"javascript\",\n      \"name\": \"JavaScript (With index)\"\n    },\n    {\n      \"code\": \"const Dash = require('dash');\\n\\nconst clientOpts = {\\n  network: 'testnet',\\n  wallet: {\\n  \\tmnemonic: 'a Dash wallet mnemonic with evonet funds goes here',\\n  }\\n};\\nconst client = new Dash.Client(clientOpts);\\n\\nconst registerContract = async function () {\\n  try {\\n    const platform = client.platform;\\n    const identity = await platform.identities.get('an identity ID goes here');\\n    \\n    // Define a reusable object\\n    const definitions = {\\n      address: {\\n        type: \\\"object\\\",\\n        properties: {\\n          street_address: { type: \\\"string\\\" },\\n          city:           { type: \\\"string\\\" },\\n          state:          { type: \\\"string\\\" }\\n        },\\n        required: [\\\"street_address\\\", \\\"city\\\", \\\"state\\\"],\\n        additionalProperties: false\\n      }\\n    }\\n\\n    // Create a document with properties using a definition via $ref\\n    const contractDocuments = {\\n      customer: {\\n        properties: {\\n          name:             { type: \\\"string\\\" },\\n          billing_address:  { $ref: \\\"#/definitions/address\\\" },\\n          shipping_address: { $ref: \\\"#/definitions/address\\\" }\\n        },\\n        additionalProperties: false\\n      },\\n    };\\n    \\n    const contract = await platform.contracts.create(contractDocuments, identity);\\n    \\n    // Add reusable definitions referred to by \\\"$ref\\\" to contract\\n    contract.setDefinitions(definitions)\\n    console.dir({contract});\\n\\n    // Make sure contract passes validation checks\\n    const validationResult = await platform.dpp.dataContract.validate(contract);\\n\\n    if (validationResult.isValid()) {\\n      console.log(\\\"validation passed, broadcasting contract..\\\");\\n      // Sign and submit the data contract\\n      await platform.contracts.broadcast(contract, identity);\\n    } else {\\n      console.error(validationResult) // An array of detailed validation errors\\n      throw validationResult.errors[0];\\n    }\\n    \\n  } catch (e) {\\n    console.error('Something went wrong:', e);\\n  } finally {\\n    client.disconnect();\\n  }\\n}\\n\\nregisterContract();\",\n      \"language\": \"javascript\",\n      \"name\": \"JavaScript ($ref)\"\n    }\n  ]\n}\n[/block]\n# What's Happening\n\nAfter we initialize the Client, we create an object defining the documents this data contract requires (e.g. a `note` document in the example). The `platform.contracts.create` method takes two arguments: a contract definitions JSON-schema object and an identity. The contract definitions object consists of the document types being created (e.g. `note`). It defines the properties and any indices. \n\nOnce the data contract has been created, we still need to submit it to DAPI. The `platform.contracts.broadcast` method takes a data contract and an identity parameter. Internally, it creates a State Transition containing the previously created contract, signs the state transition, and submits the signed state transition to DAPI. A response will only be returned if an error is encountered,",
 "order": 6,
 "isReference": false,
 "hidden": false,
 "sync_unique": "",
 "link_url": "",
 "link_external": false,
 "pendingAlgoliaPublish": false,
 "previousSlug": "",
 "slugUpdatedAt": "2020-07-09T01:08:17.922Z",
 "_id": "5ed52e27d6b31c07c1401043",
 "version": "5ed52e27d6b31c07c1401075",
 "updatedAt": "2020-07-09T19:15:08.019Z",
 "createdAt": "2019-10-08T10:38:24.143Z",
 "project": "5bda01cad172e200499a20a9",
 "user": "5b8400d7185d5e00036dcc3b",
 "category": "5ed52e27d6b31c07c1401027",
 "__v": 1,
 "parentDoc": null,
 "isApi": false,
 "id": "5ed52e27d6b31c07c1401043",
 "body_html": "<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-overview\"></div>Overview<a class=\"fa fa-anchor\" href=\"#section-overview\"></a></h1>\n<p>In this tutorial we will register a data contract.</p>\n<p>For this tutorial you will need:</p>\n<ul>\n<li >A wallet mnemonic with some funds in it: <a href=\"tutorial-create-and-fund-a-wallet\">Tutorial: Create and Fund a Wallet</a></li><li >A dash platform identity: <a href=\"tutorial-register-an-identity\">Tutorial: Register an Identity</a> </li></ul>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-code\"></div>Code<a class=\"fa fa-anchor\" href=\"#section-code\"></a></h1>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-defining-contract-documents\"></div>Defining contract documents<a class=\"fa fa-anchor\" href=\"#section-defining-contract-documents\"></a></h2>\n<p>As described in the <a href=\"explanation-platform-protocol-data-contract#structure\">data contract explanation</a>, data contracts must include one or more developer-defined <a href=\"explanation-platform-protocol-document\">documents</a>. </p>\n<p>The most basic example below (tab 1) demonstrates a data contract containing a single document type (<code>note</code>) which has a single string property (<code>message</code>). </p>\n<p>The second tab shows the same data contract with an index defined on the <code>$ownerId</code> field. This would allow querying for documents owned by a specific identity using a <a href=\"reference-query-syntax#where-clause\">where clause</a>.</p>\n<p>The third tab shows a data contract using the <a href=\"https://json-schema.org/understanding-json-schema/structuring.html#reuse\">JSON-Schema $ref feature</a> that enables reuse of defined objects.</p>\n\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">1. Data contract document (basic)</a></li>\n\t\t<li><a href=\"\" ng-click=\"showCode(1)\" ng-class=\"{active: (1 == tab)}\">2. Data contract document (with index)</a></li>\n\t\t<li><a href=\"\" ng-click=\"showCode(2)\" ng-class=\"{active: (2 == tab)}\">Data contract document (with $ref)</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(384)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-384\">{\n  &quot;note&quot;: {\n    &quot;properties&quot;: {\n      &quot;message&quot;: {\n        &quot;type&quot;: &quot;string&quot;\n      }\n    },\n    &quot;additionalProperties&quot;: false\n  }\n}</textarea>\n\t\t\t<pre id=\"code-384\"><code><span class='cm-s-neo'>{\n  <span class=\"cm-property\">\"note\"</span>: {\n    <span class=\"cm-property\">\"properties\"</span>: {\n      <span class=\"cm-property\">\"message\"</span>: {\n        <span class=\"cm-property\">\"type\"</span>: <span class=\"cm-string\">\"string\"</span>\n      }\n    },\n    <span class=\"cm-property\">\"additionalProperties\"</span>: <span class=\"cm-atom\">false</span>\n  }\n}</span></code></pre></span><span ng-if=\"tab == 1\">\n\t\t\t<button ng-click=\"copyCode(35)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-35\">{\n  &quot;note&quot;: {\n    &quot;indices&quot;: [\n      {\n        &quot;properties&quot;: [{ &quot;$ownerId&quot;: &quot;asc&quot; }], &quot;unique&quot;: false },\n    ],\n    &quot;properties&quot;: {\n      &quot;message&quot;: {\n        &quot;type&quot;: &quot;string&quot;\n      }\n    },\n    &quot;additionalProperties&quot;: false\n  }\n}\n\n/*\nAn identity's documents are accessible via a query including a where clause like:\n{\n  where: [['$ownerId', '==', 'an identity id']],\n}\n*/\n</textarea>\n\t\t\t<pre id=\"code-35\"><code><span class='cm-s-neo'>{\n  <span class=\"cm-property\">\"note\"</span>: {\n    <span class=\"cm-property\">\"indices\"</span>: [\n      {\n        <span class=\"cm-property\">\"properties\"</span>: [{ <span class=\"cm-property\">\"$ownerId\"</span>: <span class=\"cm-string\">\"asc\"</span> }], <span class=\"cm-property\">\"unique\"</span>: <span class=\"cm-atom\">false</span> },\n    ],\n    <span class=\"cm-property\">\"properties\"</span>: {\n      <span class=\"cm-property\">\"message\"</span>: {\n        <span class=\"cm-property\">\"type\"</span>: <span class=\"cm-string\">\"string\"</span>\n      }\n    },\n    <span class=\"cm-property\">\"additionalProperties\"</span>: <span class=\"cm-atom\">false</span>\n  }\n}\n\n<span class=\"cm-comment\">&#47;*</span>\n<span class=\"cm-comment\">An identity's documents are accessible via a query including a where clause like:</span>\n<span class=\"cm-comment\">{</span>\n<span class=\"cm-comment\">  where: [['$ownerId', '==', 'an identity id']],</span>\n<span class=\"cm-comment\">}</span>\n<span class=\"cm-comment\">*&#47;</span>\n</span></code></pre></span><span ng-if=\"tab == 2\">\n\t\t\t<button ng-click=\"copyCode(220)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-220\">{\n  customer: {\n    properties: {\n      name: { type: &quot;string&quot; },\n      billing_address: { $ref: &quot;#/definitions/address&quot; },\n      shipping_address: { $ref: &quot;#/definitions/address&quot; }\n    },\n    additionalProperties: false\n  },\n}\n\n/*\nThe contract document defined above is dependent on the following object \nbeing added to the contract via the contracts `.setDefinitions` method:\n\n{\n  address: {\n    type: &quot;object&quot;,\n    properties: {\n      street_address: { type: &quot;string&quot; },\n      city:           { type: &quot;string&quot; },\n      state:          { type: &quot;string&quot; }\n    },\n    required: [&quot;street_address&quot;, &quot;city&quot;, &quot;state&quot;],\n    additionalProperties: false\n  }\n}\n*/</textarea>\n\t\t\t<pre id=\"code-220\"><code><span class='cm-s-neo'>{\n  <span class=\"cm-property\">customer</span>: {\n    <span class=\"cm-property\">properties</span>: {\n      <span class=\"cm-property\">name</span>: { <span class=\"cm-property\">type</span>: <span class=\"cm-string\">\"string\"</span> },\n      <span class=\"cm-property\">billing_address</span>: { <span class=\"cm-property\">$ref</span>: <span class=\"cm-string\">\"#&#47;definitions&#47;address\"</span> },\n      <span class=\"cm-property\">shipping_address</span>: { <span class=\"cm-property\">$ref</span>: <span class=\"cm-string\">\"#&#47;definitions&#47;address\"</span> }\n    },\n    <span class=\"cm-property\">additionalProperties</span>: <span class=\"cm-atom\">false</span>\n  },\n}\n\n<span class=\"cm-comment\">&#47;*</span>\n<span class=\"cm-comment\">The contract document defined above is dependent on the following object </span>\n<span class=\"cm-comment\">being added to the contract via the contracts `.setDefinitions` method:</span>\n\n<span class=\"cm-comment\">{</span>\n<span class=\"cm-comment\">  address: {</span>\n<span class=\"cm-comment\">    type: \"object\",</span>\n<span class=\"cm-comment\">    properties: {</span>\n<span class=\"cm-comment\">      street_address: { type: \"string\" },</span>\n<span class=\"cm-comment\">      city:           { type: \"string\" },</span>\n<span class=\"cm-comment\">      state:          { type: \"string\" }</span>\n<span class=\"cm-comment\">    },</span>\n<span class=\"cm-comment\">    required: [\"street_address\", \"city\", \"state\"],</span>\n<span class=\"cm-comment\">    additionalProperties: false</span>\n<span class=\"cm-comment\">  }</span>\n<span class=\"cm-comment\">}</span>\n<span class=\"cm-comment\">*&#47;</span></span></code></pre></span>\n\t</div>\n</div>\n<div class=\"magic-block-callout type-info no-title\"><span class=\"noTitleIcon\"><i title=\"Info\" class=\"fa fa-info-circle\"></i></span>\n\t<div class=\"callout-body\"><p>Please refer to the <a href=\"reference-data-contracts\">data contract reference page</a> for more comprehensive details related to contracts and documents.</p>\n\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-registering-the-data-contract\"></div>Registering the data contract<a class=\"fa fa-anchor\" href=\"#section-registering-the-data-contract\"></a></h2>\n<p>The following examples demonstrate the details of creating contracts using the features <a href=\"#defining-contract-documents\">described above</a>:</p>\n\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">JavaScript (Basic)</a></li>\n\t\t<li><a href=\"\" ng-click=\"showCode(1)\" ng-class=\"{active: (1 == tab)}\">JavaScript (With index)</a></li>\n\t\t<li><a href=\"\" ng-click=\"showCode(2)\" ng-class=\"{active: (2 == tab)}\">JavaScript ($ref)</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(255)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-255\">const Dash = require('dash');\n\nconst clientOpts = {\n  network: 'testnet',\n  wallet: {\n  \tmnemonic: 'a Dash wallet mnemonic with evonet funds goes here',\n  }\n};\nconst client = new Dash.Client(clientOpts);\n\nconst registerContract = async function () {\n  try {\n    const platform = client.platform;\n    const identity = await platform.identities.get('an identity ID goes here');\n    \n    const contractDocuments = {\n      note: {\n        properties: {\n          message: {\n            type: &quot;string&quot;\n          }\n        },\n        additionalProperties: false\n      &#125;&#125;</span>;\n    \n    const contract = await platform.contracts.create(contractDocuments, identity);\n    console.dir({contract});\n\n    // Make sure contract passes validation checks\n    const validationResult = await platform.dpp.dataContract.validate(contract);\n\n    if (validationResult.isValid()) {\n      console.log(&quot;validation passed, broadcasting contract..&quot;);\n      // Sign and submit the data contract\n      await platform.contracts.broadcast(contract, identity);\n    } else {\n      console.error(validationResult) // An array of detailed validation errors\n      throw validationResult.errors[0];\n    }\n    \n  } catch (e) {\n    console.error('Something went wrong:', e);\n  } finally {\n    client.disconnect();\n  }\n}\n\nregisterContract();</textarea>\n\t\t\t<pre id=\"code-255\"><code><span class='cm-s-neo'><span class=\"cm-keyword\">const</span> <span class=\"cm-def\">Dash</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">require</span>(<span class=\"cm-string\">'dash'</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">clientOpts</span> <span class=\"cm-operator\">=</span> {\n  <span class=\"cm-property\">network</span>: <span class=\"cm-string\">'testnet'</span>,\n  <span class=\"cm-property\">wallet</span>: {\n  \t<span class=\"cm-property\">mnemonic</span>: <span class=\"cm-string\">'a Dash wallet mnemonic with evonet funds goes here'</span>,\n  }\n};\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">client</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">new</span> <span class=\"cm-variable\">Dash</span>.<span class=\"cm-property\">Client</span>(<span class=\"cm-variable\">clientOpts</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">registerContract</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">async</span> <span class=\"cm-keyword\">function</span> () {\n  <span class=\"cm-keyword\">try</span> {\n    <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">platform</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">platform</span>;\n    <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">identity</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">identities</span>.<span class=\"cm-property\">get</span>(<span class=\"cm-string\">'an identity ID goes here'</span>);\n    \n    <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">contractDocuments</span> <span class=\"cm-operator\">=</span> {\n      <span class=\"cm-property\">note</span>: {\n        <span class=\"cm-property\">properties</span>: {\n          <span class=\"cm-property\">message</span>: {\n            <span class=\"cm-property\">type</span>: <span class=\"cm-string\">\"string\"</span>\n          }\n        },\n        <span class=\"cm-property\">additionalProperties</span>: <span class=\"cm-atom\">false</span>\n      &#125;<span></span>&#125;;\n    \n    <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">contract</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">contracts</span>.<span class=\"cm-property\">create</span>(<span class=\"cm-variable-2\">contractDocuments</span>, <span class=\"cm-variable-2\">identity</span>);\n    <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">dir</span>({<span class=\"cm-property\">contract</span>});\n\n    <span class=\"cm-comment\">&#47;&#47; Make sure contract passes validation checks</span>\n    <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">validationResult</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">dpp</span>.<span class=\"cm-property\">dataContract</span>.<span class=\"cm-property\">validate</span>(<span class=\"cm-variable-2\">contract</span>);\n\n    <span class=\"cm-keyword\">if</span> (<span class=\"cm-variable-2\">validationResult</span>.<span class=\"cm-property\">isValid</span>()) {\n      <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-string\">\"validation passed, broadcasting contract..\"</span>);\n      <span class=\"cm-comment\">&#47;&#47; Sign and submit the data contract</span>\n      <span class=\"cm-keyword\">await</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">contracts</span>.<span class=\"cm-property\">broadcast</span>(<span class=\"cm-variable-2\">contract</span>, <span class=\"cm-variable-2\">identity</span>);\n    } <span class=\"cm-keyword\">else</span> {\n      <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">error</span>(<span class=\"cm-variable-2\">validationResult</span>) <span class=\"cm-comment\">&#47;&#47; An array of detailed validation errors</span>\n      <span class=\"cm-keyword\">throw</span> <span class=\"cm-variable-2\">validationResult</span>.<span class=\"cm-property\">errors</span>[<span class=\"cm-number\">0</span>];\n    }\n    \n  } <span class=\"cm-keyword\">catch</span> (<span class=\"cm-def\">e</span>) {\n    <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">error</span>(<span class=\"cm-string\">'Something went wrong:'</span>, <span class=\"cm-variable-2\">e</span>);\n  } <span class=\"cm-keyword\">finally</span> {\n    <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">disconnect</span>();\n  }\n}\n\n<span class=\"cm-variable\">registerContract</span>();</span></code></pre></span><span ng-if=\"tab == 1\">\n\t\t\t<button ng-click=\"copyCode(746)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-746\">const Dash = require('dash');\n\nconst clientOpts = {\n  network: 'testnet',\n  wallet: {\n  \tmnemonic: 'a Dash wallet mnemonic with evonet funds goes here',\n  }\n};\nconst client = new Dash.Client(clientOpts);\n\nconst registerContract = async function () {\n  try {\n    const platform = client.platform;\n    const identity = await platform.identities.get('an identity ID goes here');\n    \n    const contractDocuments = {\n  \t  note: {\n       indices: [\n          {\n           properties: [{ &quot;$ownerId&quot;: &quot;asc&quot; }], unique: false },\n        ],\n        properties: {\n          message: {\n            type: &quot;string&quot;\n          }\n        },\n        additionalProperties: false\n      &#125;&#125;</span>;\n    \n    const contract = await platform.contracts.create(contractDocuments, identity);\n    console.dir({contract});\n\n    // Make sure contract passes validation checks\n    const validationResult = await platform.dpp.dataContract.validate(contract);\n\n    if (validationResult.isValid()) {\n      console.log(&quot;validation passed, broadcasting contract..&quot;);\n      // Sign and submit the data contract\n      await platform.contracts.broadcast(contract, identity);\n    } else {\n      console.error(validationResult) // An array of detailed validation errors\n      throw validationResult.errors[0];\n    }\n    \n  } catch (e) {\n    console.error('Something went wrong:', e);\n  } finally {\n    client.disconnect();\n  }\n}\n\nregisterContract();</textarea>\n\t\t\t<pre id=\"code-746\"><code><span class='cm-s-neo'><span class=\"cm-keyword\">const</span> <span class=\"cm-def\">Dash</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">require</span>(<span class=\"cm-string\">'dash'</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">clientOpts</span> <span class=\"cm-operator\">=</span> {\n  <span class=\"cm-property\">network</span>: <span class=\"cm-string\">'testnet'</span>,\n  <span class=\"cm-property\">wallet</span>: {\n  \t<span class=\"cm-property\">mnemonic</span>: <span class=\"cm-string\">'a Dash wallet mnemonic with evonet funds goes here'</span>,\n  }\n};\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">client</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">new</span> <span class=\"cm-variable\">Dash</span>.<span class=\"cm-property\">Client</span>(<span class=\"cm-variable\">clientOpts</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">registerContract</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">async</span> <span class=\"cm-keyword\">function</span> () {\n  <span class=\"cm-keyword\">try</span> {\n    <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">platform</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">platform</span>;\n    <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">identity</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">identities</span>.<span class=\"cm-property\">get</span>(<span class=\"cm-string\">'an identity ID goes here'</span>);\n    \n    <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">contractDocuments</span> <span class=\"cm-operator\">=</span> {\n  \t  <span class=\"cm-property\">note</span>: {\n       <span class=\"cm-property\">indices</span>: [\n          {\n           <span class=\"cm-property\">properties</span>: [{ <span class=\"cm-string cm-property\">\"$ownerId\"</span>: <span class=\"cm-string\">\"asc\"</span> }], <span class=\"cm-property\">unique</span>: <span class=\"cm-atom\">false</span> },\n        ],\n        <span class=\"cm-property\">properties</span>: {\n          <span class=\"cm-property\">message</span>: {\n            <span class=\"cm-property\">type</span>: <span class=\"cm-string\">\"string\"</span>\n          }\n        },\n        <span class=\"cm-property\">additionalProperties</span>: <span class=\"cm-atom\">false</span>\n      &#125;<span></span>&#125;;\n    \n    <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">contract</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">contracts</span>.<span class=\"cm-property\">create</span>(<span class=\"cm-variable-2\">contractDocuments</span>, <span class=\"cm-variable-2\">identity</span>);\n    <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">dir</span>({<span class=\"cm-property\">contract</span>});\n\n    <span class=\"cm-comment\">&#47;&#47; Make sure contract passes validation checks</span>\n    <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">validationResult</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">dpp</span>.<span class=\"cm-property\">dataContract</span>.<span class=\"cm-property\">validate</span>(<span class=\"cm-variable-2\">contract</span>);\n\n    <span class=\"cm-keyword\">if</span> (<span class=\"cm-variable-2\">validationResult</span>.<span class=\"cm-property\">isValid</span>()) {\n      <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-string\">\"validation passed, broadcasting contract..\"</span>);\n      <span class=\"cm-comment\">&#47;&#47; Sign and submit the data contract</span>\n      <span class=\"cm-keyword\">await</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">contracts</span>.<span class=\"cm-property\">broadcast</span>(<span class=\"cm-variable-2\">contract</span>, <span class=\"cm-variable-2\">identity</span>);\n    } <span class=\"cm-keyword\">else</span> {\n      <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">error</span>(<span class=\"cm-variable-2\">validationResult</span>) <span class=\"cm-comment\">&#47;&#47; An array of detailed validation errors</span>\n      <span class=\"cm-keyword\">throw</span> <span class=\"cm-variable-2\">validationResult</span>.<span class=\"cm-property\">errors</span>[<span class=\"cm-number\">0</span>];\n    }\n    \n  } <span class=\"cm-keyword\">catch</span> (<span class=\"cm-def\">e</span>) {\n    <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">error</span>(<span class=\"cm-string\">'Something went wrong:'</span>, <span class=\"cm-variable-2\">e</span>);\n  } <span class=\"cm-keyword\">finally</span> {\n    <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">disconnect</span>();\n  }\n}\n\n<span class=\"cm-variable\">registerContract</span>();</span></code></pre></span><span ng-if=\"tab == 2\">\n\t\t\t<button ng-click=\"copyCode(936)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-936\">const Dash = require('dash');\n\nconst clientOpts = {\n  network: 'testnet',\n  wallet: {\n  \tmnemonic: 'a Dash wallet mnemonic with evonet funds goes here',\n  }\n};\nconst client = new Dash.Client(clientOpts);\n\nconst registerContract = async function () {\n  try {\n    const platform = client.platform;\n    const identity = await platform.identities.get('an identity ID goes here');\n    \n    // Define a reusable object\n    const definitions = {\n      address: {\n        type: &quot;object&quot;,\n        properties: {\n          street_address: { type: &quot;string&quot; },\n          city:           { type: &quot;string&quot; },\n          state:          { type: &quot;string&quot; }\n        },\n        required: [&quot;street_address&quot;, &quot;city&quot;, &quot;state&quot;],\n        additionalProperties: false\n      }\n    }\n\n    // Create a document with properties using a definition via $ref\n    const contractDocuments = {\n      customer: {\n        properties: {\n          name:             { type: &quot;string&quot; },\n          billing_address:  { $ref: &quot;#/definitions/address&quot; },\n          shipping_address: { $ref: &quot;#/definitions/address&quot; }\n        },\n        additionalProperties: false\n      },\n    };\n    \n    const contract = await platform.contracts.create(contractDocuments, identity);\n    \n    // Add reusable definitions referred to by &quot;$ref&quot; to contract\n    contract.setDefinitions(definitions)\n    console.dir({contract});\n\n    // Make sure contract passes validation checks\n    const validationResult = await platform.dpp.dataContract.validate(contract);\n\n    if (validationResult.isValid()) {\n      console.log(&quot;validation passed, broadcasting contract..&quot;);\n      // Sign and submit the data contract\n      await platform.contracts.broadcast(contract, identity);\n    } else {\n      console.error(validationResult) // An array of detailed validation errors\n      throw validationResult.errors[0];\n    }\n    \n  } catch (e) {\n    console.error('Something went wrong:', e);\n  } finally {\n    client.disconnect();\n  }\n}\n\nregisterContract();</textarea>\n\t\t\t<pre id=\"code-936\"><code><span class='cm-s-neo'><span class=\"cm-keyword\">const</span> <span class=\"cm-def\">Dash</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">require</span>(<span class=\"cm-string\">'dash'</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">clientOpts</span> <span class=\"cm-operator\">=</span> {\n  <span class=\"cm-property\">network</span>: <span class=\"cm-string\">'testnet'</span>,\n  <span class=\"cm-property\">wallet</span>: {\n  \t<span class=\"cm-property\">mnemonic</span>: <span class=\"cm-string\">'a Dash wallet mnemonic with evonet funds goes here'</span>,\n  }\n};\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">client</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">new</span> <span class=\"cm-variable\">Dash</span>.<span class=\"cm-property\">Client</span>(<span class=\"cm-variable\">clientOpts</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">registerContract</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">async</span> <span class=\"cm-keyword\">function</span> () {\n  <span class=\"cm-keyword\">try</span> {\n    <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">platform</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">platform</span>;\n    <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">identity</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">identities</span>.<span class=\"cm-property\">get</span>(<span class=\"cm-string\">'an identity ID goes here'</span>);\n    \n    <span class=\"cm-comment\">&#47;&#47; Define a reusable object</span>\n    <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">definitions</span> <span class=\"cm-operator\">=</span> {\n      <span class=\"cm-property\">address</span>: {\n        <span class=\"cm-property\">type</span>: <span class=\"cm-string\">\"object\"</span>,\n        <span class=\"cm-property\">properties</span>: {\n          <span class=\"cm-property\">street_address</span>: { <span class=\"cm-property\">type</span>: <span class=\"cm-string\">\"string\"</span> },\n          <span class=\"cm-property\">city</span>:           { <span class=\"cm-property\">type</span>: <span class=\"cm-string\">\"string\"</span> },\n          <span class=\"cm-property\">state</span>:          { <span class=\"cm-property\">type</span>: <span class=\"cm-string\">\"string\"</span> }\n        },\n        <span class=\"cm-property\">required</span>: [<span class=\"cm-string\">\"street_address\"</span>, <span class=\"cm-string\">\"city\"</span>, <span class=\"cm-string\">\"state\"</span>],\n        <span class=\"cm-property\">additionalProperties</span>: <span class=\"cm-atom\">false</span>\n      }\n    }\n\n    <span class=\"cm-comment\">&#47;&#47; Create a document with properties using a definition via $ref</span>\n    <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">contractDocuments</span> <span class=\"cm-operator\">=</span> {\n      <span class=\"cm-property\">customer</span>: {\n        <span class=\"cm-property\">properties</span>: {\n          <span class=\"cm-property\">name</span>:             { <span class=\"cm-property\">type</span>: <span class=\"cm-string\">\"string\"</span> },\n          <span class=\"cm-property\">billing_address</span>:  { <span class=\"cm-property\">$ref</span>: <span class=\"cm-string\">\"#&#47;definitions&#47;address\"</span> },\n          <span class=\"cm-property\">shipping_address</span>: { <span class=\"cm-property\">$ref</span>: <span class=\"cm-string\">\"#&#47;definitions&#47;address\"</span> }\n        },\n        <span class=\"cm-property\">additionalProperties</span>: <span class=\"cm-atom\">false</span>\n      },\n    };\n    \n    <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">contract</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">contracts</span>.<span class=\"cm-property\">create</span>(<span class=\"cm-variable-2\">contractDocuments</span>, <span class=\"cm-variable-2\">identity</span>);\n    \n    <span class=\"cm-comment\">&#47;&#47; Add reusable definitions referred to by \"$ref\" to contract</span>\n    <span class=\"cm-variable-2\">contract</span>.<span class=\"cm-property\">setDefinitions</span>(<span class=\"cm-variable-2\">definitions</span>)\n    <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">dir</span>({<span class=\"cm-property\">contract</span>});\n\n    <span class=\"cm-comment\">&#47;&#47; Make sure contract passes validation checks</span>\n    <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">validationResult</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">dpp</span>.<span class=\"cm-property\">dataContract</span>.<span class=\"cm-property\">validate</span>(<span class=\"cm-variable-2\">contract</span>);\n\n    <span class=\"cm-keyword\">if</span> (<span class=\"cm-variable-2\">validationResult</span>.<span class=\"cm-property\">isValid</span>()) {\n      <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-string\">\"validation passed, broadcasting contract..\"</span>);\n      <span class=\"cm-comment\">&#47;&#47; Sign and submit the data contract</span>\n      <span class=\"cm-keyword\">await</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">contracts</span>.<span class=\"cm-property\">broadcast</span>(<span class=\"cm-variable-2\">contract</span>, <span class=\"cm-variable-2\">identity</span>);\n    } <span class=\"cm-keyword\">else</span> {\n      <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">error</span>(<span class=\"cm-variable-2\">validationResult</span>) <span class=\"cm-comment\">&#47;&#47; An array of detailed validation errors</span>\n      <span class=\"cm-keyword\">throw</span> <span class=\"cm-variable-2\">validationResult</span>.<span class=\"cm-property\">errors</span>[<span class=\"cm-number\">0</span>];\n    }\n    \n  } <span class=\"cm-keyword\">catch</span> (<span class=\"cm-def\">e</span>) {\n    <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">error</span>(<span class=\"cm-string\">'Something went wrong:'</span>, <span class=\"cm-variable-2\">e</span>);\n  } <span class=\"cm-keyword\">finally</span> {\n    <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">disconnect</span>();\n  }\n}\n\n<span class=\"cm-variable\">registerContract</span>();</span></code></pre></span>\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-whats-happening\"></div>What&#39;s Happening<a class=\"fa fa-anchor\" href=\"#section-whats-happening\"></a></h1>\n<p>After we initialize the Client, we create an object defining the documents this data contract requires (e.g. a <code>note</code> document in the example). The <code>platform.contracts.create</code> method takes two arguments: a contract definitions JSON-schema object and an identity. The contract definitions object consists of the document types being created (e.g. <code>note</code>). It defines the properties and any indices. </p>\n<p>Once the data contract has been created, we still need to submit it to DAPI. The <code>platform.contracts.broadcast</code> method takes a data contract and an identity parameter. Internally, it creates a State Transition containing the previously created contract, signs the state transition, and submits the signed state transition to DAPI. A response will only be returned if an error is encountered,</p>\n\n</div>"
}