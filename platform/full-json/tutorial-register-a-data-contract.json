{
 "metadata": {
  "image": [],
  "title": "",
  "description": ""
 },
 "api": {
  "method": "get",
  "url": "",
  "auth": "required",
  "results": {
   "codes": [
    {
     "status": 200,
     "language": "json",
     "code": "{}",
     "name": ""
    },
    {
     "status": 400,
     "language": "json",
     "code": "{}",
     "name": ""
    }
   ]
  },
  "params": [],
  "examples": {
   "codes": []
  }
 },
 "next": {
  "description": "",
  "pages": [
   {
    "type": "doc",
    "icon": "file-text-o",
    "name": "Retrieve a Data Contract",
    "slug": "tutorial-retrieve-a-data-contract",
    "category": "Tutorials"
   },
   {
    "type": "doc",
    "icon": "file-text-o",
    "name": "Submit Documents",
    "slug": "tutorial-submit-documents",
    "category": "Tutorials"
   },
   {
    "type": "doc",
    "icon": "file-text-o",
    "name": "Retrieve Documents",
    "slug": "tutorial-retrieve-documents",
    "category": "Tutorials"
   }
  ]
 },
 "algolia": {
  "recordCount": 6,
  "publishPending": false,
  "updatedAt": "2023-08-17T17:35:11.666Z"
 },
 "title": "Register a Data Contract",
 "icon": "",
 "updates": [
  "5f404d06a48063029194d6e5",
  "643818d8106d6c076be8883d"
 ],
 "type": "basic",
 "slug": "tutorial-register-a-data-contract",
 "excerpt": "Create a data contract on Dash Platform",
 "body": "# Overview\n\nIn this tutorial we will register a data contract.\n\n## Prerequisites\n\n- [General prerequisites](tutorials-introduction#prerequisites) (Node.js / Dash SDK installed)\n- A wallet mnemonic with some funds in it: [Tutorial: Create and Fund a Wallet](tutorial-create-and-fund-a-wallet)\n- A Dash Platform Identity: [Tutorial: Register an Identity](tutorial-register-an-identity) \n\n# Code\n\n## Defining contract documents\n\nAs described in the [data contract explanation](explanation-platform-protocol-data-contract#structure), data contracts must include one or more developer-defined [documents](explanation-platform-protocol-document). \n\nThe most basic example below (tab 1) demonstrates a data contract containing a single document type (`note`) which has a single string property (`message`). \n\nThe second tab shows the same data contract with an index defined on the `$ownerId` field. This would allow querying for documents owned by a specific identity using a [where clause](reference-query-syntax#where-clause).\n\nThe third tab shows a data contract using the [JSON-Schema $ref feature](https://json-schema.org/understanding-json-schema/structuring.html#reuse) that enables reuse of defined objects. Note that the $ref keyword has been [temporarily disabled](https://github.com/dashevo/platform/pull/300) since Platform v0.22.\n\nThe fourth tab shows a data contract requiring the optional `$createdAt` and `$updatedAt` [base fields](explanation-platform-protocol-document#base-fields). Using these fields enables retrieving timestamps that indicate when a document was created or modified.\n\n> \ud83d\udea7 \n> \n> Since Platform v0.23, an index can [only use the ascending order](https://github.com/dashevo/platform/pull/435) (`asc`). Future updates will remove this restriction.\n\n```json 1. Minimal contract\n{\n  \"note\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"message\": {\n        \"type\": \"string\"\n      }\n    },\n    \"additionalProperties\": false\n  }\n}\n```\n```json 2. Indexed\n{\n  \"note\": {\n    \"type\": \"object\",\n    \"indices\": [\n      {\n        \"name\": \"ownerId\",\n        \"properties\": [{ \"$ownerId\": \"asc\" }], \"unique\": false }\n    ],\n    \"properties\": {\n      \"message\": {\n        \"type\": \"string\"\n      }\n    },\n    \"additionalProperties\": false\n  }\n}\n\n/*\nAn identity's documents are accessible via a query including a where clause like:\n{\n  where: [['$ownerId', '==', 'an identity id']],\n}\n*/\n```\n```json 3. References ($ref)\n// NOTE: The `$ref` keyword is temporarily disabled for Platform v0.22.\n{\n  \"customer\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"name\": { \"type\": \"string\" },\n      \"billing_address\": { \"$ref\": \"#/$defs/address\" },\n      \"shipping_address\": { \"$ref\": \"#/$defs/address\" }\n    },\n    \"additionalProperties\": false\n  }\n}\n\n/*\nThe contract document defined above is dependent on the following object \nbeing added to the contract via the contracts `.setDefinitions` method:\n\n{\n  address: {\n    type: \"object\",\n    properties: {\n      street_address: { type: \"string\" },\n      city:           { type: \"string\" },\n      state:          { type: \"string\" }\n    },\n    required: [\"street_address\", \"city\", \"state\"],\n    additionalProperties: false\n  }\n}\n*/\n```\n```json 4. Timestamps\n{\n  \"note\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"message\": {\n        \"type\": \"string\"\n      }\n    },\n    \"required\": [\"$createdAt\", \"$updatedAt\"],\n    \"additionalProperties\": false\n  }\n}\n\n/*\nIf $createdAt and/or $updatedAt are added to the list of required properties \nfor a document, all documents of that type will store a timestamp indicating\nwhen the document was created or modified. \n\nThis information will be returned when the document is retrieved.\n*/\n```\n```json 5. Binary data\n{\n \"block\": {\n   \"type\": \"object\",\n    \"properties\": {\n      \"hash\": {\n        \"type\": \"array\",\n        \"byteArray\": true,\n        \"maxItems\": 64,\n        \"description\": \"Store block hashes\"\n      }\n    },\n    \"additionalProperties\": false\n  }\n}\n \n/*\nSetting `\"byteArray\": true` indicates that the provided data will be an \narray of bytes (e.g. a NodeJS Buffer).\n*/\n```\n\n> \ud83d\udcd8 \n> \n> Please refer to the [data contract reference page](reference-data-contracts) for more comprehensive details related to contracts and documents.\n\n## Registering the data contract\n\nThe following examples demonstrate the details of creating contracts using the features [described above](#defining-contract-documents):\n\n```javascript 1. Minimal contract\nconst Dash = require('dash');\n\nconst clientOpts = {\n  network: 'testnet',\n  wallet: {\n    mnemonic: 'a Dash wallet mnemonic with funds goes here',\n    unsafeOptions: {\n      skipSynchronizationBeforeHeight: 650000, // only sync from early-2022\n    },    \n  },\n};\nconst client = new Dash.Client(clientOpts);\n\nconst registerContract = async () => {\n  const { platform } = client;\n  const identity = await platform.identities.get('an identity ID goes here');\n\n  const contractDocuments = {\n    note: {\n      type: 'object',\n      properties: {\n        message: {\n          type: 'string',\n        },\n      },\n      additionalProperties: false,\n    },\n  };\n\n  const contract = await platform.contracts.create(contractDocuments, identity);\n  console.dir({ contract: contract.toJSON() });\n\n  // Make sure contract passes validation checks\n  const validationResult = await platform.dpp.dataContract.validate(contract);\n\n  if (validationResult.isValid()) {\n    console.log('Validation passed, broadcasting contract..');\n    // Sign and submit the data contract\n    return platform.contracts.publish(contract, identity);\n  }\n  console.error(validationResult); // An array of detailed validation errors\n  throw validationResult.errors[0];\n};\n\nregisterContract()\n  .then((d) => console.log('Contract registered:\\n', d.toJSON()))\n  .catch((e) => console.error('Something went wrong:\\n', e))\n  .finally(() => client.disconnect());\n```\n```javascript 2. Indexed\nconst Dash = require('dash');\n\nconst clientOpts = {\n  network: 'testnet',\n  wallet: {\n    mnemonic: 'a Dash wallet mnemonic with funds goes here',\n    unsafeOptions: {\n      skipSynchronizationBeforeHeight: 650000, // only sync from early-2022\n    },\n  },\n};\nconst client = new Dash.Client(clientOpts);\n\nconst registerContract = async () => {\n  const { platform } = client;\n  const identity = await platform.identities.get('an identity ID goes here');\n\n  const contractDocuments = {\n    note: {\n      type: 'object',\n      indices: [{\n        name: 'ownerId',\n        properties: [{ $ownerId: 'asc' }],\n        unique: false,\n      }],\n      properties: {\n        message: {\n          type: 'string',\n        },\n      },\n      additionalProperties: false,\n    },\n  };\n\n  const contract = await platform.contracts.create(contractDocuments, identity);\n  console.dir({ contract: contract.toJSON() });\n\n  // Make sure contract passes validation checks\n  const validationResult = await platform.dpp.dataContract.validate(contract);\n\n  if (validationResult.isValid()) {\n    console.log('Validation passed, broadcasting contract..');\n    // Sign and submit the data contract\n    return platform.contracts.publish(contract, identity);\n  }\n  console.error(validationResult); // An array of detailed validation errors\n  throw validationResult.errors[0];\n};\n\nregisterContract()\n  .then((d) => console.log('Contract registered:\\n', d.toJSON()))\n  .catch((e) => console.error('Something went wrong:\\n', e))\n  .finally(() => client.disconnect());\n```\n```javascript 3. References ($ref)\n// NOTE: The `$ref` keyword is temporarily disabled for Platform v0.22.\nconst Dash = require('dash');\n\nconst clientOpts = {\n  network: 'testnet',\n  wallet: {\n    mnemonic: 'a Dash wallet mnemonic with funds goes here',\n    unsafeOptions: {\n      skipSynchronizationBeforeHeight: 650000, // only sync from early-2022\n    },\n  },\n};\nconst client = new Dash.Client(clientOpts);\n\nconst registerContract = async () => {\n  const { platform } = client;\n  const identity = await platform.identities.get('an identity ID goes here');\n\n  // Define a reusable object\n  const definitions = {\n    address: {\n      type: 'object',\n      properties: {\n        street_address: { type: 'string' },\n        city: { type: 'string' },\n        state: { type: 'string' },\n      },\n      required: ['street_address', 'city', 'state'],\n      additionalProperties: false,\n    },\n  };\n\n  // Create a document with properties using a definition via $ref\n  const contractDocuments = {\n    customer: {\n      type: 'object',\n      properties: {\n        name: { type: 'string' },\n        billing_address: { $ref: '#/$defs/address' },\n        shipping_address: { $ref: '#/$defs/address' },\n      },\n      additionalProperties: false,\n    },\n  };\n  \n  const contract = await platform.contracts.create(contractDocuments, identity);\n\n  // Add reusable definitions referred to by \"$ref\" to contract\n  contract.setDefinitions(definitions);\n  console.dir({ contract: contract.toJSON() });\n\n  // Make sure contract passes validation checks\n  const validationResult = await platform.dpp.dataContract.validate(contract);\n\n  if (validationResult.isValid()) {\n    console.log('Validation passed, broadcasting contract..');\n    // Sign and submit the data contract\n    return platform.contracts.publish(contract, identity);\n  }\n  console.error(validationResult); // An array of detailed validation errors\n  throw validationResult.errors[0];\n};\n\nregisterContract()\n  .then((d) => console.log('Contract registered:\\n', d.toJSON()))\n  .catch((e) => console.error('Something went wrong:\\n', e))\n  .finally(() => client.disconnect());\n```\n```javascript 4. Timestamps\nconst Dash = require('dash');\n\nconst clientOpts = {\n  network: 'testnet',\n  wallet: {\n    mnemonic: 'a Dash wallet mnemonic with funds goes here',\n    unsafeOptions: {\n      skipSynchronizationBeforeHeight: 650000, // only sync from early-2022\n    },\n  },\n};\nconst client = new Dash.Client(clientOpts);\n\nconst registerContract = async () => {\n  const { platform } = client;\n  const identity = await platform.identities.get('an identity ID goes here');\n\n  const contractDocuments = {\n    note: {\n      type: 'object',\n      properties: {\n        message: {\n          type: 'string',\n        },\n      },\n      required: ['$createdAt', '$updatedAt'],\n      additionalProperties: false,\n    },\n  };\n\n  const contract = await platform.contracts.create(contractDocuments, identity);\n  console.dir({ contract: contract.toJSON() });\n\n  // Make sure contract passes validation checks\n  const validationResult = await platform.dpp.dataContract.validate(contract);\n\n  if (validationResult.isValid()) {\n    console.log('Validation passed, broadcasting contract..');\n    // Sign and submit the data contract\n    return platform.contracts.publish(contract, identity);\n  }\n  console.error(validationResult); // An array of detailed validation errors\n  throw validationResult.errors[0];\n};\n\nregisterContract()\n  .then((d) => console.log('Contract registered:\\n', d.toJSON()))\n  .catch((e) => console.error('Something went wrong:\\n', e))\n  .finally(() => client.disconnect());\n```\n```javascript 5. Binary data\nconst Dash = require('dash');\n\nconst clientOpts = {\n  network: 'testnet',\n  wallet: {\n    mnemonic: 'a Dash wallet mnemonic with funds goes here',\n    unsafeOptions: {\n      skipSynchronizationBeforeHeight: 650000, // only sync from early-2022\n    },\n  },\n};\nconst client = new Dash.Client(clientOpts);\n\nconst registerContract = async () => {\n  const { platform } = client;\n  const identity = await platform.identities.get('an identity ID goes here');\n\n  const contractDocuments = {\n    block: {\n      type: 'object',\n      properties: {\n        hash: {\n          type: 'array',\n          byteArray: true,\n          maxItems: 64,\n          description: 'Store block hashes',\n        },\n      },\n      additionalProperties: false,\n    },\n  };\n\n  const contract = await platform.contracts.create(contractDocuments, identity);\n  console.dir({ contract: contract.toJSON() }, { depth: 5 });\n\n  // Make sure contract passes validation checks\n  const validationResult = await platform.dpp.dataContract.validate(contract);\n\n  if (validationResult.isValid()) {\n    console.log('Validation passed, broadcasting contract..');\n    // Sign and submit the data contract\n    return platform.contracts.publish(contract, identity);\n  }\n  console.error(validationResult); // An array of detailed validation errors\n  throw validationResult.errors[0];\n};\n\nregisterContract()\n  .then((d) => console.log('Contract registered:\\n', d.toJSON()))\n  .catch((e) => console.error('Something went wrong:\\n', e))\n  .finally(() => client.disconnect());\n```\n\n> \ud83d\udc4d \n> \n> **Make a note of the returned data contract `$id` as it will be used used in subsequent tutorials throughout the documentation.**\n\n# What's Happening\n\nAfter we initialize the Client, we create an object defining the documents this data contract requires (e.g. a `note` document in the example). The `platform.contracts.create` method takes two arguments: a contract definitions JSON-schema object and an identity. The contract definitions object consists of the document types being created (e.g. `note`). It defines the properties and any indices. \n\nOnce the data contract has been created, we still need to submit it to DAPI. The `platform.contracts.publish` method takes a data contract and an identity parameter. Internally, it creates a State Transition containing the previously created contract, signs the state transition, and submits the signed state transition to DAPI. A response will only be returned if an error is encountered.\n\n> \ud83d\udcd8 Wallet Operations\n> \n> The JavaScript SDK does not cache wallet information. It re-syncs the entire Core chain for some wallet operations (e.g. `client.getWalletAccount()`) which can result in wait times of  5+ minutes. \n> \n> A future release will add caching so that access is much faster after the initial sync. For now, the `skipSynchronizationBeforeHeight` option can be used to sync the wallet starting at a certain block height.",
 "order": 0,
 "isReference": false,
 "deprecated": false,
 "hidden": false,
 "sync_unique": "",
 "link_url": "",
 "link_external": false,
 "previousSlug": "",
 "slugUpdatedAt": "2020-07-09T01:08:17.922Z",
 "revision": 9,
 "_id": "640776c254e610001146664d",
 "version": "640776c254e610001146669e",
 "updatedAt": "2023-08-17T17:35:11.347Z",
 "createdAt": "2019-10-08T10:38:24.143Z",
 "project": "5bda01cad172e200499a20a9",
 "user": "5b8400d7185d5e00036dcc3b",
 "category": "640776c254e610001146662e",
 "__v": 4,
 "parentDoc": "640776c254e6100011466686",
 "pendingAlgoliaPublish": false,
 "isApi": false,
 "id": "640776c254e610001146664d",
 "body_html": "<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-overview\"></div>Overview<a class=\"fa fa-anchor\" href=\"#section-overview\"></a></h1>\n<p>In this tutorial we will register a data contract.</p>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-prerequisites\"></div>Prerequisites<a class=\"fa fa-anchor\" href=\"#section-prerequisites\"></a></h2>\n<ul>\n<li ><a href=\"tutorials-introduction#prerequisites\">General prerequisites</a> (Node.js / Dash SDK installed)</li><li >A wallet mnemonic with some funds in it: <a href=\"tutorial-create-and-fund-a-wallet\">Tutorial: Create and Fund a Wallet</a></li><li >A Dash Platform Identity: <a href=\"tutorial-register-an-identity\">Tutorial: Register an Identity</a> </li></ul>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-code\"></div>Code<a class=\"fa fa-anchor\" href=\"#section-code\"></a></h1>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-defining-contract-documents\"></div>Defining contract documents<a class=\"fa fa-anchor\" href=\"#section-defining-contract-documents\"></a></h2>\n<p>As described in the <a href=\"explanation-platform-protocol-data-contract#structure\">data contract explanation</a>, data contracts must include one or more developer-defined <a href=\"explanation-platform-protocol-document\">documents</a>. </p>\n<p>The most basic example below (tab 1) demonstrates a data contract containing a single document type (<code>note</code>) which has a single string property (<code>message</code>). </p>\n<p>The second tab shows the same data contract with an index defined on the <code>$ownerId</code> field. This would allow querying for documents owned by a specific identity using a <a href=\"reference-query-syntax#where-clause\">where clause</a>.</p>\n<p>The third tab shows a data contract using the <a href=\"https://json-schema.org/understanding-json-schema/structuring.html#reuse\">JSON-Schema $ref feature</a> that enables reuse of defined objects. Note that the $ref keyword has been <a href=\"https://github.com/dashevo/platform/pull/300\">temporarily disabled</a> since Platform v0.22.</p>\n<p>The fourth tab shows a data contract requiring the optional <code>$createdAt</code> and <code>$updatedAt</code> <a href=\"explanation-platform-protocol-document#base-fields\">base fields</a>. Using these fields enables retrieving timestamps that indicate when a document was created or modified.</p>\n<blockquote>\n<p>\ud83d\udea7 </p>\n<p>Since Platform v0.23, an index can <a href=\"https://github.com/dashevo/platform/pull/435\">only use the ascending order</a> (<code>asc</code>). Future updates will remove this restriction.</p>\n</blockquote>\n<p>```json 1. Minimal contract<br>{<br>  &quot;note&quot;: {<br>    &quot;type&quot;: &quot;object&quot;,<br>    &quot;properties&quot;: {<br>      &quot;message&quot;: {<br>        &quot;type&quot;: &quot;string&quot;<br>      }<br>    },<br>    &quot;additionalProperties&quot;: false<br>  }<br>}</p>\n<pre><code>```json 2. Indexed\n{\n  &quot;note&quot;: {\n    &quot;type&quot;: &quot;object&quot;,\n    &quot;indices&quot;: [\n      {\n        &quot;name&quot;: &quot;ownerId&quot;,\n        &quot;properties&quot;: [{ &quot;$ownerId&quot;: &quot;asc&quot; }], &quot;unique&quot;: false }\n    ],\n    &quot;properties&quot;: {\n      &quot;message&quot;: {\n        &quot;type&quot;: &quot;string&quot;\n      }\n    },\n    &quot;additionalProperties&quot;: false\n  }\n}\n\n/*\nAn identity&#39;s documents are accessible via a query including a where clause like:\n{\n  where: [[&#39;$ownerId&#39;, &#39;==&#39;, &#39;an identity id&#39;]],\n}\n*/\n</code></pre><p><code>``json 3. References ($ref)\n// NOTE: The</code>$ref` keyword is temporarily disabled for Platform v0.22.<br>{<br>  &quot;customer&quot;: {<br>    &quot;type&quot;: &quot;object&quot;,<br>    &quot;properties&quot;: {<br>      &quot;name&quot;: { &quot;type&quot;: &quot;string&quot; },<br>      &quot;billing_address&quot;: { &quot;$ref&quot;: &quot;#/$defs/address&quot; },<br>      &quot;shipping_address&quot;: { &quot;$ref&quot;: &quot;#/$defs/address&quot; }<br>    },<br>    &quot;additionalProperties&quot;: false<br>  }<br>}</p>\n<p>/*<br>The contract document defined above is dependent on the following object<br>being added to the contract via the contracts <code>.setDefinitions</code> method:</p>\n<p>{<br>  address: {<br>    type: &quot;object&quot;,<br>    properties: {<br>      street_address: { type: &quot;string&quot; },<br>      city:           { type: &quot;string&quot; },<br>      state:          { type: &quot;string&quot; }<br>    },<br>    required: [&quot;street_address&quot;, &quot;city&quot;, &quot;state&quot;],<br>    additionalProperties: false<br>  }<br>}<br>*/</p>\n<pre><code>```json 4. Timestamps\n{\n  &quot;note&quot;: {\n    &quot;type&quot;: &quot;object&quot;,\n    &quot;properties&quot;: {\n      &quot;message&quot;: {\n        &quot;type&quot;: &quot;string&quot;\n      }\n    },\n    &quot;required&quot;: [&quot;$createdAt&quot;, &quot;$updatedAt&quot;],\n    &quot;additionalProperties&quot;: false\n  }\n}\n\n/*\nIf $createdAt and/or $updatedAt are added to the list of required properties \nfor a document, all documents of that type will store a timestamp indicating\nwhen the document was created or modified. \n\nThis information will be returned when the document is retrieved.\n*/\n</code></pre><p>```json 5. Binary data<br>{<br> &quot;block&quot;: {<br>   &quot;type&quot;: &quot;object&quot;,<br>    &quot;properties&quot;: {<br>      &quot;hash&quot;: {<br>        &quot;type&quot;: &quot;array&quot;,<br>        &quot;byteArray&quot;: true,<br>        &quot;maxItems&quot;: 64,<br>        &quot;description&quot;: &quot;Store block hashes&quot;<br>      }<br>    },<br>    &quot;additionalProperties&quot;: false<br>  }<br>}</p>\n<p>/<em><br>Setting <code>&quot;byteArray&quot;: true</code> indicates that the provided data will be an<br>array of bytes (e.g. a NodeJS Buffer).\n</em>/</p>\n<pre><code>\n&gt; \ud83d\udcd8 \n&gt; \n&gt; Please refer to the [data contract reference page](reference-data-contracts) for more comprehensive details related to contracts and documents.\n\n## Registering the data contract\n\nThe following examples demonstrate the details of creating contracts using the features [described above](#defining-contract-documents):\n\n```javascript 1. Minimal contract\nconst Dash = require(&#39;dash&#39;);\n\nconst clientOpts = {\n  network: &#39;testnet&#39;,\n  wallet: {\n    mnemonic: &#39;a Dash wallet mnemonic with funds goes here&#39;,\n    unsafeOptions: {\n      skipSynchronizationBeforeHeight: 650000, // only sync from early-2022\n    },    \n  },\n};\nconst client = new Dash.Client(clientOpts);\n\nconst registerContract = async () =&gt; {\n  const { platform } = client;\n  const identity = await platform.identities.get(&#39;an identity ID goes here&#39;);\n\n  const contractDocuments = {\n    note: {\n      type: &#39;object&#39;,\n      properties: {\n        message: {\n          type: &#39;string&#39;,\n        },\n      },\n      additionalProperties: false,\n    },\n  };\n\n  const contract = await platform.contracts.create(contractDocuments, identity);\n  console.dir({ contract: contract.toJSON() });\n\n  // Make sure contract passes validation checks\n  const validationResult = await platform.dpp.dataContract.validate(contract);\n\n  if (validationResult.isValid()) {\n    console.log(&#39;Validation passed, broadcasting contract..&#39;);\n    // Sign and submit the data contract\n    return platform.contracts.publish(contract, identity);\n  }\n  console.error(validationResult); // An array of detailed validation errors\n  throw validationResult.errors[0];\n};\n\nregisterContract()\n  .then((d) =&gt; console.log(&#39;Contract registered:\\n&#39;, d.toJSON()))\n  .catch((e) =&gt; console.error(&#39;Something went wrong:\\n&#39;, e))\n  .finally(() =&gt; client.disconnect());\n</code></pre><p>```javascript 2. Indexed<br>const Dash = require(&#39;dash&#39;);</p>\n<p>const clientOpts = {<br>  network: &#39;testnet&#39;,<br>  wallet: {<br>    mnemonic: &#39;a Dash wallet mnemonic with funds goes here&#39;,<br>    unsafeOptions: {<br>      skipSynchronizationBeforeHeight: 650000, // only sync from early-2022<br>    },<br>  },<br>};<br>const client = new Dash.Client(clientOpts);</p>\n<p>const registerContract = async () =&gt; {<br>  const { platform } = client;<br>  const identity = await platform.identities.get(&#39;an identity ID goes here&#39;);</p>\n<p>  const contractDocuments = {<br>    note: {<br>      type: &#39;object&#39;,<br>      indices: [{<br>        name: &#39;ownerId&#39;,<br>        properties: [{ $ownerId: &#39;asc&#39; }],<br>        unique: false,<br>      }],<br>      properties: {<br>        message: {<br>          type: &#39;string&#39;,<br>        },<br>      },<br>      additionalProperties: false,<br>    },<br>  };</p>\n<p>  const contract = await platform.contracts.create(contractDocuments, identity);<br>  console.dir({ contract: contract.toJSON() });</p>\n<p>  // Make sure contract passes validation checks<br>  const validationResult = await platform.dpp.dataContract.validate(contract);</p>\n<p>  if (validationResult.isValid()) {<br>    console.log(&#39;Validation passed, broadcasting contract..&#39;);<br>    // Sign and submit the data contract<br>    return platform.contracts.publish(contract, identity);<br>  }<br>  console.error(validationResult); // An array of detailed validation errors<br>  throw validationResult.errors[0];<br>};</p>\n<p>registerContract()<br>  .then((d) =&gt; console.log(&#39;Contract registered:\\n&#39;, d.toJSON()))<br>  .catch((e) =&gt; console.error(&#39;Something went wrong:\\n&#39;, e))<br>  .finally(() =&gt; client.disconnect());</p>\n<pre><code>```javascript 3. References ($ref)\n// NOTE: The `$ref` keyword is temporarily disabled for Platform v0.22.\nconst Dash = require(&#39;dash&#39;);\n\nconst clientOpts = {\n  network: &#39;testnet&#39;,\n  wallet: {\n    mnemonic: &#39;a Dash wallet mnemonic with funds goes here&#39;,\n    unsafeOptions: {\n      skipSynchronizationBeforeHeight: 650000, // only sync from early-2022\n    },\n  },\n};\nconst client = new Dash.Client(clientOpts);\n\nconst registerContract = async () =&gt; {\n  const { platform } = client;\n  const identity = await platform.identities.get(&#39;an identity ID goes here&#39;);\n\n  // Define a reusable object\n  const definitions = {\n    address: {\n      type: &#39;object&#39;,\n      properties: {\n        street_address: { type: &#39;string&#39; },\n        city: { type: &#39;string&#39; },\n        state: { type: &#39;string&#39; },\n      },\n      required: [&#39;street_address&#39;, &#39;city&#39;, &#39;state&#39;],\n      additionalProperties: false,\n    },\n  };\n\n  // Create a document with properties using a definition via $ref\n  const contractDocuments = {\n    customer: {\n      type: &#39;object&#39;,\n      properties: {\n        name: { type: &#39;string&#39; },\n        billing_address: { $ref: &#39;#/$defs/address&#39; },\n        shipping_address: { $ref: &#39;#/$defs/address&#39; },\n      },\n      additionalProperties: false,\n    },\n  };\n\n  const contract = await platform.contracts.create(contractDocuments, identity);\n\n  // Add reusable definitions referred to by &quot;$ref&quot; to contract\n  contract.setDefinitions(definitions);\n  console.dir({ contract: contract.toJSON() });\n\n  // Make sure contract passes validation checks\n  const validationResult = await platform.dpp.dataContract.validate(contract);\n\n  if (validationResult.isValid()) {\n    console.log(&#39;Validation passed, broadcasting contract..&#39;);\n    // Sign and submit the data contract\n    return platform.contracts.publish(contract, identity);\n  }\n  console.error(validationResult); // An array of detailed validation errors\n  throw validationResult.errors[0];\n};\n\nregisterContract()\n  .then((d) =&gt; console.log(&#39;Contract registered:\\n&#39;, d.toJSON()))\n  .catch((e) =&gt; console.error(&#39;Something went wrong:\\n&#39;, e))\n  .finally(() =&gt; client.disconnect());\n</code></pre><p>```javascript 4. Timestamps<br>const Dash = require(&#39;dash&#39;);</p>\n<p>const clientOpts = {<br>  network: &#39;testnet&#39;,<br>  wallet: {<br>    mnemonic: &#39;a Dash wallet mnemonic with funds goes here&#39;,<br>    unsafeOptions: {<br>      skipSynchronizationBeforeHeight: 650000, // only sync from early-2022<br>    },<br>  },<br>};<br>const client = new Dash.Client(clientOpts);</p>\n<p>const registerContract = async () =&gt; {<br>  const { platform } = client;<br>  const identity = await platform.identities.get(&#39;an identity ID goes here&#39;);</p>\n<p>  const contractDocuments = {<br>    note: {<br>      type: &#39;object&#39;,<br>      properties: {<br>        message: {<br>          type: &#39;string&#39;,<br>        },<br>      },<br>      required: [&#39;$createdAt&#39;, &#39;$updatedAt&#39;],<br>      additionalProperties: false,<br>    },<br>  };</p>\n<p>  const contract = await platform.contracts.create(contractDocuments, identity);<br>  console.dir({ contract: contract.toJSON() });</p>\n<p>  // Make sure contract passes validation checks<br>  const validationResult = await platform.dpp.dataContract.validate(contract);</p>\n<p>  if (validationResult.isValid()) {<br>    console.log(&#39;Validation passed, broadcasting contract..&#39;);<br>    // Sign and submit the data contract<br>    return platform.contracts.publish(contract, identity);<br>  }<br>  console.error(validationResult); // An array of detailed validation errors<br>  throw validationResult.errors[0];<br>};</p>\n<p>registerContract()<br>  .then((d) =&gt; console.log(&#39;Contract registered:\\n&#39;, d.toJSON()))<br>  .catch((e) =&gt; console.error(&#39;Something went wrong:\\n&#39;, e))<br>  .finally(() =&gt; client.disconnect());</p>\n<pre><code>```javascript 5. Binary data\nconst Dash = require(&#39;dash&#39;);\n\nconst clientOpts = {\n  network: &#39;testnet&#39;,\n  wallet: {\n    mnemonic: &#39;a Dash wallet mnemonic with funds goes here&#39;,\n    unsafeOptions: {\n      skipSynchronizationBeforeHeight: 650000, // only sync from early-2022\n    },\n  },\n};\nconst client = new Dash.Client(clientOpts);\n\nconst registerContract = async () =&gt; {\n  const { platform } = client;\n  const identity = await platform.identities.get(&#39;an identity ID goes here&#39;);\n\n  const contractDocuments = {\n    block: {\n      type: &#39;object&#39;,\n      properties: {\n        hash: {\n          type: &#39;array&#39;,\n          byteArray: true,\n          maxItems: 64,\n          description: &#39;Store block hashes&#39;,\n        },\n      },\n      additionalProperties: false,\n    },\n  };\n\n  const contract = await platform.contracts.create(contractDocuments, identity);\n  console.dir({ contract: contract.toJSON() }, { depth: 5 });\n\n  // Make sure contract passes validation checks\n  const validationResult = await platform.dpp.dataContract.validate(contract);\n\n  if (validationResult.isValid()) {\n    console.log(&#39;Validation passed, broadcasting contract..&#39;);\n    // Sign and submit the data contract\n    return platform.contracts.publish(contract, identity);\n  }\n  console.error(validationResult); // An array of detailed validation errors\n  throw validationResult.errors[0];\n};\n\nregisterContract()\n  .then((d) =&gt; console.log(&#39;Contract registered:\\n&#39;, d.toJSON()))\n  .catch((e) =&gt; console.error(&#39;Something went wrong:\\n&#39;, e))\n  .finally(() =&gt; client.disconnect());\n</code></pre><blockquote>\n<p>\ud83d\udc4d </p>\n<p><strong>Make a note of the returned data contract <code>$id</code> as it will be used used in subsequent tutorials throughout the documentation.</strong></p>\n</blockquote>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-whats-happening\"></div>What&#39;s Happening<a class=\"fa fa-anchor\" href=\"#section-whats-happening\"></a></h1>\n<p>After we initialize the Client, we create an object defining the documents this data contract requires (e.g. a <code>note</code> document in the example). The <code>platform.contracts.create</code> method takes two arguments: a contract definitions JSON-schema object and an identity. The contract definitions object consists of the document types being created (e.g. <code>note</code>). It defines the properties and any indices. </p>\n<p>Once the data contract has been created, we still need to submit it to DAPI. The <code>platform.contracts.publish</code> method takes a data contract and an identity parameter. Internally, it creates a State Transition containing the previously created contract, signs the state transition, and submits the signed state transition to DAPI. A response will only be returned if an error is encountered.</p>\n<blockquote>\n<p>\ud83d\udcd8 Wallet Operations</p>\n<p>The JavaScript SDK does not cache wallet information. It re-syncs the entire Core chain for some wallet operations (e.g. <code>client.getWalletAccount()</code>) which can result in wait times of  5+ minutes. </p>\n<p>A future release will add caching so that access is much faster after the initial sync. For now, the <code>skipSynchronizationBeforeHeight</code> option can be used to sync the wallet starting at a certain block height.</p>\n</blockquote>\n\n</div>"
}