{
 "pendingAlgoliaPublish": false, 
 "parentDoc": null, 
 "excerpt": "", 
 "api": {
  "url": "", 
  "params": [], 
  "method": "get", 
  "auth": "required", 
  "results": {
   "codes": [
    {
     "status": 200, 
     "code": "{}", 
     "name": "", 
     "language": "json"
    }, 
    {
     "status": 400, 
     "code": "{}", 
     "name": "", 
     "language": "json"
    }
   ]
  }
 }, 
 "updatedAt": "2020-06-10T20:45:26.058Z", 
 "id": "5e95bfa43971fb0148efeb53", 
 "sync_unique": "", 
 "isApi": false, 
 "createdAt": "2019-10-08T10:38:24.143Z", 
 "category": "5e95bfa43971fb0148efeb38", 
 "title": "Register a Data Contract", 
 "next": {
  "description": "", 
  "pages": [
   {
    "category": "Tutorials", 
    "slug": "tutorial-submit-documents", 
    "type": "doc", 
    "name": "Submit Documents", 
    "icon": "file-text-o"
   }, 
   {
    "category": "Tutorials", 
    "slug": "tutorial-retrieve-documents", 
    "type": "doc", 
    "name": "Retrieve Documents", 
    "icon": "file-text-o"
   }
  ]
 }, 
 "version": "5e95bfa43971fb0148efeb82", 
 "hidden": false, 
 "type": "basic", 
 "metadata": {
  "image": [], 
  "description": "", 
  "title": ""
 }, 
 "body": "# Overview\n\nIn this tutorial we will register a data contract.\n\nFor this tutorial you will need:\n\n- A wallet mnemonic with some funds in it: [Tutorial: Create and Fund a Wallet](tutorial-create-and-fund-a-wallet)\n- A dash platform identity: [Tutorial: Register an Identity](tutorial-register-an-identity) \n\n# Code\n\n## Defining contract documents\n\nAs described in the [data contract explanation](explanation-platform-protocol-data-contract#structure), data contracts must include one or more developer-defined [documents](explanation-platform-protocol-document). The most basic example below demonstrates registering a data contract containing a single document type (`note`) which has a single string property (`message`).\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Please refer to the [data contract reference page](reference-data-contracts) for more comprehensive details related to contracts and documents.\"\n}\n[/block]\n\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"{\\n  \\\"note\\\": {\\n    \\\"properties\\\": {\\n      \\\"message\\\": {\\n        \\\"type\\\": \\\"string\\\"\\n      }\\n    },\\n    \\\"additionalProperties\\\": false\\n  }\\n}\",\n      \"language\": \"json\",\n      \"name\": \"Data contract `note` document\"\n    }\n  ]\n}\n[/block]\n## Registering the data contract\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"const Dash = require('dash');\\n\\nconst clientOpts = {\\n  network: 'testnet',\\n  mnemonic: 'a Dash wallet mnemonic with evonet funds goes here',\\n};\\nconst client = new Dash.Client(clientOpts);\\n\\nconst registerContract = async function () {\\n  try {\\n    await client.isReady();\\n    const platform = client.platform;\\n    const identity = await platform.identities.get('an identity ID goes here');\\n    \\n    const contractDocuments = {\\n      note: {\\n        properties: {\\n          message: {\\n            type: \\\"string\\\"\\n          }\\n        },\\n        additionalProperties: false\\n      }};\\n    const contract = await platform.contracts.create(contractDocuments, identity);\\n    console.dir({contract});\\n\\n    // Make sure contract passes validation checks\\n    const validationResult = await platform.dpp.dataContract.validate(contract);\\n\\n    if (validationResult.isValid()) {\\n      console.log(\\\"validation passed, broadcasting contract..\\\");\\n      // Sign and submit the data contract\\n      await platform.contracts.broadcast(contract, identity);\\n    } else {\\n      console.error(validationResult) // An array of detailed validation errors\\n      throw validationResult.errors[0];\\n    }\\n    \\n  } catch (e) {\\n    console.error('Something went wrong:', e);\\n  } finally {\\n    client.disconnect();\\n  }\\n}\\n\\nregisterContract();\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\n# What's Happening\n\nAfter we initialize the Client, we create an object defining the documents this data contract requires (e.g. a `note` document in the example). The `platform.contracts.create` method takes two arguments: a contract definitions JSON-schema object and an identity. The contract definitions object consists of the document types being created (e.g. `note`). It defines the properties and any indices. \n\nOnce the data contract has been created, we still need to submit it to DAPI. The `platform.contracts.broadcast` method takes a data contract and an identity parameter. Internally, it creates a State Transition containing the previously created contract, signs the state transition, and submits the signed state transition to DAPI. A response will only be returned if an error is encountered,", 
 "link_external": false, 
 "body_html": "<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-overview\"></div>Overview<a class=\"fa fa-anchor\" href=\"#section-overview\"></a></h1>\n<p>In this tutorial we will register a data contract.</p>\n<p>For this tutorial you will need:</p>\n<ul>\n<li >A wallet mnemonic with some funds in it: <a href=\"tutorial-create-and-fund-a-wallet\">Tutorial: Create and Fund a Wallet</a></li><li >A dash platform identity: <a href=\"tutorial-register-an-identity\">Tutorial: Register an Identity</a> </li></ul>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-code\"></div>Code<a class=\"fa fa-anchor\" href=\"#section-code\"></a></h1>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-defining-contract-documents\"></div>Defining contract documents<a class=\"fa fa-anchor\" href=\"#section-defining-contract-documents\"></a></h2>\n<p>As described in the <a href=\"explanation-platform-protocol-data-contract#structure\">data contract explanation</a>, data contracts must include one or more developer-defined <a href=\"explanation-platform-protocol-document\">documents</a>. The most basic example below demonstrates registering a data contract containing a single document type (<code>note</code>) which has a single string property (<code>message</code>).</p>\n\n</div>\n<div class=\"magic-block-callout type-info no-title\"><span class=\"noTitleIcon\"><i title=\"Info\" class=\"fa fa-info-circle\"></i></span>\n\t<div class=\"callout-body\"><p>Please refer to the <a href=\"reference-data-contracts\">data contract reference page</a> for more comprehensive details related to contracts and documents.</p>\n\n\t</div>\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">Data contract `note` document</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(336)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-336\">{\n  &quot;note&quot;: {\n    &quot;properties&quot;: {\n      &quot;message&quot;: {\n        &quot;type&quot;: &quot;string&quot;\n      }\n    },\n    &quot;additionalProperties&quot;: false\n  }\n}</textarea>\n\t\t\t<pre id=\"code-336\"><code><span class='cm-s-neo'>{\n  <span class=\"cm-property\">\"note\"</span>: {\n    <span class=\"cm-property\">\"properties\"</span>: {\n      <span class=\"cm-property\">\"message\"</span>: {\n        <span class=\"cm-property\">\"type\"</span>: <span class=\"cm-string\">\"string\"</span>\n      }\n    },\n    <span class=\"cm-property\">\"additionalProperties\"</span>: <span class=\"cm-atom\">false</span>\n  }\n}</span></code></pre></span>\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-registering-the-data-contract\"></div>Registering the data contract<a class=\"fa fa-anchor\" href=\"#section-registering-the-data-contract\"></a></h2>\n\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">JavaScript</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(354)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-354\">const Dash = require('dash');\n\nconst clientOpts = {\n  network: 'testnet',\n  mnemonic: 'a Dash wallet mnemonic with evonet funds goes here',\n};\nconst client = new Dash.Client(clientOpts);\n\nconst registerContract = async function () {\n  try {\n    await client.isReady();\n    const platform = client.platform;\n    const identity = await platform.identities.get('an identity ID goes here');\n    \n    const contractDocuments = {\n      note: {\n        properties: {\n          message: {\n            type: &quot;string&quot;\n          }\n        },\n        additionalProperties: false\n      &#125;&#125;</span>;\n    const contract = await platform.contracts.create(contractDocuments, identity);\n    console.dir({contract});\n\n    // Make sure contract passes validation checks\n    const validationResult = await platform.dpp.dataContract.validate(contract);\n\n    if (validationResult.isValid()) {\n      console.log(&quot;validation passed, broadcasting contract..&quot;);\n      // Sign and submit the data contract\n      await platform.contracts.broadcast(contract, identity);\n    } else {\n      console.error(validationResult) // An array of detailed validation errors\n      throw validationResult.errors[0];\n    }\n    \n  } catch (e) {\n    console.error('Something went wrong:', e);\n  } finally {\n    client.disconnect();\n  }\n}\n\nregisterContract();</textarea>\n\t\t\t<pre id=\"code-354\"><code><span class='cm-s-neo'><span class=\"cm-keyword\">const</span> <span class=\"cm-def\">Dash</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">require</span>(<span class=\"cm-string\">'dash'</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">clientOpts</span> <span class=\"cm-operator\">=</span> {\n  <span class=\"cm-property\">network</span>: <span class=\"cm-string\">'testnet'</span>,\n  <span class=\"cm-property\">mnemonic</span>: <span class=\"cm-string\">'a Dash wallet mnemonic with evonet funds goes here'</span>,\n};\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">client</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">new</span> <span class=\"cm-variable\">Dash</span>.<span class=\"cm-property\">Client</span>(<span class=\"cm-variable\">clientOpts</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">registerContract</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">async</span> <span class=\"cm-keyword\">function</span> () {\n  <span class=\"cm-keyword\">try</span> {\n    <span class=\"cm-keyword\">await</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">isReady</span>();\n    <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">platform</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">platform</span>;\n    <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">identity</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">identities</span>.<span class=\"cm-property\">get</span>(<span class=\"cm-string\">'an identity ID goes here'</span>);\n    \n    <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">contractDocuments</span> <span class=\"cm-operator\">=</span> {\n      <span class=\"cm-property\">note</span>: {\n        <span class=\"cm-property\">properties</span>: {\n          <span class=\"cm-property\">message</span>: {\n            <span class=\"cm-property\">type</span>: <span class=\"cm-string\">\"string\"</span>\n          }\n        },\n        <span class=\"cm-property\">additionalProperties</span>: <span class=\"cm-atom\">false</span>\n      &#125;<span></span>&#125;;\n    <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">contract</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">contracts</span>.<span class=\"cm-property\">create</span>(<span class=\"cm-variable-2\">contractDocuments</span>, <span class=\"cm-variable-2\">identity</span>);\n    <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">dir</span>({<span class=\"cm-property\">contract</span>});\n\n    <span class=\"cm-comment\">&#47;&#47; Make sure contract passes validation checks</span>\n    <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">validationResult</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">dpp</span>.<span class=\"cm-property\">dataContract</span>.<span class=\"cm-property\">validate</span>(<span class=\"cm-variable-2\">contract</span>);\n\n    <span class=\"cm-keyword\">if</span> (<span class=\"cm-variable-2\">validationResult</span>.<span class=\"cm-property\">isValid</span>()) {\n      <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-string\">\"validation passed, broadcasting contract..\"</span>);\n      <span class=\"cm-comment\">&#47;&#47; Sign and submit the data contract</span>\n      <span class=\"cm-keyword\">await</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">contracts</span>.<span class=\"cm-property\">broadcast</span>(<span class=\"cm-variable-2\">contract</span>, <span class=\"cm-variable-2\">identity</span>);\n    } <span class=\"cm-keyword\">else</span> {\n      <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">error</span>(<span class=\"cm-variable-2\">validationResult</span>) <span class=\"cm-comment\">&#47;&#47; An array of detailed validation errors</span>\n      <span class=\"cm-keyword\">throw</span> <span class=\"cm-variable-2\">validationResult</span>.<span class=\"cm-property\">errors</span>[<span class=\"cm-number\">0</span>];\n    }\n    \n  } <span class=\"cm-keyword\">catch</span> (<span class=\"cm-def\">e</span>) {\n    <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">error</span>(<span class=\"cm-string\">'Something went wrong:'</span>, <span class=\"cm-variable-2\">e</span>);\n  } <span class=\"cm-keyword\">finally</span> {\n    <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">disconnect</span>();\n  }\n}\n\n<span class=\"cm-variable\">registerContract</span>();</span></code></pre></span>\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-whats-happening\"></div>What&#39;s Happening<a class=\"fa fa-anchor\" href=\"#section-whats-happening\"></a></h1>\n<p>After we initialize the Client, we create an object defining the documents this data contract requires (e.g. a <code>note</code> document in the example). The <code>platform.contracts.create</code> method takes two arguments: a contract definitions JSON-schema object and an identity. The contract definitions object consists of the document types being created (e.g. <code>note</code>). It defines the properties and any indices. </p>\n<p>Once the data contract has been created, we still need to submit it to DAPI. The <code>platform.contracts.broadcast</code> method takes a data contract and an identity parameter. Internally, it creates a State Transition containing the previously created contract, signs the state transition, and submits the signed state transition to DAPI. A response will only be returned if an error is encountered,</p>\n\n</div>", 
 "user": "5b8400d7185d5e00036dcc3b", 
 "isReference": false, 
 "slug": "tutorial-register-a-data-contract", 
 "link_url": "", 
 "project": "5bda01cad172e200499a20a9", 
 "__v": 2, 
 "_id": "5e95bfa43971fb0148efeb53", 
 "order": 6, 
 "updates": [
  "5edb8c4b0bbf62023e1dc2be"
 ]
}