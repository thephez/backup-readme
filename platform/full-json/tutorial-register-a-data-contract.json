{
 "metadata": {
  "image": [],
  "title": "",
  "description": "",
  "keywords": "",
  "robots": "index"
 },
 "api": {
  "method": "get",
  "url": "",
  "auth": "required",
  "results": {
   "codes": [
    {
     "status": 200,
     "language": "json",
     "code": "{}",
     "name": ""
    },
    {
     "status": 400,
     "language": "json",
     "code": "{}",
     "name": ""
    }
   ]
  },
  "params": [],
  "examples": {
   "codes": []
  }
 },
 "next": {
  "description": "",
  "pages": [
   {
    "type": "doc",
    "icon": "file-text-o",
    "name": "Retrieve a Data Contract",
    "slug": "tutorial-retrieve-a-data-contract",
    "category": "Tutorials"
   },
   {
    "type": "doc",
    "icon": "file-text-o",
    "name": "Submit Documents",
    "slug": "tutorial-submit-documents",
    "category": "Tutorials"
   },
   {
    "type": "doc",
    "icon": "file-text-o",
    "name": "Retrieve Documents",
    "slug": "tutorial-retrieve-documents",
    "category": "Tutorials"
   }
  ]
 },
 "algolia": {
  "recordCount": 6,
  "publishPending": false,
  "translationFailure": false,
  "updatedAt": "2023-09-12T12:36:20.603Z"
 },
 "title": "Register a Data Contract",
 "icon": "",
 "updates": [
  "5f404d06a48063029194d6e5",
  "643818d8106d6c076be8883d"
 ],
 "type": "basic",
 "slug": "tutorial-register-a-data-contract",
 "excerpt": "Create a data contract on Dash Platform",
 "body": "# Overview\n\nIn this tutorial we will register a data contract.\n\n## Prerequisites\n\n- [General prerequisites](tutorials-introduction#prerequisites) (Node.js / Dash SDK installed)\n- A wallet mnemonic with some funds in it: [Tutorial: Create and Fund a Wallet](tutorial-create-and-fund-a-wallet)\n- A Dash Platform Identity: [Tutorial: Register an Identity](tutorial-register-an-identity) \n\n# Code\n\n## Defining contract documents\n\nAs described in the [data contract explanation](explanation-platform-protocol-data-contract#structure), data contracts must include one or more developer-defined [documents](explanation-platform-protocol-document). \n\nThe most basic example below (tab 1) demonstrates a data contract containing a single document type (`note`) which has a single string property (`message`). \n\nThe second tab shows the same data contract with an index defined on the `$ownerId` field. This would allow querying for documents owned by a specific identity using a [where clause](reference-query-syntax#where-clause).\n\nThe third tab shows a data contract using the [JSON-Schema $ref feature](https://json-schema.org/understanding-json-schema/structuring.html#reuse) that enables reuse of defined objects. Note that the $ref keyword has been [temporarily disabled](https://github.com/dashevo/platform/pull/300) since Platform v0.22.\n\nThe fourth tab shows a data contract requiring the optional `$createdAt` and `$updatedAt` [base fields](explanation-platform-protocol-document#base-fields). Using these fields enables retrieving timestamps that indicate when a document was created or modified.\n\n> \ud83d\udea7 \n> \n> Since Platform v0.23, an index can [only use the ascending order](https://github.com/dashevo/platform/pull/435) (`asc`). Future updates will remove this restriction.\n\n```json 1. Minimal contract\n{\n  \"note\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"message\": {\n        \"type\": \"string\"\n      }\n    },\n    \"additionalProperties\": false\n  }\n}\n```\n```json 2. Indexed\n{\n  \"note\": {\n    \"type\": \"object\",\n    \"indices\": [\n      {\n        \"name\": \"ownerId\",\n        \"properties\": [{ \"$ownerId\": \"asc\" }], \"unique\": false }\n    ],\n    \"properties\": {\n      \"message\": {\n        \"type\": \"string\"\n      }\n    },\n    \"additionalProperties\": false\n  }\n}\n\n/*\nAn identity's documents are accessible via a query including a where clause like:\n{\n  where: [['$ownerId', '==', 'an identity id']],\n}\n*/\n```\n```json 3. References ($ref)\n// NOTE: The `$ref` keyword is temporarily disabled for Platform v0.22.\n{\n  \"customer\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"name\": { \"type\": \"string\" },\n      \"billing_address\": { \"$ref\": \"#/$defs/address\" },\n      \"shipping_address\": { \"$ref\": \"#/$defs/address\" }\n    },\n    \"additionalProperties\": false\n  }\n}\n\n/*\nThe contract document defined above is dependent on the following object \nbeing added to the contract via the contracts `.setDefinitions` method:\n\n{\n  address: {\n    type: \"object\",\n    properties: {\n      street_address: { type: \"string\" },\n      city:           { type: \"string\" },\n      state:          { type: \"string\" }\n    },\n    required: [\"street_address\", \"city\", \"state\"],\n    additionalProperties: false\n  }\n}\n*/\n```\n```json 4. Timestamps\n{\n  \"note\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"message\": {\n        \"type\": \"string\"\n      }\n    },\n    \"required\": [\"$createdAt\", \"$updatedAt\"],\n    \"additionalProperties\": false\n  }\n}\n\n/*\nIf $createdAt and/or $updatedAt are added to the list of required properties \nfor a document, all documents of that type will store a timestamp indicating\nwhen the document was created or modified. \n\nThis information will be returned when the document is retrieved.\n*/\n```\n```json 5. Binary data\n{\n \"block\": {\n   \"type\": \"object\",\n    \"properties\": {\n      \"hash\": {\n        \"type\": \"array\",\n        \"byteArray\": true,\n        \"maxItems\": 64,\n        \"description\": \"Store block hashes\"\n      }\n    },\n    \"additionalProperties\": false\n  }\n}\n \n/*\nSetting `\"byteArray\": true` indicates that the provided data will be an \narray of bytes (e.g. a NodeJS Buffer).\n*/\n```\n\n> \ud83d\udcd8 \n> \n> Please refer to the [data contract reference page](reference-data-contracts) for more comprehensive details related to contracts and documents.\n\n## Registering the data contract\n\nThe following examples demonstrate the details of creating contracts using the features [described above](#defining-contract-documents):\n\n```javascript 1. Minimal contract\nconst Dash = require('dash');\n\nconst clientOpts = {\n  network: 'testnet',\n  wallet: {\n    mnemonic: 'a Dash wallet mnemonic with funds goes here',\n    unsafeOptions: {\n      skipSynchronizationBeforeHeight: 650000, // only sync from early-2022\n    },\n  },\n};\nconst client = new Dash.Client(clientOpts);\n\nconst registerContract = async () => {\n  const { platform } = client;\n  const identity = await platform.identities.get('an identity ID goes here');\n\n  const contractDocuments = {\n    note: {\n      type: 'object',\n      indices: [{\n        name: 'ownerId',\n        properties: [{ $ownerId: 'asc' }],\n        unique: false,\n      }],\n      properties: {\n        message: {\n          type: 'string',\n        },\n      },\n      additionalProperties: false,\n    },\n  };\n\n  const contract = await platform.contracts.create(contractDocuments, identity);\n  console.dir({ contract: contract.toJSON() });\n\n  // Sign and submit the data contract\n  await platform.contracts.publish(contract, identity);\n  return contract;\n};\n\nregisterContract()\n  .then((d) => console.log('Contract registered:\\n', d.toJSON()))\n  .catch((e) => console.error('Something went wrong:\\n', e))\n  .finally(() => client.disconnect());\n```\n```javascript 2. Indexed\nconst Dash = require('dash');\n\nconst clientOpts = {\n  network: 'testnet',\n  wallet: {\n    mnemonic: 'a Dash wallet mnemonic with funds goes here',\n    unsafeOptions: {\n      skipSynchronizationBeforeHeight: 650000, // only sync from early-2022\n    },\n  },\n};\nconst client = new Dash.Client(clientOpts);\n\nconst registerContract = async () => {\n  const { platform } = client;\n  const identity = await platform.identities.get('an identity ID goes here');\n\n  const contractDocuments = {\n    note: {\n      type: 'object',\n      indices: [{\n        name: 'ownerId',\n        properties: [{ $ownerId: 'asc' }],\n        unique: false,\n      }],\n      properties: {\n        message: {\n          type: 'string',\n        },\n      },\n      additionalProperties: false,\n    },\n  };\n\n  const contract = await platform.contracts.create(contractDocuments, identity);\n  console.dir({ contract: contract.toJSON() });\n\n  // Sign and submit the data contract\n  await platform.contracts.publish(contract, identity);\n  return contract;\n};\n\nregisterContract()\n  .then((d) => console.log('Contract registered:\\n', d.toJSON()))\n  .catch((e) => console.error('Something went wrong:\\n', e))\n  .finally(() => client.disconnect());\n```\n```javascript 3. References ($ref)\n// NOTE: The `$ref` keyword is temporarily disabled for Platform v0.22.\nconst Dash = require('dash');\n\nconst clientOpts = {\n  network: 'testnet',\n  wallet: {\n    mnemonic: 'a Dash wallet mnemonic with funds goes here',\n    unsafeOptions: {\n      skipSynchronizationBeforeHeight: 650000, // only sync from early-2022\n    },\n  },\n};\nconst client = new Dash.Client(clientOpts);\n\nconst registerContract = async () => {\n  const { platform } = client;\n  const identity = await platform.identities.get('an identity ID goes here');\n\n  // Define a reusable object\n  const definitions = {\n    address: {\n      type: 'object',\n      properties: {\n        street_address: { type: 'string' },\n        city: { type: 'string' },\n        state: { type: 'string' },\n      },\n      required: ['street_address', 'city', 'state'],\n      additionalProperties: false,\n    },\n  };\n\n  // Create a document with properties using a definition via $ref\n  const contractDocuments = {\n    customer: {\n      type: 'object',\n      properties: {\n        name: { type: 'string' },\n        billing_address: { $ref: '#/$defs/address' },\n        shipping_address: { $ref: '#/$defs/address' },\n      },\n      additionalProperties: false,\n    },\n  };\n  \n  const contract = await platform.contracts.create(contractDocuments, identity);\n\n  // Add reusable definitions referred to by \"$ref\" to contract\n  contract.setDefinitions(definitions);\n  console.dir({ contract: contract.toJSON() });\n\n  // Sign and submit the data contract\n  await platform.contracts.publish(contract, identity);\n  return contract;\n};\n\nregisterContract()\n  .then((d) => console.log('Contract registered:\\n', d.toJSON()))\n  .catch((e) => console.error('Something went wrong:\\n', e))\n  .finally(() => client.disconnect());\n```\n```javascript 4. Timestamps\nconst Dash = require('dash');\n\nconst clientOpts = {\n  network: 'testnet',\n  wallet: {\n    mnemonic: 'a Dash wallet mnemonic with funds goes here',\n    unsafeOptions: {\n      skipSynchronizationBeforeHeight: 650000, // only sync from early-2022\n    },\n  },\n};\nconst client = new Dash.Client(clientOpts);\n\nconst registerContract = async () => {\n  const { platform } = client;\n  const identity = await platform.identities.get('an identity ID goes here');\n\n  const contractDocuments = {\n    note: {\n      type: 'object',\n      properties: {\n        message: {\n          type: 'string',\n        },\n      },\n      required: ['$createdAt', '$updatedAt'],\n      additionalProperties: false,\n    },\n  };\n\n  const contract = await platform.contracts.create(contractDocuments, identity);\n  console.dir({ contract: contract.toJSON() });\n\n  // Sign and submit the data contract\n  await platform.contracts.publish(contract, identity);\n  return contract;\n};\n\nregisterContract()\n  .then((d) => console.log('Contract registered:\\n', d.toJSON()))\n  .catch((e) => console.error('Something went wrong:\\n', e))\n  .finally(() => client.disconnect());\n```\n```javascript 5. Binary data\nconst Dash = require('dash');\n\nconst clientOpts = {\n  network: 'testnet',\n  wallet: {\n    mnemonic: 'a Dash wallet mnemonic with funds goes here',\n    unsafeOptions: {\n      skipSynchronizationBeforeHeight: 650000, // only sync from early-2022\n    },\n  },\n};\nconst client = new Dash.Client(clientOpts);\n\nconst registerContract = async () => {\n  const { platform } = client;\n  const identity = await platform.identities.get('an identity ID goes here');\n\n  const contractDocuments = {\n    block: {\n      type: 'object',\n      properties: {\n        hash: {\n          type: 'array',\n          byteArray: true,\n          maxItems: 64,\n          description: 'Store block hashes',\n        },\n      },\n      additionalProperties: false,\n    },\n  };\n\n  const contract = await platform.contracts.create(contractDocuments, identity);\n  console.dir({ contract: contract.toJSON() }, { depth: 5 });\n\n  // Sign and submit the data contract\n  await platform.contracts.publish(contract, identity);\n  return contract;\n};\n\nregisterContract()\n  .then((d) => console.log('Contract registered:\\n', d.toJSON()))\n  .catch((e) => console.error('Something went wrong:\\n', e))\n  .finally(() => client.disconnect());\n```\n\n> \ud83d\udc4d \n> \n> **Make a note of the returned data contract `id` as it will be used used in subsequent tutorials throughout the documentation.**\n\n# What's Happening\n\nAfter we initialize the Client, we create an object defining the documents this data contract requires (e.g. a `note` document in the example). The `platform.contracts.create` method takes two arguments: a contract definitions JSON-schema object and an identity. The contract definitions object consists of the document types being created (e.g. `note`). It defines the properties and any indices. \n\nOnce the data contract has been created, we still need to submit it to DAPI. The `platform.contracts.publish` method takes a data contract and an identity parameter. Internally, it creates a State Transition containing the previously created contract, signs the state transition, and submits the signed state transition to DAPI. A response will only be returned if an error is encountered.\n\n> \ud83d\udcd8 Wallet Operations\n> \n> The JavaScript SDK does not cache wallet information. It re-syncs the entire Core chain for some wallet operations (e.g. `client.getWalletAccount()`) which can result in wait times of  5+ minutes. \n> \n> A future release will add caching so that access is much faster after the initial sync. For now, the `skipSynchronizationBeforeHeight` option can be used to sync the wallet starting at a certain block height.",
 "order": 0,
 "isReference": false,
 "deprecated": false,
 "hidden": false,
 "sync_unique": "",
 "link_url": "",
 "link_external": false,
 "reusableContent": [],
 "previousSlug": "",
 "slugUpdatedAt": "2020-07-09T01:08:17.922Z",
 "revision": 12,
 "_id": "64f8a9df750465004742ad8f",
 "version": "64f8a9df750465004742ae1d",
 "updatedAt": "2023-09-12T12:36:20.257Z",
 "createdAt": "2019-10-08T10:38:24.143Z",
 "project": "5bda01cad172e200499a20a9",
 "user": "5b8400d7185d5e00036dcc3b",
 "category": "64f8a9df750465004742ad6e",
 "__v": 4,
 "parentDoc": "64f8a9df750465004742adc8",
 "pendingAlgoliaPublish": false,
 "isApi": false,
 "id": "64f8a9df750465004742ad8f",
 "body_html": "# Overview\n\nIn this tutorial we will register a data contract.\n\n## Prerequisites\n\n- [General prerequisites](tutorials-introduction#prerequisites) (Node.js / Dash SDK installed)\n- A wallet mnemonic with some funds in it: [Tutorial: Create and Fund a Wallet](tutorial-create-and-fund-a-wallet)\n- A Dash Platform Identity: [Tutorial: Register an Identity](tutorial-register-an-identity) \n\n# Code\n\n## Defining contract documents\n\nAs described in the [data contract explanation](explanation-platform-protocol-data-contract#structure), data contracts must include one or more developer-defined [documents](explanation-platform-protocol-document). \n\nThe most basic example below (tab 1) demonstrates a data contract containing a single document type (`note`) which has a single string property (`message`). \n\nThe second tab shows the same data contract with an index defined on the `$ownerId` field. This would allow querying for documents owned by a specific identity using a [where clause](reference-query-syntax#where-clause).\n\nThe third tab shows a data contract using the [JSON-Schema $ref feature](https://json-schema.org/understanding-json-schema/structuring.html#reuse) that enables reuse of defined objects. Note that the $ref keyword has been [temporarily disabled](https://github.com/dashevo/platform/pull/300) since Platform v0.22.\n\nThe fourth tab shows a data contract requiring the optional `$createdAt` and `$updatedAt` [base fields](explanation-platform-protocol-document#base-fields). Using these fields enables retrieving timestamps that indicate when a document was created or modified.\n\n> \ud83d\udea7 \n> \n> Since Platform v0.23, an index can [only use the ascending order](https://github.com/dashevo/platform/pull/435) (`asc`). Future updates will remove this restriction.\n\n```json 1. Minimal contract\n{\n  \"note\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"message\": {\n        \"type\": \"string\"\n      }\n    },\n    \"additionalProperties\": false\n  }\n}\n```\n```json 2. Indexed\n{\n  \"note\": {\n    \"type\": \"object\",\n    \"indices\": [\n      {\n        \"name\": \"ownerId\",\n        \"properties\": [{ \"$ownerId\": \"asc\" }], \"unique\": false }\n    ],\n    \"properties\": {\n      \"message\": {\n        \"type\": \"string\"\n      }\n    },\n    \"additionalProperties\": false\n  }\n}\n\n/*\nAn identity's documents are accessible via a query including a where clause like:\n{\n  where: [['$ownerId', '==', 'an identity id']],\n}\n*/\n```\n```json 3. References ($ref)\n// NOTE: The `$ref` keyword is temporarily disabled for Platform v0.22.\n{\n  \"customer\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"name\": { \"type\": \"string\" },\n      \"billing_address\": { \"$ref\": \"#/$defs/address\" },\n      \"shipping_address\": { \"$ref\": \"#/$defs/address\" }\n    },\n    \"additionalProperties\": false\n  }\n}\n\n/*\nThe contract document defined above is dependent on the following object \nbeing added to the contract via the contracts `.setDefinitions` method:\n\n{\n  address: {\n    type: \"object\",\n    properties: {\n      street_address: { type: \"string\" },\n      city:           { type: \"string\" },\n      state:          { type: \"string\" }\n    },\n    required: [\"street_address\", \"city\", \"state\"],\n    additionalProperties: false\n  }\n}\n*/\n```\n```json 4. Timestamps\n{\n  \"note\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"message\": {\n        \"type\": \"string\"\n      }\n    },\n    \"required\": [\"$createdAt\", \"$updatedAt\"],\n    \"additionalProperties\": false\n  }\n}\n\n/*\nIf $createdAt and/or $updatedAt are added to the list of required properties \nfor a document, all documents of that type will store a timestamp indicating\nwhen the document was created or modified. \n\nThis information will be returned when the document is retrieved.\n*/\n```\n```json 5. Binary data\n{\n \"block\": {\n   \"type\": \"object\",\n    \"properties\": {\n      \"hash\": {\n        \"type\": \"array\",\n        \"byteArray\": true,\n        \"maxItems\": 64,\n        \"description\": \"Store block hashes\"\n      }\n    },\n    \"additionalProperties\": false\n  }\n}\n \n/*\nSetting `\"byteArray\": true` indicates that the provided data will be an \narray of bytes (e.g. a NodeJS Buffer).\n*/\n```\n\n> \ud83d\udcd8 \n> \n> Please refer to the [data contract reference page](reference-data-contracts) for more comprehensive details related to contracts and documents.\n\n## Registering the data contract\n\nThe following examples demonstrate the details of creating contracts using the features [described above](#defining-contract-documents):\n\n```javascript 1. Minimal contract\nconst Dash = require('dash');\n\nconst clientOpts = {\n  network: 'testnet',\n  wallet: {\n    mnemonic: 'a Dash wallet mnemonic with funds goes here',\n    unsafeOptions: {\n      skipSynchronizationBeforeHeight: 650000, // only sync from early-2022\n    },\n  },\n};\nconst client = new Dash.Client(clientOpts);\n\nconst registerContract = async () => {\n  const { platform } = client;\n  const identity = await platform.identities.get('an identity ID goes here');\n\n  const contractDocuments = {\n    note: {\n      type: 'object',\n      indices: [{\n        name: 'ownerId',\n        properties: [{ $ownerId: 'asc' }],\n        unique: false,\n      }],\n      properties: {\n        message: {\n          type: 'string',\n        },\n      },\n      additionalProperties: false,\n    },\n  };\n\n  const contract = await platform.contracts.create(contractDocuments, identity);\n  console.dir({ contract: contract.toJSON() });\n\n  // Sign and submit the data contract\n  await platform.contracts.publish(contract, identity);\n  return contract;\n};\n\nregisterContract()\n  .then((d) => console.log('Contract registered:\\n', d.toJSON()))\n  .catch((e) => console.error('Something went wrong:\\n', e))\n  .finally(() => client.disconnect());\n```\n```javascript 2. Indexed\nconst Dash = require('dash');\n\nconst clientOpts = {\n  network: 'testnet',\n  wallet: {\n    mnemonic: 'a Dash wallet mnemonic with funds goes here',\n    unsafeOptions: {\n      skipSynchronizationBeforeHeight: 650000, // only sync from early-2022\n    },\n  },\n};\nconst client = new Dash.Client(clientOpts);\n\nconst registerContract = async () => {\n  const { platform } = client;\n  const identity = await platform.identities.get('an identity ID goes here');\n\n  const contractDocuments = {\n    note: {\n      type: 'object',\n      indices: [{\n        name: 'ownerId',\n        properties: [{ $ownerId: 'asc' }],\n        unique: false,\n      }],\n      properties: {\n        message: {\n          type: 'string',\n        },\n      },\n      additionalProperties: false,\n    },\n  };\n\n  const contract = await platform.contracts.create(contractDocuments, identity);\n  console.dir({ contract: contract.toJSON() });\n\n  // Sign and submit the data contract\n  await platform.contracts.publish(contract, identity);\n  return contract;\n};\n\nregisterContract()\n  .then((d) => console.log('Contract registered:\\n', d.toJSON()))\n  .catch((e) => console.error('Something went wrong:\\n', e))\n  .finally(() => client.disconnect());\n```\n```javascript 3. References ($ref)\n// NOTE: The `$ref` keyword is temporarily disabled for Platform v0.22.\nconst Dash = require('dash');\n\nconst clientOpts = {\n  network: 'testnet',\n  wallet: {\n    mnemonic: 'a Dash wallet mnemonic with funds goes here',\n    unsafeOptions: {\n      skipSynchronizationBeforeHeight: 650000, // only sync from early-2022\n    },\n  },\n};\nconst client = new Dash.Client(clientOpts);\n\nconst registerContract = async () => {\n  const { platform } = client;\n  const identity = await platform.identities.get('an identity ID goes here');\n\n  // Define a reusable object\n  const definitions = {\n    address: {\n      type: 'object',\n      properties: {\n        street_address: { type: 'string' },\n        city: { type: 'string' },\n        state: { type: 'string' },\n      },\n      required: ['street_address', 'city', 'state'],\n      additionalProperties: false,\n    },\n  };\n\n  // Create a document with properties using a definition via $ref\n  const contractDocuments = {\n    customer: {\n      type: 'object',\n      properties: {\n        name: { type: 'string' },\n        billing_address: { $ref: '#/$defs/address' },\n        shipping_address: { $ref: '#/$defs/address' },\n      },\n      additionalProperties: false,\n    },\n  };\n  \n  const contract = await platform.contracts.create(contractDocuments, identity);\n\n  // Add reusable definitions referred to by \"$ref\" to contract\n  contract.setDefinitions(definitions);\n  console.dir({ contract: contract.toJSON() });\n\n  // Sign and submit the data contract\n  await platform.contracts.publish(contract, identity);\n  return contract;\n};\n\nregisterContract()\n  .then((d) => console.log('Contract registered:\\n', d.toJSON()))\n  .catch((e) => console.error('Something went wrong:\\n', e))\n  .finally(() => client.disconnect());\n```\n```javascript 4. Timestamps\nconst Dash = require('dash');\n\nconst clientOpts = {\n  network: 'testnet',\n  wallet: {\n    mnemonic: 'a Dash wallet mnemonic with funds goes here',\n    unsafeOptions: {\n      skipSynchronizationBeforeHeight: 650000, // only sync from early-2022\n    },\n  },\n};\nconst client = new Dash.Client(clientOpts);\n\nconst registerContract = async () => {\n  const { platform } = client;\n  const identity = await platform.identities.get('an identity ID goes here');\n\n  const contractDocuments = {\n    note: {\n      type: 'object',\n      properties: {\n        message: {\n          type: 'string',\n        },\n      },\n      required: ['$createdAt', '$updatedAt'],\n      additionalProperties: false,\n    },\n  };\n\n  const contract = await platform.contracts.create(contractDocuments, identity);\n  console.dir({ contract: contract.toJSON() });\n\n  // Sign and submit the data contract\n  await platform.contracts.publish(contract, identity);\n  return contract;\n};\n\nregisterContract()\n  .then((d) => console.log('Contract registered:\\n', d.toJSON()))\n  .catch((e) => console.error('Something went wrong:\\n', e))\n  .finally(() => client.disconnect());\n```\n```javascript 5. Binary data\nconst Dash = require('dash');\n\nconst clientOpts = {\n  network: 'testnet',\n  wallet: {\n    mnemonic: 'a Dash wallet mnemonic with funds goes here',\n    unsafeOptions: {\n      skipSynchronizationBeforeHeight: 650000, // only sync from early-2022\n    },\n  },\n};\nconst client = new Dash.Client(clientOpts);\n\nconst registerContract = async () => {\n  const { platform } = client;\n  const identity = await platform.identities.get('an identity ID goes here');\n\n  const contractDocuments = {\n    block: {\n      type: 'object',\n      properties: {\n        hash: {\n          type: 'array',\n          byteArray: true,\n          maxItems: 64,\n          description: 'Store block hashes',\n        },\n      },\n      additionalProperties: false,\n    },\n  };\n\n  const contract = await platform.contracts.create(contractDocuments, identity);\n  console.dir({ contract: contract.toJSON() }, { depth: 5 });\n\n  // Sign and submit the data contract\n  await platform.contracts.publish(contract, identity);\n  return contract;\n};\n\nregisterContract()\n  .then((d) => console.log('Contract registered:\\n', d.toJSON()))\n  .catch((e) => console.error('Something went wrong:\\n', e))\n  .finally(() => client.disconnect());\n```\n\n> \ud83d\udc4d \n> \n> **Make a note of the returned data contract `id` as it will be used used in subsequent tutorials throughout the documentation.**\n\n# What's Happening\n\nAfter we initialize the Client, we create an object defining the documents this data contract requires (e.g. a `note` document in the example). The `platform.contracts.create` method takes two arguments: a contract definitions JSON-schema object and an identity. The contract definitions object consists of the document types being created (e.g. `note`). It defines the properties and any indices. \n\nOnce the data contract has been created, we still need to submit it to DAPI. The `platform.contracts.publish` method takes a data contract and an identity parameter. Internally, it creates a State Transition containing the previously created contract, signs the state transition, and submits the signed state transition to DAPI. A response will only be returned if an error is encountered.\n\n> \ud83d\udcd8 Wallet Operations\n> \n> The JavaScript SDK does not cache wallet information. It re-syncs the entire Core chain for some wallet operations (e.g. `client.getWalletAccount()`) which can result in wait times of  5+ minutes. \n> \n> A future release will add caching so that access is much faster after the initial sync. For now, the `skipSynchronizationBeforeHeight` option can be used to sync the wallet starting at a certain block height."
}