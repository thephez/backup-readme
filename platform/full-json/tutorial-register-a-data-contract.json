{
 "metadata": {
  "image": [],
  "title": "",
  "description": ""
 },
 "api": {
  "method": "get",
  "url": "",
  "auth": "required",
  "results": {
   "codes": [
    {
     "status": 200,
     "language": "json",
     "code": "{}",
     "name": ""
    },
    {
     "status": 400,
     "language": "json",
     "code": "{}",
     "name": ""
    }
   ]
  },
  "params": []
 },
 "next": {
  "description": "",
  "pages": [
   {
    "type": "doc",
    "icon": "file-text-o",
    "name": "Retrieve a Data Contract",
    "slug": "tutorial-retrieve-a-data-contract",
    "category": "Tutorials"
   },
   {
    "type": "doc",
    "icon": "file-text-o",
    "name": "Submit Documents",
    "slug": "tutorial-submit-documents",
    "category": "Tutorials"
   },
   {
    "type": "doc",
    "icon": "file-text-o",
    "name": "Retrieve Documents",
    "slug": "tutorial-retrieve-documents",
    "category": "Tutorials"
   }
  ]
 },
 "title": "Register a Data Contract",
 "icon": "",
 "updates": [
  "5f404d06a48063029194d6e5"
 ],
 "type": "basic",
 "slug": "tutorial-register-a-data-contract",
 "excerpt": "Create a data contract on Dash Platform",
 "body": "# Overview\n\nIn this tutorial we will register a data contract.\n\n## Prerequisites\n- [General prerequisites](tutorials-introduction#prerequisites) (Node.js / Dash SDK installed)\n- A wallet mnemonic with some funds in it: [Tutorial: Create and Fund a Wallet](tutorial-create-and-fund-a-wallet)\n- A Dash Platform Identity: [Tutorial: Register an Identity](tutorial-register-an-identity) \n\n# Code\n\n## Defining contract documents\n\nAs described in the [data contract explanation](explanation-platform-protocol-data-contract#structure), data contracts must include one or more developer-defined [documents](explanation-platform-protocol-document). \n\nThe most basic example below (tab 1) demonstrates a data contract containing a single document type (`note`) which has a single string property (`message`). \n\nThe second tab shows the same data contract with an index defined on the `$ownerId` field. This would allow querying for documents owned by a specific identity using a [where clause](reference-query-syntax#where-clause).\n\n> \ud83d\udea7\n>\n> Since Platform v0.23, an index can [only use the ascending order](https://github.com/dashevo/platform/pull/435) (`asc`). Future updates will remove this restriction.\n\nThe third tab shows a data contract using the [JSON-Schema $ref feature](https://json-schema.org/understanding-json-schema/structuring.html#reuse) that enables reuse of defined objects.\n\n> \ud83d\udea7\n>\n> The `$ref` keyword has been [temporarily disabled](https://github.com/dashevo/platform/pull/300) since Platform v0.22.\n\nThe fourth tab shows a data contract requiring the optional `$createdAt` and `$updatedAt` [base fields](explanation-platform-protocol-document#base-fields). Using these fields enables retrieving timestamps that indicate when a document was created or modified.\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"{\\n  \\\"note\\\": {\\n    \\\"type\\\": \\\"object\\\",\\n    \\\"properties\\\": {\\n      \\\"message\\\": {\\n        \\\"type\\\": \\\"string\\\"\\n      }\\n    },\\n    \\\"additionalProperties\\\": false\\n  }\\n}\",\n      \"language\": \"json\",\n      \"name\": \"1. Minimal contract\"\n    },\n    {\n      \"code\": \"{\\n  \\\"note\\\": {\\n    \\\"type\\\": \\\"object\\\",\\n    \\\"indices\\\": [\\n      {\\n        \\\"name\\\": \\\"ownerId\\\",\\n        \\\"properties\\\": [{ \\\"$ownerId\\\": \\\"asc\\\" }], \\\"unique\\\": false }\\n    ],\\n    \\\"properties\\\": {\\n      \\\"message\\\": {\\n        \\\"type\\\": \\\"string\\\"\\n      }\\n    },\\n    \\\"additionalProperties\\\": false\\n  }\\n}\\n\\n/*\\nAn identity's documents are accessible via a query including a where clause like:\\n{\\n  where: [['$ownerId', '==', 'an identity id']],\\n}\\n*/\\n\",\n      \"language\": \"json\",\n      \"name\": \"2. Indexed\"\n    },\n    {\n      \"code\": \"// NOTE: The `$ref` keyword is temporarily disabled for Platform v0.22.\\n{\\n  customer: {\\n    type: \\\"object\\\",\\n    properties: {\\n      name: { type: \\\"string\\\" },\\n      billing_address: { $ref: \\\"#/$defs/address\\\" },\\n      shipping_address: { $ref: \\\"#/$defs/address\\\" }\\n    },\\n    additionalProperties: false\\n  },\\n}\\n\\n/*\\nThe contract document defined above is dependent on the following object \\nbeing added to the contract via the contracts `.setDefinitions` method:\\n\\n{\\n  address: {\\n    type: \\\"object\\\",\\n    properties: {\\n      street_address: { type: \\\"string\\\" },\\n      city:           { type: \\\"string\\\" },\\n      state:          { type: \\\"string\\\" }\\n    },\\n    required: [\\\"street_address\\\", \\\"city\\\", \\\"state\\\"],\\n    additionalProperties: false\\n  }\\n}\\n*/\",\n      \"language\": \"json\",\n      \"name\": \"3. References ($ref)\"\n    },\n    {\n      \"code\": \"{\\n  \\\"note\\\": {\\n    \\\"type\\\": \\\"object\\\",\\n    \\\"properties\\\": {\\n      \\\"message\\\": {\\n        \\\"type\\\": \\\"string\\\"\\n      }\\n    },\\n    \\\"required\\\": [\\\"$createdAt\\\", \\\"$updatedAt\\\"],\\n    \\\"additionalProperties\\\": false\\n  }\\n}\\n\\n/*\\nIf $createdAt and/or $updatedAt are added to the list of required properties \\nfor a document, all documents of that type will store a timestamp indicating\\nwhen the document was created or modified. \\n\\nThis information will be returned when the document is retrieved.\\n*/\",\n      \"language\": \"json\",\n      \"name\": \"4. Timestamps\"\n    },\n    {\n      \"code\": \"{\\n \\\"block\\\": {\\n   \\\"type\\\": \\\"object\\\",\\n    \\\"properties\\\": {\\n      \\\"hash\\\": {\\n        \\\"type\\\": 'array',\\n        \\\"byteArray\\\": true,\\n        \\\"maxItems\\\": 64,\\n        \\\"description\\\": 'Store block hashes',\\n      },\\n    },\\n    \\\"additionalProperties\\\": false,\\n  },\\n}\\n \\n/*\\nSetting `\\\"byteArray\\\": true` indicates that the provided data will be an \\narray of bytes (e.g. a NodeJS Buffer).\\n*/\",\n      \"language\": \"json\",\n      \"name\": \"5. Binary data\"\n    }\n  ]\n}\n[/block]\n> \ud83d\udcd8\n>\n> Please refer to the [data contract reference page](reference-data-contracts) for more comprehensive details related to contracts and documents.\n\n## Registering the data contract\n\nThe following examples demonstrate the details of creating contracts using the features [described above](#defining-contract-documents):\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"const Dash = require('dash');\\n\\nconst clientOpts = {\\n  network: 'testnet',\\n  wallet: {\\n    mnemonic: 'a Dash wallet mnemonic with funds goes here',\\n    unsafeOptions: {\\n      skipSynchronizationBeforeHeight: 650000, // only sync from early-2022\\n    },    \\n  },\\n};\\nconst client = new Dash.Client(clientOpts);\\n\\nconst registerContract = async () => {\\n  const { platform } = client;\\n  const identity = await platform.identities.get('an identity ID goes here');\\n\\n  const contractDocuments = {\\n    note: {\\n      type: 'object',\\n      properties: {\\n        message: {\\n          type: 'string',\\n        },\\n      },\\n      additionalProperties: false,\\n    },\\n  };\\n\\n  const contract = await platform.contracts.create(contractDocuments, identity);\\n  console.dir({ contract });\\n\\n  // Make sure contract passes validation checks\\n  await platform.dpp.initialize();\\n  const validationResult = await platform.dpp.dataContract.validate(contract);\\n\\n  if (validationResult.isValid()) {\\n    console.log('Validation passed, broadcasting contract..');\\n    // Sign and submit the data contract\\n    return platform.contracts.publish(contract, identity);\\n  }\\n  console.error(validationResult); // An array of detailed validation errors\\n  throw validationResult.errors[0];\\n};\\n\\nregisterContract()\\n  .then((d) => console.log('Contract registered:\\\\n', d.toJSON()))\\n  .catch((e) => console.error('Something went wrong:\\\\n', e))\\n  .finally(() => client.disconnect());\",\n      \"language\": \"javascript\",\n      \"name\": \"Minimal\"\n    },\n    {\n      \"code\": \"const Dash = require('dash');\\n\\nconst clientOpts = {\\n  network: 'testnet',\\n  wallet: {\\n    mnemonic: 'a Dash wallet mnemonic with funds goes here',\\n    unsafeOptions: {\\n      skipSynchronizationBeforeHeight: 650000, // only sync from early-2022\\n    },\\n  },\\n};\\nconst client = new Dash.Client(clientOpts);\\n\\nconst registerContract = async () => {\\n  const { platform } = client;\\n  const identity = await platform.identities.get('an identity ID goes here');\\n\\n  const contractDocuments = {\\n    note: {\\n      type: 'object',\\n      indices: [\\n        name: \\\"ownerId\\\",\\n        { properties: [{ $ownerId: 'asc' }], unique: false },\\n      ],\\n      properties: {\\n        message: {\\n          type: 'string',\\n        },\\n      },\\n      additionalProperties: false,\\n    },\\n  };\\n\\n  const contract = await platform.contracts.create(contractDocuments, identity);\\n  console.dir({ contract });\\n\\n  // Make sure contract passes validation checks\\n  await platform.dpp.initialize();\\n  const validationResult = await platform.dpp.dataContract.validate(contract);\\n\\n  if (validationResult.isValid()) {\\n    console.log('Validation passed, broadcasting contract..');\\n    // Sign and submit the data contract\\n    return platform.contracts.publish(contract, identity);\\n  }\\n  console.error(validationResult); // An array of detailed validation errors\\n  throw validationResult.errors[0];\\n};\\n\\nregisterContract()\\n  .then((d) => console.log('Contract registered:\\\\n', d.toJSON()))\\n  .catch((e) => console.error('Something went wrong:\\\\n', e))\\n  .finally(() => client.disconnect());\",\n      \"language\": \"javascript\",\n      \"name\": \"Indexed\"\n    },\n    {\n      \"code\": \"// NOTE: The `$ref` keyword is temporarily disabled for Platform v0.22.\\nconst Dash = require('dash');\\n\\nconst clientOpts = {\\n  network: 'testnet',\\n  wallet: {\\n    mnemonic: 'a Dash wallet mnemonic with funds goes here',\\n    unsafeOptions: {\\n      skipSynchronizationBeforeHeight: 650000, // only sync from early-2022\\n    },\\n  },\\n};\\nconst client = new Dash.Client(clientOpts);\\n\\nconst registerContract = async () => {\\n  const { platform } = client;\\n  const identity = await platform.identities.get('an identity ID goes here');\\n\\n  // Define a reusable object\\n  const definitions = {\\n    address: {\\n      type: 'object',\\n      properties: {\\n        street_address: { type: 'string' },\\n        city: { type: 'string' },\\n        state: { type: 'string' },\\n      },\\n      required: ['street_address', 'city', 'state'],\\n      additionalProperties: false,\\n    },\\n  };\\n\\n  // Create a document with properties using a definition via $ref\\n  const contractDocuments = {\\n    customer: {\\n      type: 'object',\\n      properties: {\\n        name: { type: 'string' },\\n        billing_address: { $ref: '#/$defs/address' },\\n        shipping_address: { $ref: '#/$defs/address' },\\n      },\\n      additionalProperties: false,\\n    },\\n  };\\n  \\n  const contract = await platform.contracts.create(contractDocuments, identity);\\n\\n  // Add reusable definitions referred to by \\\"$ref\\\" to contract\\n  contract.setDefinitions(definitions);\\n  console.dir({ contract });\\n\\n  // Make sure contract passes validation checks\\n  await platform.dpp.initialize();\\n  const validationResult = await platform.dpp.dataContract.validate(contract);\\n\\n  if (validationResult.isValid()) {\\n    console.log('Validation passed, broadcasting contract..');\\n    // Sign and submit the data contract\\n    return platform.contracts.publish(contract, identity);\\n  }\\n  console.error(validationResult); // An array of detailed validation errors\\n  throw validationResult.errors[0];\\n};\\n\\nregisterContract()\\n  .then((d) => console.log('Contract registered:\\\\n', d.toJSON()))\\n  .catch((e) => console.error('Something went wrong:\\\\n', e))\\n  .finally(() => client.disconnect());\",\n      \"language\": \"javascript\",\n      \"name\": \"References ($ref)\"\n    },\n    {\n      \"code\": \"const Dash = require('dash');\\n\\nconst clientOpts = {\\n  network: 'testnet',\\n  wallet: {\\n    mnemonic: 'a Dash wallet mnemonic with funds goes here',\\n    unsafeOptions: {\\n      skipSynchronizationBeforeHeight: 650000, // only sync from early-2022\\n    },\\n  },\\n};\\nconst client = new Dash.Client(clientOpts);\\n\\nconst registerContract = async () => {\\n  const { platform } = client;\\n  const identity = await platform.identities.get('an identity ID goes here');\\n\\n  const contractDocuments = {\\n    note: {\\n      type: 'object',\\n      properties: {\\n        message: {\\n          type: 'string',\\n        },\\n      },\\n      required: ['$createdAt', '$updatedAt'],\\n      additionalProperties: false,\\n    },\\n  };\\n\\n  const contract = await platform.contracts.create(contractDocuments, identity);\\n  console.dir({ contract });\\n\\n  // Make sure contract passes validation checks\\n  await platform.dpp.initialize();\\n  const validationResult = await platform.dpp.dataContract.validate(contract);\\n\\n  if (validationResult.isValid()) {\\n    console.log('Validation passed, broadcasting contract..');\\n    // Sign and submit the data contract\\n    return platform.contracts.publish(contract, identity);\\n  }\\n  console.error(validationResult); // An array of detailed validation errors\\n  throw validationResult.errors[0];\\n};\\n\\nregisterContract()\\n  .then((d) => console.log('Contract registered:\\\\n', d.toJSON()))\\n  .catch((e) => console.error('Something went wrong:\\\\n', e))\\n  .finally(() => client.disconnect());\",\n      \"language\": \"javascript\",\n      \"name\": \"Timestamps\"\n    },\n    {\n      \"code\": \"const Dash = require('dash');\\n\\nconst clientOpts = {\\n  network: 'testnet',\\n  wallet: {\\n    mnemonic: 'a Dash wallet mnemonic with funds goes here',\\n    unsafeOptions: {\\n      skipSynchronizationBeforeHeight: 650000, // only sync from early-2022\\n    },\\n  },\\n};\\nconst client = new Dash.Client(clientOpts);\\n\\nconst registerContract = async () => {\\n  const { platform } = client;\\n  const identity = await platform.identities.get('an identity ID goes here');\\n\\n  const contractDocuments = {\\n    block: {\\n      type: 'object',\\n      properties: {\\n        hash: {\\n          type: 'array',\\n          byteArray: true,\\n          maxItems: 64,\\n          description: 'Store block hashes',\\n        },\\n      },\\n      additionalProperties: false,\\n    },\\n  };\\n\\n  const contract = await platform.contracts.create(contractDocuments, identity);\\n  console.dir({ contract }, { depth: 5 });\\n\\n  // Make sure contract passes validation checks\\n  await platform.dpp.initialize();\\n  const validationResult = await platform.dpp.dataContract.validate(contract);\\n\\n  if (validationResult.isValid()) {\\n    console.log('Validation passed, broadcasting contract..');\\n    // Sign and submit the data contract\\n    return platform.contracts.publish(contract, identity);\\n  }\\n  console.error(validationResult); // An array of detailed validation errors\\n  throw validationResult.errors[0];\\n};\\n\\nregisterContract()\\n  .then((d) => console.log('Contract registered:\\\\n', d.toJSON()))\\n  .catch((e) => console.error('Something went wrong:\\\\n', e))\\n  .finally(() => client.disconnect());\",\n      \"language\": \"javascript\",\n      \"name\": \"Binary data\"\n    }\n  ]\n}\n[/block]\n> \ud83d\udc4d\n>\n> **Make a note of the returned data contract `$id` as it will be used used in subsequent tutorials throughout the documentation.**\n\n# What's Happening\n\nAfter we initialize the Client, we create an object defining the documents this data contract requires (e.g. a `note` document in the example). The `platform.contracts.create` method takes two arguments: a contract definitions JSON-schema object and an identity. The contract definitions object consists of the document types being created (e.g. `note`). It defines the properties and any indices. \n\nOnce the data contract has been created, we still need to submit it to DAPI. The `platform.contracts.publish` method takes a data contract and an identity parameter. Internally, it creates a State Transition containing the previously created contract, signs the state transition, and submits the signed state transition to DAPI. A response will only be returned if an error is encountered.\n\n> \ud83d\udcd8Wallet Operations\n>\n> The JavaScript SDK does not cache wallet information. It re-syncs the entire Core chain for some wallet operations (e.g. `client.getWalletAccount()`) which can result in wait times of  5+ minutes. \n>\n> A future release will add caching so that access is much faster after the initial sync. For now, the `skipSynchronizationBeforeHeight` option can be used to sync the wallet starting at a certain block height.",
 "order": 0,
 "isReference": false,
 "deprecated": false,
 "hidden": false,
 "sync_unique": "",
 "link_url": "",
 "link_external": false,
 "pendingAlgoliaPublish": false,
 "previousSlug": "",
 "slugUpdatedAt": "2020-07-09T01:08:17.922Z",
 "revision": 2,
 "_id": "62b226d1fcc32e002300c528",
 "version": "62b226d1fcc32e002300c574",
 "updatedAt": "2022-10-12T16:48:13.245Z",
 "createdAt": "2019-10-08T10:38:24.143Z",
 "project": "5bda01cad172e200499a20a9",
 "user": "5b8400d7185d5e00036dcc3b",
 "category": "62b226d1fcc32e002300c509",
 "__v": 3,
 "parentDoc": "62b226d1fcc32e002300c562",
 "isApi": false,
 "id": "62b226d1fcc32e002300c528",
 "body_html": "<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-overview\"></div>Overview<a class=\"fa fa-anchor\" href=\"#section-overview\"></a></h1>\n<p>In this tutorial we will register a data contract.</p>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-prerequisites\"></div>Prerequisites<a class=\"fa fa-anchor\" href=\"#section-prerequisites\"></a></h2>\n<ul>\n<li ><a href=\"tutorials-introduction#prerequisites\">General prerequisites</a> (Node.js / Dash SDK installed)</li><li >A wallet mnemonic with some funds in it: <a href=\"tutorial-create-and-fund-a-wallet\">Tutorial: Create and Fund a Wallet</a></li><li >A Dash Platform Identity: <a href=\"tutorial-register-an-identity\">Tutorial: Register an Identity</a> </li></ul>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-code\"></div>Code<a class=\"fa fa-anchor\" href=\"#section-code\"></a></h1>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-defining-contract-documents\"></div>Defining contract documents<a class=\"fa fa-anchor\" href=\"#section-defining-contract-documents\"></a></h2>\n<p>As described in the <a href=\"explanation-platform-protocol-data-contract#structure\">data contract explanation</a>, data contracts must include one or more developer-defined <a href=\"explanation-platform-protocol-document\">documents</a>. </p>\n<p>The most basic example below (tab 1) demonstrates a data contract containing a single document type (<code>note</code>) which has a single string property (<code>message</code>). </p>\n<p>The second tab shows the same data contract with an index defined on the <code>$ownerId</code> field. This would allow querying for documents owned by a specific identity using a <a href=\"reference-query-syntax#where-clause\">where clause</a>.</p>\n<blockquote>\n<p>\ud83d\udea7</p>\n<p>Since Platform v0.23, an index can <a href=\"https://github.com/dashevo/platform/pull/435\">only use the ascending order</a> (<code>asc</code>). Future updates will remove this restriction.</p>\n</blockquote>\n<p>The third tab shows a data contract using the <a href=\"https://json-schema.org/understanding-json-schema/structuring.html#reuse\">JSON-Schema $ref feature</a> that enables reuse of defined objects.</p>\n<blockquote>\n<p>\ud83d\udea7</p>\n<p>The <code>$ref</code> keyword has been <a href=\"https://github.com/dashevo/platform/pull/300\">temporarily disabled</a> since Platform v0.22.</p>\n</blockquote>\n<p>The fourth tab shows a data contract requiring the optional <code>$createdAt</code> and <code>$updatedAt</code> <a href=\"explanation-platform-protocol-document#base-fields\">base fields</a>. Using these fields enables retrieving timestamps that indicate when a document was created or modified.</p>\n\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">1. Minimal contract</a></li>\n\t\t<li><a href=\"\" ng-click=\"showCode(1)\" ng-class=\"{active: (1 == tab)}\">2. Indexed</a></li>\n\t\t<li><a href=\"\" ng-click=\"showCode(2)\" ng-class=\"{active: (2 == tab)}\">3. References ($ref)</a></li>\n\t\t<li><a href=\"\" ng-click=\"showCode(3)\" ng-class=\"{active: (3 == tab)}\">4. Timestamps</a></li>\n\t\t<li><a href=\"\" ng-click=\"showCode(4)\" ng-class=\"{active: (4 == tab)}\">5. Binary data</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(930)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-930\">{\n  &quot;note&quot;: {\n    &quot;type&quot;: &quot;object&quot;,\n    &quot;properties&quot;: {\n      &quot;message&quot;: {\n        &quot;type&quot;: &quot;string&quot;\n      }\n    },\n    &quot;additionalProperties&quot;: false\n  }\n}</textarea>\n\t\t\t<pre id=\"code-930\"><code><span class='cm-s-neo'>{\n  <span class=\"cm-property\">\"note\"</span>: {\n    <span class=\"cm-property\">\"type\"</span>: <span class=\"cm-string\">\"object\"</span>,\n    <span class=\"cm-property\">\"properties\"</span>: {\n      <span class=\"cm-property\">\"message\"</span>: {\n        <span class=\"cm-property\">\"type\"</span>: <span class=\"cm-string\">\"string\"</span>\n      }\n    },\n    <span class=\"cm-property\">\"additionalProperties\"</span>: <span class=\"cm-atom\">false</span>\n  }\n}</span></code></pre></span><span ng-if=\"tab == 1\">\n\t\t\t<button ng-click=\"copyCode(462)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-462\">{\n  &quot;note&quot;: {\n    &quot;type&quot;: &quot;object&quot;,\n    &quot;indices&quot;: [\n      {\n        &quot;name&quot;: &quot;ownerId&quot;,\n        &quot;properties&quot;: [{ &quot;$ownerId&quot;: &quot;asc&quot; }], &quot;unique&quot;: false }\n    ],\n    &quot;properties&quot;: {\n      &quot;message&quot;: {\n        &quot;type&quot;: &quot;string&quot;\n      }\n    },\n    &quot;additionalProperties&quot;: false\n  }\n}\n\n/*\nAn identity's documents are accessible via a query including a where clause like:\n{\n  where: [['$ownerId', '==', 'an identity id']],\n}\n*/\n</textarea>\n\t\t\t<pre id=\"code-462\"><code><span class='cm-s-neo'>{\n  <span class=\"cm-property\">\"note\"</span>: {\n    <span class=\"cm-property\">\"type\"</span>: <span class=\"cm-string\">\"object\"</span>,\n    <span class=\"cm-property\">\"indices\"</span>: [\n      {\n        <span class=\"cm-property\">\"name\"</span>: <span class=\"cm-string\">\"ownerId\"</span>,\n        <span class=\"cm-property\">\"properties\"</span>: [{ <span class=\"cm-property\">\"$ownerId\"</span>: <span class=\"cm-string\">\"asc\"</span> }], <span class=\"cm-property\">\"unique\"</span>: <span class=\"cm-atom\">false</span> }\n    ],\n    <span class=\"cm-property\">\"properties\"</span>: {\n      <span class=\"cm-property\">\"message\"</span>: {\n        <span class=\"cm-property\">\"type\"</span>: <span class=\"cm-string\">\"string\"</span>\n      }\n    },\n    <span class=\"cm-property\">\"additionalProperties\"</span>: <span class=\"cm-atom\">false</span>\n  }\n}\n\n<span class=\"cm-comment\">&#47;*</span>\n<span class=\"cm-comment\">An identity's documents are accessible via a query including a where clause like:</span>\n<span class=\"cm-comment\">{</span>\n<span class=\"cm-comment\">  where: [['$ownerId', '==', 'an identity id']],</span>\n<span class=\"cm-comment\">}</span>\n<span class=\"cm-comment\">*&#47;</span>\n</span></code></pre></span><span ng-if=\"tab == 2\">\n\t\t\t<button ng-click=\"copyCode(38)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-38\">// NOTE: The `$ref` keyword is temporarily disabled for Platform v0.22.\n{\n  customer: {\n    type: &quot;object&quot;,\n    properties: {\n      name: { type: &quot;string&quot; },\n      billing_address: { $ref: &quot;#/$defs/address&quot; },\n      shipping_address: { $ref: &quot;#/$defs/address&quot; }\n    },\n    additionalProperties: false\n  },\n}\n\n/*\nThe contract document defined above is dependent on the following object \nbeing added to the contract via the contracts `.setDefinitions` method:\n\n{\n  address: {\n    type: &quot;object&quot;,\n    properties: {\n      street_address: { type: &quot;string&quot; },\n      city:           { type: &quot;string&quot; },\n      state:          { type: &quot;string&quot; }\n    },\n    required: [&quot;street_address&quot;, &quot;city&quot;, &quot;state&quot;],\n    additionalProperties: false\n  }\n}\n*/</textarea>\n\t\t\t<pre id=\"code-38\"><code><span class='cm-s-neo'><span class=\"cm-comment\">&#47;&#47; NOTE: The `$ref` keyword is temporarily disabled for Platform v0.22.</span>\n{\n  <span class=\"cm-property\">customer</span>: {\n    <span class=\"cm-property\">type</span>: <span class=\"cm-string\">\"object\"</span>,\n    <span class=\"cm-property\">properties</span>: {\n      <span class=\"cm-property\">name</span>: { <span class=\"cm-property\">type</span>: <span class=\"cm-string\">\"string\"</span> },\n      <span class=\"cm-property\">billing_address</span>: { <span class=\"cm-property\">$ref</span>: <span class=\"cm-string\">\"#&#47;$defs&#47;address\"</span> },\n      <span class=\"cm-property\">shipping_address</span>: { <span class=\"cm-property\">$ref</span>: <span class=\"cm-string\">\"#&#47;$defs&#47;address\"</span> }\n    },\n    <span class=\"cm-property\">additionalProperties</span>: <span class=\"cm-atom\">false</span>\n  },\n}\n\n<span class=\"cm-comment\">&#47;*</span>\n<span class=\"cm-comment\">The contract document defined above is dependent on the following object </span>\n<span class=\"cm-comment\">being added to the contract via the contracts `.setDefinitions` method:</span>\n\n<span class=\"cm-comment\">{</span>\n<span class=\"cm-comment\">  address: {</span>\n<span class=\"cm-comment\">    type: \"object\",</span>\n<span class=\"cm-comment\">    properties: {</span>\n<span class=\"cm-comment\">      street_address: { type: \"string\" },</span>\n<span class=\"cm-comment\">      city:           { type: \"string\" },</span>\n<span class=\"cm-comment\">      state:          { type: \"string\" }</span>\n<span class=\"cm-comment\">    },</span>\n<span class=\"cm-comment\">    required: [\"street_address\", \"city\", \"state\"],</span>\n<span class=\"cm-comment\">    additionalProperties: false</span>\n<span class=\"cm-comment\">  }</span>\n<span class=\"cm-comment\">}</span>\n<span class=\"cm-comment\">*&#47;</span></span></code></pre></span><span ng-if=\"tab == 3\">\n\t\t\t<button ng-click=\"copyCode(951)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-951\">{\n  &quot;note&quot;: {\n    &quot;type&quot;: &quot;object&quot;,\n    &quot;properties&quot;: {\n      &quot;message&quot;: {\n        &quot;type&quot;: &quot;string&quot;\n      }\n    },\n    &quot;required&quot;: [&quot;$createdAt&quot;, &quot;$updatedAt&quot;],\n    &quot;additionalProperties&quot;: false\n  }\n}\n\n/*\nIf $createdAt and/or $updatedAt are added to the list of required properties \nfor a document, all documents of that type will store a timestamp indicating\nwhen the document was created or modified. \n\nThis information will be returned when the document is retrieved.\n*/</textarea>\n\t\t\t<pre id=\"code-951\"><code><span class='cm-s-neo'>{\n  <span class=\"cm-property\">\"note\"</span>: {\n    <span class=\"cm-property\">\"type\"</span>: <span class=\"cm-string\">\"object\"</span>,\n    <span class=\"cm-property\">\"properties\"</span>: {\n      <span class=\"cm-property\">\"message\"</span>: {\n        <span class=\"cm-property\">\"type\"</span>: <span class=\"cm-string\">\"string\"</span>\n      }\n    },\n    <span class=\"cm-property\">\"required\"</span>: [<span class=\"cm-string\">\"$createdAt\"</span>, <span class=\"cm-string\">\"$updatedAt\"</span>],\n    <span class=\"cm-property\">\"additionalProperties\"</span>: <span class=\"cm-atom\">false</span>\n  }\n}\n\n<span class=\"cm-comment\">&#47;*</span>\n<span class=\"cm-comment\">If $createdAt and&#47;or $updatedAt are added to the list of required properties </span>\n<span class=\"cm-comment\">for a document, all documents of that type will store a timestamp indicating</span>\n<span class=\"cm-comment\">when the document was created or modified. </span>\n\n<span class=\"cm-comment\">This information will be returned when the document is retrieved.</span>\n<span class=\"cm-comment\">*&#47;</span></span></code></pre></span><span ng-if=\"tab == 4\">\n\t\t\t<button ng-click=\"copyCode(624)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-624\">{\n &quot;block&quot;: {\n   &quot;type&quot;: &quot;object&quot;,\n    &quot;properties&quot;: {\n      &quot;hash&quot;: {\n        &quot;type&quot;: 'array',\n        &quot;byteArray&quot;: true,\n        &quot;maxItems&quot;: 64,\n        &quot;description&quot;: 'Store block hashes',\n      },\n    },\n    &quot;additionalProperties&quot;: false,\n  },\n}\n \n/*\nSetting `&quot;byteArray&quot;: true` indicates that the provided data will be an \narray of bytes (e.g. a NodeJS Buffer).\n*/</textarea>\n\t\t\t<pre id=\"code-624\"><code><span class='cm-s-neo'>{\n <span class=\"cm-property\">\"block\"</span>: {\n   <span class=\"cm-property\">\"type\"</span>: <span class=\"cm-string\">\"object\"</span>,\n    <span class=\"cm-property\">\"properties\"</span>: {\n      <span class=\"cm-property\">\"hash\"</span>: {\n        <span class=\"cm-property\">\"type\"</span>: <span class=\"cm-string\">'array'</span>,\n        <span class=\"cm-property\">\"byteArray\"</span>: <span class=\"cm-atom\">true</span>,\n        <span class=\"cm-property\">\"maxItems\"</span>: <span class=\"cm-number\">64</span>,\n        <span class=\"cm-property\">\"description\"</span>: <span class=\"cm-string\">'Store block hashes'</span>,\n      },\n    },\n    <span class=\"cm-property\">\"additionalProperties\"</span>: <span class=\"cm-atom\">false</span>,\n  },\n}\n \n<span class=\"cm-comment\">&#47;*</span>\n<span class=\"cm-comment\">Setting `\"byteArray\": true` indicates that the provided data will be an </span>\n<span class=\"cm-comment\">array of bytes (e.g. a NodeJS Buffer).</span>\n<span class=\"cm-comment\">*&#47;</span></span></code></pre></span>\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><blockquote>\n<p>\ud83d\udcd8</p>\n<p>Please refer to the <a href=\"reference-data-contracts\">data contract reference page</a> for more comprehensive details related to contracts and documents.</p>\n</blockquote>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-registering-the-data-contract\"></div>Registering the data contract<a class=\"fa fa-anchor\" href=\"#section-registering-the-data-contract\"></a></h2>\n<p>The following examples demonstrate the details of creating contracts using the features <a href=\"#defining-contract-documents\">described above</a>:</p>\n\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">Minimal</a></li>\n\t\t<li><a href=\"\" ng-click=\"showCode(1)\" ng-class=\"{active: (1 == tab)}\">Indexed</a></li>\n\t\t<li><a href=\"\" ng-click=\"showCode(2)\" ng-class=\"{active: (2 == tab)}\">References ($ref)</a></li>\n\t\t<li><a href=\"\" ng-click=\"showCode(3)\" ng-class=\"{active: (3 == tab)}\">Timestamps</a></li>\n\t\t<li><a href=\"\" ng-click=\"showCode(4)\" ng-class=\"{active: (4 == tab)}\">Binary data</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(354)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-354\">const Dash = require('dash');\n\nconst clientOpts = {\n  network: 'testnet',\n  wallet: {\n    mnemonic: 'a Dash wallet mnemonic with funds goes here',\n    unsafeOptions: {\n      skipSynchronizationBeforeHeight: 650000, // only sync from early-2022\n    },    \n  },\n};\nconst client = new Dash.Client(clientOpts);\n\nconst registerContract = async () =&gt; {\n  const { platform } = client;\n  const identity = await platform.identities.get('an identity ID goes here');\n\n  const contractDocuments = {\n    note: {\n      type: 'object',\n      properties: {\n        message: {\n          type: 'string',\n        },\n      },\n      additionalProperties: false,\n    },\n  };\n\n  const contract = await platform.contracts.create(contractDocuments, identity);\n  console.dir({ contract });\n\n  // Make sure contract passes validation checks\n  await platform.dpp.initialize();\n  const validationResult = await platform.dpp.dataContract.validate(contract);\n\n  if (validationResult.isValid()) {\n    console.log('Validation passed, broadcasting contract..');\n    // Sign and submit the data contract\n    return platform.contracts.publish(contract, identity);\n  }\n  console.error(validationResult); // An array of detailed validation errors\n  throw validationResult.errors[0];\n};\n\nregisterContract()\n  .then((d) =&gt; console.log('Contract registered:\\n', d.toJSON()))\n  .catch((e) =&gt; console.error('Something went wrong:\\n', e))\n  .finally(() =&gt; client.disconnect());</textarea>\n\t\t\t<pre id=\"code-354\"><code><span class='cm-s-neo'><span class=\"cm-keyword\">const</span> <span class=\"cm-def\">Dash</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">require</span>(<span class=\"cm-string\">'dash'</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">clientOpts</span> <span class=\"cm-operator\">=</span> {\n  <span class=\"cm-property\">network</span>: <span class=\"cm-string\">'testnet'</span>,\n  <span class=\"cm-property\">wallet</span>: {\n    <span class=\"cm-property\">mnemonic</span>: <span class=\"cm-string\">'a Dash wallet mnemonic with funds goes here'</span>,\n    <span class=\"cm-property\">unsafeOptions</span>: {\n      <span class=\"cm-property\">skipSynchronizationBeforeHeight</span>: <span class=\"cm-number\">650000</span>, <span class=\"cm-comment\">&#47;&#47; only sync from early-2022</span>\n    },    \n  },\n};\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">client</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">new</span> <span class=\"cm-variable\">Dash</span>.<span class=\"cm-property\">Client</span>(<span class=\"cm-variable\">clientOpts</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">registerContract</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">async</span> () <span class=\"cm-operator\">=&gt;</span> {\n  <span class=\"cm-keyword\">const</span> { <span class=\"cm-def\">platform</span> } <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">client</span>;\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">identity</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">identities</span>.<span class=\"cm-property\">get</span>(<span class=\"cm-string\">'an identity ID goes here'</span>);\n\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">contractDocuments</span> <span class=\"cm-operator\">=</span> {\n    <span class=\"cm-property\">note</span>: {\n      <span class=\"cm-property\">type</span>: <span class=\"cm-string\">'object'</span>,\n      <span class=\"cm-property\">properties</span>: {\n        <span class=\"cm-property\">message</span>: {\n          <span class=\"cm-property\">type</span>: <span class=\"cm-string\">'string'</span>,\n        },\n      },\n      <span class=\"cm-property\">additionalProperties</span>: <span class=\"cm-atom\">false</span>,\n    },\n  };\n\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">contract</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">contracts</span>.<span class=\"cm-property\">create</span>(<span class=\"cm-variable-2\">contractDocuments</span>, <span class=\"cm-variable-2\">identity</span>);\n  <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">dir</span>({ <span class=\"cm-property\">contract</span> });\n\n  <span class=\"cm-comment\">&#47;&#47; Make sure contract passes validation checks</span>\n  <span class=\"cm-keyword\">await</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">dpp</span>.<span class=\"cm-property\">initialize</span>();\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">validationResult</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">dpp</span>.<span class=\"cm-property\">dataContract</span>.<span class=\"cm-property\">validate</span>(<span class=\"cm-variable-2\">contract</span>);\n\n  <span class=\"cm-keyword\">if</span> (<span class=\"cm-variable-2\">validationResult</span>.<span class=\"cm-property\">isValid</span>()) {\n    <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-string\">'Validation passed, broadcasting contract..'</span>);\n    <span class=\"cm-comment\">&#47;&#47; Sign and submit the data contract</span>\n    <span class=\"cm-keyword\">return</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">contracts</span>.<span class=\"cm-property\">publish</span>(<span class=\"cm-variable-2\">contract</span>, <span class=\"cm-variable-2\">identity</span>);\n  }\n  <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">error</span>(<span class=\"cm-variable-2\">validationResult</span>); <span class=\"cm-comment\">&#47;&#47; An array of detailed validation errors</span>\n  <span class=\"cm-keyword\">throw</span> <span class=\"cm-variable-2\">validationResult</span>.<span class=\"cm-property\">errors</span>[<span class=\"cm-number\">0</span>];\n};\n\n<span class=\"cm-variable\">registerContract</span>()\n  .<span class=\"cm-property\">then</span>((<span class=\"cm-def\">d</span>) <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-string\">'Contract registered:\\n'</span>, <span class=\"cm-variable-2\">d</span>.<span class=\"cm-property\">toJSON</span>()))\n  .<span class=\"cm-property\">catch</span>((<span class=\"cm-def\">e</span>) <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">error</span>(<span class=\"cm-string\">'Something went wrong:\\n'</span>, <span class=\"cm-variable-2\">e</span>))\n  .<span class=\"cm-property\">finally</span>(() <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">disconnect</span>());</span></code></pre></span><span ng-if=\"tab == 1\">\n\t\t\t<button ng-click=\"copyCode(874)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-874\">const Dash = require('dash');\n\nconst clientOpts = {\n  network: 'testnet',\n  wallet: {\n    mnemonic: 'a Dash wallet mnemonic with funds goes here',\n    unsafeOptions: {\n      skipSynchronizationBeforeHeight: 650000, // only sync from early-2022\n    },\n  },\n};\nconst client = new Dash.Client(clientOpts);\n\nconst registerContract = async () =&gt; {\n  const { platform } = client;\n  const identity = await platform.identities.get('an identity ID goes here');\n\n  const contractDocuments = {\n    note: {\n      type: 'object',\n      indices: [\n        name: &quot;ownerId&quot;,\n        { properties: [{ $ownerId: 'asc' }], unique: false },\n      ],\n      properties: {\n        message: {\n          type: 'string',\n        },\n      },\n      additionalProperties: false,\n    },\n  };\n\n  const contract = await platform.contracts.create(contractDocuments, identity);\n  console.dir({ contract });\n\n  // Make sure contract passes validation checks\n  await platform.dpp.initialize();\n  const validationResult = await platform.dpp.dataContract.validate(contract);\n\n  if (validationResult.isValid()) {\n    console.log('Validation passed, broadcasting contract..');\n    // Sign and submit the data contract\n    return platform.contracts.publish(contract, identity);\n  }\n  console.error(validationResult); // An array of detailed validation errors\n  throw validationResult.errors[0];\n};\n\nregisterContract()\n  .then((d) =&gt; console.log('Contract registered:\\n', d.toJSON()))\n  .catch((e) =&gt; console.error('Something went wrong:\\n', e))\n  .finally(() =&gt; client.disconnect());</textarea>\n\t\t\t<pre id=\"code-874\"><code><span class='cm-s-neo'><span class=\"cm-keyword\">const</span> <span class=\"cm-def\">Dash</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">require</span>(<span class=\"cm-string\">'dash'</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">clientOpts</span> <span class=\"cm-operator\">=</span> {\n  <span class=\"cm-property\">network</span>: <span class=\"cm-string\">'testnet'</span>,\n  <span class=\"cm-property\">wallet</span>: {\n    <span class=\"cm-property\">mnemonic</span>: <span class=\"cm-string\">'a Dash wallet mnemonic with funds goes here'</span>,\n    <span class=\"cm-property\">unsafeOptions</span>: {\n      <span class=\"cm-property\">skipSynchronizationBeforeHeight</span>: <span class=\"cm-number\">650000</span>, <span class=\"cm-comment\">&#47;&#47; only sync from early-2022</span>\n    },\n  },\n};\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">client</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">new</span> <span class=\"cm-variable\">Dash</span>.<span class=\"cm-property\">Client</span>(<span class=\"cm-variable\">clientOpts</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">registerContract</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">async</span> () <span class=\"cm-operator\">=&gt;</span> {\n  <span class=\"cm-keyword\">const</span> { <span class=\"cm-def\">platform</span> } <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">client</span>;\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">identity</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">identities</span>.<span class=\"cm-property\">get</span>(<span class=\"cm-string\">'an identity ID goes here'</span>);\n\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">contractDocuments</span> <span class=\"cm-operator\">=</span> {\n    <span class=\"cm-property\">note</span>: {\n      <span class=\"cm-property\">type</span>: <span class=\"cm-string\">'object'</span>,\n      <span class=\"cm-property\">indices</span>: [\n        <span class=\"cm-variable\">name</span>: <span class=\"cm-string\">\"ownerId\"</span>,\n        { <span class=\"cm-variable\">properties</span>: [{ <span class=\"cm-variable\">$ownerId</span>: <span class=\"cm-string\">'asc'</span> }], <span class=\"cm-variable\">unique</span>: <span class=\"cm-atom\">false</span> },\n      ],\n      <span class=\"cm-variable\">properties</span>: {\n        <span class=\"cm-variable\">message</span>: {\n          <span class=\"cm-variable\">type</span>: <span class=\"cm-string\">'string'</span>,\n        },\n      },\n      <span class=\"cm-variable\">additionalProperties</span>: <span class=\"cm-atom\">false</span>,\n    },\n  };\n\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">contract</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable\">platform</span>.<span class=\"cm-property\">contracts</span>.<span class=\"cm-property\">create</span>(<span class=\"cm-variable\">contractDocuments</span>, <span class=\"cm-variable\">identity</span>);\n  <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">dir</span>({ <span class=\"cm-property\">contract</span> });\n\n  <span class=\"cm-comment\">&#47;&#47; Make sure contract passes validation checks</span>\n  <span class=\"cm-keyword\">await</span> <span class=\"cm-variable\">platform</span>.<span class=\"cm-property\">dpp</span>.<span class=\"cm-property\">initialize</span>();\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">validationResult</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable\">platform</span>.<span class=\"cm-property\">dpp</span>.<span class=\"cm-property\">dataContract</span>.<span class=\"cm-property\">validate</span>(<span class=\"cm-variable\">contract</span>);\n\n  <span class=\"cm-keyword\">if</span> (<span class=\"cm-variable\">validationResult</span>.<span class=\"cm-property\">isValid</span>()) {\n    <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-string\">'Validation passed, broadcasting contract..'</span>);\n    <span class=\"cm-comment\">&#47;&#47; Sign and submit the data contract</span>\n    <span class=\"cm-keyword\">return</span> <span class=\"cm-variable\">platform</span>.<span class=\"cm-property\">contracts</span>.<span class=\"cm-property\">publish</span>(<span class=\"cm-variable\">contract</span>, <span class=\"cm-variable\">identity</span>);\n  }\n  <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">error</span>(<span class=\"cm-variable\">validationResult</span>); <span class=\"cm-comment\">&#47;&#47; An array of detailed validation errors</span>\n  <span class=\"cm-keyword\">throw</span> <span class=\"cm-variable\">validationResult</span>.<span class=\"cm-property\">errors</span>[<span class=\"cm-number\">0</span>];\n};\n\n<span class=\"cm-variable\">registerContract</span>()\n  .<span class=\"cm-property\">then</span>((<span class=\"cm-def\">d</span>) <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-string\">'Contract registered:\\n'</span>, <span class=\"cm-variable-2\">d</span>.<span class=\"cm-property\">toJSON</span>()))\n  .<span class=\"cm-property\">catch</span>((<span class=\"cm-def\">e</span>) <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">error</span>(<span class=\"cm-string\">'Something went wrong:\\n'</span>, <span class=\"cm-variable-2\">e</span>))\n  .<span class=\"cm-property\">finally</span>(() <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">disconnect</span>());</span></code></pre></span><span ng-if=\"tab == 2\">\n\t\t\t<button ng-click=\"copyCode(867)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-867\">// NOTE: The `$ref` keyword is temporarily disabled for Platform v0.22.\nconst Dash = require('dash');\n\nconst clientOpts = {\n  network: 'testnet',\n  wallet: {\n    mnemonic: 'a Dash wallet mnemonic with funds goes here',\n    unsafeOptions: {\n      skipSynchronizationBeforeHeight: 650000, // only sync from early-2022\n    },\n  },\n};\nconst client = new Dash.Client(clientOpts);\n\nconst registerContract = async () =&gt; {\n  const { platform } = client;\n  const identity = await platform.identities.get('an identity ID goes here');\n\n  // Define a reusable object\n  const definitions = {\n    address: {\n      type: 'object',\n      properties: {\n        street_address: { type: 'string' },\n        city: { type: 'string' },\n        state: { type: 'string' },\n      },\n      required: ['street_address', 'city', 'state'],\n      additionalProperties: false,\n    },\n  };\n\n  // Create a document with properties using a definition via $ref\n  const contractDocuments = {\n    customer: {\n      type: 'object',\n      properties: {\n        name: { type: 'string' },\n        billing_address: { $ref: '#/$defs/address' },\n        shipping_address: { $ref: '#/$defs/address' },\n      },\n      additionalProperties: false,\n    },\n  };\n  \n  const contract = await platform.contracts.create(contractDocuments, identity);\n\n  // Add reusable definitions referred to by &quot;$ref&quot; to contract\n  contract.setDefinitions(definitions);\n  console.dir({ contract });\n\n  // Make sure contract passes validation checks\n  await platform.dpp.initialize();\n  const validationResult = await platform.dpp.dataContract.validate(contract);\n\n  if (validationResult.isValid()) {\n    console.log('Validation passed, broadcasting contract..');\n    // Sign and submit the data contract\n    return platform.contracts.publish(contract, identity);\n  }\n  console.error(validationResult); // An array of detailed validation errors\n  throw validationResult.errors[0];\n};\n\nregisterContract()\n  .then((d) =&gt; console.log('Contract registered:\\n', d.toJSON()))\n  .catch((e) =&gt; console.error('Something went wrong:\\n', e))\n  .finally(() =&gt; client.disconnect());</textarea>\n\t\t\t<pre id=\"code-867\"><code><span class='cm-s-neo'><span class=\"cm-comment\">&#47;&#47; NOTE: The `$ref` keyword is temporarily disabled for Platform v0.22.</span>\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">Dash</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">require</span>(<span class=\"cm-string\">'dash'</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">clientOpts</span> <span class=\"cm-operator\">=</span> {\n  <span class=\"cm-property\">network</span>: <span class=\"cm-string\">'testnet'</span>,\n  <span class=\"cm-property\">wallet</span>: {\n    <span class=\"cm-property\">mnemonic</span>: <span class=\"cm-string\">'a Dash wallet mnemonic with funds goes here'</span>,\n    <span class=\"cm-property\">unsafeOptions</span>: {\n      <span class=\"cm-property\">skipSynchronizationBeforeHeight</span>: <span class=\"cm-number\">650000</span>, <span class=\"cm-comment\">&#47;&#47; only sync from early-2022</span>\n    },\n  },\n};\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">client</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">new</span> <span class=\"cm-variable\">Dash</span>.<span class=\"cm-property\">Client</span>(<span class=\"cm-variable\">clientOpts</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">registerContract</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">async</span> () <span class=\"cm-operator\">=&gt;</span> {\n  <span class=\"cm-keyword\">const</span> { <span class=\"cm-def\">platform</span> } <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">client</span>;\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">identity</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">identities</span>.<span class=\"cm-property\">get</span>(<span class=\"cm-string\">'an identity ID goes here'</span>);\n\n  <span class=\"cm-comment\">&#47;&#47; Define a reusable object</span>\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">definitions</span> <span class=\"cm-operator\">=</span> {\n    <span class=\"cm-property\">address</span>: {\n      <span class=\"cm-property\">type</span>: <span class=\"cm-string\">'object'</span>,\n      <span class=\"cm-property\">properties</span>: {\n        <span class=\"cm-property\">street_address</span>: { <span class=\"cm-property\">type</span>: <span class=\"cm-string\">'string'</span> },\n        <span class=\"cm-property\">city</span>: { <span class=\"cm-property\">type</span>: <span class=\"cm-string\">'string'</span> },\n        <span class=\"cm-property\">state</span>: { <span class=\"cm-property\">type</span>: <span class=\"cm-string\">'string'</span> },\n      },\n      <span class=\"cm-property\">required</span>: [<span class=\"cm-string\">'street_address'</span>, <span class=\"cm-string\">'city'</span>, <span class=\"cm-string\">'state'</span>],\n      <span class=\"cm-property\">additionalProperties</span>: <span class=\"cm-atom\">false</span>,\n    },\n  };\n\n  <span class=\"cm-comment\">&#47;&#47; Create a document with properties using a definition via $ref</span>\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">contractDocuments</span> <span class=\"cm-operator\">=</span> {\n    <span class=\"cm-property\">customer</span>: {\n      <span class=\"cm-property\">type</span>: <span class=\"cm-string\">'object'</span>,\n      <span class=\"cm-property\">properties</span>: {\n        <span class=\"cm-property\">name</span>: { <span class=\"cm-property\">type</span>: <span class=\"cm-string\">'string'</span> },\n        <span class=\"cm-property\">billing_address</span>: { <span class=\"cm-property\">$ref</span>: <span class=\"cm-string\">'#&#47;$defs&#47;address'</span> },\n        <span class=\"cm-property\">shipping_address</span>: { <span class=\"cm-property\">$ref</span>: <span class=\"cm-string\">'#&#47;$defs&#47;address'</span> },\n      },\n      <span class=\"cm-property\">additionalProperties</span>: <span class=\"cm-atom\">false</span>,\n    },\n  };\n  \n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">contract</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">contracts</span>.<span class=\"cm-property\">create</span>(<span class=\"cm-variable-2\">contractDocuments</span>, <span class=\"cm-variable-2\">identity</span>);\n\n  <span class=\"cm-comment\">&#47;&#47; Add reusable definitions referred to by \"$ref\" to contract</span>\n  <span class=\"cm-variable-2\">contract</span>.<span class=\"cm-property\">setDefinitions</span>(<span class=\"cm-variable-2\">definitions</span>);\n  <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">dir</span>({ <span class=\"cm-property\">contract</span> });\n\n  <span class=\"cm-comment\">&#47;&#47; Make sure contract passes validation checks</span>\n  <span class=\"cm-keyword\">await</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">dpp</span>.<span class=\"cm-property\">initialize</span>();\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">validationResult</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">dpp</span>.<span class=\"cm-property\">dataContract</span>.<span class=\"cm-property\">validate</span>(<span class=\"cm-variable-2\">contract</span>);\n\n  <span class=\"cm-keyword\">if</span> (<span class=\"cm-variable-2\">validationResult</span>.<span class=\"cm-property\">isValid</span>()) {\n    <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-string\">'Validation passed, broadcasting contract..'</span>);\n    <span class=\"cm-comment\">&#47;&#47; Sign and submit the data contract</span>\n    <span class=\"cm-keyword\">return</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">contracts</span>.<span class=\"cm-property\">publish</span>(<span class=\"cm-variable-2\">contract</span>, <span class=\"cm-variable-2\">identity</span>);\n  }\n  <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">error</span>(<span class=\"cm-variable-2\">validationResult</span>); <span class=\"cm-comment\">&#47;&#47; An array of detailed validation errors</span>\n  <span class=\"cm-keyword\">throw</span> <span class=\"cm-variable-2\">validationResult</span>.<span class=\"cm-property\">errors</span>[<span class=\"cm-number\">0</span>];\n};\n\n<span class=\"cm-variable\">registerContract</span>()\n  .<span class=\"cm-property\">then</span>((<span class=\"cm-def\">d</span>) <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-string\">'Contract registered:\\n'</span>, <span class=\"cm-variable-2\">d</span>.<span class=\"cm-property\">toJSON</span>()))\n  .<span class=\"cm-property\">catch</span>((<span class=\"cm-def\">e</span>) <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">error</span>(<span class=\"cm-string\">'Something went wrong:\\n'</span>, <span class=\"cm-variable-2\">e</span>))\n  .<span class=\"cm-property\">finally</span>(() <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">disconnect</span>());</span></code></pre></span><span ng-if=\"tab == 3\">\n\t\t\t<button ng-click=\"copyCode(512)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-512\">const Dash = require('dash');\n\nconst clientOpts = {\n  network: 'testnet',\n  wallet: {\n    mnemonic: 'a Dash wallet mnemonic with funds goes here',\n    unsafeOptions: {\n      skipSynchronizationBeforeHeight: 650000, // only sync from early-2022\n    },\n  },\n};\nconst client = new Dash.Client(clientOpts);\n\nconst registerContract = async () =&gt; {\n  const { platform } = client;\n  const identity = await platform.identities.get('an identity ID goes here');\n\n  const contractDocuments = {\n    note: {\n      type: 'object',\n      properties: {\n        message: {\n          type: 'string',\n        },\n      },\n      required: ['$createdAt', '$updatedAt'],\n      additionalProperties: false,\n    },\n  };\n\n  const contract = await platform.contracts.create(contractDocuments, identity);\n  console.dir({ contract });\n\n  // Make sure contract passes validation checks\n  await platform.dpp.initialize();\n  const validationResult = await platform.dpp.dataContract.validate(contract);\n\n  if (validationResult.isValid()) {\n    console.log('Validation passed, broadcasting contract..');\n    // Sign and submit the data contract\n    return platform.contracts.publish(contract, identity);\n  }\n  console.error(validationResult); // An array of detailed validation errors\n  throw validationResult.errors[0];\n};\n\nregisterContract()\n  .then((d) =&gt; console.log('Contract registered:\\n', d.toJSON()))\n  .catch((e) =&gt; console.error('Something went wrong:\\n', e))\n  .finally(() =&gt; client.disconnect());</textarea>\n\t\t\t<pre id=\"code-512\"><code><span class='cm-s-neo'><span class=\"cm-keyword\">const</span> <span class=\"cm-def\">Dash</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">require</span>(<span class=\"cm-string\">'dash'</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">clientOpts</span> <span class=\"cm-operator\">=</span> {\n  <span class=\"cm-property\">network</span>: <span class=\"cm-string\">'testnet'</span>,\n  <span class=\"cm-property\">wallet</span>: {\n    <span class=\"cm-property\">mnemonic</span>: <span class=\"cm-string\">'a Dash wallet mnemonic with funds goes here'</span>,\n    <span class=\"cm-property\">unsafeOptions</span>: {\n      <span class=\"cm-property\">skipSynchronizationBeforeHeight</span>: <span class=\"cm-number\">650000</span>, <span class=\"cm-comment\">&#47;&#47; only sync from early-2022</span>\n    },\n  },\n};\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">client</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">new</span> <span class=\"cm-variable\">Dash</span>.<span class=\"cm-property\">Client</span>(<span class=\"cm-variable\">clientOpts</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">registerContract</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">async</span> () <span class=\"cm-operator\">=&gt;</span> {\n  <span class=\"cm-keyword\">const</span> { <span class=\"cm-def\">platform</span> } <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">client</span>;\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">identity</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">identities</span>.<span class=\"cm-property\">get</span>(<span class=\"cm-string\">'an identity ID goes here'</span>);\n\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">contractDocuments</span> <span class=\"cm-operator\">=</span> {\n    <span class=\"cm-property\">note</span>: {\n      <span class=\"cm-property\">type</span>: <span class=\"cm-string\">'object'</span>,\n      <span class=\"cm-property\">properties</span>: {\n        <span class=\"cm-property\">message</span>: {\n          <span class=\"cm-property\">type</span>: <span class=\"cm-string\">'string'</span>,\n        },\n      },\n      <span class=\"cm-property\">required</span>: [<span class=\"cm-string\">'$createdAt'</span>, <span class=\"cm-string\">'$updatedAt'</span>],\n      <span class=\"cm-property\">additionalProperties</span>: <span class=\"cm-atom\">false</span>,\n    },\n  };\n\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">contract</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">contracts</span>.<span class=\"cm-property\">create</span>(<span class=\"cm-variable-2\">contractDocuments</span>, <span class=\"cm-variable-2\">identity</span>);\n  <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">dir</span>({ <span class=\"cm-property\">contract</span> });\n\n  <span class=\"cm-comment\">&#47;&#47; Make sure contract passes validation checks</span>\n  <span class=\"cm-keyword\">await</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">dpp</span>.<span class=\"cm-property\">initialize</span>();\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">validationResult</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">dpp</span>.<span class=\"cm-property\">dataContract</span>.<span class=\"cm-property\">validate</span>(<span class=\"cm-variable-2\">contract</span>);\n\n  <span class=\"cm-keyword\">if</span> (<span class=\"cm-variable-2\">validationResult</span>.<span class=\"cm-property\">isValid</span>()) {\n    <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-string\">'Validation passed, broadcasting contract..'</span>);\n    <span class=\"cm-comment\">&#47;&#47; Sign and submit the data contract</span>\n    <span class=\"cm-keyword\">return</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">contracts</span>.<span class=\"cm-property\">publish</span>(<span class=\"cm-variable-2\">contract</span>, <span class=\"cm-variable-2\">identity</span>);\n  }\n  <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">error</span>(<span class=\"cm-variable-2\">validationResult</span>); <span class=\"cm-comment\">&#47;&#47; An array of detailed validation errors</span>\n  <span class=\"cm-keyword\">throw</span> <span class=\"cm-variable-2\">validationResult</span>.<span class=\"cm-property\">errors</span>[<span class=\"cm-number\">0</span>];\n};\n\n<span class=\"cm-variable\">registerContract</span>()\n  .<span class=\"cm-property\">then</span>((<span class=\"cm-def\">d</span>) <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-string\">'Contract registered:\\n'</span>, <span class=\"cm-variable-2\">d</span>.<span class=\"cm-property\">toJSON</span>()))\n  .<span class=\"cm-property\">catch</span>((<span class=\"cm-def\">e</span>) <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">error</span>(<span class=\"cm-string\">'Something went wrong:\\n'</span>, <span class=\"cm-variable-2\">e</span>))\n  .<span class=\"cm-property\">finally</span>(() <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">disconnect</span>());</span></code></pre></span><span ng-if=\"tab == 4\">\n\t\t\t<button ng-click=\"copyCode(796)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-796\">const Dash = require('dash');\n\nconst clientOpts = {\n  network: 'testnet',\n  wallet: {\n    mnemonic: 'a Dash wallet mnemonic with funds goes here',\n    unsafeOptions: {\n      skipSynchronizationBeforeHeight: 650000, // only sync from early-2022\n    },\n  },\n};\nconst client = new Dash.Client(clientOpts);\n\nconst registerContract = async () =&gt; {\n  const { platform } = client;\n  const identity = await platform.identities.get('an identity ID goes here');\n\n  const contractDocuments = {\n    block: {\n      type: 'object',\n      properties: {\n        hash: {\n          type: 'array',\n          byteArray: true,\n          maxItems: 64,\n          description: 'Store block hashes',\n        },\n      },\n      additionalProperties: false,\n    },\n  };\n\n  const contract = await platform.contracts.create(contractDocuments, identity);\n  console.dir({ contract }, { depth: 5 });\n\n  // Make sure contract passes validation checks\n  await platform.dpp.initialize();\n  const validationResult = await platform.dpp.dataContract.validate(contract);\n\n  if (validationResult.isValid()) {\n    console.log('Validation passed, broadcasting contract..');\n    // Sign and submit the data contract\n    return platform.contracts.publish(contract, identity);\n  }\n  console.error(validationResult); // An array of detailed validation errors\n  throw validationResult.errors[0];\n};\n\nregisterContract()\n  .then((d) =&gt; console.log('Contract registered:\\n', d.toJSON()))\n  .catch((e) =&gt; console.error('Something went wrong:\\n', e))\n  .finally(() =&gt; client.disconnect());</textarea>\n\t\t\t<pre id=\"code-796\"><code><span class='cm-s-neo'><span class=\"cm-keyword\">const</span> <span class=\"cm-def\">Dash</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">require</span>(<span class=\"cm-string\">'dash'</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">clientOpts</span> <span class=\"cm-operator\">=</span> {\n  <span class=\"cm-property\">network</span>: <span class=\"cm-string\">'testnet'</span>,\n  <span class=\"cm-property\">wallet</span>: {\n    <span class=\"cm-property\">mnemonic</span>: <span class=\"cm-string\">'a Dash wallet mnemonic with funds goes here'</span>,\n    <span class=\"cm-property\">unsafeOptions</span>: {\n      <span class=\"cm-property\">skipSynchronizationBeforeHeight</span>: <span class=\"cm-number\">650000</span>, <span class=\"cm-comment\">&#47;&#47; only sync from early-2022</span>\n    },\n  },\n};\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">client</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">new</span> <span class=\"cm-variable\">Dash</span>.<span class=\"cm-property\">Client</span>(<span class=\"cm-variable\">clientOpts</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">registerContract</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">async</span> () <span class=\"cm-operator\">=&gt;</span> {\n  <span class=\"cm-keyword\">const</span> { <span class=\"cm-def\">platform</span> } <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">client</span>;\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">identity</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">identities</span>.<span class=\"cm-property\">get</span>(<span class=\"cm-string\">'an identity ID goes here'</span>);\n\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">contractDocuments</span> <span class=\"cm-operator\">=</span> {\n    <span class=\"cm-property\">block</span>: {\n      <span class=\"cm-property\">type</span>: <span class=\"cm-string\">'object'</span>,\n      <span class=\"cm-property\">properties</span>: {\n        <span class=\"cm-property\">hash</span>: {\n          <span class=\"cm-property\">type</span>: <span class=\"cm-string\">'array'</span>,\n          <span class=\"cm-property\">byteArray</span>: <span class=\"cm-atom\">true</span>,\n          <span class=\"cm-property\">maxItems</span>: <span class=\"cm-number\">64</span>,\n          <span class=\"cm-property\">description</span>: <span class=\"cm-string\">'Store block hashes'</span>,\n        },\n      },\n      <span class=\"cm-property\">additionalProperties</span>: <span class=\"cm-atom\">false</span>,\n    },\n  };\n\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">contract</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">contracts</span>.<span class=\"cm-property\">create</span>(<span class=\"cm-variable-2\">contractDocuments</span>, <span class=\"cm-variable-2\">identity</span>);\n  <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">dir</span>({ <span class=\"cm-property\">contract</span> }, { <span class=\"cm-property\">depth</span>: <span class=\"cm-number\">5</span> });\n\n  <span class=\"cm-comment\">&#47;&#47; Make sure contract passes validation checks</span>\n  <span class=\"cm-keyword\">await</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">dpp</span>.<span class=\"cm-property\">initialize</span>();\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">validationResult</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">dpp</span>.<span class=\"cm-property\">dataContract</span>.<span class=\"cm-property\">validate</span>(<span class=\"cm-variable-2\">contract</span>);\n\n  <span class=\"cm-keyword\">if</span> (<span class=\"cm-variable-2\">validationResult</span>.<span class=\"cm-property\">isValid</span>()) {\n    <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-string\">'Validation passed, broadcasting contract..'</span>);\n    <span class=\"cm-comment\">&#47;&#47; Sign and submit the data contract</span>\n    <span class=\"cm-keyword\">return</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">contracts</span>.<span class=\"cm-property\">publish</span>(<span class=\"cm-variable-2\">contract</span>, <span class=\"cm-variable-2\">identity</span>);\n  }\n  <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">error</span>(<span class=\"cm-variable-2\">validationResult</span>); <span class=\"cm-comment\">&#47;&#47; An array of detailed validation errors</span>\n  <span class=\"cm-keyword\">throw</span> <span class=\"cm-variable-2\">validationResult</span>.<span class=\"cm-property\">errors</span>[<span class=\"cm-number\">0</span>];\n};\n\n<span class=\"cm-variable\">registerContract</span>()\n  .<span class=\"cm-property\">then</span>((<span class=\"cm-def\">d</span>) <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-string\">'Contract registered:\\n'</span>, <span class=\"cm-variable-2\">d</span>.<span class=\"cm-property\">toJSON</span>()))\n  .<span class=\"cm-property\">catch</span>((<span class=\"cm-def\">e</span>) <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">error</span>(<span class=\"cm-string\">'Something went wrong:\\n'</span>, <span class=\"cm-variable-2\">e</span>))\n  .<span class=\"cm-property\">finally</span>(() <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">disconnect</span>());</span></code></pre></span>\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><blockquote>\n<p>\ud83d\udc4d</p>\n<p><strong>Make a note of the returned data contract <code>$id</code> as it will be used used in subsequent tutorials throughout the documentation.</strong></p>\n</blockquote>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-whats-happening\"></div>What&#39;s Happening<a class=\"fa fa-anchor\" href=\"#section-whats-happening\"></a></h1>\n<p>After we initialize the Client, we create an object defining the documents this data contract requires (e.g. a <code>note</code> document in the example). The <code>platform.contracts.create</code> method takes two arguments: a contract definitions JSON-schema object and an identity. The contract definitions object consists of the document types being created (e.g. <code>note</code>). It defines the properties and any indices. </p>\n<p>Once the data contract has been created, we still need to submit it to DAPI. The <code>platform.contracts.publish</code> method takes a data contract and an identity parameter. Internally, it creates a State Transition containing the previously created contract, signs the state transition, and submits the signed state transition to DAPI. A response will only be returned if an error is encountered.</p>\n<blockquote>\n<p>\ud83d\udcd8Wallet Operations</p>\n<p>The JavaScript SDK does not cache wallet information. It re-syncs the entire Core chain for some wallet operations (e.g. <code>client.getWalletAccount()</code>) which can result in wait times of  5+ minutes. </p>\n<p>A future release will add caching so that access is much faster after the initial sync. For now, the <code>skipSynchronizationBeforeHeight</code> option can be used to sync the wallet starting at a certain block height.</p>\n</blockquote>\n\n</div>"
}