{
 "parentDoc": null, 
 "excerpt": "", 
 "api": {
  "url": "", 
  "params": [], 
  "method": "get", 
  "auth": "required", 
  "results": {
   "codes": [
    {
     "status": 200, 
     "code": "{}", 
     "name": "", 
     "language": "json"
    }, 
    {
     "status": 400, 
     "code": "{}", 
     "name": "", 
     "language": "json"
    }
   ]
  }
 }, 
 "updatedAt": "2020-03-27T14:18:33.077Z", 
 "id": "5e0932805d888b006863a084", 
 "sync_unique": "", 
 "isApi": false, 
 "createdAt": "2019-12-29T03:59:39.304Z", 
 "category": "5d261b31d8f6ed004c24cbbe", 
 "title": "Register a Name for an Identity", 
 "next": {
  "description": "", 
  "pages": []
 }, 
 "version": "5d2374d8d238fb004e8f9243", 
 "hidden": false, 
 "type": "basic", 
 "metadata": {
  "image": [], 
  "description": "", 
  "title": ""
 }, 
 "body": "The purpose of this tutorial is to walk through the steps necessary to register a [Dash Platform Name Service (DPNS)](reference-glossary#section-dash-platform-naming-service-dpns) name.\n\n# Overview\nDash platform names make cryptographic identities easy to remember and communicate. \n\nAdditional details regarding identities can be found in the [Identity description](explanation-identity).\n\nFor this tutorial you will need:\n\n- A wallet mnemonic with some funds in it: [Tutorial: Create and Fund a Wallet](tutorial-create-and-fund-a-wallet)\n- A dash platform identity: [Tutorial: Register an Identity](tutorial-register-an-identity) \n- A name you want to register. [Name restrictions](explanation-dpns#section-implementation)\n\n# Code\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"const Dash = require('dash');\\n\\nconst clientOpts = {\\n  network: 'testnet',\\n  mnemonic: 'a Dash wallet mnemonic with evonet funds goes here',\\n};\\nconst client = new Dash.Client(clientOpts);\\n\\nconst registerName = async function () {\\n  try {\\n    await client.isReady();\\n    const platform = client.platform;\\n    const identity = await platform.identities.get('an identity ID goes here');\\n    const nameRegistration = await platform.names.register('a name goes here', identity);\\n    console.log({nameRegistration});\\n  } catch (e) {\\n    console.error('Something went wrong:', e);\\n  } finally {\\n    client.disconnect();\\n  }\\n}\\n\\nregisterName();\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\n# What's Happening\n\nAfter initializing the Client, we fetch the identity we'll be associating with a name. This is an asynchronous method so we use _await_ to pause until the request is complete. Next, we call `platform.names.register` and pass in the name we want to register, and the identity we just fetched. We wait for the result, and output it to the console.", 
 "link_external": false, 
 "body_html": "<div class=\"magic-block-textarea\"><p>The purpose of this tutorial is to walk through the steps necessary to register a <a href=\"reference-glossary#section-dash-platform-naming-service-dpns\">Dash Platform Name Service (DPNS)</a> name.</p>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-overview\"></div>Overview<a class=\"fa fa-anchor\" href=\"#section-overview\"></a></h1>\n<p>Dash platform names make cryptographic identities easy to remember and communicate. </p>\n<p>Additional details regarding identities can be found in the <a href=\"explanation-identity\">Identity description</a>.</p>\n<p>For this tutorial you will need:</p>\n<ul>\n<li >A wallet mnemonic with some funds in it: <a href=\"tutorial-create-and-fund-a-wallet\">Tutorial: Create and Fund a Wallet</a></li><li >A dash platform identity: <a href=\"tutorial-register-an-identity\">Tutorial: Register an Identity</a> </li><li >A name you want to register. <a href=\"explanation-dpns#section-implementation\">Name restrictions</a></li></ul>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-code\"></div>Code<a class=\"fa fa-anchor\" href=\"#section-code\"></a></h1>\n\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">JavaScript</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(974)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-974\">const Dash = require('dash');\n\nconst clientOpts = {\n  network: 'testnet',\n  mnemonic: 'a Dash wallet mnemonic with evonet funds goes here',\n};\nconst client = new Dash.Client(clientOpts);\n\nconst registerName = async function () {\n  try {\n    await client.isReady();\n    const platform = client.platform;\n    const identity = await platform.identities.get('an identity ID goes here');\n    const nameRegistration = await platform.names.register('a name goes here', identity);\n    console.log({nameRegistration});\n  } catch (e) {\n    console.error('Something went wrong:', e);\n  } finally {\n    client.disconnect();\n  }\n}\n\nregisterName();</textarea>\n\t\t\t<pre id=\"code-974\"><code><span class='cm-s-neo'><span class=\"cm-keyword\">const</span> <span class=\"cm-def\">Dash</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">require</span>(<span class=\"cm-string\">'dash'</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">clientOpts</span> <span class=\"cm-operator\">=</span> {\n  <span class=\"cm-property\">network</span>: <span class=\"cm-string\">'testnet'</span>,\n  <span class=\"cm-property\">mnemonic</span>: <span class=\"cm-string\">'a Dash wallet mnemonic with evonet funds goes here'</span>,\n};\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">client</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">new</span> <span class=\"cm-variable\">Dash</span>.<span class=\"cm-property\">Client</span>(<span class=\"cm-variable\">clientOpts</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">registerName</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">async</span> <span class=\"cm-keyword\">function</span> () {\n  <span class=\"cm-keyword\">try</span> {\n    <span class=\"cm-keyword\">await</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">isReady</span>();\n    <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">platform</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">platform</span>;\n    <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">identity</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">identities</span>.<span class=\"cm-property\">get</span>(<span class=\"cm-string\">'an identity ID goes here'</span>);\n    <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">nameRegistration</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">names</span>.<span class=\"cm-property\">register</span>(<span class=\"cm-string\">'a name goes here'</span>, <span class=\"cm-variable-2\">identity</span>);\n    <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>({<span class=\"cm-property\">nameRegistration</span>});\n  } <span class=\"cm-keyword\">catch</span> (<span class=\"cm-def\">e</span>) {\n    <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">error</span>(<span class=\"cm-string\">'Something went wrong:'</span>, <span class=\"cm-variable-2\">e</span>);\n  } <span class=\"cm-keyword\">finally</span> {\n    <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">disconnect</span>();\n  }\n}\n\n<span class=\"cm-variable\">registerName</span>();</span></code></pre></span>\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-whats-happening\"></div>What&#39;s Happening<a class=\"fa fa-anchor\" href=\"#section-whats-happening\"></a></h1>\n<p>After initializing the Client, we fetch the identity we&#39;ll be associating with a name. This is an asynchronous method so we use <em>await</em> to pause until the request is complete. Next, we call <code>platform.names.register</code> and pass in the name we want to register, and the identity we just fetched. We wait for the result, and output it to the console.</p>\n\n</div>", 
 "user": "5b8400d7185d5e00036dcc3b", 
 "isReference": false, 
 "slug": "tutorial-register-a-name-for-an-identity", 
 "link_url": "", 
 "project": "5bda01cad172e200499a20a9", 
 "__v": 1, 
 "_id": "5e0932805d888b006863a084", 
 "order": 5, 
 "updates": [
  "5e17cf63c6eb710050e0bcb5"
 ]
}