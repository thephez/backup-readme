{
 "pendingAlgoliaPublish": false, 
 "parentDoc": null, 
 "excerpt": "Establish an Identity on Dash Platform", 
 "api": {
  "url": "", 
  "params": [], 
  "method": "get", 
  "auth": "required", 
  "results": {
   "codes": [
    {
     "status": 200, 
     "code": "{}", 
     "name": "", 
     "language": "json"
    }, 
    {
     "status": 400, 
     "code": "{}", 
     "name": "", 
     "language": "json"
    }
   ]
  }
 }, 
 "previousSlug": "", 
 "updatedAt": "2020-11-03T20:55:37.258Z", 
 "id": "5f8f3fa8b257f9003428ff5b", 
 "sync_unique": "", 
 "isApi": false, 
 "createdAt": "2019-10-08T10:37:42.293Z", 
 "category": "5f8f3fa8b257f9003428ff41", 
 "title": "Register an Identity", 
 "next": {
  "description": "", 
  "pages": [
   {
    "category": "Tutorials", 
    "slug": "tutorial-register-a-name-for-an-identity", 
    "type": "doc", 
    "name": "Register a Name for an Identity", 
    "icon": "file-text-o"
   }
  ]
 }, 
 "version": "5f8f3fa8b257f9003428ff97", 
 "slugUpdatedAt": "2020-08-07T03:01:33.510Z", 
 "hidden": false, 
 "type": "basic", 
 "metadata": {
  "image": [], 
  "description": "", 
  "title": ""
 }, 
 "body": "The purpose of this tutorial is to walk through the steps necessary to register an identity.\n\n# Overview\nIdentities serve as the basis for interactions with Dash Platform. They consist primarily of a public key used to register a unique entity on the network. Additional details regarding identities can be found in the [Identity description](explanation-identity).\n\n## Prerequisites\n- [node.js](https://nodejs.org/en/) (v12+)\n- Basic familiarity with JavaScript asychronous functions using [async/await](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await)\n- The Dash JavaScript SDK is initialized (covered in [Connecting to EvoNet](tutorial-connecting-to-evonet))\n- A wallet mnemonic with some funds in it: [How to Create and Fund a Wallet](tutorial-create-and-fund-a-wallet)\n\n# Code\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"body\": \"Early versions of Dash Platform did not check if a public key was already used when creating an identity. As of Dash Platform Protocol v0.13, validation ensures that a public key can only be associated with a single identity.\",\n  \"title\": \"Identity public key reuse\"\n}\n[/block]\n\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"const Dash = require('dash');\\n\\nconst clientOpts = {\\n  network: 'evonet',\\n  wallet: {\\n  \\tmnemonic: 'a Dash wallet mnemonic with evonet funds goes here',\\n  },\\n};\\nconst client = new Dash.Client(clientOpts);\\n\\nconst createIdentity = async () => {\\n  return client.platform.identities.register();\\n};\\n\\ncreateIdentity()\\n  .then((d) => console.log('Identity:\\\\n', d.toJSON()))\\n  .catch((e) => console.error('Something went wrong:\\\\n', e))\\n  .finally(() => client.disconnect());\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\nThe Identity will be output to the console. The Identity will need to have one confirmation before it is accessible via `client.platform.identity.get`.\n\n# What's Happening\n\nAfter connecting to the Client, we call `platform.identities.register`. This will generate a keypair and submit an _Identity Open Transaction_. After the Identity is registered, we output it to the console.", 
 "link_external": false, 
 "body_html": "<div class=\"magic-block-textarea\"><p>The purpose of this tutorial is to walk through the steps necessary to register an identity.</p>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-overview\"></div>Overview<a class=\"fa fa-anchor\" href=\"#section-overview\"></a></h1>\n<p>Identities serve as the basis for interactions with Dash Platform. They consist primarily of a public key used to register a unique entity on the network. Additional details regarding identities can be found in the <a href=\"explanation-identity\">Identity description</a>.</p>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-prerequisites\"></div>Prerequisites<a class=\"fa fa-anchor\" href=\"#section-prerequisites\"></a></h2>\n<ul>\n<li ><a href=\"https://nodejs.org/en/\">node.js</a> (v12+)</li><li >Basic familiarity with JavaScript asychronous functions using <a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await\">async/await</a></li><li >The Dash JavaScript SDK is initialized (covered in <a href=\"tutorial-connecting-to-evonet\">Connecting to EvoNet</a>)</li><li >A wallet mnemonic with some funds in it: <a href=\"tutorial-create-and-fund-a-wallet\">How to Create and Fund a Wallet</a></li></ul>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-code\"></div>Code<a class=\"fa fa-anchor\" href=\"#section-code\"></a></h1>\n\n</div>\n<div class=\"magic-block-callout type-warning \">\n\t<h3><i title=\"Warning\" class=\"fa fa-exclamation-circle\"></i>Identity public key reuse\n\t</h3>\n\t<div class=\"callout-body\"><p>Early versions of Dash Platform did not check if a public key was already used when creating an identity. As of Dash Platform Protocol v0.13, validation ensures that a public key can only be associated with a single identity.</p>\n\n\t</div>\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">JavaScript</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(674)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-674\">const Dash = require('dash');\n\nconst clientOpts = {\n  network: 'evonet',\n  wallet: {\n  \tmnemonic: 'a Dash wallet mnemonic with evonet funds goes here',\n  },\n};\nconst client = new Dash.Client(clientOpts);\n\nconst createIdentity = async () =&gt; {\n  return client.platform.identities.register();\n};\n\ncreateIdentity()\n  .then((d) =&gt; console.log('Identity:\\n', d.toJSON()))\n  .catch((e) =&gt; console.error('Something went wrong:\\n', e))\n  .finally(() =&gt; client.disconnect());</textarea>\n\t\t\t<pre id=\"code-674\"><code><span class='cm-s-neo'><span class=\"cm-keyword\">const</span> <span class=\"cm-def\">Dash</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">require</span>(<span class=\"cm-string\">'dash'</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">clientOpts</span> <span class=\"cm-operator\">=</span> {\n  <span class=\"cm-property\">network</span>: <span class=\"cm-string\">'evonet'</span>,\n  <span class=\"cm-property\">wallet</span>: {\n  \t<span class=\"cm-property\">mnemonic</span>: <span class=\"cm-string\">'a Dash wallet mnemonic with evonet funds goes here'</span>,\n  },\n};\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">client</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">new</span> <span class=\"cm-variable\">Dash</span>.<span class=\"cm-property\">Client</span>(<span class=\"cm-variable\">clientOpts</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">createIdentity</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">async</span> () <span class=\"cm-operator\">=&gt;</span> {\n  <span class=\"cm-keyword\">return</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">platform</span>.<span class=\"cm-property\">identities</span>.<span class=\"cm-property\">register</span>();\n};\n\n<span class=\"cm-variable\">createIdentity</span>()\n  .<span class=\"cm-property\">then</span>((<span class=\"cm-def\">d</span>) <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-string\">'Identity:\\n'</span>, <span class=\"cm-variable-2\">d</span>.<span class=\"cm-property\">toJSON</span>()))\n  .<span class=\"cm-property\">catch</span>((<span class=\"cm-def\">e</span>) <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">error</span>(<span class=\"cm-string\">'Something went wrong:\\n'</span>, <span class=\"cm-variable-2\">e</span>))\n  .<span class=\"cm-property\">finally</span>(() <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">disconnect</span>());</span></code></pre></span>\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><p>The Identity will be output to the console. The Identity will need to have one confirmation before it is accessible via <code>client.platform.identity.get</code>.</p>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-whats-happening\"></div>What&#39;s Happening<a class=\"fa fa-anchor\" href=\"#section-whats-happening\"></a></h1>\n<p>After connecting to the Client, we call <code>platform.identities.register</code>. This will generate a keypair and submit an <em>Identity Open Transaction</em>. After the Identity is registered, we output it to the console.</p>\n\n</div>", 
 "updates": [
  "5e0caf68bf7c9f0012602111", 
  "5e17d61bf7144c006f9ab5f5", 
  "5f2cff6cc53abe05e1d778ef"
 ], 
 "isReference": false, 
 "slug": "tutorial-register-an-identity", 
 "link_url": "", 
 "project": "5bda01cad172e200499a20a9", 
 "__v": 6, 
 "_id": "5f8f3fa8b257f9003428ff5b", 
 "order": 3, 
 "user": "5b8400d7185d5e00036dcc3b"
}