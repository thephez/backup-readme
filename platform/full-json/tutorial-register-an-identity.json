{
 "parentDoc": null, 
 "excerpt": "", 
 "api": {
  "url": "", 
  "params": [], 
  "method": "get", 
  "auth": "required", 
  "results": {
   "codes": [
    {
     "status": 200, 
     "code": "{}", 
     "name": "", 
     "language": "json"
    }, 
    {
     "status": 400, 
     "code": "{}", 
     "name": "", 
     "language": "json"
    }
   ]
  }
 }, 
 "updatedAt": "2020-01-10T04:39:48.838Z", 
 "id": "5d9c66f693fc5d0021d51322", 
 "sync_unique": "", 
 "isApi": false, 
 "createdAt": "2019-10-08T10:37:42.293Z", 
 "category": "5d261b31d8f6ed004c24cbbe", 
 "title": "Register an Identity", 
 "next": {
  "description": "", 
  "pages": [
   {
    "category": "Tutorials", 
    "slug": "tutorial-register-a-name-for-an-identity", 
    "type": "doc", 
    "name": "Register a Name for an Identity", 
    "icon": "file-text-o"
   }
  ]
 }, 
 "version": "5d2374d8d238fb004e8f9243", 
 "hidden": false, 
 "type": "basic", 
 "metadata": {
  "image": [], 
  "description": "", 
  "title": ""
 }, 
 "body": "The purpose of this tutorial is to walk through the steps necessary to register a user identity.\n\n# Overview\nIdentities serve as the basis for interactions with Dash Platform. They consist primarily of a public key used to register a unique entity on the network. There are two identity types to support different functionality:\n - User identities\n - Application identities\n\nAdditional details regarding identities can be found in the [Identity description](explanation-identity).\n\nFor this tutorial you will need a wallet mnemonic with some funds in it: [How to Create and Fund a Wallet](tutorial-create-and-fund-a-wallet)\n\n# Code\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"const DashJS = require('dash');\\n\\nconst sdkOpts = {\\n  network: 'testnet',\\n  mnemonic: 'a Dash wallet mnemonic with evonet funds goes here',\\n};\\nconst sdk = new DashJS.SDK(sdkOpts);\\n\\nconst createIdentity = async function () {\\n  try {\\n    await sdk.isReady();\\n    const platform = sdk.platform;\\n    const identity = await platform.identities.register('user');  // literally 'user', do not change\\n    console.log({identity});\\n  } catch (e) {\\n    console.error('Something went wrong:', e);\\n  } finally {\\n    sdk.disconnect();\\n  }\\n}\\n\\ncreateIdentity()\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\nThe identity will be output to the console. The identity will need to have one confirmation before it is accessible via `sdk.platform.identity.get`.\n\n# What's Happening\n\nAfter connecting to the SDK, we call `platform.identities.register` with the parameter `'user'`, which indicates that we want to create a user identity. This will generate a keypair and submit an _Identity Open Transaction_. After the identity is registered, we output it to the console.", 
 "link_external": false, 
 "body_html": "<div class=\"magic-block-textarea\"><p>The purpose of this tutorial is to walk through the steps necessary to register a user identity.</p>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-overview\"></div>Overview<a class=\"fa fa-anchor\" href=\"#section-overview\"></a></h1>\n<p>Identities serve as the basis for interactions with Dash Platform. They consist primarily of a public key used to register a unique entity on the network. There are two identity types to support different functionality:</p>\n<ul>\n<li >User identities</li><li >Application identities</li></ul>\n<p>Additional details regarding identities can be found in the <a href=\"explanation-identity\">Identity description</a>.</p>\n<p>For this tutorial you will need a wallet mnemonic with some funds in it: <a href=\"tutorial-create-and-fund-a-wallet\">How to Create and Fund a Wallet</a></p>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-code\"></div>Code<a class=\"fa fa-anchor\" href=\"#section-code\"></a></h1>\n\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">JavaScript</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(434)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-434\">const DashJS = require('dash');\n\nconst sdkOpts = {\n  network: 'testnet',\n  mnemonic: 'a Dash wallet mnemonic with evonet funds goes here',\n};\nconst sdk = new DashJS.SDK(sdkOpts);\n\nconst createIdentity = async function () {\n  try {\n    await sdk.isReady();\n    const platform = sdk.platform;\n    const identity = await platform.identities.register('user');  // literally 'user', do not change\n    console.log({identity});\n  } catch (e) {\n    console.error('Something went wrong:', e);\n  } finally {\n    sdk.disconnect();\n  }\n}\n\ncreateIdentity()</textarea>\n\t\t\t<pre id=\"code-434\"><code><span class='cm-s-neo'><span class=\"cm-keyword\">const</span> <span class=\"cm-def\">DashJS</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">require</span>(<span class=\"cm-string\">'dash'</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">sdkOpts</span> <span class=\"cm-operator\">=</span> {\n  <span class=\"cm-property\">network</span>: <span class=\"cm-string\">'testnet'</span>,\n  <span class=\"cm-property\">mnemonic</span>: <span class=\"cm-string\">'a Dash wallet mnemonic with evonet funds goes here'</span>,\n};\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">sdk</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">new</span> <span class=\"cm-variable\">DashJS</span>.<span class=\"cm-property\">SDK</span>(<span class=\"cm-variable\">sdkOpts</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">createIdentity</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">async</span> <span class=\"cm-keyword\">function</span> () {\n  <span class=\"cm-keyword\">try</span> {\n    <span class=\"cm-keyword\">await</span> <span class=\"cm-variable\">sdk</span>.<span class=\"cm-property\">isReady</span>();\n    <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">platform</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">sdk</span>.<span class=\"cm-property\">platform</span>;\n    <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">identity</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">identities</span>.<span class=\"cm-property\">register</span>(<span class=\"cm-string\">'user'</span>);  <span class=\"cm-comment\">&#47;&#47; literally 'user', do not change</span>\n    <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>({<span class=\"cm-property\">identity</span>});\n  } <span class=\"cm-keyword\">catch</span> (<span class=\"cm-def\">e</span>) {\n    <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">error</span>(<span class=\"cm-string\">'Something went wrong:'</span>, <span class=\"cm-variable-2\">e</span>);\n  } <span class=\"cm-keyword\">finally</span> {\n    <span class=\"cm-variable\">sdk</span>.<span class=\"cm-property\">disconnect</span>();\n  }\n}\n\n<span class=\"cm-variable\">createIdentity</span>()</span></code></pre></span>\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><p>The identity will be output to the console. The identity will need to have one confirmation before it is accessible via <code>sdk.platform.identity.get</code>.</p>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-whats-happening\"></div>What&#39;s Happening<a class=\"fa fa-anchor\" href=\"#section-whats-happening\"></a></h1>\n<p>After connecting to the SDK, we call <code>platform.identities.register</code> with the parameter <code>&#39;user&#39;</code>, which indicates that we want to create a user identity. This will generate a keypair and submit an <em>Identity Open Transaction</em>. After the identity is registered, we output it to the console.</p>\n\n</div>", 
 "user": "5b8400d7185d5e00036dcc3b", 
 "isReference": false, 
 "slug": "tutorial-register-an-identity", 
 "link_url": "", 
 "project": "5bda01cad172e200499a20a9", 
 "__v": 5, 
 "_id": "5d9c66f693fc5d0021d51322", 
 "order": 4, 
 "updates": [
  "5e0caf68bf7c9f0012602111", 
  "5e17d61bf7144c006f9ab5f5"
 ]
}