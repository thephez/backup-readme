{
 "metadata": {
  "image": [],
  "title": "",
  "description": "",
  "keywords": "",
  "robots": "index"
 },
 "api": {
  "method": "get",
  "url": "",
  "auth": "required",
  "results": {
   "codes": [
    {
     "status": 200,
     "language": "json",
     "code": "{}",
     "name": ""
    },
    {
     "status": 400,
     "language": "json",
     "code": "{}",
     "name": ""
    }
   ]
  },
  "params": []
 },
 "next": {
  "description": "",
  "pages": [
   {
    "type": "doc",
    "icon": "file-text-o",
    "name": "Retrieve an Identity",
    "slug": "tutorial-retrieve-an-identity",
    "category": "Tutorials"
   },
   {
    "type": "doc",
    "icon": "file-text-o",
    "name": "Register a Name for an Identity",
    "slug": "tutorial-register-a-name-for-an-identity",
    "category": "Tutorials"
   },
   {
    "type": "doc",
    "icon": "file-text-o",
    "name": "Topup an Identity's Balance",
    "slug": "tutorial-topup-an-identity-balance",
    "category": "Tutorials"
   }
  ]
 },
 "algolia": {
  "recordCount": 5,
  "publishPending": false,
  "translationFailure": false,
  "updatedAt": "2023-09-06T16:36:33.524Z"
 },
 "title": "Register an Identity",
 "icon": "",
 "updates": [
  "5e0caf68bf7c9f0012602111",
  "5e17d61bf7144c006f9ab5f5",
  "5f2cff6cc53abe05e1d778ef"
 ],
 "type": "basic",
 "slug": "tutorial-register-an-identity",
 "excerpt": "Establish an Identity on Dash Platform",
 "body": "The purpose of this tutorial is to walk through the steps necessary to register an identity.\n\n# Overview\nIdentities serve as the basis for interactions with Dash Platform. They consist primarily of a public key used to register a unique entity on the network. Additional details regarding identities can be found in the [Identity description](explanation-identity).\n\n## Prerequisites\n- [General prerequisites](tutorials-introduction#prerequisites) (Node.js / Dash SDK installed)\n- A wallet mnemonic with some funds in it: [How to Create and Fund a Wallet](tutorial-create-and-fund-a-wallet)\n\n# Code\n\n> \ud83d\udcd8 Wallet Operations\n>\n> The JavaScript SDK does not cache wallet information. It re-syncs the entire Core chain for some wallet operations (e.g. `client.getWalletAccount()`) which can result in wait times of  5+ minutes. \n>\n> A future release will add caching so that access is much faster after the initial sync. For now, the `skipSynchronizationBeforeHeight` option can be used to sync the wallet starting at a certain block height.\n\n```javascript\nconst Dash = require('dash');\n\nconst clientOpts = {\n  network: 'testnet',\n  wallet: {\n  \tmnemonic: 'a Dash wallet mnemonic with testnet funds goes here',\n    unsafeOptions: {\n      skipSynchronizationBeforeHeight: 650000, // only sync from early-2022\n    },\n  },\n};\nconst client = new Dash.Client(clientOpts);\n\nconst createIdentity = async () => {\n  return client.platform.identities.register();\n};\n\ncreateIdentity()\n  .then((d) => console.log('Identity:\\n', d.toJSON()))\n  .catch((e) => console.error('Something went wrong:\\n', e))\n  .finally(() => client.disconnect());\n``` \n\nThe Identity will be output to the console. The Identity will need to have one confirmation before it is accessible via `client.platform.identity.get`.\n\n> \ud83d\udc4d\n>\n> **Make a note of the returned identity `id` as it will be used used in subsequent tutorials throughout the documentation.**\n\n# What's Happening\n\nAfter connecting to the Client, we call `platform.identities.register`. This will generate a keypair and submit an _Identity Create State Transaction_. After the Identity is registered, we output it to the console.",
 "mdxAltBody": "",
 "order": 0,
 "isReference": false,
 "deprecated": false,
 "hidden": false,
 "sync_unique": "",
 "link_url": "",
 "link_external": false,
 "reusableContent": [],
 "previousSlug": "",
 "slugUpdatedAt": "2020-08-07T03:01:33.510Z",
 "revision": 3,
 "_id": "64f8a9df750465004742ad8d",
 "version": "64f8a9df750465004742ae1d",
 "updatedAt": "2023-01-22T17:07:09.740Z",
 "createdAt": "2019-10-08T10:37:42.293Z",
 "project": "5bda01cad172e200499a20a9",
 "user": "62b2101422da70001ee51d95",
 "category": "64f8a9df750465004742ad6e",
 "__v": 8,
 "parentDoc": "64f8a9df750465004742adc9",
 "pendingAlgoliaPublish": false,
 "isApi": false,
 "id": "64f8a9df750465004742ad8d",
 "body_html": "<p>The purpose of this tutorial is to walk through the steps necessary to register an identity.</p>\n<h1 class=\"heading heading-1 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"overview\"></div><div class=\"heading-text\"><div id=\"section-overview\" class=\"heading-anchor_backwardsCompatibility\"></div>Overview</div><a aria-label=\"Skip link to Overview\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#overview\"></a></h1>\n<p>Identities serve as the basis for interactions with Dash Platform. They consist primarily of a public key used to register a unique entity on the network. Additional details regarding identities can be found in the <a href=\"explanation-identity\" target=\"\" title=\"\">Identity description</a>.</p>\n<h2 class=\"heading heading-2 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"prerequisites\"></div><div class=\"heading-text\"><div id=\"section-prerequisites\" class=\"heading-anchor_backwardsCompatibility\"></div>Prerequisites</div><a aria-label=\"Skip link to Prerequisites\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#prerequisites\"></a></h2>\n<ul>\n<li><a href=\"tutorials-introduction#prerequisites\" target=\"\" title=\"\">General prerequisites</a> (Node.js / Dash SDK installed)</li>\n<li>A wallet mnemonic with some funds in it: <a href=\"tutorial-create-and-fund-a-wallet\" target=\"\" title=\"\">How to Create and Fund a Wallet</a></li>\n</ul>\n<h1 class=\"heading heading-1 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"code\"></div><div class=\"heading-text\"><div id=\"section-code\" class=\"heading-anchor_backwardsCompatibility\"></div>Code</div><a aria-label=\"Skip link to Code\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#code\"></a></h1>\n<blockquote class=\"callout callout_info\" theme=\"\ud83d\udcd8\"><h2 class=\"callout-heading\"><span class=\"callout-icon\">\ud83d\udcd8</span><p>Wallet Operations</p></h2><p>The JavaScript SDK does not cache wallet information. It re-syncs the entire Core chain for some wallet operations (e.g. <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">client.getWalletAccount()</code>) which can result in wait times of  5+ minutes. </p><p>A future release will add caching so that access is much faster after the initial sync. For now, the <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">skipSynchronizationBeforeHeight</code> option can be used to sync the wallet starting at a certain block height.</p></blockquote>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">JavaScript</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-javascript theme-light\" data-lang=\"javascript\" name=\"\" tabindex=\"0\">const Dash = require(&#x27;dash&#x27;);\n\nconst clientOpts = {\n  network: &#x27;testnet&#x27;,\n  wallet: {\n  \tmnemonic: &#x27;a Dash wallet mnemonic with testnet funds goes here&#x27;,\n    unsafeOptions: {\n      skipSynchronizationBeforeHeight: 650000, // only sync from early-2022\n    },\n  },\n};\nconst client = new Dash.Client(clientOpts);\n\nconst createIdentity = async () =&gt; {\n  return client.platform.identities.register();\n};\n\ncreateIdentity()\n  .then((d) =&gt; console.log(&#x27;Identity:\\n&#x27;, d.toJSON()))\n  .catch((e) =&gt; console.error(&#x27;Something went wrong:\\n&#x27;, e))\n  .finally(() =&gt; client.disconnect());\n</code></pre></div></div>\n<p>The Identity will be output to the console. The Identity will need to have one confirmation before it is accessible via <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">client.platform.identity.get</code>.</p>\n<blockquote class=\"callout callout_okay\" theme=\"\ud83d\udc4d\"><h2 class=\"callout-heading empty\"><span class=\"callout-icon\">\ud83d\udc4d</span></h2><p><strong>Make a note of the returned identity <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">id</code> as it will be used used in subsequent tutorials throughout the documentation.</strong></p></blockquote>\n<h1 class=\"heading heading-1 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"whats-happening\"></div><div class=\"heading-text\"><div id=\"section-whats-happening\" class=\"heading-anchor_backwardsCompatibility\"></div>What&#x27;s Happening</div><a aria-label=\"Skip link to What&#x27;s Happening\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#whats-happening\"></a></h1>\n<p>After connecting to the Client, we call <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">platform.identities.register</code>. This will generate a keypair and submit an <em>Identity Create State Transaction</em>. After the Identity is registered, we output it to the console.</p>"
}