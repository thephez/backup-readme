{
 "metadata": {
  "image": [],
  "title": "",
  "description": "",
  "keywords": ""
 },
 "api": {
  "method": "get",
  "url": "",
  "auth": "required",
  "results": {
   "codes": [
    {
     "status": 200,
     "language": "json",
     "code": "{}",
     "name": ""
    },
    {
     "status": 400,
     "language": "json",
     "code": "{}",
     "name": ""
    }
   ]
  },
  "params": [],
  "examples": {
   "codes": []
  }
 },
 "next": {
  "description": "",
  "pages": [
   {
    "type": "doc",
    "icon": "file-text-o",
    "name": "Submit Documents",
    "slug": "tutorial-submit-documents",
    "category": "Tutorials"
   },
   {
    "type": "doc",
    "icon": "file-text-o",
    "name": "Retrieve Documents",
    "slug": "tutorial-retrieve-documents",
    "category": "Tutorials"
   }
  ]
 },
 "algolia": {
  "recordCount": 7,
  "publishPending": false,
  "updatedAt": "2023-09-12T12:42:55.938Z"
 },
 "title": "Retrieve a Data Contract",
 "icon": "",
 "updates": [
  "5f2cff96176be00014e5645c",
  "629efcee4fd3250048ac2b1d"
 ],
 "type": "basic",
 "slug": "tutorial-retrieve-a-data-contract",
 "excerpt": "Retrieve details for a Dash Platform data contract",
 "body": "# Overview\n\nIn this tutorial we will retrieve the data contract created in the [Register a Data Contract tutorial](tutorial-register-a-data-contract).\n\n## Prerequisites\n\n- [General prerequisites](tutorials-introduction#prerequisites) (Node.js / Dash SDK installed)\n- A Dash Platform Contract ID: [Tutorial: Register a Data Contract](tutorial-register-a-data-contract) \n\n# Code\n\n## Retrieving a data contract\n\n```javascript\nconst Dash = require('dash');\n\nconst client = new Dash.Client({ network: 'testnet' });\n\nconst retrieveContract = async () => {\n  const contractId = '8cvMFwa2YbEsNNoc1PXfTacy2PVq2SzVnkZLeQSzjfi6';\n  return client.platform.contracts.get(contractId);\n};\n\nretrieveContract()\n  .then((d) => console.dir(d.toJSON(), { depth: 5 }))\n  .catch((e) => console.error('Something went wrong:\\n', e))\n  .finally(() => client.disconnect());\n```\n\n## Updating the client app list\n\n> \ud83d\udcd8 \n> \n> In many cases it may be desirable to work with a newly retrieved data contract using the `<contract name>.<contract document>` syntax (e.g. `dpns.domain`). Data contracts that were created after the client was initialized or not included in the initial client options can be added via `client.getApps().set(...)`.\n\n```javascript\nconst Dash = require('dash');\nconst { PlatformProtocol: { Identifier } } = Dash;\n\nconst myContractId = 'a contract ID';\nconst client = new Dash.Client();\n\nclient.platform.contracts.get(myContractId)\n  .then((myContract) => {\n    client.getApps().set('myNewContract', {\n      contractId: Identifier.from(myContractId),\n      contract: myContract,\n    });\n  });\n```\n\n# Example Data Contract\n\nThe following example response shows a retrieved contract:\n\n```json\n{\n  \"$format_version\": \"0\",\n  \"id\": \"8cvMFwa2YbEsNNoc1PXfTacy2PVq2SzVnkZLeQSzjfi6\",\n  \"config\": {\n    \"$format_version\": \"0\",\n    \"canBeDeleted\": false,\n    \"readonly\": false,\n    \"keepsHistory\": false,\n    \"documentsKeepHistoryContractDefault\": false,\n    \"documentsMutableContractDefault\": true,\n    \"requiresIdentityEncryptionBoundedKey\": null,\n    \"requiresIdentityDecryptionBoundedKey\": null\n  },\n  \"version\": 1,\n  \"ownerId\": \"AsdMKouqE5NB7CeQFi4wr5oj8vFUYTtdSvxFtAvtCbhh\",\n  \"schemaDefs\": null,\n  \"documentSchemas\": {\n    \"note\": {\n      \"type\": \"object\",\n      \"properties\": { \"message\": { \"type\": \"string\" } },\n      \"additionalProperties\": false\n    }\n  }\n}\n```\n\n> \ud83d\udcd8 \n> \n> Please refer to the [data contract reference page](reference-data-contracts) for more comprehensive details related to contracts and documents.\n\n# What's Happening\n\nAfter we initialize the Client, we request a contract. The `platform.contracts.get` method takes a single argument: a contract ID. After the contract is retrieved, it is displayed on the console.\n\nThe second code example shows how the contract could be assigned a name to make it easily accessible without initializing an additional client.",
 "order": 1,
 "isReference": false,
 "deprecated": false,
 "hidden": false,
 "sync_unique": "",
 "link_url": "",
 "link_external": false,
 "reusableContent": [],
 "previousSlug": "",
 "slugUpdatedAt": "2020-07-22T19:52:07.679Z",
 "revision": 5,
 "_id": "64f8a9df750465004742adba",
 "pendingAlgoliaPublish": false,
 "createdAt": "2020-06-18T14:01:26.820Z",
 "updatedAt": "2023-09-12T12:42:55.565Z",
 "user": "5b8400d7185d5e00036dcc3b",
 "category": "64f8a9df750465004742ad6e",
 "project": "5bda01cad172e200499a20a9",
 "version": "64f8a9df750465004742ae1d",
 "__v": 3,
 "parentDoc": "64f8a9df750465004742adc8",
 "isApi": false,
 "id": "64f8a9df750465004742adba",
 "body_html": "<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-overview\"></div>Overview<a class=\"fa fa-anchor\" href=\"#section-overview\"></a></h1>\n<p>In this tutorial we will retrieve the data contract created in the <a href=\"tutorial-register-a-data-contract\">Register a Data Contract tutorial</a>.</p>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-prerequisites\"></div>Prerequisites<a class=\"fa fa-anchor\" href=\"#section-prerequisites\"></a></h2>\n<ul>\n<li ><a href=\"tutorials-introduction#prerequisites\">General prerequisites</a> (Node.js / Dash SDK installed)</li><li >A Dash Platform Contract ID: <a href=\"tutorial-register-a-data-contract\">Tutorial: Register a Data Contract</a> </li></ul>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-code\"></div>Code<a class=\"fa fa-anchor\" href=\"#section-code\"></a></h1>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-retrieving-a-data-contract\"></div>Retrieving a data contract<a class=\"fa fa-anchor\" href=\"#section-retrieving-a-data-contract\"></a></h2>\n<pre><code class=\"lang-javascript\"><span class='cm-s-neo'><span class=\"cm-keyword\">const</span> <span class=\"cm-def\">Dash</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">require</span>(<span class=\"cm-string\">'dash'</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">client</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">new</span> <span class=\"cm-variable\">Dash</span>.<span class=\"cm-property\">Client</span>({ <span class=\"cm-property\">network</span>: <span class=\"cm-string\">'testnet'</span> });\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">retrieveContract</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">async</span> () <span class=\"cm-operator\">=&gt;</span> {\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">contractId</span> <span class=\"cm-operator\">=</span> <span class=\"cm-string\">'8cvMFwa2YbEsNNoc1PXfTacy2PVq2SzVnkZLeQSzjfi6'</span>;\n  <span class=\"cm-keyword\">return</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">platform</span>.<span class=\"cm-property\">contracts</span>.<span class=\"cm-property\">get</span>(<span class=\"cm-variable-2\">contractId</span>);\n};\n\n<span class=\"cm-variable\">retrieveContract</span>()\n  .<span class=\"cm-property\">then</span>((<span class=\"cm-def\">d</span>) <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">dir</span>(<span class=\"cm-variable-2\">d</span>.<span class=\"cm-property\">toJSON</span>(), { <span class=\"cm-property\">depth</span>: <span class=\"cm-number\">5</span> }))\n  .<span class=\"cm-property\">catch</span>((<span class=\"cm-def\">e</span>) <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">error</span>(<span class=\"cm-string\">'Something went wrong:\\n'</span>, <span class=\"cm-variable-2\">e</span>))\n  .<span class=\"cm-property\">finally</span>(() <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">disconnect</span>());</span>\n</code></pre>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-updating-the-client-app-list\"></div>Updating the client app list<a class=\"fa fa-anchor\" href=\"#section-updating-the-client-app-list\"></a></h2>\n<blockquote>\n<p>\ud83d\udcd8 </p>\n<p>In many cases it may be desirable to work with a newly retrieved data contract using the <code>&lt;contract name&gt;.&lt;contract document&gt;</code> syntax (e.g. <code>dpns.domain</code>). Data contracts that were created after the client was initialized or not included in the initial client options can be added via <code>client.getApps().set(...)</code>.</p>\n</blockquote>\n<pre><code class=\"lang-javascript\"><span class='cm-s-neo'><span class=\"cm-keyword\">const</span> <span class=\"cm-def\">Dash</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">require</span>(<span class=\"cm-string\">'dash'</span>);\n<span class=\"cm-keyword\">const</span> { <span class=\"cm-property\">PlatformProtocol</span>: { <span class=\"cm-def\">Identifier</span> } } <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">Dash</span>;\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">myContractId</span> <span class=\"cm-operator\">=</span> <span class=\"cm-string\">'a contract ID'</span>;\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">client</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">new</span> <span class=\"cm-variable\">Dash</span>.<span class=\"cm-property\">Client</span>();\n\n<span class=\"cm-variable\">client</span>.<span class=\"cm-property\">platform</span>.<span class=\"cm-property\">contracts</span>.<span class=\"cm-property\">get</span>(<span class=\"cm-variable\">myContractId</span>)\n  .<span class=\"cm-property\">then</span>((<span class=\"cm-def\">myContract</span>) <span class=\"cm-operator\">=&gt;</span> {\n    <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">getApps</span>().<span class=\"cm-property\">set</span>(<span class=\"cm-string\">'myNewContract'</span>, {\n      <span class=\"cm-property\">contractId</span>: <span class=\"cm-variable\">Identifier</span>.<span class=\"cm-property\">from</span>(<span class=\"cm-variable\">myContractId</span>),\n      <span class=\"cm-property\">contract</span>: <span class=\"cm-variable-2\">myContract</span>,\n    });\n  });</span>\n</code></pre>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-example-data-contract\"></div>Example Data Contract<a class=\"fa fa-anchor\" href=\"#section-example-data-contract\"></a></h1>\n<p>The following example response shows a retrieved contract:</p>\n<pre><code class=\"lang-json\"><span class='cm-s-neo'>{\n  <span class=\"cm-property\">\"$format_version\"</span>: <span class=\"cm-string\">\"0\"</span>,\n  <span class=\"cm-property\">\"id\"</span>: <span class=\"cm-string\">\"8cvMFwa2YbEsNNoc1PXfTacy2PVq2SzVnkZLeQSzjfi6\"</span>,\n  <span class=\"cm-property\">\"config\"</span>: {\n    <span class=\"cm-property\">\"$format_version\"</span>: <span class=\"cm-string\">\"0\"</span>,\n    <span class=\"cm-property\">\"canBeDeleted\"</span>: <span class=\"cm-atom\">false</span>,\n    <span class=\"cm-property\">\"readonly\"</span>: <span class=\"cm-atom\">false</span>,\n    <span class=\"cm-property\">\"keepsHistory\"</span>: <span class=\"cm-atom\">false</span>,\n    <span class=\"cm-property\">\"documentsKeepHistoryContractDefault\"</span>: <span class=\"cm-atom\">false</span>,\n    <span class=\"cm-property\">\"documentsMutableContractDefault\"</span>: <span class=\"cm-atom\">true</span>,\n    <span class=\"cm-property\">\"requiresIdentityEncryptionBoundedKey\"</span>: <span class=\"cm-atom\">null</span>,\n    <span class=\"cm-property\">\"requiresIdentityDecryptionBoundedKey\"</span>: <span class=\"cm-atom\">null</span>\n  },\n  <span class=\"cm-property\">\"version\"</span>: <span class=\"cm-number\">1</span>,\n  <span class=\"cm-property\">\"ownerId\"</span>: <span class=\"cm-string\">\"AsdMKouqE5NB7CeQFi4wr5oj8vFUYTtdSvxFtAvtCbhh\"</span>,\n  <span class=\"cm-property\">\"schemaDefs\"</span>: <span class=\"cm-atom\">null</span>,\n  <span class=\"cm-property\">\"documentSchemas\"</span>: {\n    <span class=\"cm-property\">\"note\"</span>: {\n      <span class=\"cm-property\">\"type\"</span>: <span class=\"cm-string\">\"object\"</span>,\n      <span class=\"cm-property\">\"properties\"</span>: { <span class=\"cm-property\">\"message\"</span>: { <span class=\"cm-property\">\"type\"</span>: <span class=\"cm-string\">\"string\"</span> } },\n      <span class=\"cm-property\">\"additionalProperties\"</span>: <span class=\"cm-atom\">false</span>\n    }\n  }\n}</span>\n</code></pre>\n<blockquote>\n<p>\ud83d\udcd8 </p>\n<p>Please refer to the <a href=\"reference-data-contracts\">data contract reference page</a> for more comprehensive details related to contracts and documents.</p>\n</blockquote>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-whats-happening\"></div>What&#39;s Happening<a class=\"fa fa-anchor\" href=\"#section-whats-happening\"></a></h1>\n<p>After we initialize the Client, we request a contract. The <code>platform.contracts.get</code> method takes a single argument: a contract ID. After the contract is retrieved, it is displayed on the console.</p>\n<p>The second code example shows how the contract could be assigned a name to make it easily accessible without initializing an additional client.</p>\n\n</div>"
}