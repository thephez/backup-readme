{
 "metadata": {
  "image": [],
  "title": "",
  "description": ""
 },
 "api": {
  "method": "get",
  "url": "",
  "auth": "required",
  "results": {
   "codes": [
    {
     "status": 200,
     "language": "json",
     "code": "{}",
     "name": ""
    },
    {
     "status": 400,
     "language": "json",
     "code": "{}",
     "name": ""
    }
   ]
  },
  "params": []
 },
 "next": {
  "description": "",
  "pages": []
 },
 "algolia": {
  "recordCount": 5,
  "publishPending": false,
  "updatedAt": "2023-03-07T17:41:06.836Z"
 },
 "title": "Retrieve a Name",
 "icon": "",
 "updates": [],
 "type": "basic",
 "slug": "tutorial-retrieve-a-name",
 "excerpt": "Search for a name in the Dash Platform Name Service (DPNS)",
 "body": "In this tutorial we will retrieve the name created in the [Register a Name for an Identity tutorial](tutorial-register-a-name-for-an-identity). Additional details regarding identities can be found in the [Identity description](explanation-identity).\n\n## Prerequisites\n- [General prerequisites](tutorials-introduction#prerequisites) (Node.js / Dash SDK installed)\n\n# Code\n\n```javascript JavaScript - Resolve by Name\nconst Dash = require('dash');\n\nconst client = new Dash.Client({ network: 'testnet' });\n\nconst retrieveName = async () => {\n  // Retrieve by full name (e.g., myname.dash)\n  return client.platform.names.resolve('<identity name>.dash');\n};\n\nretrieveName()\n  .then((d) => console.log('Name retrieved:\\n', d.toJSON()))\n  .catch((e) => console.error('Something went wrong:\\n', e))\n  .finally(() => client.disconnect());\n```\n```javascript JavaScript - Revolve by Record\nconst Dash = require('dash');\n\nconst client = new Dash.Client({ network: 'testnet' });\n\nconst retrieveNameByRecord = async () => {\n  // Retrieve by a name's identity ID\n  return client.platform.names.resolveByRecord(\n    'dashUniqueIdentityId',\n    '<identity id>',\n  );\n};\n\nretrieveNameByRecord()\n  .then((d) => console.log('Name retrieved:\\n', d[0].toJSON()))\n  .catch((e) => console.error('Something went wrong:\\n', e))\n  .finally(() => client.disconnect());\n```\n```javascript JavaScript - Search for Name\nconst Dash = require('dash');\n\nconst client = new Dash.Client({ network: 'testnet' });\n\nconst retrieveNameBySearch = async () => {\n  // Search for names (e.g. `user*`)\n  return client.platform.names.search('user', 'dash');\n};\n\nretrieveNameBySearch()\n  .then((d) => {\n    for (const name of d) {\n      console.log('Name retrieved:\\n', name.toJSON());\n    }\n  })\n  .catch((e) => console.error('Something went wrong:\\n', e))\n  .finally(() => client.disconnect());\n```\n\n# Example Name\n\nThe following example response shows a retrieved name (`user-9999.dash`):\n\n```json\n{\n  '$protocolVersion': 0,\n  '$id': '4veLBZPHDkaCPF9LfZ8fX3JZiS5q5iUVGhdBbaa9ga5E',\n  '$type': 'domain',\n  '$dataContractId': '566vcJkmebVCAb2Dkj2yVMSgGFcsshupnQqtsz1RFbcy',\n  '$ownerId': 'HBNMY5QWuBVKNFLhgBTC1VmpEnscrmqKPMXpnYSHwhfn',\n  '$revision': 1,\n  label: 'user-9999',\n  records: {\n    dashUniqueIdentityId: 'HBNMY5QWuBVKNFLhgBTC1VmpEnscrmqKPMXpnYSHwhfn'\n  },\n  preorderSalt: 'BzQi567XVqc8wYiVHS887sJtL6MDbxLHNnp+UpTFSB0',\n  subdomainRules: { allowSubdomains: false },\n  normalizedLabel: 'user-9999',\n  normalizedParentDomainName: 'dash'\n}\n``` \n\n# What's Happening\n\nAfter we initialize the Client, we request a name. The [code examples](#code) demonstrate the three ways to request a name:\n\n1. Resolve by name. The `platform.names.resolve` method takes a single argument: a fully-qualified name (e.g., `user-9999.dash`). \n2. Resolve by record. The `platform.names.resolveByRecord` method takes two arguments: the record type (e.g., `dashUniqueIdentityId`) and the record value to resolve. \n3. Search. The `platform.names.search` method takes two arguments: the leading characters of the name to search for and the domain to search (e.g., `dash` for names in the `*.dash` domain). The search will return names that begin the with string provided in the first parameter.\n\nAfter the name is retrieved, it is displayed on the console.",
 "order": 6,
 "isReference": false,
 "deprecated": false,
 "hidden": false,
 "sync_unique": "",
 "link_url": "",
 "link_external": false,
 "previousSlug": "retrieve-a-name",
 "slugUpdatedAt": "2020-08-27T14:12:15.080Z",
 "revision": 4,
 "_id": "640776c254e6100011466679",
 "pendingAlgoliaPublish": false,
 "createdAt": "2020-08-27T14:08:17.006Z",
 "updatedAt": "2023-01-25T12:44:49.492Z",
 "user": "62b2101422da70001ee51d95",
 "category": "640776c254e610001146662e",
 "project": "5bda01cad172e200499a20a9",
 "version": "640776c254e610001146669e",
 "__v": 0,
 "parentDoc": "640776c254e6100011466687",
 "isApi": false,
 "id": "640776c254e6100011466679",
 "body_html": "<div class=\"magic-block-textarea\"><p>In this tutorial we will retrieve the name created in the <a href=\"tutorial-register-a-name-for-an-identity\">Register a Name for an Identity tutorial</a>. Additional details regarding identities can be found in the <a href=\"explanation-identity\">Identity description</a>.</p>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-prerequisites\"></div>Prerequisites<a class=\"fa fa-anchor\" href=\"#section-prerequisites\"></a></h2>\n<ul>\n<li ><a href=\"tutorials-introduction#prerequisites\">General prerequisites</a> (Node.js / Dash SDK installed)</li></ul>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-code\"></div>Code<a class=\"fa fa-anchor\" href=\"#section-code\"></a></h1>\n<p>```javascript JavaScript - Resolve by Name<br>const Dash = require(&#39;dash&#39;);</p>\n<p>const client = new Dash.Client({ network: &#39;testnet&#39; });</p>\n<p>const retrieveName = async () =&gt; {<br>  // Retrieve by full name (e.g., myname.dash)<br>  return client.platform.names.resolve(&#39;&lt;identity name&gt;.dash&#39;);<br>};</p>\n<p>retrieveName()<br>  .then((d) =&gt; console.log(&#39;Name retrieved:\\n&#39;, d.toJSON()))<br>  .catch((e) =&gt; console.error(&#39;Something went wrong:\\n&#39;, e))<br>  .finally(() =&gt; client.disconnect());</p>\n<pre><code>```javascript JavaScript - Revolve by Record\nconst Dash = require(&#39;dash&#39;);\n\nconst client = new Dash.Client({ network: &#39;testnet&#39; });\n\nconst retrieveNameByRecord = async () =&gt; {\n  // Retrieve by a name&#39;s identity ID\n  return client.platform.names.resolveByRecord(\n    &#39;dashUniqueIdentityId&#39;,\n    &#39;&lt;identity id&gt;&#39;,\n  );\n};\n\nretrieveNameByRecord()\n  .then((d) =&gt; console.log(&#39;Name retrieved:\\n&#39;, d[0].toJSON()))\n  .catch((e) =&gt; console.error(&#39;Something went wrong:\\n&#39;, e))\n  .finally(() =&gt; client.disconnect());\n</code></pre><p>```javascript JavaScript - Search for Name<br>const Dash = require(&#39;dash&#39;);</p>\n<p>const client = new Dash.Client({ network: &#39;testnet&#39; });</p>\n<p>const retrieveNameBySearch = async () =&gt; {<br>  // Search for names (e.g. <code>user*</code>)<br>  return client.platform.names.search(&#39;user&#39;, &#39;dash&#39;);<br>};</p>\n<p>retrieveNameBySearch()<br>  .then((d) =&gt; {<br>    for (const name of d) {<br>      console.log(&#39;Name retrieved:\\n&#39;, name.toJSON());<br>    }<br>  })<br>  .catch((e) =&gt; console.error(&#39;Something went wrong:\\n&#39;, e))<br>  .finally(() =&gt; client.disconnect());</p>\n<pre><code>\n# Example Name\n\nThe following example response shows a retrieved name (`user-9999.dash`):\n\n```json\n{\n  &#39;$protocolVersion&#39;: 0,\n  &#39;$id&#39;: &#39;4veLBZPHDkaCPF9LfZ8fX3JZiS5q5iUVGhdBbaa9ga5E&#39;,\n  &#39;$type&#39;: &#39;domain&#39;,\n  &#39;$dataContractId&#39;: &#39;566vcJkmebVCAb2Dkj2yVMSgGFcsshupnQqtsz1RFbcy&#39;,\n  &#39;$ownerId&#39;: &#39;HBNMY5QWuBVKNFLhgBTC1VmpEnscrmqKPMXpnYSHwhfn&#39;,\n  &#39;$revision&#39;: 1,\n  label: &#39;user-9999&#39;,\n  records: {\n    dashUniqueIdentityId: &#39;HBNMY5QWuBVKNFLhgBTC1VmpEnscrmqKPMXpnYSHwhfn&#39;\n  },\n  preorderSalt: &#39;BzQi567XVqc8wYiVHS887sJtL6MDbxLHNnp+UpTFSB0&#39;,\n  subdomainRules: { allowSubdomains: false },\n  normalizedLabel: &#39;user-9999&#39;,\n  normalizedParentDomainName: &#39;dash&#39;\n}\n</code></pre><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-whats-happening\"></div>What&#39;s Happening<a class=\"fa fa-anchor\" href=\"#section-whats-happening\"></a></h1>\n<p>After we initialize the Client, we request a name. The <a href=\"#code\">code examples</a> demonstrate the three ways to request a name:</p>\n<ol>\n<li  value=\"1\">Resolve by name. The <code>platform.names.resolve</code> method takes a single argument: a fully-qualified name (e.g., <code>user-9999.dash</code>). </li><li  value=\"2\">Resolve by record. The <code>platform.names.resolveByRecord</code> method takes two arguments: the record type (e.g., <code>dashUniqueIdentityId</code>) and the record value to resolve. </li><li  value=\"3\">Search. The <code>platform.names.search</code> method takes two arguments: the leading characters of the name to search for and the domain to search (e.g., <code>dash</code> for names in the <code>*.dash</code> domain). The search will return names that begin the with string provided in the first parameter.</li></ol>\n<p>After the name is retrieved, it is displayed on the console.</p>\n\n</div>"
}