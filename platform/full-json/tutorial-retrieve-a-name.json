{
 "pendingAlgoliaPublish": false, 
 "parentDoc": "60906294cda28200612695da", 
 "excerpt": "Search for a name in the Dash Platform Name Service (DPNS)", 
 "api": {
  "url": "", 
  "params": [], 
  "method": "get", 
  "auth": "required", 
  "results": {
   "codes": [
    {
     "status": 200, 
     "code": "{}", 
     "name": "", 
     "language": "json"
    }, 
    {
     "status": 400, 
     "code": "{}", 
     "name": "", 
     "language": "json"
    }
   ]
  }
 }, 
 "previousSlug": "retrieve-a-name", 
 "updatedAt": "2021-03-03T16:45:52.450Z", 
 "id": "60906294cda28200612695cc", 
 "sync_unique": "", 
 "isApi": false, 
 "createdAt": "2020-08-27T14:08:17.006Z", 
 "category": "60906294cda282006126957f", 
 "title": "Retrieve a Name", 
 "next": {
  "description": "", 
  "pages": []
 }, 
 "version": "60906294cda28200612695e5", 
 "slugUpdatedAt": "2020-08-27T14:12:15.080Z", 
 "hidden": false, 
 "type": "basic", 
 "metadata": {
  "image": [], 
  "description": "", 
  "title": ""
 }, 
 "body": "In this tutorial we will retrieve the name created in the [Register a Name for an Identity tutorial](tutorial-register-a-name-for-an-identity). Additional details regarding identities can be found in the [Identity description](explanation-identity).\n\n## Prerequisites\n- [node.js](https://nodejs.org/en/) (v12+)\n- Basic familiarity with JavaScript asychronous functions using [async/await](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await)\n- The Dash JavaScript SDK is initialized (covered in [Connecting to a Network](tutorial-connecting-to-testnet))\n\n# Code\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"const Dash = require('dash');\\n\\nconst client = new Dash.Client();\\n\\nconst retrieveName = async () => {\\n  // Retrieve by full name (e.g., myname.dash)\\n  return client.platform.names.resolve('<identity name>.dash');\\n};\\n\\nretrieveName()\\n  .then((d) => console.log('Name retrieved:\\\\n', d.toJSON()))\\n  .catch((e) => console.error('Something went wrong:\\\\n', e))\\n  .finally(() => client.disconnect());\",\n      \"language\": \"javascript\",\n      \"name\": \"JavaScript - Resolve by Name\"\n    },\n    {\n      \"code\": \"const Dash = require('dash');\\n\\nconst client = new Dash.Client();\\n\\nconst retrieveNameByRecord = async () => {\\n  // Retrieve by a name's identity ID\\n  return client.platform.names.resolveByRecord(\\n    'dashUniqueIdentityId',\\n    '<identity id>',\\n  );\\n};\\n\\nretrieveNameByRecord()\\n  .then((d) => console.log('Name retrieved:\\\\n', d[0].toJSON()))\\n  .catch((e) => console.error('Something went wrong:\\\\n', e))\\n  .finally(() => client.disconnect());\",\n      \"language\": \"javascript\",\n      \"name\": \"JavaScript - Revolve by Record\"\n    },\n    {\n      \"code\": \"const Dash = require('dash');\\n\\nconst client = new Dash.Client();\\n\\nconst retrieveNameBySearch = async () => {\\n  // Search for names (e.g. `user*`)\\n  return client.platform.names.search('user', 'dash');\\n};\\n\\nretrieveNameBySearch()\\n  .then((d) => {\\n    for (const name of d) {\\n      console.log('Name retrieved:\\\\n', name.toJSON());\\n    }\\n  })\\n  .catch((e) => console.error('Something went wrong:\\\\n', e))\\n  .finally(() => client.disconnect());\",\n      \"language\": \"javascript\",\n      \"name\": \"JavaScript - Search for Name\"\n    }\n  ]\n}\n[/block]\n# Example Name\n\nThe following example response shows a retrieved name (`user-9999.dash`):\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"{\\n  '$protocolVersion': 0,\\n  '$id': '4veLBZPHDkaCPF9LfZ8fX3JZiS5q5iUVGhdBbaa9ga5E',\\n  '$type': 'domain',\\n  '$dataContractId': '566vcJkmebVCAb2Dkj2yVMSgGFcsshupnQqtsz1RFbcy',\\n  '$ownerId': 'HBNMY5QWuBVKNFLhgBTC1VmpEnscrmqKPMXpnYSHwhfn',\\n  '$revision': 1,\\n  label: 'user-9999',\\n  records: {\\n    dashUniqueIdentityId: 'HBNMY5QWuBVKNFLhgBTC1VmpEnscrmqKPMXpnYSHwhfn'\\n  },\\n  preorderSalt: 'BzQi567XVqc8wYiVHS887sJtL6MDbxLHNnp+UpTFSB0',\\n  subdomainRules: { allowSubdomains: false },\\n  normalizedLabel: 'user-9999',\\n  normalizedParentDomainName: 'dash'\\n}\",\n      \"language\": \"json\"\n    }\n  ]\n}\n[/block]\n# What's Happening\n\nAfter we initialize the Client, we request a name. The [code examples](#code) demonstrate the three ways to request a name:\n\n1. Resolve by name. The `platform.names.resolve` method takes a single argument: a fully-qualified name (e.g., `user-9999.dash`). \n2. Resolve by record. The `platform.names.resolveByRecord` method takes two arguments: the record type (e.g., `dashUniqueIdentityId`) and the record value to resolve. \n3. Search. The `platform.names.search` method takes two arguments: the leading characters of the name to search for and the domain to search (e.g., `dash` for names in the `*.dash` domain). The search will return names that begin the with string provided in the first parameter.\n\nAfter the name is retrieved, it is displayed on the console.", 
 "link_external": false, 
 "body_html": "<div class=\"magic-block-textarea\"><p>In this tutorial we will retrieve the name created in the <a href=\"tutorial-register-a-name-for-an-identity\">Register a Name for an Identity tutorial</a>. Additional details regarding identities can be found in the <a href=\"explanation-identity\">Identity description</a>.</p>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-prerequisites\"></div>Prerequisites<a class=\"fa fa-anchor\" href=\"#section-prerequisites\"></a></h2>\n<ul>\n<li ><a href=\"https://nodejs.org/en/\">node.js</a> (v12+)</li><li >Basic familiarity with JavaScript asychronous functions using <a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await\">async/await</a></li><li >The Dash JavaScript SDK is initialized (covered in <a href=\"tutorial-connecting-to-testnet\">Connecting to a Network</a>)</li></ul>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-code\"></div>Code<a class=\"fa fa-anchor\" href=\"#section-code\"></a></h1>\n\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">JavaScript - Resolve by Name</a></li>\n\t\t<li><a href=\"\" ng-click=\"showCode(1)\" ng-class=\"{active: (1 == tab)}\">JavaScript - Revolve by Record</a></li>\n\t\t<li><a href=\"\" ng-click=\"showCode(2)\" ng-class=\"{active: (2 == tab)}\">JavaScript - Search for Name</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(780)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-780\">const Dash = require('dash');\n\nconst client = new Dash.Client();\n\nconst retrieveName = async () =&gt; {\n  // Retrieve by full name (e.g., myname.dash)\n  return client.platform.names.resolve('&lt;identity name&gt;.dash');\n};\n\nretrieveName()\n  .then((d) =&gt; console.log('Name retrieved:\\n', d.toJSON()))\n  .catch((e) =&gt; console.error('Something went wrong:\\n', e))\n  .finally(() =&gt; client.disconnect());</textarea>\n\t\t\t<pre id=\"code-780\"><code><span class='cm-s-neo'><span class=\"cm-keyword\">const</span> <span class=\"cm-def\">Dash</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">require</span>(<span class=\"cm-string\">'dash'</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">client</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">new</span> <span class=\"cm-variable\">Dash</span>.<span class=\"cm-property\">Client</span>();\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">retrieveName</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">async</span> () <span class=\"cm-operator\">=&gt;</span> {\n  <span class=\"cm-comment\">&#47;&#47; Retrieve by full name (e.g., myname.dash)</span>\n  <span class=\"cm-keyword\">return</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">platform</span>.<span class=\"cm-property\">names</span>.<span class=\"cm-property\">resolve</span>(<span class=\"cm-string\">'&lt;identity name&gt;.dash'</span>);\n};\n\n<span class=\"cm-variable\">retrieveName</span>()\n  .<span class=\"cm-property\">then</span>((<span class=\"cm-def\">d</span>) <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-string\">'Name retrieved:\\n'</span>, <span class=\"cm-variable-2\">d</span>.<span class=\"cm-property\">toJSON</span>()))\n  .<span class=\"cm-property\">catch</span>((<span class=\"cm-def\">e</span>) <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">error</span>(<span class=\"cm-string\">'Something went wrong:\\n'</span>, <span class=\"cm-variable-2\">e</span>))\n  .<span class=\"cm-property\">finally</span>(() <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">disconnect</span>());</span></code></pre></span><span ng-if=\"tab == 1\">\n\t\t\t<button ng-click=\"copyCode(301)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-301\">const Dash = require('dash');\n\nconst client = new Dash.Client();\n\nconst retrieveNameByRecord = async () =&gt; {\n  // Retrieve by a name's identity ID\n  return client.platform.names.resolveByRecord(\n    'dashUniqueIdentityId',\n    '&lt;identity id&gt;',\n  );\n};\n\nretrieveNameByRecord()\n  .then((d) =&gt; console.log('Name retrieved:\\n', d[0].toJSON()))\n  .catch((e) =&gt; console.error('Something went wrong:\\n', e))\n  .finally(() =&gt; client.disconnect());</textarea>\n\t\t\t<pre id=\"code-301\"><code><span class='cm-s-neo'><span class=\"cm-keyword\">const</span> <span class=\"cm-def\">Dash</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">require</span>(<span class=\"cm-string\">'dash'</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">client</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">new</span> <span class=\"cm-variable\">Dash</span>.<span class=\"cm-property\">Client</span>();\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">retrieveNameByRecord</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">async</span> () <span class=\"cm-operator\">=&gt;</span> {\n  <span class=\"cm-comment\">&#47;&#47; Retrieve by a name's identity ID</span>\n  <span class=\"cm-keyword\">return</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">platform</span>.<span class=\"cm-property\">names</span>.<span class=\"cm-property\">resolveByRecord</span>(\n    <span class=\"cm-string\">'dashUniqueIdentityId'</span>,\n    <span class=\"cm-string\">'&lt;identity id&gt;'</span>,\n  );\n};\n\n<span class=\"cm-variable\">retrieveNameByRecord</span>()\n  .<span class=\"cm-property\">then</span>((<span class=\"cm-def\">d</span>) <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-string\">'Name retrieved:\\n'</span>, <span class=\"cm-variable-2\">d</span>[<span class=\"cm-number\">0</span>].<span class=\"cm-property\">toJSON</span>()))\n  .<span class=\"cm-property\">catch</span>((<span class=\"cm-def\">e</span>) <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">error</span>(<span class=\"cm-string\">'Something went wrong:\\n'</span>, <span class=\"cm-variable-2\">e</span>))\n  .<span class=\"cm-property\">finally</span>(() <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">disconnect</span>());</span></code></pre></span><span ng-if=\"tab == 2\">\n\t\t\t<button ng-click=\"copyCode(527)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-527\">const Dash = require('dash');\n\nconst client = new Dash.Client();\n\nconst retrieveNameBySearch = async () =&gt; {\n  // Search for names (e.g. `user*`)\n  return client.platform.names.search('user', 'dash');\n};\n\nretrieveNameBySearch()\n  .then((d) =&gt; {\n    for (const name of d) {\n      console.log('Name retrieved:\\n', name.toJSON());\n    }\n  })\n  .catch((e) =&gt; console.error('Something went wrong:\\n', e))\n  .finally(() =&gt; client.disconnect());</textarea>\n\t\t\t<pre id=\"code-527\"><code><span class='cm-s-neo'><span class=\"cm-keyword\">const</span> <span class=\"cm-def\">Dash</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">require</span>(<span class=\"cm-string\">'dash'</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">client</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">new</span> <span class=\"cm-variable\">Dash</span>.<span class=\"cm-property\">Client</span>();\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">retrieveNameBySearch</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">async</span> () <span class=\"cm-operator\">=&gt;</span> {\n  <span class=\"cm-comment\">&#47;&#47; Search for names (e.g. `user*`)</span>\n  <span class=\"cm-keyword\">return</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">platform</span>.<span class=\"cm-property\">names</span>.<span class=\"cm-property\">search</span>(<span class=\"cm-string\">'user'</span>, <span class=\"cm-string\">'dash'</span>);\n};\n\n<span class=\"cm-variable\">retrieveNameBySearch</span>()\n  .<span class=\"cm-property\">then</span>((<span class=\"cm-def\">d</span>) <span class=\"cm-operator\">=&gt;</span> {\n    <span class=\"cm-keyword\">for</span> (<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">name</span> <span class=\"cm-keyword\">of</span> <span class=\"cm-variable-2\">d</span>) {\n      <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-string\">'Name retrieved:\\n'</span>, <span class=\"cm-variable-2\">name</span>.<span class=\"cm-property\">toJSON</span>());\n    }\n  })\n  .<span class=\"cm-property\">catch</span>((<span class=\"cm-def\">e</span>) <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">error</span>(<span class=\"cm-string\">'Something went wrong:\\n'</span>, <span class=\"cm-variable-2\">e</span>))\n  .<span class=\"cm-property\">finally</span>(() <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">disconnect</span>());</span></code></pre></span>\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-example-name\"></div>Example Name<a class=\"fa fa-anchor\" href=\"#section-example-name\"></a></h1>\n<p>The following example response shows a retrieved name (<code>user-9999.dash</code>):</p>\n\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">JSON</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(135)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-135\">{\n  '$protocolVersion': 0,\n  '$id': '4veLBZPHDkaCPF9LfZ8fX3JZiS5q5iUVGhdBbaa9ga5E',\n  '$type': 'domain',\n  '$dataContractId': '566vcJkmebVCAb2Dkj2yVMSgGFcsshupnQqtsz1RFbcy',\n  '$ownerId': 'HBNMY5QWuBVKNFLhgBTC1VmpEnscrmqKPMXpnYSHwhfn',\n  '$revision': 1,\n  label: 'user-9999',\n  records: {\n    dashUniqueIdentityId: 'HBNMY5QWuBVKNFLhgBTC1VmpEnscrmqKPMXpnYSHwhfn'\n  },\n  preorderSalt: 'BzQi567XVqc8wYiVHS887sJtL6MDbxLHNnp+UpTFSB0',\n  subdomainRules: { allowSubdomains: false },\n  normalizedLabel: 'user-9999',\n  normalizedParentDomainName: 'dash'\n}</textarea>\n\t\t\t<pre id=\"code-135\"><code><span class='cm-s-neo'>{\n  <span class=\"cm-property\">'$protocolVersion'</span>: <span class=\"cm-number\">0</span>,\n  <span class=\"cm-property\">'$id'</span>: <span class=\"cm-string\">'4veLBZPHDkaCPF9LfZ8fX3JZiS5q5iUVGhdBbaa9ga5E'</span>,\n  <span class=\"cm-property\">'$type'</span>: <span class=\"cm-string\">'domain'</span>,\n  <span class=\"cm-property\">'$dataContractId'</span>: <span class=\"cm-string\">'566vcJkmebVCAb2Dkj2yVMSgGFcsshupnQqtsz1RFbcy'</span>,\n  <span class=\"cm-property\">'$ownerId'</span>: <span class=\"cm-string\">'HBNMY5QWuBVKNFLhgBTC1VmpEnscrmqKPMXpnYSHwhfn'</span>,\n  <span class=\"cm-property\">'$revision'</span>: <span class=\"cm-number\">1</span>,\n  <span class=\"cm-property\">label</span>: <span class=\"cm-string\">'user-9999'</span>,\n  <span class=\"cm-property\">records</span>: {\n    <span class=\"cm-property\">dashUniqueIdentityId</span>: <span class=\"cm-string\">'HBNMY5QWuBVKNFLhgBTC1VmpEnscrmqKPMXpnYSHwhfn'</span>\n  },\n  <span class=\"cm-property\">preorderSalt</span>: <span class=\"cm-string\">'BzQi567XVqc8wYiVHS887sJtL6MDbxLHNnp+UpTFSB0'</span>,\n  <span class=\"cm-property\">subdomainRules</span>: { <span class=\"cm-property\">allowSubdomains</span>: <span class=\"cm-atom\">false</span> },\n  <span class=\"cm-property\">normalizedLabel</span>: <span class=\"cm-string\">'user-9999'</span>,\n  <span class=\"cm-property\">normalizedParentDomainName</span>: <span class=\"cm-string\">'dash'</span>\n}</span></code></pre></span>\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-whats-happening\"></div>What&#39;s Happening<a class=\"fa fa-anchor\" href=\"#section-whats-happening\"></a></h1>\n<p>After we initialize the Client, we request a name. The <a href=\"#code\">code examples</a> demonstrate the three ways to request a name:</p>\n<ol>\n<li  value=\"1\">Resolve by name. The <code>platform.names.resolve</code> method takes a single argument: a fully-qualified name (e.g., <code>user-9999.dash</code>). </li><li  value=\"2\">Resolve by record. The <code>platform.names.resolveByRecord</code> method takes two arguments: the record type (e.g., <code>dashUniqueIdentityId</code>) and the record value to resolve. </li><li  value=\"3\">Search. The <code>platform.names.search</code> method takes two arguments: the leading characters of the name to search for and the domain to search (e.g., <code>dash</code> for names in the <code>*.dash</code> domain). The search will return names that begin the with string provided in the first parameter.</li></ol>\n<p>After the name is retrieved, it is displayed on the console.</p>\n\n</div>", 
 "user": "5b8400d7185d5e00036dcc3b", 
 "isReference": false, 
 "slug": "tutorial-retrieve-a-name", 
 "link_url": "", 
 "project": "5bda01cad172e200499a20a9", 
 "__v": 0, 
 "_id": "60906294cda28200612695cc", 
 "order": 5, 
 "updates": []
}