{
 "metadata": {
  "image": [],
  "title": "",
  "description": "",
  "keywords": "",
  "robots": "index"
 },
 "api": {
  "method": "get",
  "url": "",
  "auth": "required",
  "results": {
   "codes": [
    {
     "status": 200,
     "language": "json",
     "code": "{}",
     "name": ""
    },
    {
     "status": 400,
     "language": "json",
     "code": "{}",
     "name": ""
    }
   ]
  },
  "params": [],
  "examples": {
   "codes": []
  }
 },
 "next": {
  "description": "",
  "pages": []
 },
 "algolia": {
  "recordCount": 5,
  "publishPending": false,
  "translationFailure": false,
  "updatedAt": "2023-09-12T12:55:18.292Z"
 },
 "title": "Retrieve a Name",
 "icon": "",
 "updates": [],
 "type": "basic",
 "slug": "tutorial-retrieve-a-name",
 "excerpt": "Search for a name in the Dash Platform Name Service (DPNS)",
 "body": "In this tutorial we will retrieve the name created in the [Register a Name for an Identity tutorial](tutorial-register-a-name-for-an-identity). Additional details regarding identities can be found in the [Identity description](explanation-identity).\n\n## Prerequisites\n\n- [General prerequisites](tutorials-introduction#prerequisites) (Node.js / Dash SDK installed)\n\n# Code\n\n```javascript JavaScript - Resolve by Name\nconst Dash = require('dash');\n\nconst client = new Dash.Client({ network: 'testnet' });\n\nconst retrieveName = async () => {\n  // Retrieve by full name (e.g., myname.dash)\n  return client.platform.names.resolve('<identity name>.dash');\n};\n\nretrieveName()\n  .then((d) => console.log('Name retrieved:\\n', d.getData()))\n  .catch((e) => console.error('Something went wrong:\\n', e))\n  .finally(() => client.disconnect());\n```\n```javascript JavaScript - Revolve by Record\nconst Dash = require('dash');\n\nconst client = new Dash.Client({ network: 'testnet' });\n\nconst retrieveNameByRecord = async () => {\n  // Retrieve by a name's identity ID\n  return client.platform.names.resolveByRecord(\n    'dashUniqueIdentityId',\n    '<identity id>',\n  );\n};\n\nretrieveNameByRecord()\n  .then((d) => console.log('Name retrieved:\\n', d[0].getData()))\n  .catch((e) => console.error('Something went wrong:\\n', e))\n  .finally(() => client.disconnect());\n```\n```javascript JavaScript - Search for Name\nconst Dash = require('dash');\n\nconst client = new Dash.Client({ network: 'testnet' });\n\nconst retrieveNameBySearch = async () => {\n  // Search for names (e.g. `user*`)\n  return client.platform.names.search('user', 'dash');\n};\n\nretrieveNameBySearch()\n  .then((d) => {\n    for (const name of d) {\n      console.log('Name retrieved:\\n', name.getData());\n    }\n  })\n  .catch((e) => console.error('Something went wrong:\\n', e))\n  .finally(() => client.disconnect());\n```\n\n# Example Name\n\nThe following example response shows a retrieved name (`user-9999.dash`):\n\n```json\n{\n  \"label\": \"Alice\",\n  \"normalizedLabel\": \"alice\",\n  \"normalizedParentDomainName\": \"dash\",\n  \"preorderSalt\": \"lQEiixHMO5TJmbKwKtavg6eAkxuXzvSlrs/OX9glcYI=\",\n  \"records\": {\n    \"dashAliasIdentityId\": null,\n    \"dashUniqueIdentityId\": \"YhCPn6pSbZ11hCiFmFL6WJkmC3GSwuUSzhS4QAy84EF\"\n  },\n  \"subdomainRules\": {\n    \"allowSubdomains\": false\n  }\n}\n```\n\n# What's Happening\n\nAfter we initialize the Client, we request a name. The [code examples](#code) demonstrate the three ways to request a name:\n\n1. Resolve by name. The `platform.names.resolve` method takes a single argument: a fully-qualified name (e.g., `user-9999.dash`). \n2. Resolve by record. The `platform.names.resolveByRecord` method takes two arguments: the record type (e.g., `dashUniqueIdentityId`) and the record value to resolve. \n3. Search. The `platform.names.search` method takes two arguments: the leading characters of the name to search for and the domain to search (e.g., `dash` for names in the `*.dash` domain). The search will return names that begin the with string provided in the first parameter.\n\nAfter the name is retrieved, it is displayed on the console.",
 "order": 6,
 "isReference": false,
 "deprecated": false,
 "hidden": false,
 "sync_unique": "",
 "link_url": "",
 "link_external": false,
 "reusableContent": [],
 "previousSlug": "retrieve-a-name",
 "slugUpdatedAt": "2020-08-27T14:12:15.080Z",
 "revision": 6,
 "_id": "64f8a9df750465004742adbb",
 "pendingAlgoliaPublish": false,
 "createdAt": "2020-08-27T14:08:17.006Z",
 "updatedAt": "2023-09-12T12:55:18.115Z",
 "user": "5b8400d7185d5e00036dcc3b",
 "category": "64f8a9df750465004742ad6e",
 "project": "5bda01cad172e200499a20a9",
 "version": "64f8a9df750465004742ae1d",
 "__v": 0,
 "parentDoc": "64f8a9df750465004742adc9",
 "isApi": false,
 "id": "64f8a9df750465004742adbb",
 "body_html": "In this tutorial we will retrieve the name created in the [Register a Name for an Identity tutorial](tutorial-register-a-name-for-an-identity). Additional details regarding identities can be found in the [Identity description](explanation-identity).\n\n## Prerequisites\n\n- [General prerequisites](tutorials-introduction#prerequisites) (Node.js / Dash SDK installed)\n\n# Code\n\n```javascript JavaScript - Resolve by Name\nconst Dash = require('dash');\n\nconst client = new Dash.Client({ network: 'testnet' });\n\nconst retrieveName = async () => {\n  // Retrieve by full name (e.g., myname.dash)\n  return client.platform.names.resolve('<identity name>.dash');\n};\n\nretrieveName()\n  .then((d) => console.log('Name retrieved:\\n', d.getData()))\n  .catch((e) => console.error('Something went wrong:\\n', e))\n  .finally(() => client.disconnect());\n```\n```javascript JavaScript - Revolve by Record\nconst Dash = require('dash');\n\nconst client = new Dash.Client({ network: 'testnet' });\n\nconst retrieveNameByRecord = async () => {\n  // Retrieve by a name's identity ID\n  return client.platform.names.resolveByRecord(\n    'dashUniqueIdentityId',\n    '<identity id>',\n  );\n};\n\nretrieveNameByRecord()\n  .then((d) => console.log('Name retrieved:\\n', d[0].getData()))\n  .catch((e) => console.error('Something went wrong:\\n', e))\n  .finally(() => client.disconnect());\n```\n```javascript JavaScript - Search for Name\nconst Dash = require('dash');\n\nconst client = new Dash.Client({ network: 'testnet' });\n\nconst retrieveNameBySearch = async () => {\n  // Search for names (e.g. `user*`)\n  return client.platform.names.search('user', 'dash');\n};\n\nretrieveNameBySearch()\n  .then((d) => {\n    for (const name of d) {\n      console.log('Name retrieved:\\n', name.getData());\n    }\n  })\n  .catch((e) => console.error('Something went wrong:\\n', e))\n  .finally(() => client.disconnect());\n```\n\n# Example Name\n\nThe following example response shows a retrieved name (`user-9999.dash`):\n\n```json\n{\n  \"label\": \"Alice\",\n  \"normalizedLabel\": \"alice\",\n  \"normalizedParentDomainName\": \"dash\",\n  \"preorderSalt\": \"lQEiixHMO5TJmbKwKtavg6eAkxuXzvSlrs/OX9glcYI=\",\n  \"records\": {\n    \"dashAliasIdentityId\": null,\n    \"dashUniqueIdentityId\": \"YhCPn6pSbZ11hCiFmFL6WJkmC3GSwuUSzhS4QAy84EF\"\n  },\n  \"subdomainRules\": {\n    \"allowSubdomains\": false\n  }\n}\n```\n\n# What's Happening\n\nAfter we initialize the Client, we request a name. The [code examples](#code) demonstrate the three ways to request a name:\n\n1. Resolve by name. The `platform.names.resolve` method takes a single argument: a fully-qualified name (e.g., `user-9999.dash`). \n2. Resolve by record. The `platform.names.resolveByRecord` method takes two arguments: the record type (e.g., `dashUniqueIdentityId`) and the record value to resolve. \n3. Search. The `platform.names.search` method takes two arguments: the leading characters of the name to search for and the domain to search (e.g., `dash` for names in the `*.dash` domain). The search will return names that begin the with string provided in the first parameter.\n\nAfter the name is retrieved, it is displayed on the console."
}