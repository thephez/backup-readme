{
 "metadata": {
  "image": [],
  "title": "",
  "description": "",
  "keywords": "",
  "robots": "index"
 },
 "api": {
  "method": "get",
  "url": "",
  "auth": "required",
  "results": {
   "codes": [
    {
     "name": "",
     "code": "{}",
     "language": "json",
     "status": 200
    },
    {
     "name": "",
     "code": "{}",
     "language": "json",
     "status": 400
    }
   ]
  },
  "params": [],
  "examples": {
   "codes": []
  }
 },
 "next": {
  "description": "",
  "pages": []
 },
 "algolia": {
  "recordCount": 4,
  "publishPending": false,
  "translationFailure": false,
  "updatedAt": "2023-09-06T16:36:43.919Z"
 },
 "title": "Retrieve an Account's Identities",
 "icon": "",
 "updates": [],
 "type": "basic",
 "slug": "tutorial-retrieve-an-accounts-identities",
 "excerpt": "Get the list of Dash Platform Identities associated with an account",
 "body": "# Overview\n\nIn this tutorial we will retrieve the list of identities associated with a specified mnemonic-based account. Since multiple identities may be created using the same mnemonic, it is helpful to have a way to quickly retrieve all these identities (e.g. if importing the mnemonic into a new device).\n\n## Prerequisites\n\n- [General prerequisites](tutorials-introduction#prerequisites) (Node.js / Dash SDK installed)\n- A wallet mnemonic\n- A Dash Platform Identity: [Tutorial: Register an Identity](tutorial-register-an-identity) \n\n# Code\n\n```javascript\nconst Dash = require('dash');\n\nconst client = new Dash.Client({\n  network: 'testnet',\n  wallet: {\n    mnemonic: 'a Dash wallet mnemonic with testnet funds goes here',\n    unsafeOptions: {\n      skipSynchronizationBeforeHeight: 650000, // only sync from early-2022\n    },\n  },\n});\n\nconst retrieveIdentityIds = async () => {\n  const account = await client.getWalletAccount();\n  return account.identities.getIdentityIds();\n};\n\nretrieveIdentityIds()\n  .then((d) => console.log('Mnemonic identities:\\n', d))\n  .catch((e) => console.error('Something went wrong:\\n', e))\n  .finally(() => client.disconnect());\n```\n\nExample Response\n\n```json\n[\n  \"6Jz8pFZFhssKSTacgQmZP14zGZNnFYZFKSbx4WVAJFy3\",\n  \"8XoJHG96Vfm3eGh1A7HiDpMb1Jw2B9opRJe8Z38urapt\",\n  \"CEPMcuBgAWeaCXiP2gJJaStANRHW6b158UPvL1C8zw2W\",\n  \"GTGZrkPC72tWeBaqopSCKgiBkVVQR3s3yBsVeMyUrmiY\"\n]\n```\n\n# What's Happening\n\nAfter we initialize the Client and getting the account, we call `account.identities.getIdentityIds()` to retrieve a list of all identities created with the wallet mnemonic. The list of identities is output to the console.\n\n> \ud83d\udcd8 Wallet Operations\n> \n> The JavaScript SDK does not cache wallet information. It re-syncs the entire Core chain for some wallet operations (e.g. `client.getWalletAccount()`) which can result in wait times of  5+ minutes. \n> \n> A future release will add caching so that access is much faster after the initial sync. For now, the `skipSynchronizationBeforeHeight` option can be used to sync the wallet starting at a certain block height.",
 "order": 4,
 "isReference": false,
 "deprecated": false,
 "hidden": false,
 "sync_unique": "",
 "link_url": "",
 "link_external": false,
 "reusableContent": [],
 "previousSlug": "",
 "slugUpdatedAt": "2020-10-07T18:09:26.442Z",
 "revision": 4,
 "_id": "64f8a9df750465004742adc1",
 "pendingAlgoliaPublish": false,
 "createdAt": "2020-10-08T14:39:42.543Z",
 "updatedAt": "2023-08-17T17:38:59.778Z",
 "user": "5b8400d7185d5e00036dcc3b",
 "parentDoc": "64f8a9df750465004742adc9",
 "category": "64f8a9df750465004742ad6e",
 "project": "5bda01cad172e200499a20a9",
 "version": "64f8a9df750465004742ae1d",
 "__v": 0,
 "isApi": false,
 "id": "64f8a9df750465004742adc1",
 "body_html": "<h1 class=\"heading heading-1 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"overview\"></div><div class=\"heading-text\"><div id=\"section-overview\" class=\"heading-anchor_backwardsCompatibility\"></div>Overview</div><a aria-label=\"Skip link to Overview\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#overview\"></a></h1>\n<p>In this tutorial we will retrieve the list of identities associated with a specified mnemonic-based account. Since multiple identities may be created using the same mnemonic, it is helpful to have a way to quickly retrieve all these identities (e.g. if importing the mnemonic into a new device).</p>\n<h2 class=\"heading heading-2 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"prerequisites\"></div><div class=\"heading-text\"><div id=\"section-prerequisites\" class=\"heading-anchor_backwardsCompatibility\"></div>Prerequisites</div><a aria-label=\"Skip link to Prerequisites\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#prerequisites\"></a></h2>\n<ul>\n<li><a href=\"tutorials-introduction#prerequisites\" target=\"\" title=\"\">General prerequisites</a> (Node.js / Dash SDK installed)</li>\n<li>A wallet mnemonic</li>\n<li>A Dash Platform Identity: <a href=\"tutorial-register-an-identity\" target=\"\" title=\"\">Tutorial: Register an Identity</a> </li>\n</ul>\n<h1 class=\"heading heading-1 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"code\"></div><div class=\"heading-text\"><div id=\"section-code\" class=\"heading-anchor_backwardsCompatibility\"></div>Code</div><a aria-label=\"Skip link to Code\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#code\"></a></h1>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">JavaScript</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-javascript theme-light\" data-lang=\"javascript\" name=\"\" tabindex=\"0\">const Dash = require(&#x27;dash&#x27;);\n\nconst client = new Dash.Client({\n  network: &#x27;testnet&#x27;,\n  wallet: {\n    mnemonic: &#x27;a Dash wallet mnemonic with testnet funds goes here&#x27;,\n    unsafeOptions: {\n      skipSynchronizationBeforeHeight: 650000, // only sync from early-2022\n    },\n  },\n});\n\nconst retrieveIdentityIds = async () =&gt; {\n  const account = await client.getWalletAccount();\n  return account.identities.getIdentityIds();\n};\n\nretrieveIdentityIds()\n  .then((d) =&gt; console.log(&#x27;Mnemonic identities:\\n&#x27;, d))\n  .catch((e) =&gt; console.error(&#x27;Something went wrong:\\n&#x27;, e))\n  .finally(() =&gt; client.disconnect());\n</code></pre></div></div>\n<p>Example Response</p>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">JSON</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-json theme-light\" data-lang=\"json\" name=\"\" tabindex=\"0\">[\n  &quot;6Jz8pFZFhssKSTacgQmZP14zGZNnFYZFKSbx4WVAJFy3&quot;,\n  &quot;8XoJHG96Vfm3eGh1A7HiDpMb1Jw2B9opRJe8Z38urapt&quot;,\n  &quot;CEPMcuBgAWeaCXiP2gJJaStANRHW6b158UPvL1C8zw2W&quot;,\n  &quot;GTGZrkPC72tWeBaqopSCKgiBkVVQR3s3yBsVeMyUrmiY&quot;\n]\n</code></pre></div></div>\n<h1 class=\"heading heading-1 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"whats-happening\"></div><div class=\"heading-text\"><div id=\"section-whats-happening\" class=\"heading-anchor_backwardsCompatibility\"></div>What&#x27;s Happening</div><a aria-label=\"Skip link to What&#x27;s Happening\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#whats-happening\"></a></h1>\n<p>After we initialize the Client and getting the account, we call <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">account.identities.getIdentityIds()</code> to retrieve a list of all identities created with the wallet mnemonic. The list of identities is output to the console.</p>\n<blockquote class=\"callout callout_info\" theme=\"\ud83d\udcd8\"><h2 class=\"callout-heading\"><span class=\"callout-icon\">\ud83d\udcd8</span><p>Wallet Operations</p></h2><p>The JavaScript SDK does not cache wallet information. It re-syncs the entire Core chain for some wallet operations (e.g. <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">client.getWalletAccount()</code>) which can result in wait times of  5+ minutes. </p><p>A future release will add caching so that access is much faster after the initial sync. For now, the <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">skipSynchronizationBeforeHeight</code> option can be used to sync the wallet starting at a certain block height.</p></blockquote>"
}