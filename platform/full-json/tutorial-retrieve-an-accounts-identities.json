{
 "pendingAlgoliaPublish": false, 
 "parentDoc": null, 
 "excerpt": "Get the list of Dash Platform Identities associated with an account", 
 "api": {
  "url": "", 
  "params": [], 
  "method": "get", 
  "auth": "required", 
  "results": {
   "codes": [
    {
     "status": 200, 
     "code": "{}", 
     "name": "", 
     "language": "json"
    }, 
    {
     "status": 400, 
     "code": "{}", 
     "name": "", 
     "language": "json"
    }
   ]
  }
 }, 
 "previousSlug": "", 
 "updatedAt": "2020-11-02T14:39:35.714Z", 
 "id": "5f8f3fa8b257f9003428ff94", 
 "sync_unique": "", 
 "isApi": false, 
 "createdAt": "2020-10-08T14:39:42.543Z", 
 "category": "5f8f3fa8b257f9003428ff41", 
 "title": "Retrieve an Account's Identities", 
 "next": {
  "description": "", 
  "pages": []
 }, 
 "version": "5f8f3fa8b257f9003428ff97", 
 "slugUpdatedAt": "2020-10-07T18:09:26.442Z", 
 "hidden": false, 
 "type": "basic", 
 "metadata": {
  "image": [], 
  "description": "", 
  "title": ""
 }, 
 "body": "# Overview\nIn this tutorial we will retrieve the list of identities associated with a specified mnemonic-based account. Since multiple identities may be created using the same mnemonic, it is helpful to have a way to quickly retrieve all these identities (e.g. if importing the mnemonic into a new device).\n\n## Prerequisites\n- [node.js](https://nodejs.org/en/) (v12+)\n- Basic familiarity with JavaScript asychronous functions using [async/await](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await)\n- The Dash JavaScript SDK is initialized (covered in [Connecting to EvoNet](tutorial-connecting-to-evonet))\n- A wallet mnemonic\n- A Dash Platform Identity: [Tutorial: Register an Identity](tutorial-register-an-identity) \n\n# Code\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"const Dash = require('dash');\\n\\nconst client = new Dash.Client({\\n  network: 'evonet',\\n  wallet: {\\n    mnemonic: 'a Dash wallet mnemonic with evonet funds goes here',\\n  },\\n});\\n\\nconst retrieveIdentityIds = async () => {\\n  const account = await client.getWalletAccount();\\n  return account.getIdentityIds();\\n};\\n\\nretrieveIdentityIds()\\n  .then((d) => console.log('Mnemonic identities:\\\\n', d))\\n  .catch((e) => console.error('Something went wrong:\\\\n', e))\\n  .finally(() => client.disconnect());\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\nExample Response\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"[\\n  '8DpCxc6CY1vHQzQVv8EezN4fpKis5K2YuxGYRSiccsC8',\\n  '4SUjmwadgF8LLxnjXchhkNtw7tfgacg82CuZegWktW61'\\n]\",\n      \"language\": \"json\"\n    }\n  ]\n}\n[/block]\n# What's Happening\n\nAfter we intialize the Client and getting the account, we call `account.getIdentityIds` to retrieve a list of all identities created with the wallet mnemonic. The list of identities is output to the console.", 
 "link_external": false, 
 "body_html": "<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-overview\"></div>Overview<a class=\"fa fa-anchor\" href=\"#section-overview\"></a></h1>\n<p>In this tutorial we will retrieve the list of identities associated with a specified mnemonic-based account. Since multiple identities may be created using the same mnemonic, it is helpful to have a way to quickly retrieve all these identities (e.g. if importing the mnemonic into a new device).</p>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-prerequisites\"></div>Prerequisites<a class=\"fa fa-anchor\" href=\"#section-prerequisites\"></a></h2>\n<ul>\n<li ><a href=\"https://nodejs.org/en/\">node.js</a> (v12+)</li><li >Basic familiarity with JavaScript asychronous functions using <a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await\">async/await</a></li><li >The Dash JavaScript SDK is initialized (covered in <a href=\"tutorial-connecting-to-evonet\">Connecting to EvoNet</a>)</li><li >A wallet mnemonic</li><li >A Dash Platform Identity: <a href=\"tutorial-register-an-identity\">Tutorial: Register an Identity</a> </li></ul>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-code\"></div>Code<a class=\"fa fa-anchor\" href=\"#section-code\"></a></h1>\n\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">JavaScript</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(966)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-966\">const Dash = require('dash');\n\nconst client = new Dash.Client({\n  network: 'evonet',\n  wallet: {\n    mnemonic: 'a Dash wallet mnemonic with evonet funds goes here',\n  },\n});\n\nconst retrieveIdentityIds = async () =&gt; {\n  const account = await client.getWalletAccount();\n  return account.getIdentityIds();\n};\n\nretrieveIdentityIds()\n  .then((d) =&gt; console.log('Mnemonic identities:\\n', d))\n  .catch((e) =&gt; console.error('Something went wrong:\\n', e))\n  .finally(() =&gt; client.disconnect());</textarea>\n\t\t\t<pre id=\"code-966\"><code><span class='cm-s-neo'><span class=\"cm-keyword\">const</span> <span class=\"cm-def\">Dash</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">require</span>(<span class=\"cm-string\">'dash'</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">client</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">new</span> <span class=\"cm-variable\">Dash</span>.<span class=\"cm-property\">Client</span>({\n  <span class=\"cm-property\">network</span>: <span class=\"cm-string\">'evonet'</span>,\n  <span class=\"cm-property\">wallet</span>: {\n    <span class=\"cm-property\">mnemonic</span>: <span class=\"cm-string\">'a Dash wallet mnemonic with evonet funds goes here'</span>,\n  },\n});\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">retrieveIdentityIds</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">async</span> () <span class=\"cm-operator\">=&gt;</span> {\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">account</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">getWalletAccount</span>();\n  <span class=\"cm-keyword\">return</span> <span class=\"cm-variable-2\">account</span>.<span class=\"cm-property\">getIdentityIds</span>();\n};\n\n<span class=\"cm-variable\">retrieveIdentityIds</span>()\n  .<span class=\"cm-property\">then</span>((<span class=\"cm-def\">d</span>) <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-string\">'Mnemonic identities:\\n'</span>, <span class=\"cm-variable-2\">d</span>))\n  .<span class=\"cm-property\">catch</span>((<span class=\"cm-def\">e</span>) <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">error</span>(<span class=\"cm-string\">'Something went wrong:\\n'</span>, <span class=\"cm-variable-2\">e</span>))\n  .<span class=\"cm-property\">finally</span>(() <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">disconnect</span>());</span></code></pre></span>\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><p>Example Response</p>\n\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">JSON</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(965)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-965\">[\n  '8DpCxc6CY1vHQzQVv8EezN4fpKis5K2YuxGYRSiccsC8',\n  '4SUjmwadgF8LLxnjXchhkNtw7tfgacg82CuZegWktW61'\n]</textarea>\n\t\t\t<pre id=\"code-965\"><code><span class='cm-s-neo'>[\n  <span class=\"cm-string\">'8DpCxc6CY1vHQzQVv8EezN4fpKis5K2YuxGYRSiccsC8'</span>,\n  <span class=\"cm-string\">'4SUjmwadgF8LLxnjXchhkNtw7tfgacg82CuZegWktW61'</span>\n]</span></code></pre></span>\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-whats-happening\"></div>What&#39;s Happening<a class=\"fa fa-anchor\" href=\"#section-whats-happening\"></a></h1>\n<p>After we intialize the Client and getting the account, we call <code>account.getIdentityIds</code> to retrieve a list of all identities created with the wallet mnemonic. The list of identities is output to the console.</p>\n\n</div>", 
 "user": "5b8400d7185d5e00036dcc3b", 
 "isReference": false, 
 "slug": "tutorial-retrieve-an-accounts-identities", 
 "link_url": "", 
 "project": "5bda01cad172e200499a20a9", 
 "__v": 0, 
 "_id": "5f8f3fa8b257f9003428ff94", 
 "order": 6, 
 "updates": []
}