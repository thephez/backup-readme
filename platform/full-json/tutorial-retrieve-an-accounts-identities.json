{
 "pendingAlgoliaPublish": false, 
 "parentDoc": "60e604b4762bd40057ebe135", 
 "excerpt": "Get the list of Dash Platform Identities associated with an account", 
 "api": {
  "url": "", 
  "params": [], 
  "method": "get", 
  "auth": "required", 
  "results": {
   "codes": [
    {
     "status": 200, 
     "code": "{}", 
     "name": "", 
     "language": "json"
    }, 
    {
     "status": 400, 
     "code": "{}", 
     "name": "", 
     "language": "json"
    }
   ]
  }
 }, 
 "previousSlug": "", 
 "updatedAt": "2021-07-26T13:51:41.969Z", 
 "id": "60e604b4762bd40057ebe12d", 
 "sync_unique": "", 
 "isApi": false, 
 "createdAt": "2020-10-08T14:39:42.543Z", 
 "category": "60e604b4762bd40057ebe0da", 
 "title": "Retrieve an Account's Identities", 
 "next": {
  "description": "", 
  "pages": []
 }, 
 "version": "60e604b4762bd40057ebe142", 
 "slugUpdatedAt": "2020-10-07T18:09:26.442Z", 
 "hidden": false, 
 "type": "basic", 
 "metadata": {
  "image": [], 
  "description": "", 
  "title": ""
 }, 
 "body": "# Overview\nIn this tutorial we will retrieve the list of identities associated with a specified mnemonic-based account. Since multiple identities may be created using the same mnemonic, it is helpful to have a way to quickly retrieve all these identities (e.g. if importing the mnemonic into a new device).\n\n## Prerequisites\n- [node.js](https://nodejs.org/en/) (v12+)\n- Basic familiarity with JavaScript asychronous functions using [async/await](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await)\n- The Dash JavaScript SDK is initialized (covered in [Connecting to a Network](tutorial-connecting-to-testnet))\n- A wallet mnemonic\n- A Dash Platform Identity: [Tutorial: Register an Identity](tutorial-register-an-identity) \n\n# Code\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"Wallet Operations\",\n  \"body\": \"Currently, the JavaScript SDK does not cache wallet information, and therefore, it re-syncs the entire Core chain for some wallet operations (e.g. `client.getWalletAccount()`). This can result in wait times of  5+ minutes.\\n\\nAn upcoming release will add a persistence feature to cache wallet information during initial sync so that subsequent access is much faster. For now, the `skipSynchronizationBeforeHeight` option can be used to only sync the wallet starting at a certain block height.\"\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"title\": \"Dash Platform 0.18 Breaking Change\",\n  \"body\": \"The derivation path used for [identities](explanation-identity) was updated to align with [DIP13](https://github.com/dashpay/dips/blob/master/dip-0013.md#identity-authentication-keys) and provide compatibility with the mobile DashPay wallets. Consequently, identities registered with previous versions of the SDK [will be not be retrievable](https://github.com/dashevo/js-dash-sdk/pull/188).\\n\\nAlso note the change from `account.getIdentityIds()` to  `account.identities.getIdentityIds()` for retrieving identities ([PR](https://github.com/dashevo/wallet-lib/pull/227)).\"\n}\n[/block]\n\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"const Dash = require('dash');\\n\\nconst client = new Dash.Client({\\n  network: 'testnet',\\n  wallet: {\\n    mnemonic: 'a Dash wallet mnemonic with testnet funds goes here',\\n    unsafeOptions: {\\n      skipSynchronizationBeforeHeight: 415000, // only sync from start of 2021\\n    },\\n  },\\n});\\n\\nconst retrieveIdentityIds = async () => {\\n  const account = await client.getWalletAccount();\\n  return account.identities.getIdentityIds();\\n};\\n\\nretrieveIdentityIds()\\n  .then((d) => console.log('Mnemonic identities:\\\\n', d))\\n  .catch((e) => console.error('Something went wrong:\\\\n', e))\\n  .finally(() => client.disconnect());\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\nExample Response\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"[\\n  '6Jz8pFZFhssKSTacgQmZP14zGZNnFYZFKSbx4WVAJFy3',\\n  '8XoJHG96Vfm3eGh1A7HiDpMb1Jw2B9opRJe8Z38urapt',\\n  'CEPMcuBgAWeaCXiP2gJJaStANRHW6b158UPvL1C8zw2W',\\n  'GTGZrkPC72tWeBaqopSCKgiBkVVQR3s3yBsVeMyUrmiY'\\n]\",\n      \"language\": \"json\"\n    }\n  ]\n}\n[/block]\n# What's Happening\n\nAfter we initialize the Client and getting the account, we call `account.identities.getIdentityIds()` to retrieve a list of all identities created with the wallet mnemonic. The list of identities is output to the console.", 
 "link_external": false, 
 "body_html": "<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-overview\"></div>Overview<a class=\"fa fa-anchor\" href=\"#section-overview\"></a></h1>\n<p>In this tutorial we will retrieve the list of identities associated with a specified mnemonic-based account. Since multiple identities may be created using the same mnemonic, it is helpful to have a way to quickly retrieve all these identities (e.g. if importing the mnemonic into a new device).</p>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-prerequisites\"></div>Prerequisites<a class=\"fa fa-anchor\" href=\"#section-prerequisites\"></a></h2>\n<ul>\n<li ><a href=\"https://nodejs.org/en/\">node.js</a> (v12+)</li><li >Basic familiarity with JavaScript asychronous functions using <a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await\">async/await</a></li><li >The Dash JavaScript SDK is initialized (covered in <a href=\"tutorial-connecting-to-testnet\">Connecting to a Network</a>)</li><li >A wallet mnemonic</li><li >A Dash Platform Identity: <a href=\"tutorial-register-an-identity\">Tutorial: Register an Identity</a> </li></ul>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-code\"></div>Code<a class=\"fa fa-anchor\" href=\"#section-code\"></a></h1>\n\n</div>\n<div class=\"magic-block-callout type-info \">\n\t<h3><i title=\"Info\" class=\"fa fa-info-circle\"></i>Wallet Operations\n\t</h3>\n\t<div class=\"callout-body\"><p>Currently, the JavaScript SDK does not cache wallet information, and therefore, it re-syncs the entire Core chain for some wallet operations (e.g. <code>client.getWalletAccount()</code>). This can result in wait times of  5+ minutes.</p>\n<p>An upcoming release will add a persistence feature to cache wallet information during initial sync so that subsequent access is much faster. For now, the <code>skipSynchronizationBeforeHeight</code> option can be used to only sync the wallet starting at a certain block height.</p>\n\n\t</div>\n</div>\n<div class=\"magic-block-callout type-warning \">\n\t<h3><i title=\"Warning\" class=\"fa fa-exclamation-circle\"></i>Dash Platform 0.18 Breaking Change\n\t</h3>\n\t<div class=\"callout-body\"><p>The derivation path used for <a href=\"explanation-identity\">identities</a> was updated to align with <a href=\"https://github.com/dashpay/dips/blob/master/dip-0013.md#identity-authentication-keys\">DIP13</a> and provide compatibility with the mobile DashPay wallets. Consequently, identities registered with previous versions of the SDK <a href=\"https://github.com/dashevo/js-dash-sdk/pull/188\">will be not be retrievable</a>.</p>\n<p>Also note the change from <code>account.getIdentityIds()</code> to  <code>account.identities.getIdentityIds()</code> for retrieving identities (<a href=\"https://github.com/dashevo/wallet-lib/pull/227\">PR</a>).</p>\n\n\t</div>\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">JavaScript</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(449)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-449\">const Dash = require('dash');\n\nconst client = new Dash.Client({\n  network: 'testnet',\n  wallet: {\n    mnemonic: 'a Dash wallet mnemonic with testnet funds goes here',\n    unsafeOptions: {\n      skipSynchronizationBeforeHeight: 415000, // only sync from start of 2021\n    },\n  },\n});\n\nconst retrieveIdentityIds = async () =&gt; {\n  const account = await client.getWalletAccount();\n  return account.identities.getIdentityIds();\n};\n\nretrieveIdentityIds()\n  .then((d) =&gt; console.log('Mnemonic identities:\\n', d))\n  .catch((e) =&gt; console.error('Something went wrong:\\n', e))\n  .finally(() =&gt; client.disconnect());</textarea>\n\t\t\t<pre id=\"code-449\"><code><span class='cm-s-neo'><span class=\"cm-keyword\">const</span> <span class=\"cm-def\">Dash</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">require</span>(<span class=\"cm-string\">'dash'</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">client</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">new</span> <span class=\"cm-variable\">Dash</span>.<span class=\"cm-property\">Client</span>({\n  <span class=\"cm-property\">network</span>: <span class=\"cm-string\">'testnet'</span>,\n  <span class=\"cm-property\">wallet</span>: {\n    <span class=\"cm-property\">mnemonic</span>: <span class=\"cm-string\">'a Dash wallet mnemonic with testnet funds goes here'</span>,\n    <span class=\"cm-property\">unsafeOptions</span>: {\n      <span class=\"cm-property\">skipSynchronizationBeforeHeight</span>: <span class=\"cm-number\">415000</span>, <span class=\"cm-comment\">&#47;&#47; only sync from start of 2021</span>\n    },\n  },\n});\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">retrieveIdentityIds</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">async</span> () <span class=\"cm-operator\">=&gt;</span> {\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">account</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">getWalletAccount</span>();\n  <span class=\"cm-keyword\">return</span> <span class=\"cm-variable-2\">account</span>.<span class=\"cm-property\">identities</span>.<span class=\"cm-property\">getIdentityIds</span>();\n};\n\n<span class=\"cm-variable\">retrieveIdentityIds</span>()\n  .<span class=\"cm-property\">then</span>((<span class=\"cm-def\">d</span>) <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-string\">'Mnemonic identities:\\n'</span>, <span class=\"cm-variable-2\">d</span>))\n  .<span class=\"cm-property\">catch</span>((<span class=\"cm-def\">e</span>) <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">error</span>(<span class=\"cm-string\">'Something went wrong:\\n'</span>, <span class=\"cm-variable-2\">e</span>))\n  .<span class=\"cm-property\">finally</span>(() <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">disconnect</span>());</span></code></pre></span>\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><p>Example Response</p>\n\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">JSON</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(828)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-828\">[\n  '6Jz8pFZFhssKSTacgQmZP14zGZNnFYZFKSbx4WVAJFy3',\n  '8XoJHG96Vfm3eGh1A7HiDpMb1Jw2B9opRJe8Z38urapt',\n  'CEPMcuBgAWeaCXiP2gJJaStANRHW6b158UPvL1C8zw2W',\n  'GTGZrkPC72tWeBaqopSCKgiBkVVQR3s3yBsVeMyUrmiY'\n]</textarea>\n\t\t\t<pre id=\"code-828\"><code><span class='cm-s-neo'>[\n  <span class=\"cm-string\">'6Jz8pFZFhssKSTacgQmZP14zGZNnFYZFKSbx4WVAJFy3'</span>,\n  <span class=\"cm-string\">'8XoJHG96Vfm3eGh1A7HiDpMb1Jw2B9opRJe8Z38urapt'</span>,\n  <span class=\"cm-string\">'CEPMcuBgAWeaCXiP2gJJaStANRHW6b158UPvL1C8zw2W'</span>,\n  <span class=\"cm-string\">'GTGZrkPC72tWeBaqopSCKgiBkVVQR3s3yBsVeMyUrmiY'</span>\n]</span></code></pre></span>\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-whats-happening\"></div>What&#39;s Happening<a class=\"fa fa-anchor\" href=\"#section-whats-happening\"></a></h1>\n<p>After we initialize the Client and getting the account, we call <code>account.identities.getIdentityIds()</code> to retrieve a list of all identities created with the wallet mnemonic. The list of identities is output to the console.</p>\n\n</div>", 
 "user": "5b8400d7185d5e00036dcc3b", 
 "isReference": false, 
 "slug": "tutorial-retrieve-an-accounts-identities", 
 "link_url": "", 
 "project": "5bda01cad172e200499a20a9", 
 "__v": 0, 
 "_id": "60e604b4762bd40057ebe12d", 
 "order": 3, 
 "updates": []
}