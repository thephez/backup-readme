{
 "metadata": {
  "image": [],
  "title": "",
  "description": ""
 },
 "api": {
  "method": "get",
  "url": "",
  "auth": "required",
  "results": {
   "codes": [
    {
     "status": 200,
     "language": "json",
     "code": "{}",
     "name": ""
    },
    {
     "status": 400,
     "language": "json",
     "code": "{}",
     "name": ""
    }
   ]
  },
  "params": []
 },
 "next": {
  "description": "",
  "pages": [
   {
    "type": "doc",
    "icon": "file-text-o",
    "name": "Update Documents",
    "slug": "tutorial-update-documents",
    "category": "Tutorials"
   },
   {
    "type": "doc",
    "icon": "file-text-o",
    "name": "Delete Documents",
    "slug": "tutorial-delete-documents",
    "category": "Tutorials"
   }
  ]
 },
 "algolia": {
  "recordCount": 6,
  "publishPending": false,
  "updatedAt": "2023-03-07T17:41:00.565Z"
 },
 "title": "Retrieve Documents",
 "icon": "",
 "updates": [
  "5e1396e7516ae8002e0054da",
  "5f2cffbcf04e9a005fc43d44"
 ],
 "type": "basic",
 "slug": "tutorial-retrieve-documents",
 "excerpt": "Retrieve data from Dash Platform",
 "body": "# Overview\n\nIn this tutorial we will retrieve some of the current data from a data contract. Data is stored in the form of documents as described in the Dash Platform Protocol [Document explanation](explanation-platform-protocol-document).\n\n## Prerequisites\n- [General prerequisites](tutorials-introduction#prerequisites) (Node.js / Dash SDK installed)\n- A Dash Platform Contract ID: [Tutorial: Register a Data Contract](tutorial-register-a-data-contract) \n\n# Code\n\n```javascript\nconst Dash = require('dash');\n\nconst clientOpts = {\n  network: 'testnet',\n  apps: {\n    tutorialContract: {\n      contractId: '3iaEhdyAVbmSjd59CT6SCrqPjfAfMdPTc8ksydgqSaWE',\n    },\n  },\n};\nconst client = new Dash.Client(clientOpts);\n\nconst getDocuments = async () => {\n  return client.platform.documents.get('tutorialContract.note', {\n    limit: 2, // Only retrieve 2 document\n  });\n};\n\ngetDocuments()\n  .then((d) => {\n    for (const n of d) {\n      console.log('Document:\\n', n.toJSON());\n    }\n  })\n  .catch((e) => console.error('Something went wrong:\\n', e))\n  .finally(() => client.disconnect());\n``` \n\n> \ud83d\udc4d Initializing the Client with a contract identity\n>\n> The example above shows how access to contract documents via `<contract name>.<contract document>` syntax (e.g. `tutorialContract.note`) can be enabled by passing a contract identity to the constructor. Please refer to the [Dash SDK documentation](https://github.com/dashevo/platform/blob/master/packages/js-dash-sdk/docs/getting-started/multiple-apps.md) for details.\n\n## Queries\n\nThe example code uses a very basic query to return only one result. More extensive querying capabilities are covered in the [query syntax reference](reference-query-syntax).\n\n# Example Document\n\nThe following examples show the structure of a `note` document (from the data contract registered in the tutorial) returned from the SDK when retrieved with various methods. \n\nThe values returned by `.toJSON()` include the base document properties (prefixed with `$`) present in all documents along with the data contract defined properties.\n\n> \ud83d\udcd8\n>\n> Note: When using `.toJSON()`, binary data is displayed as a base64 string (since JSON is a text-based format).\n\nThe values returned by `.getData()` (and also shown in the console.dir() `data` property) represent _only_ the properties defined in the `note` document described by the [tutorial data contract](tutorial-register-a-data-contract#code).\n\n```json .toJSON()\n{\n  '$protocolVersion': 0,\n  '$id': '6LpCQhkXYV2vqkv1UWByew4xQ6BaxxnGkhfMZsN3SV9u',\n  '$type': 'note',\n  '$dataContractId': '3iaEhdyAVbmSjd59CT6SCrqPjfAfMdPTc8ksydgqSaWE',\n  '$ownerId': 'CEPMcuBgAWeaCXiP2gJJaStANRHW6b158UPvL1C8zw2W',\n  '$revision': 1,\n  message: 'Tutorial CI Test @ Fri, 23 Jul 2021 13:12:13 GMT'\n}\n```\n```json .getData()\n{\n  'Tutorial CI Test @ Fri, 23 Jul 2021 13:12:13 GMT'\n}\n```\n```text .data.message\nTutorial CI Test @ Fri, 23 Jul 2021 13:12:13 GMT\n```\n```json console.dir(document)\nDocument {\n  dataContract: DataContract {\n    protocolVersion: 0,\n    id: Identifier(32) [Uint8Array] [\n       40,  93, 196, 112,  38, 188,  51, 122,\n      149,  59,  21,  39, 147, 119,  87,  53,\n      236,  60,  97,  42,  31,  82, 135, 120,\n       68, 188,  55, 153, 226, 198, 181, 139\n    ],\n    ownerId: Identifier(32) [Uint8Array] [\n      166, 222,  98,  87, 193,  19,  82,  37,\n       50, 118, 210,  64, 103, 122,  28, 155,\n      168,  21, 198, 134, 142, 151, 153, 136,\n       46,  64, 223,  74, 215, 153, 158, 167\n    ],\n    schema: 'https://schema.dash.org/dpp-0-4-0/meta/data-contract',\n    documents: { note: [Object] },\n    '$defs': undefined,\n    binaryProperties: { note: {} },\n    metadata: Metadata { blockHeight: 526, coreChainLockedHeight: 542795 }\n  },\n  entropy: undefined,\n  protocolVersion: 0,\n  id: Identifier(32) [Uint8Array] [\n     79,  93, 213, 226,  76,  79, 205, 191,\n    165, 190,  68,  28,   8,  83,  61, 226,\n    222, 248,  48, 235, 147, 110, 181, 229,\n      7,  66,  65, 230, 100, 194, 192, 156\n  ],\n  type: 'note',\n  dataContractId: Identifier(32) [Uint8Array] [\n     40,  93, 196, 112,  38, 188,  51, 122,\n    149,  59,  21,  39, 147, 119,  87,  53,\n    236,  60,  97,  42,  31,  82, 135, 120,\n     68, 188,  55, 153, 226, 198, 181, 139\n  ],\n  ownerId: Identifier(32) [Uint8Array] [\n    166, 222,  98,  87, 193,  19,  82,  37,\n     50, 118, 210,  64, 103, 122,  28, 155,\n    168,  21, 198, 134, 142, 151, 153, 136,\n     46,  64, 223,  74, 215, 153, 158, 167\n  ],\n  revision: 1,\n  data: { message: 'Tutorial CI Test @ Fri, 23 Jul 2021 13:12:13 GMT' },\n  metadata: Metadata { blockHeight: 526, coreChainLockedHeight: 542795 }\n}\n```\n\n# What's happening\n\nAfter we initialize the Client, we request some documents. The `client.platform.documents.get` method takes two arguments: a record locator and a query object. The records locator consists of an app name (e.g. `tutorialContract`) and the top-level document type requested, (e.g. `note`).\n\n> \ud83d\udcd8 DPNS Contract\n>\n> Note: Access to the DPNS contract is built into the Dash SDK. DPNS documents may be accessed via the `dpns` app name (e.g. `dpns.domain`).\n\nIf you need more than the first 100 documents, you'll have to make additional requests with `startAt` incremented by 100 each time. In the future, the Dash SDK may return documents with paging information to make this easier and reveal how many documents are returned in total.",
 "order": 4,
 "isReference": false,
 "deprecated": false,
 "hidden": false,
 "sync_unique": "",
 "link_url": "",
 "link_external": false,
 "previousSlug": "",
 "slugUpdatedAt": "2020-07-22T19:28:34.026Z",
 "revision": 4,
 "_id": "640776c254e6100011466655",
 "version": "640776c254e610001146669e",
 "updatedAt": "2023-01-25T13:00:10.335Z",
 "createdAt": "2019-11-05T13:49:33.553Z",
 "project": "5bda01cad172e200499a20a9",
 "user": "62b2101422da70001ee51d95",
 "category": "640776c254e610001146662e",
 "__v": 3,
 "parentDoc": "640776c254e6100011466686",
 "pendingAlgoliaPublish": false,
 "isApi": false,
 "id": "640776c254e6100011466655",
 "body_html": "<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-overview\"></div>Overview<a class=\"fa fa-anchor\" href=\"#section-overview\"></a></h1>\n<p>In this tutorial we will retrieve some of the current data from a data contract. Data is stored in the form of documents as described in the Dash Platform Protocol <a href=\"explanation-platform-protocol-document\">Document explanation</a>.</p>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-prerequisites\"></div>Prerequisites<a class=\"fa fa-anchor\" href=\"#section-prerequisites\"></a></h2>\n<ul>\n<li ><a href=\"tutorials-introduction#prerequisites\">General prerequisites</a> (Node.js / Dash SDK installed)</li><li >A Dash Platform Contract ID: <a href=\"tutorial-register-a-data-contract\">Tutorial: Register a Data Contract</a> </li></ul>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-code\"></div>Code<a class=\"fa fa-anchor\" href=\"#section-code\"></a></h1>\n<pre><code class=\"lang-javascript\"><span class='cm-s-neo'><span class=\"cm-keyword\">const</span> <span class=\"cm-def\">Dash</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">require</span>(<span class=\"cm-string\">'dash'</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">clientOpts</span> <span class=\"cm-operator\">=</span> {\n  <span class=\"cm-property\">network</span>: <span class=\"cm-string\">'testnet'</span>,\n  <span class=\"cm-property\">apps</span>: {\n    <span class=\"cm-property\">tutorialContract</span>: {\n      <span class=\"cm-property\">contractId</span>: <span class=\"cm-string\">'3iaEhdyAVbmSjd59CT6SCrqPjfAfMdPTc8ksydgqSaWE'</span>,\n    },\n  },\n};\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">client</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">new</span> <span class=\"cm-variable\">Dash</span>.<span class=\"cm-property\">Client</span>(<span class=\"cm-variable\">clientOpts</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">getDocuments</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">async</span> () <span class=\"cm-operator\">=&gt;</span> {\n  <span class=\"cm-keyword\">return</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">platform</span>.<span class=\"cm-property\">documents</span>.<span class=\"cm-property\">get</span>(<span class=\"cm-string\">'tutorialContract.note'</span>, {\n    <span class=\"cm-property\">limit</span>: <span class=\"cm-number\">2</span>, <span class=\"cm-comment\">&#47;&#47; Only retrieve 2 document</span>\n  });\n};\n\n<span class=\"cm-variable\">getDocuments</span>()\n  .<span class=\"cm-property\">then</span>((<span class=\"cm-def\">d</span>) <span class=\"cm-operator\">=&gt;</span> {\n    <span class=\"cm-keyword\">for</span> (<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">n</span> <span class=\"cm-keyword\">of</span> <span class=\"cm-variable-2\">d</span>) {\n      <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-string\">'Document:\\n'</span>, <span class=\"cm-variable-2\">n</span>.<span class=\"cm-property\">toJSON</span>());\n    }\n  })\n  .<span class=\"cm-property\">catch</span>((<span class=\"cm-def\">e</span>) <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">error</span>(<span class=\"cm-string\">'Something went wrong:\\n'</span>, <span class=\"cm-variable-2\">e</span>))\n  .<span class=\"cm-property\">finally</span>(() <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">disconnect</span>());</span>\n</code></pre>\n<blockquote>\n<p>\ud83d\udc4d Initializing the Client with a contract identity</p>\n<p>The example above shows how access to contract documents via <code>&lt;contract name&gt;.&lt;contract document&gt;</code> syntax (e.g. <code>tutorialContract.note</code>) can be enabled by passing a contract identity to the constructor. Please refer to the <a href=\"https://github.com/dashevo/platform/blob/master/packages/js-dash-sdk/docs/getting-started/multiple-apps.md\">Dash SDK documentation</a> for details.</p>\n</blockquote>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-queries\"></div>Queries<a class=\"fa fa-anchor\" href=\"#section-queries\"></a></h2>\n<p>The example code uses a very basic query to return only one result. More extensive querying capabilities are covered in the <a href=\"reference-query-syntax\">query syntax reference</a>.</p>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-example-document\"></div>Example Document<a class=\"fa fa-anchor\" href=\"#section-example-document\"></a></h1>\n<p>The following examples show the structure of a <code>note</code> document (from the data contract registered in the tutorial) returned from the SDK when retrieved with various methods. </p>\n<p>The values returned by <code>.toJSON()</code> include the base document properties (prefixed with <code>$</code>) present in all documents along with the data contract defined properties.</p>\n<blockquote>\n<p>\ud83d\udcd8</p>\n<p>Note: When using <code>.toJSON()</code>, binary data is displayed as a base64 string (since JSON is a text-based format).</p>\n</blockquote>\n<p>The values returned by <code>.getData()</code> (and also shown in the console.dir() <code>data</code> property) represent <em>only</em> the properties defined in the <code>note</code> document described by the <a href=\"tutorial-register-a-data-contract#code\">tutorial data contract</a>.</p>\n<p>```json .toJSON()<br>{<br>  &#39;$protocolVersion&#39;: 0,<br>  &#39;$id&#39;: &#39;6LpCQhkXYV2vqkv1UWByew4xQ6BaxxnGkhfMZsN3SV9u&#39;,<br>  &#39;$type&#39;: &#39;note&#39;,<br>  &#39;$dataContractId&#39;: &#39;3iaEhdyAVbmSjd59CT6SCrqPjfAfMdPTc8ksydgqSaWE&#39;,<br>  &#39;$ownerId&#39;: &#39;CEPMcuBgAWeaCXiP2gJJaStANRHW6b158UPvL1C8zw2W&#39;,<br>  &#39;$revision&#39;: 1,<br>  message: &#39;Tutorial CI Test @ Fri, 23 Jul 2021 13:12:13 GMT&#39;<br>}</p>\n<pre><code>```json .getData()\n{\n  &#39;Tutorial CI Test @ Fri, 23 Jul 2021 13:12:13 GMT&#39;\n}\n</code></pre><p>```text .data.message<br>Tutorial CI Test @ Fri, 23 Jul 2021 13:12:13 GMT</p>\n<pre><code>```json console.dir(document)\nDocument {\n  dataContract: DataContract {\n    protocolVersion: 0,\n    id: Identifier(32) [Uint8Array] [\n       40,  93, 196, 112,  38, 188,  51, 122,\n      149,  59,  21,  39, 147, 119,  87,  53,\n      236,  60,  97,  42,  31,  82, 135, 120,\n       68, 188,  55, 153, 226, 198, 181, 139\n    ],\n    ownerId: Identifier(32) [Uint8Array] [\n      166, 222,  98,  87, 193,  19,  82,  37,\n       50, 118, 210,  64, 103, 122,  28, 155,\n      168,  21, 198, 134, 142, 151, 153, 136,\n       46,  64, 223,  74, 215, 153, 158, 167\n    ],\n    schema: &#39;https://schema.dash.org/dpp-0-4-0/meta/data-contract&#39;,\n    documents: { note: [Object] },\n    &#39;$defs&#39;: undefined,\n    binaryProperties: { note: {} },\n    metadata: Metadata { blockHeight: 526, coreChainLockedHeight: 542795 }\n  },\n  entropy: undefined,\n  protocolVersion: 0,\n  id: Identifier(32) [Uint8Array] [\n     79,  93, 213, 226,  76,  79, 205, 191,\n    165, 190,  68,  28,   8,  83,  61, 226,\n    222, 248,  48, 235, 147, 110, 181, 229,\n      7,  66,  65, 230, 100, 194, 192, 156\n  ],\n  type: &#39;note&#39;,\n  dataContractId: Identifier(32) [Uint8Array] [\n     40,  93, 196, 112,  38, 188,  51, 122,\n    149,  59,  21,  39, 147, 119,  87,  53,\n    236,  60,  97,  42,  31,  82, 135, 120,\n     68, 188,  55, 153, 226, 198, 181, 139\n  ],\n  ownerId: Identifier(32) [Uint8Array] [\n    166, 222,  98,  87, 193,  19,  82,  37,\n     50, 118, 210,  64, 103, 122,  28, 155,\n    168,  21, 198, 134, 142, 151, 153, 136,\n     46,  64, 223,  74, 215, 153, 158, 167\n  ],\n  revision: 1,\n  data: { message: &#39;Tutorial CI Test @ Fri, 23 Jul 2021 13:12:13 GMT&#39; },\n  metadata: Metadata { blockHeight: 526, coreChainLockedHeight: 542795 }\n}\n</code></pre><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-whats-happening\"></div>What&#39;s happening<a class=\"fa fa-anchor\" href=\"#section-whats-happening\"></a></h1>\n<p>After we initialize the Client, we request some documents. The <code>client.platform.documents.get</code> method takes two arguments: a record locator and a query object. The records locator consists of an app name (e.g. <code>tutorialContract</code>) and the top-level document type requested, (e.g. <code>note</code>).</p>\n<blockquote>\n<p>\ud83d\udcd8 DPNS Contract</p>\n<p>Note: Access to the DPNS contract is built into the Dash SDK. DPNS documents may be accessed via the <code>dpns</code> app name (e.g. <code>dpns.domain</code>).</p>\n</blockquote>\n<p>If you need more than the first 100 documents, you&#39;ll have to make additional requests with <code>startAt</code> incremented by 100 each time. In the future, the Dash SDK may return documents with paging information to make this easier and reveal how many documents are returned in total.</p>\n\n</div>"
}