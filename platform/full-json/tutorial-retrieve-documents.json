{
 "parentDoc": null, 
 "excerpt": "", 
 "api": {
  "url": "", 
  "params": [], 
  "method": "get", 
  "auth": "required", 
  "results": {
   "codes": [
    {
     "status": 200, 
     "code": "{}", 
     "name": "", 
     "language": "json"
    }, 
    {
     "status": 400, 
     "code": "{}", 
     "name": "", 
     "language": "json"
    }
   ]
  }
 }, 
 "updatedAt": "2020-04-06T20:04:12.780Z", 
 "id": "5dc17dede6444200315ddb5b", 
 "sync_unique": "", 
 "isApi": false, 
 "createdAt": "2019-11-05T13:49:33.553Z", 
 "category": "5d261b31d8f6ed004c24cbbe", 
 "title": "Retrieve Documents", 
 "next": {
  "description": "", 
  "pages": []
 }, 
 "version": "5d2374d8d238fb004e8f9243", 
 "hidden": false, 
 "type": "basic", 
 "metadata": {
  "image": [], 
  "description": "", 
  "title": ""
 }, 
 "body": "# Overview\n\nIn this tutorial we will retrieve some of the current data from a data contract. Data is stored in the form of documents as described in the Dash Platform Protocol [Document explanation](explanation-platform-protocol-document).\n\n## Prerequisites\n- [node.js](https://nodejs.org/en/)\n- Basic familiarity with JavaScript asychronous functions using [async/await](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await)\n- The Dash JavaScript SDK is initialized (covered in [Connecting to EvoNet](tutorial-connecting-to-evonet))\n\n# Code\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"Initializing the Client with a contract identity\",\n  \"body\": \"The example below shows how access to contract documents via `<contract name>.<contract document>` syntax (e.g. `tutorialContract.note`) can be enabled by passing a contract identity to the constructor. Please refer to the [DashJS documentation](https://dashevo.github.io/DashJS/#/getting-started/multiple-apps) for details.\"\n}\n[/block]\n\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"const Dash = require('dash');\\n\\nconst clientOpts = {\\n  network: 'testnet',\\n  apps: {\\n    tutorialContract: {\\n      contractId: 'EzLBmQdQXYMaoeXWNaegK18iaaCDShitN3s14US3DunM'\\n    }\\n  }\\n};\\nconst client = new Dash.Client(clientOpts);\\n\\nconst getDocuments = async function () {\\n  try {\\n    await client.isReady();\\n    \\n    const queryOpts = {\\n      limit: 1 // Only retrieve 1 document\\n    };\\n    const documents = await client.platform.documents.get(\\n      'tutorialContract.note',\\n      queryOpts\\n    );\\n    console.log(documents);\\n  } catch (e) {\\n    console.error('Something went wrong:', e);\\n  } finally {\\n    client.disconnect();\\n  }\\n};\\n\\ngetDocuments();\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\n## Queries\n\nThe example code uses a very basic query to return only one result. More extensive querying capabilities are covered in the [query syntax reference](reference-query-syntax).\n\n# Example Document\n\nThe following examples show the structure of a `note` document (from the data contract registered in the tutorial) returned from the SDK when retrieved with various methods. \n\nThe values returned by `.toJSON()` include the base document properties (prefixed with `$`) present in all documents along with the data contract defined properties. \n\nThe values returned by `.getData()` (and also shown in the console.dir() `data` property) represent _only_ the properties defined in the `note` document described by the [tutorial data contract](tutorial-register-a-data-contract#section-code).\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"{\\n  '$type': 'note',\\n  '$contractId': 'EzLBmQdQXYMaoeXWNaegK18iaaCDShitN3s14US3DunM',\\n  '$userId': 'At44pvrZXLwjbJp415E2kjav49goGosRF3SB1WW1QJoG',\\n  '$entropy': 'yhRn6x4okoMnkXmjxqtNziUR12B3R9Tise',\\n  '$rev': 1,\\n  message: 'Tutorial Test @ Wed, 25 Mar 2020 16:42:50 GMT'\\n}\",\n      \"language\": \"json\",\n      \"name\": \".toJSON()\"\n    },\n    {\n      \"code\": \"{\\n  message: 'Tutorial Test @ Wed, 25 Mar 2020 16:42:50 GMT'\\n}\",\n      \"language\": \"json\",\n      \"name\": \".getData()\"\n    },\n    {\n      \"code\": \"Tutorial Test @ Wed, 25 Mar 2020 16:42:50 GMT\",\n      \"language\": \"text\",\n      \"name\": \".data.label\"\n    },\n    {\n      \"code\": \"Document {\\n  id: undefined,\\n  action: undefined,\\n  type: 'note',\\n  entropy: 'yhRn6x4okoMnkXmjxqtNziUR12B3R9Tise',\\n  contractId: 'EzLBmQdQXYMaoeXWNaegK18iaaCDShitN3s14US3DunM',\\n  userId: 'At44pvrZXLwjbJp415E2kjav49goGosRF3SB1WW1QJoG',\\n  revision: 1,\\n  data: {\\n    message: 'Tutorial Test @ Wed, 25 Mar 2020 16:42:50 GMT'\\n  }\\n}\",\n      \"language\": \"json\",\n      \"name\": \"console.dir(document)\"\n    }\n  ]\n}\n[/block]\n# What's happening\n\nAfter we initialize the Client, we request some documents. The `client.platform.documents.get` method takes two arguments: a record locator and a query object. The records locator consists of an app name (e.g. `tutorialContract`) and the top-level document type requested, (e.g. `note`).\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"DPNS Contract\",\n  \"body\": \"Note: Access to the DPNS contract is built into DashJS. DPNS documents may be accessed via the `dpns` app name (e.g. `dpns.domain`).\"\n}\n[/block]\nIf you need more than the first 100 documents, you'll have to make additional requests with `startAt` incremented by 100 each time. In the future, DashJS may return documents with paging information to make this easier and reveal how many documents are returned in total.", 
 "link_external": false, 
 "body_html": "<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-overview\"></div>Overview<a class=\"fa fa-anchor\" href=\"#section-overview\"></a></h1>\n<p>In this tutorial we will retrieve some of the current data from a data contract. Data is stored in the form of documents as described in the Dash Platform Protocol <a href=\"explanation-platform-protocol-document\">Document explanation</a>.</p>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-prerequisites\"></div>Prerequisites<a class=\"fa fa-anchor\" href=\"#section-prerequisites\"></a></h2>\n<ul>\n<li ><a href=\"https://nodejs.org/en/\">node.js</a></li><li >Basic familiarity with JavaScript asychronous functions using <a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await\">async/await</a></li><li >The Dash JavaScript SDK is initialized (covered in <a href=\"tutorial-connecting-to-evonet\">Connecting to EvoNet</a>)</li></ul>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-code\"></div>Code<a class=\"fa fa-anchor\" href=\"#section-code\"></a></h1>\n\n</div>\n<div class=\"magic-block-callout type-info \">\n\t<h3><i title=\"Info\" class=\"fa fa-info-circle\"></i>Initializing the Client with a contract identity\n\t</h3>\n\t<div class=\"callout-body\"><p>The example below shows how access to contract documents via <code>&lt;contract name&gt;.&lt;contract document&gt;</code> syntax (e.g. <code>tutorialContract.note</code>) can be enabled by passing a contract identity to the constructor. Please refer to the <a href=\"https://dashevo.github.io/DashJS/#/getting-started/multiple-apps\">DashJS documentation</a> for details.</p>\n\n\t</div>\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">JavaScript</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(719)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-719\">const Dash = require('dash');\n\nconst clientOpts = {\n  network: 'testnet',\n  apps: {\n    tutorialContract: {\n      contractId: 'EzLBmQdQXYMaoeXWNaegK18iaaCDShitN3s14US3DunM'\n    }\n  }\n};\nconst client = new Dash.Client(clientOpts);\n\nconst getDocuments = async function () {\n  try {\n    await client.isReady();\n    \n    const queryOpts = {\n      limit: 1 // Only retrieve 1 document\n    };\n    const documents = await client.platform.documents.get(\n      'tutorialContract.note',\n      queryOpts\n    );\n    console.log(documents);\n  } catch (e) {\n    console.error('Something went wrong:', e);\n  } finally {\n    client.disconnect();\n  }\n};\n\ngetDocuments();</textarea>\n\t\t\t<pre id=\"code-719\"><code><span class='cm-s-neo'><span class=\"cm-keyword\">const</span> <span class=\"cm-def\">Dash</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">require</span>(<span class=\"cm-string\">'dash'</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">clientOpts</span> <span class=\"cm-operator\">=</span> {\n  <span class=\"cm-property\">network</span>: <span class=\"cm-string\">'testnet'</span>,\n  <span class=\"cm-property\">apps</span>: {\n    <span class=\"cm-property\">tutorialContract</span>: {\n      <span class=\"cm-property\">contractId</span>: <span class=\"cm-string\">'EzLBmQdQXYMaoeXWNaegK18iaaCDShitN3s14US3DunM'</span>\n    }\n  }\n};\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">client</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">new</span> <span class=\"cm-variable\">Dash</span>.<span class=\"cm-property\">Client</span>(<span class=\"cm-variable\">clientOpts</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">getDocuments</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">async</span> <span class=\"cm-keyword\">function</span> () {\n  <span class=\"cm-keyword\">try</span> {\n    <span class=\"cm-keyword\">await</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">isReady</span>();\n    \n    <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">queryOpts</span> <span class=\"cm-operator\">=</span> {\n      <span class=\"cm-property\">limit</span>: <span class=\"cm-number\">1</span> <span class=\"cm-comment\">&#47;&#47; Only retrieve 1 document</span>\n    };\n    <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">documents</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">platform</span>.<span class=\"cm-property\">documents</span>.<span class=\"cm-property\">get</span>(\n      <span class=\"cm-string\">'tutorialContract.note'</span>,\n      <span class=\"cm-variable-2\">queryOpts</span>\n    );\n    <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-variable-2\">documents</span>);\n  } <span class=\"cm-keyword\">catch</span> (<span class=\"cm-def\">e</span>) {\n    <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">error</span>(<span class=\"cm-string\">'Something went wrong:'</span>, <span class=\"cm-variable-2\">e</span>);\n  } <span class=\"cm-keyword\">finally</span> {\n    <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">disconnect</span>();\n  }\n};\n\n<span class=\"cm-variable\">getDocuments</span>();</span></code></pre></span>\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-queries\"></div>Queries<a class=\"fa fa-anchor\" href=\"#section-queries\"></a></h2>\n<p>The example code uses a very basic query to return only one result. More extensive querying capabilities are covered in the <a href=\"reference-query-syntax\">query syntax reference</a>.</p>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-example-document\"></div>Example Document<a class=\"fa fa-anchor\" href=\"#section-example-document\"></a></h1>\n<p>The following examples show the structure of a <code>note</code> document (from the data contract registered in the tutorial) returned from the SDK when retrieved with various methods. </p>\n<p>The values returned by <code>.toJSON()</code> include the base document properties (prefixed with <code>$</code>) present in all documents along with the data contract defined properties. </p>\n<p>The values returned by <code>.getData()</code> (and also shown in the console.dir() <code>data</code> property) represent <em>only</em> the properties defined in the <code>note</code> document described by the <a href=\"tutorial-register-a-data-contract#section-code\">tutorial data contract</a>.</p>\n\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">.toJSON()</a></li>\n\t\t<li><a href=\"\" ng-click=\"showCode(1)\" ng-class=\"{active: (1 == tab)}\">.getData()</a></li>\n\t\t<li><a href=\"\" ng-click=\"showCode(2)\" ng-class=\"{active: (2 == tab)}\">.data.label</a></li>\n\t\t<li><a href=\"\" ng-click=\"showCode(3)\" ng-class=\"{active: (3 == tab)}\">console.dir(document)</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(594)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-594\">{\n  '$type': 'note',\n  '$contractId': 'EzLBmQdQXYMaoeXWNaegK18iaaCDShitN3s14US3DunM',\n  '$userId': 'At44pvrZXLwjbJp415E2kjav49goGosRF3SB1WW1QJoG',\n  '$entropy': 'yhRn6x4okoMnkXmjxqtNziUR12B3R9Tise',\n  '$rev': 1,\n  message: 'Tutorial Test @ Wed, 25 Mar 2020 16:42:50 GMT'\n}</textarea>\n\t\t\t<pre id=\"code-594\"><code><span class='cm-s-neo'>{\n  <span class=\"cm-property\">'$type'</span>: <span class=\"cm-string\">'note'</span>,\n  <span class=\"cm-property\">'$contractId'</span>: <span class=\"cm-string\">'EzLBmQdQXYMaoeXWNaegK18iaaCDShitN3s14US3DunM'</span>,\n  <span class=\"cm-property\">'$userId'</span>: <span class=\"cm-string\">'At44pvrZXLwjbJp415E2kjav49goGosRF3SB1WW1QJoG'</span>,\n  <span class=\"cm-property\">'$entropy'</span>: <span class=\"cm-string\">'yhRn6x4okoMnkXmjxqtNziUR12B3R9Tise'</span>,\n  <span class=\"cm-property\">'$rev'</span>: <span class=\"cm-number\">1</span>,\n  <span class=\"cm-property\">message</span>: <span class=\"cm-string\">'Tutorial Test @ Wed, 25 Mar 2020 16:42:50 GMT'</span>\n}</span></code></pre></span><span ng-if=\"tab == 1\">\n\t\t\t<button ng-click=\"copyCode(296)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-296\">{\n  message: 'Tutorial Test @ Wed, 25 Mar 2020 16:42:50 GMT'\n}</textarea>\n\t\t\t<pre id=\"code-296\"><code><span class='cm-s-neo'>{\n  <span class=\"cm-property\">message</span>: <span class=\"cm-string\">'Tutorial Test @ Wed, 25 Mar 2020 16:42:50 GMT'</span>\n}</span></code></pre></span><span ng-if=\"tab == 2\">\n\t\t\t<button ng-click=\"copyCode(859)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-859\">Tutorial Test @ Wed, 25 Mar 2020 16:42:50 GMT</textarea>\n\t\t\t<pre id=\"code-859\"><code>Tutorial Test @ Wed, 25 Mar 2020 16:42:50 GMT</code></pre></span><span ng-if=\"tab == 3\">\n\t\t\t<button ng-click=\"copyCode(664)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-664\">Document {\n  id: undefined,\n  action: undefined,\n  type: 'note',\n  entropy: 'yhRn6x4okoMnkXmjxqtNziUR12B3R9Tise',\n  contractId: 'EzLBmQdQXYMaoeXWNaegK18iaaCDShitN3s14US3DunM',\n  userId: 'At44pvrZXLwjbJp415E2kjav49goGosRF3SB1WW1QJoG',\n  revision: 1,\n  data: {\n    message: 'Tutorial Test @ Wed, 25 Mar 2020 16:42:50 GMT'\n  }\n}</textarea>\n\t\t\t<pre id=\"code-664\"><code><span class='cm-s-neo'><span class=\"cm-variable\">Document</span> {\n  <span class=\"cm-property\">id</span>: <span class=\"cm-atom\">undefined</span>,\n  <span class=\"cm-property\">action</span>: <span class=\"cm-atom\">undefined</span>,\n  <span class=\"cm-property\">type</span>: <span class=\"cm-string\">'note'</span>,\n  <span class=\"cm-property\">entropy</span>: <span class=\"cm-string\">'yhRn6x4okoMnkXmjxqtNziUR12B3R9Tise'</span>,\n  <span class=\"cm-property\">contractId</span>: <span class=\"cm-string\">'EzLBmQdQXYMaoeXWNaegK18iaaCDShitN3s14US3DunM'</span>,\n  <span class=\"cm-property\">userId</span>: <span class=\"cm-string\">'At44pvrZXLwjbJp415E2kjav49goGosRF3SB1WW1QJoG'</span>,\n  <span class=\"cm-property\">revision</span>: <span class=\"cm-number\">1</span>,\n  <span class=\"cm-property\">data</span>: {\n    <span class=\"cm-property\">message</span>: <span class=\"cm-string\">'Tutorial Test @ Wed, 25 Mar 2020 16:42:50 GMT'</span>\n  }\n}</span></code></pre></span>\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-whats-happening\"></div>What&#39;s happening<a class=\"fa fa-anchor\" href=\"#section-whats-happening\"></a></h1>\n<p>After we initialize the Client, we request some documents. The <code>client.platform.documents.get</code> method takes two arguments: a record locator and a query object. The records locator consists of an app name (e.g. <code>tutorialContract</code>) and the top-level document type requested, (e.g. <code>note</code>).</p>\n\n</div>\n<div class=\"magic-block-callout type-info \">\n\t<h3><i title=\"Info\" class=\"fa fa-info-circle\"></i>DPNS Contract\n\t</h3>\n\t<div class=\"callout-body\"><p>Note: Access to the DPNS contract is built into DashJS. DPNS documents may be accessed via the <code>dpns</code> app name (e.g. <code>dpns.domain</code>).</p>\n\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><p>If you need more than the first 100 documents, you&#39;ll have to make additional requests with <code>startAt</code> incremented by 100 each time. In the future, DashJS may return documents with paging information to make this easier and reveal how many documents are returned in total.</p>\n\n</div>", 
 "user": "5b8400d7185d5e00036dcc3b", 
 "isReference": false, 
 "slug": "tutorial-retrieve-documents", 
 "link_url": "", 
 "project": "5bda01cad172e200499a20a9", 
 "__v": 1, 
 "_id": "5dc17dede6444200315ddb5b", 
 "order": 8, 
 "updates": [
  "5e1396e7516ae8002e0054da"
 ]
}