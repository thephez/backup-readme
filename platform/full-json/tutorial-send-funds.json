{
 "parentDoc": null, 
 "excerpt": "", 
 "api": {
  "url": "", 
  "params": [], 
  "results": {
   "codes": [
    {
     "status": 200, 
     "code": "{}", 
     "name": "", 
     "language": "json"
    }, 
    {
     "status": 400, 
     "code": "{}", 
     "name": "", 
     "language": "json"
    }
   ]
  }, 
  "auth": "required", 
  "method": "get"
 }, 
 "updatedAt": "2020-01-10T04:43:31.799Z", 
 "sync_unique": "", 
 "id": "5d41d0f896ccb8003b86898d", 
 "createdAt": "2019-07-31T17:33:44.306Z", 
 "category": "5d261b31d8f6ed004c24cbbe", 
 "title": "Send Funds", 
 "next": {
  "pages": [
   {
    "category": "Tutorials", 
    "icon": "file-text-o", 
    "type": "doc", 
    "slug": "tutorial-register-an-identity", 
    "name": "Register an Identity"
   }
  ], 
  "description": ""
 }, 
 "version": "5d2374d8d238fb004e8f9243", 
 "hidden": false, 
 "type": "basic", 
 "metadata": {
  "image": [], 
  "description": "", 
  "title": ""
 }, 
 "body": "# Overview\n\nOnce you have a wallet and some funds ([tutorial](tutorial-create-and-fund-a-wallet)), another common task is sending Dash to an address. (Sending Dash to a contact or a DPNS identity requires the Dashpay app, which has not been registered yet.)\n\n# Code\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"const DashJS = require('dash');\\n\\nconst sdkOpts = {\\n  network: 'testnet',\\n  mnemonic: 'your wallet mnemonic goes here'\\n};\\nconst sdk = new DashJS.SDK(sdkOpts);\\n\\nasync function sendFunds() {\\n  await sdk.isReady();\\n  try {\\n    const transaction = sdk.account.createTransaction({\\n      recipient: 'yNPbcFfabtNmmxKdGwhHomdYfVs6gikbPf', // Evonet faucet\\n      satoshis: 100000000, // 1 Dash\\n    });\\n    const result = await sdk.account.broadcastTransaction(transaction);\\n    console.log('Transaction broadcast!\\\\nTransaction ID:', result);\\n  } catch (e) {\\n    console.error('Something went wrong:', e);\\n  } finally {\\n    sdk.disconnect();\\n  }\\n}\\n\\nsendFunds();\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\n# What's Happening\n\nAfter initializing the SDK, we build a new transaction with `sdk.account.createTransaction`. It requires a recipient and an amount in satoshis (often called \"duffs\" in Dash). 100 million satoshis equals one Dash. We pass the transaction to `sdk.account.broadcastTransaction` and wait for it to return. Then we output the result, which is a transaction ID. After that we disconnect from the SDK so node can exit.", 
 "link_external": false, 
 "body_html": "<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-overview\"></div>Overview<a class=\"fa fa-anchor\" href=\"#section-overview\"></a></h1>\n<p>Once you have a wallet and some funds (<a href=\"tutorial-create-and-fund-a-wallet\">tutorial</a>), another common task is sending Dash to an address. (Sending Dash to a contact or a DPNS identity requires the Dashpay app, which has not been registered yet.)</p>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-code\"></div>Code<a class=\"fa fa-anchor\" href=\"#section-code\"></a></h1>\n\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">JavaScript</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(636)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-636\">const DashJS = require('dash');\n\nconst sdkOpts = {\n  network: 'testnet',\n  mnemonic: 'your wallet mnemonic goes here'\n};\nconst sdk = new DashJS.SDK(sdkOpts);\n\nasync function sendFunds() {\n  await sdk.isReady();\n  try {\n    const transaction = sdk.account.createTransaction({\n      recipient: 'yNPbcFfabtNmmxKdGwhHomdYfVs6gikbPf', // Evonet faucet\n      satoshis: 100000000, // 1 Dash\n    });\n    const result = await sdk.account.broadcastTransaction(transaction);\n    console.log('Transaction broadcast!\\nTransaction ID:', result);\n  } catch (e) {\n    console.error('Something went wrong:', e);\n  } finally {\n    sdk.disconnect();\n  }\n}\n\nsendFunds();</textarea>\n\t\t\t<pre id=\"code-636\"><code><span class='cm-s-neo'><span class=\"cm-keyword\">const</span> <span class=\"cm-def\">DashJS</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">require</span>(<span class=\"cm-string\">'dash'</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">sdkOpts</span> <span class=\"cm-operator\">=</span> {\n  <span class=\"cm-property\">network</span>: <span class=\"cm-string\">'testnet'</span>,\n  <span class=\"cm-property\">mnemonic</span>: <span class=\"cm-string\">'your wallet mnemonic goes here'</span>\n};\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">sdk</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">new</span> <span class=\"cm-variable\">DashJS</span>.<span class=\"cm-property\">SDK</span>(<span class=\"cm-variable\">sdkOpts</span>);\n\n<span class=\"cm-keyword\">async</span> <span class=\"cm-keyword\">function</span> <span class=\"cm-def\">sendFunds</span>() {\n  <span class=\"cm-keyword\">await</span> <span class=\"cm-variable\">sdk</span>.<span class=\"cm-property\">isReady</span>();\n  <span class=\"cm-keyword\">try</span> {\n    <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">transaction</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">sdk</span>.<span class=\"cm-property\">account</span>.<span class=\"cm-property\">createTransaction</span>({\n      <span class=\"cm-property\">recipient</span>: <span class=\"cm-string\">'yNPbcFfabtNmmxKdGwhHomdYfVs6gikbPf'</span>, <span class=\"cm-comment\">&#47;&#47; Evonet faucet</span>\n      <span class=\"cm-property\">satoshis</span>: <span class=\"cm-number\">100000000</span>, <span class=\"cm-comment\">&#47;&#47; 1 Dash</span>\n    });\n    <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">result</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable\">sdk</span>.<span class=\"cm-property\">account</span>.<span class=\"cm-property\">broadcastTransaction</span>(<span class=\"cm-variable-2\">transaction</span>);\n    <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-string\">'Transaction broadcast!\\nTransaction ID:'</span>, <span class=\"cm-variable-2\">result</span>);\n  } <span class=\"cm-keyword\">catch</span> (<span class=\"cm-def\">e</span>) {\n    <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">error</span>(<span class=\"cm-string\">'Something went wrong:'</span>, <span class=\"cm-variable-2\">e</span>);\n  } <span class=\"cm-keyword\">finally</span> {\n    <span class=\"cm-variable\">sdk</span>.<span class=\"cm-property\">disconnect</span>();\n  }\n}\n\n<span class=\"cm-variable\">sendFunds</span>();</span></code></pre></span>\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-whats-happening\"></div>What&#39;s Happening<a class=\"fa fa-anchor\" href=\"#section-whats-happening\"></a></h1>\n<p>After initializing the SDK, we build a new transaction with <code>sdk.account.createTransaction</code>. It requires a recipient and an amount in satoshis (often called &quot;duffs&quot; in Dash). 100 million satoshis equals one Dash. We pass the transaction to <code>sdk.account.broadcastTransaction</code> and wait for it to return. Then we output the result, which is a transaction ID. After that we disconnect from the SDK so node can exit.</p>\n\n</div>", 
 "user": "5d5abd2ace3a96005e4f8d68", 
 "isReference": false, 
 "slug": "tutorial-send-funds", 
 "link_url": "", 
 "isApi": false, 
 "project": "5bda01cad172e200499a20a9", 
 "__v": 2, 
 "_id": "5d41d0f896ccb8003b86898d", 
 "order": 3, 
 "updates": [
  "5e17c8c6f9f9cd01eae5cbe4"
 ]
}