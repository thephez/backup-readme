{
 "metadata": {
  "image": [],
  "title": "",
  "description": ""
 },
 "api": {
  "method": "get",
  "url": "",
  "auth": "required",
  "results": {
   "codes": [
    {
     "status": 200,
     "language": "json",
     "code": "{}",
     "name": ""
    },
    {
     "status": 400,
     "language": "json",
     "code": "{}",
     "name": ""
    }
   ]
  },
  "params": []
 },
 "next": {
  "description": "",
  "pages": [
   {
    "type": "doc",
    "icon": "file-text-o",
    "name": "Register an Identity",
    "slug": "tutorial-register-an-identity",
    "category": "Tutorials"
   }
  ]
 },
 "title": "Send Funds",
 "updates": [
  "5e17c8c6f9f9cd01eae5cbe4",
  "5f2cff5a28f07903690fa338"
 ],
 "type": "basic",
 "slug": "tutorial-send-funds",
 "excerpt": "",
 "body": "# Overview\n\nOnce you have a wallet and some funds ([tutorial](tutorial-create-and-fund-a-wallet)), another common task is sending Dash to an address. (Sending Dash to a contact or a DPNS identity requires the Dashpay app, which has not been registered yet.)\n\n# Code\n\n> \ud83d\udcd8Wallet Operations\n>\n> The JavaScript SDK does not cache wallet information. It re-syncs the entire Core chain for some wallet operations (e.g. `client.getWalletAccount()`) which can result in wait times of  5+ minutes. \n>\n> A future release will add caching so that access is much faster after the initial sync. For now, the `skipSynchronizationBeforeHeight` option can be used to sync the wallet starting at a certain block height.\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"const Dash = require('dash');\\n\\nconst clientOpts = {\\n  network: 'testnet',\\n  wallet: {\\n    mnemonic: 'your wallet mnemonic goes here',\\n    unsafeOptions: {\\n      skipSynchronizationBeforeHeight: 650000, // only sync from early-2022\\n    },\\n  },\\n};\\nconst client = new Dash.Client(clientOpts);\\n\\nconst sendFunds = async () => {\\n  const account = await client.getWalletAccount();\\n\\n  const transaction = account.createTransaction({\\n    recipient: 'yP8A3cbdxRtLRduy5mXDsBnJtMzHWs6ZXr', // Testnet2 faucet\\n    satoshis: 100000000, // 1 Dash\\n  });\\n  return account.broadcastTransaction(transaction);\\n};\\n\\nsendFunds()\\n  .then((d) => console.log('Transaction broadcast!\\\\nTransaction ID:', d))\\n  .catch((e) => console.error('Something went wrong:\\\\n', e))\\n  .finally(() => client.disconnect());\\n\\n// Handle wallet async errors\\nclient.on('error', (error, context) => {\\n  console.error(`Client error: ${error.name}`);\\n  console.error(context);\\n});\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\n# What's Happening\n\nAfter initializing the Client, we build a new transaction with `account.createTransaction`. It requires a recipient and an amount in satoshis (often called \"duffs\" in Dash). 100 million satoshis equals one Dash. We pass the transaction to `account.broadcastTransaction` and wait for it to return. Then we output the result, which is a transaction ID. After that we disconnect from the Client so node can exit.",
 "order": 7,
 "isReference": false,
 "deprecated": false,
 "hidden": false,
 "sync_unique": "",
 "link_url": "",
 "link_external": false,
 "pendingAlgoliaPublish": false,
 "previousSlug": "",
 "slugUpdatedAt": "2020-08-07T01:38:33.594Z",
 "_id": "61d70ca155d45f029381704b",
 "version": "61d70ca155d45f02938170a3",
 "updatedAt": "2022-05-12T17:47:56.429Z",
 "createdAt": "2019-07-31T17:33:44.306Z",
 "project": "5bda01cad172e200499a20a9",
 "category": "61d70ca155d45f029381703b",
 "user": "5b8400d7185d5e00036dcc3b",
 "parentDoc": null,
 "__v": 3,
 "isApi": false,
 "id": "61d70ca155d45f029381704b",
 "body_html": "<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-overview\"></div>Overview<a class=\"fa fa-anchor\" href=\"#section-overview\"></a></h1>\n<p>Once you have a wallet and some funds (<a href=\"tutorial-create-and-fund-a-wallet\">tutorial</a>), another common task is sending Dash to an address. (Sending Dash to a contact or a DPNS identity requires the Dashpay app, which has not been registered yet.)</p>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-code\"></div>Code<a class=\"fa fa-anchor\" href=\"#section-code\"></a></h1>\n<blockquote>\n<p>\ud83d\udcd8Wallet Operations</p>\n<p>The JavaScript SDK does not cache wallet information. It re-syncs the entire Core chain for some wallet operations (e.g. <code>client.getWalletAccount()</code>) which can result in wait times of  5+ minutes. </p>\n<p>A future release will add caching so that access is much faster after the initial sync. For now, the <code>skipSynchronizationBeforeHeight</code> option can be used to sync the wallet starting at a certain block height.</p>\n</blockquote>\n\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">JavaScript</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(60)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-60\">const Dash = require('dash');\n\nconst clientOpts = {\n  network: 'testnet',\n  wallet: {\n    mnemonic: 'your wallet mnemonic goes here',\n    unsafeOptions: {\n      skipSynchronizationBeforeHeight: 650000, // only sync from early-2022\n    },\n  },\n};\nconst client = new Dash.Client(clientOpts);\n\nconst sendFunds = async () =&gt; {\n  const account = await client.getWalletAccount();\n\n  const transaction = account.createTransaction({\n    recipient: 'yP8A3cbdxRtLRduy5mXDsBnJtMzHWs6ZXr', // Testnet2 faucet\n    satoshis: 100000000, // 1 Dash\n  });\n  return account.broadcastTransaction(transaction);\n};\n\nsendFunds()\n  .then((d) =&gt; console.log('Transaction broadcast!\\nTransaction ID:', d))\n  .catch((e) =&gt; console.error('Something went wrong:\\n', e))\n  .finally(() =&gt; client.disconnect());\n\n// Handle wallet async errors\nclient.on('error', (error, context) =&gt; {\n  console.error(`Client error: ${error.name}`);\n  console.error(context);\n});</textarea>\n\t\t\t<pre id=\"code-60\"><code><span class='cm-s-neo'><span class=\"cm-keyword\">const</span> <span class=\"cm-def\">Dash</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">require</span>(<span class=\"cm-string\">'dash'</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">clientOpts</span> <span class=\"cm-operator\">=</span> {\n  <span class=\"cm-property\">network</span>: <span class=\"cm-string\">'testnet'</span>,\n  <span class=\"cm-property\">wallet</span>: {\n    <span class=\"cm-property\">mnemonic</span>: <span class=\"cm-string\">'your wallet mnemonic goes here'</span>,\n    <span class=\"cm-property\">unsafeOptions</span>: {\n      <span class=\"cm-property\">skipSynchronizationBeforeHeight</span>: <span class=\"cm-number\">650000</span>, <span class=\"cm-comment\">&#47;&#47; only sync from early-2022</span>\n    },\n  },\n};\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">client</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">new</span> <span class=\"cm-variable\">Dash</span>.<span class=\"cm-property\">Client</span>(<span class=\"cm-variable\">clientOpts</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">sendFunds</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">async</span> () <span class=\"cm-operator\">=&gt;</span> {\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">account</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">getWalletAccount</span>();\n\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">transaction</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable-2\">account</span>.<span class=\"cm-property\">createTransaction</span>({\n    <span class=\"cm-property\">recipient</span>: <span class=\"cm-string\">'yP8A3cbdxRtLRduy5mXDsBnJtMzHWs6ZXr'</span>, <span class=\"cm-comment\">&#47;&#47; Testnet2 faucet</span>\n    <span class=\"cm-property\">satoshis</span>: <span class=\"cm-number\">100000000</span>, <span class=\"cm-comment\">&#47;&#47; 1 Dash</span>\n  });\n  <span class=\"cm-keyword\">return</span> <span class=\"cm-variable-2\">account</span>.<span class=\"cm-property\">broadcastTransaction</span>(<span class=\"cm-variable-2\">transaction</span>);\n};\n\n<span class=\"cm-variable\">sendFunds</span>()\n  .<span class=\"cm-property\">then</span>((<span class=\"cm-def\">d</span>) <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-string\">'Transaction broadcast!\\nTransaction ID:'</span>, <span class=\"cm-variable-2\">d</span>))\n  .<span class=\"cm-property\">catch</span>((<span class=\"cm-def\">e</span>) <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">error</span>(<span class=\"cm-string\">'Something went wrong:\\n'</span>, <span class=\"cm-variable-2\">e</span>))\n  .<span class=\"cm-property\">finally</span>(() <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">disconnect</span>());\n\n<span class=\"cm-comment\">&#47;&#47; Handle wallet async errors</span>\n<span class=\"cm-variable\">client</span>.<span class=\"cm-property\">on</span>(<span class=\"cm-string\">'error'</span>, (<span class=\"cm-def\">error</span>, <span class=\"cm-def\">context</span>) <span class=\"cm-operator\">=&gt;</span> {\n  <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">error</span>(<span class=\"cm-string-2\">`Client error: ${</span><span class=\"cm-variable-2\">error</span>.<span class=\"cm-property\">name</span><span class=\"cm-string-2\">}`</span>);\n  <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">error</span>(<span class=\"cm-variable-2\">context</span>);\n});</span></code></pre></span>\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-whats-happening\"></div>What&#39;s Happening<a class=\"fa fa-anchor\" href=\"#section-whats-happening\"></a></h1>\n<p>After initializing the Client, we build a new transaction with <code>account.createTransaction</code>. It requires a recipient and an amount in satoshis (often called &quot;duffs&quot; in Dash). 100 million satoshis equals one Dash. We pass the transaction to <code>account.broadcastTransaction</code> and wait for it to return. Then we output the result, which is a transaction ID. After that we disconnect from the Client so node can exit.</p>\n\n</div>"
}