{
 "metadata": {
  "keywords": "",
  "robots": "index",
  "description": "",
  "title": "",
  "image": []
 },
 "mdx": {
  "altBody": "",
  "status": "rdmd"
 },
 "api": {
  "results": {
   "codes": [
    {
     "status": 200,
     "language": "json",
     "code": "{}",
     "name": ""
    },
    {
     "status": 400,
     "language": "json",
     "code": "{}",
     "name": ""
    }
   ]
  },
  "auth": "required",
  "params": [],
  "url": "",
  "method": "get",
  "examples": {
   "codes": []
  }
 },
 "next": {
  "pages": [
   {
    "type": "doc",
    "icon": "file-text-o",
    "name": "Retrieve Documents",
    "slug": "tutorial-retrieve-documents",
    "category": "Tutorials",
    "atwho_order": 9
   },
   {
    "type": "doc",
    "icon": "file-text-o",
    "name": "Update Documents",
    "slug": "tutorial-update-documents",
    "category": "Tutorials"
   },
   {
    "type": "doc",
    "icon": "file-text-o",
    "name": "Delete Documents",
    "slug": "tutorial-delete-documents",
    "category": "Tutorials"
   }
  ],
  "description": ""
 },
 "algolia": {
  "translationFailure": false,
  "publishPending": false,
  "recordCount": 4,
  "updatedAt": "2023-09-12T13:19:09.960Z"
 },
 "reusableContent": [],
 "_id": "64f8a9df750465004742ad96",
 "version": "64f8a9df750465004742ae1d",
 "updatedAt": "2023-09-12T13:19:09.633Z",
 "createdAt": "2019-11-05T13:49:13.604Z",
 "project": "5bda01cad172e200499a20a9",
 "user": "5b8400d7185d5e00036dcc3b",
 "category": "64f8a9df750465004742ad6e",
 "updates": [
  "5f2cffab41d4600404e71179",
  "5f7222b3b3ba4e00265f3072",
  "64381c8c405c1900269b71c1"
 ],
 "link_external": false,
 "link_url": "",
 "sync_unique": "",
 "hidden": false,
 "isReference": false,
 "order": 3,
 "body": "# Overview\n\nIn this tutorial we will submit some data to an application on Dash Platform. Data is stored in the form of [documents](explanation-platform-protocol-document) which are encapsulated in a [state transition](explanation-platform-protocol-state-transition) before being submitted to DAPI. \n\n## Prerequisites\n\n- [General prerequisites](tutorials-introduction#prerequisites) (Node.js / Dash SDK installed)\n- A wallet mnemonic with some funds in it: [Tutorial: Create and Fund a Wallet](tutorial-create-and-fund-a-wallet)\n- A Dash Platform Identity: [Tutorial: Register an Identity](tutorial-register-an-identity)\n- A Dash Platform Contract ID: [Tutorial: Register a Data Contract](tutorial-register-a-data-contract) \n\n# Code\n\n```javascript\nconst Dash = require('dash');\n\nconst clientOpts = {\n  network: 'testnet',\n  wallet: {\n    mnemonic: 'a Dash wallet mnemonic with funds goes here',\n    unsafeOptions: {\n      skipSynchronizationBeforeHeight: 650000, // only sync from early-2022\n    },\n  },\n  apps: {\n    tutorialContract: {\n      contractId: '8cvMFwa2YbEsNNoc1PXfTacy2PVq2SzVnkZLeQSzjfi6',\n    },\n  },\n};\nconst client = new Dash.Client(clientOpts);\n\nconst submitNoteDocument = async () => {\n  const { platform } = client;\n  const identity = await platform.identities.get('an identity ID goes here');\n\n  const docProperties = {\n    message: `Tutorial Test @ ${new Date().toUTCString()}`,\n  };\n\n  // Create the note document\n  const noteDocument = await platform.documents.create(\n    'tutorialContract.note',\n    identity,\n    docProperties,\n  );\n\n  const documentBatch = {\n    create: [noteDocument], // Document(s) to create\n    replace: [], // Document(s) to update\n    delete: [], // Document(s) to delete\n  };\n  // Sign and submit the document(s)\n  await platform.documents.broadcast(documentBatch, identity);\n  return noteDocument;\n};\n\nsubmitNoteDocument()\n  .then((d) => console.log(d.toJSON()))\n  .catch((e) => console.error('Something went wrong:\\n', e))\n  .finally(() => client.disconnect());\n```\n\n> \ud83d\udc4d Initializing the Client with a contract identity\n> \n> The example above shows how access to contract documents via `<contract name>.<contract document>` syntax (e.g. `tutorialContract.note`) can be enabled by passing a contract identity to the constructor. Please refer to the [Dash SDK documentation](https://github.com/dashevo/platform/blob/master/packages/js-dash-sdk/docs/getting-started/multiple-apps.md) for details.\n\n# What's happening\n\nAfter we initialize the Client, we create a document that matches the structure defined by the data contract of the application being referenced (e.g. a `note` document for the contract registered in the [data contract tutorial](tutorial-register-a-data-contract#section-code)). The `platform.documents.create` method takes three arguments: a document locator, an identity, and the document data. The document locator consists of an application name (e.g. `tutorialContract`) and the document type being created (e.g. `note`). The document data should contain values for each of the properties defined for it in the data contract (e.g. `message` for the tutorial contract's note).\n\nOnce the document has been created, we still need to submit it to [DAPI](explanation-dapi). Documents are submitted in batches that may contain multiple documents to be created, replaced, or deleted. In this example, a single document is being created. The `documentBatch` object defines the action to be completed for the document (the empty action arrays - `replace` and `delete` in this example - may be excluded and are shown for reference only here).\n\nThe `platform.documents.broadcast` method then takes the document batch and an identity parameter. Internally, it creates a [State Transition](explanation-platform-protocol-state-transition) containing the previously created document, signs the state transition, and submits the signed state transition to DAPI.\n\n> \ud83d\udcd8 Wallet Operations\n> \n> The JavaScript SDK does not cache wallet information. It re-syncs the entire Core chain for some wallet operations (e.g. `client.getWalletAccount()`) which can result in wait times of  5+ minutes. \n> \n> A future release will add caching so that access is much faster after the initial sync. For now, the `skipSynchronizationBeforeHeight` option can be used to sync the wallet starting at a certain block height.",
 "excerpt": "Submit data to Dash Platform",
 "slug": "tutorial-submit-documents",
 "type": "basic",
 "title": "Submit Documents",
 "__v": 5,
 "parentDoc": "64f8a9df750465004742adc8",
 "pendingAlgoliaPublish": false,
 "previousSlug": "",
 "slugUpdatedAt": "2020-07-22T19:52:07.894Z",
 "deprecated": false,
 "icon": "",
 "revision": 6,
 "isApi": false,
 "id": "64f8a9df750465004742ad96",
 "body_html": "<h1 class=\"heading heading-1 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"overview\"></div><div class=\"heading-text\"><div id=\"section-overview\" class=\"heading-anchor_backwardsCompatibility\"></div>Overview</div><a aria-label=\"Skip link to Overview\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#overview\"></a></h1>\n<p>In this tutorial we will submit some data to an application on Dash Platform. Data is stored in the form of <a href=\"explanation-platform-protocol-document\" target=\"\" title=\"\">documents</a> which are encapsulated in a <a href=\"explanation-platform-protocol-state-transition\" target=\"\" title=\"\">state transition</a> before being submitted to DAPI. </p>\n<h2 class=\"heading heading-2 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"prerequisites\"></div><div class=\"heading-text\"><div id=\"section-prerequisites\" class=\"heading-anchor_backwardsCompatibility\"></div>Prerequisites</div><a aria-label=\"Skip link to Prerequisites\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#prerequisites\"></a></h2>\n<ul>\n<li><a href=\"tutorials-introduction#prerequisites\" target=\"\" title=\"\">General prerequisites</a> (Node.js / Dash SDK installed)</li>\n<li>A wallet mnemonic with some funds in it: <a href=\"tutorial-create-and-fund-a-wallet\" target=\"\" title=\"\">Tutorial: Create and Fund a Wallet</a></li>\n<li>A Dash Platform Identity: <a href=\"tutorial-register-an-identity\" target=\"\" title=\"\">Tutorial: Register an Identity</a></li>\n<li>A Dash Platform Contract ID: <a href=\"tutorial-register-a-data-contract\" target=\"\" title=\"\">Tutorial: Register a Data Contract</a> </li>\n</ul>\n<h1 class=\"heading heading-1 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"code\"></div><div class=\"heading-text\"><div id=\"section-code\" class=\"heading-anchor_backwardsCompatibility\"></div>Code</div><a aria-label=\"Skip link to Code\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#code\"></a></h1>\n<div class=\"CodeTabs CodeTabs_initial theme-light\"><div class=\"CodeTabs-toolbar\" role=\"tablist\"><button aria-selected=\"true\" class=\"CodeTabs_active\" role=\"tab\" type=\"button\">JavaScript</button></div><div class=\"CodeTabs-inner\" role=\"tabpanel\"><pre><button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang-javascript theme-light\" data-lang=\"javascript\" name=\"\" tabindex=\"0\">const Dash = require(&#x27;dash&#x27;);\n\nconst clientOpts = {\n  network: &#x27;testnet&#x27;,\n  wallet: {\n    mnemonic: &#x27;a Dash wallet mnemonic with funds goes here&#x27;,\n    unsafeOptions: {\n      skipSynchronizationBeforeHeight: 650000, // only sync from early-2022\n    },\n  },\n  apps: {\n    tutorialContract: {\n      contractId: &#x27;8cvMFwa2YbEsNNoc1PXfTacy2PVq2SzVnkZLeQSzjfi6&#x27;,\n    },\n  },\n};\nconst client = new Dash.Client(clientOpts);\n\nconst submitNoteDocument = async () =&gt; {\n  const { platform } = client;\n  const identity = await platform.identities.get(&#x27;an identity ID goes here&#x27;);\n\n  const docProperties = {\n    message: `Tutorial Test @ ${new Date().toUTCString()}`,\n  };\n\n  // Create the note document\n  const noteDocument = await platform.documents.create(\n    &#x27;tutorialContract.note&#x27;,\n    identity,\n    docProperties,\n  );\n\n  const documentBatch = {\n    create: [noteDocument], // Document(s) to create\n    replace: [], // Document(s) to update\n    delete: [], // Document(s) to delete\n  };\n  // Sign and submit the document(s)\n  await platform.documents.broadcast(documentBatch, identity);\n  return noteDocument;\n};\n\nsubmitNoteDocument()\n  .then((d) =&gt; console.log(d.toJSON()))\n  .catch((e) =&gt; console.error(&#x27;Something went wrong:\\n&#x27;, e))\n  .finally(() =&gt; client.disconnect());\n</code></pre></div></div>\n<blockquote class=\"callout callout_okay\" theme=\"\ud83d\udc4d\"><h2 class=\"callout-heading\"><span class=\"callout-icon\">\ud83d\udc4d</span><p>Initializing the Client with a contract identity</p></h2><p>The example above shows how access to contract documents via <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">&lt;contract name&gt;.&lt;contract document&gt;</code> syntax (e.g. <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">tutorialContract.note</code>) can be enabled by passing a contract identity to the constructor. Please refer to the <a href=\"https://github.com/dashevo/platform/blob/master/packages/js-dash-sdk/docs/getting-started/multiple-apps.md\" target=\"\" title=\"\">Dash SDK documentation</a> for details.</p></blockquote>\n<h1 class=\"heading heading-1 header-scroll\" align=\"\"><div class=\"heading-anchor anchor waypoint\" id=\"whats-happening\"></div><div class=\"heading-text\"><div id=\"section-whats-happening\" class=\"heading-anchor_backwardsCompatibility\"></div>What&#x27;s happening</div><a aria-label=\"Skip link to What&#x27;s happening\" class=\"heading-anchor-icon fa fa-anchor\" href=\"#whats-happening\"></a></h1>\n<p>After we initialize the Client, we create a document that matches the structure defined by the data contract of the application being referenced (e.g. a <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">note</code> document for the contract registered in the <a href=\"tutorial-register-a-data-contract#section-code\" target=\"\" title=\"\">data contract tutorial</a>). The <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">platform.documents.create</code> method takes three arguments: a document locator, an identity, and the document data. The document locator consists of an application name (e.g. <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">tutorialContract</code>) and the document type being created (e.g. <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">note</code>). The document data should contain values for each of the properties defined for it in the data contract (e.g. <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">message</code> for the tutorial contract&#x27;s note).</p>\n<p>Once the document has been created, we still need to submit it to <a href=\"explanation-dapi\" target=\"\" title=\"\">DAPI</a>. Documents are submitted in batches that may contain multiple documents to be created, replaced, or deleted. In this example, a single document is being created. The <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">documentBatch</code> object defines the action to be completed for the document (the empty action arrays - <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">replace</code> and <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">delete</code> in this example - may be excluded and are shown for reference only here).</p>\n<p>The <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">platform.documents.broadcast</code> method then takes the document batch and an identity parameter. Internally, it creates a <a href=\"explanation-platform-protocol-state-transition\" target=\"\" title=\"\">State Transition</a> containing the previously created document, signs the state transition, and submits the signed state transition to DAPI.</p>\n<blockquote class=\"callout callout_info\" theme=\"\ud83d\udcd8\"><h2 class=\"callout-heading\"><span class=\"callout-icon\">\ud83d\udcd8</span><p>Wallet Operations</p></h2><p>The JavaScript SDK does not cache wallet information. It re-syncs the entire Core chain for some wallet operations (e.g. <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">client.getWalletAccount()</code>) which can result in wait times of  5+ minutes. </p><p>A future release will add caching so that access is much faster after the initial sync. For now, the <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\">skipSynchronizationBeforeHeight</code> option can be used to sync the wallet starting at a certain block height.</p></blockquote>"
}