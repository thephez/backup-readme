{
 "pendingAlgoliaPublish": false, 
 "parentDoc": "5fdbb152764c0d003b08bd53", 
 "excerpt": "Submit data to Dash Platform", 
 "api": {
  "url": "", 
  "params": [], 
  "method": "get", 
  "auth": "required", 
  "results": {
   "codes": [
    {
     "status": 200, 
     "code": "{}", 
     "name": "", 
     "language": "json"
    }, 
    {
     "status": 400, 
     "code": "{}", 
     "name": "", 
     "language": "json"
    }
   ]
  }
 }, 
 "previousSlug": "", 
 "updatedAt": "2020-12-30T21:11:04.345Z", 
 "id": "5fd7ce777afee60053b2950a", 
 "sync_unique": "", 
 "isApi": false, 
 "createdAt": "2019-11-05T13:49:13.604Z", 
 "category": "5fd7ce777afee60053b294e7", 
 "title": "Submit Documents", 
 "next": {
  "description": "", 
  "pages": [
   {
    "category": "Tutorials", 
    "name": "Retrieve Documents", 
    "atwho_order": 9, 
    "type": "doc", 
    "slug": "tutorial-retrieve-documents", 
    "icon": "file-text-o"
   }
  ]
 }, 
 "version": "5fd7ce777afee60053b29540", 
 "slugUpdatedAt": "2020-07-22T19:52:07.894Z", 
 "hidden": false, 
 "type": "basic", 
 "metadata": {
  "image": [], 
  "description": "", 
  "title": ""
 }, 
 "body": "# Overview\n\nIn this tutorial we will submit some data to an application on Dash Platform. Data is stored in the form of [documents](explanation-platform-protocol-document) which are encapsulated in a [state transition](explanation-platform-protocol-state-transition) before being submitted to DAPI. \n\n## Prerequisites\n- [node.js](https://nodejs.org/en/) (v12+)\n- Basic familiarity with JavaScript asychronous functions using [async/await](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await)\n- The Dash JavaScript SDK is initialized (covered in [Connecting to EvoNet](tutorial-connecting-to-evonet))\n\n# Code\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"Initializing the Client with a contract identity\",\n  \"body\": \"The example below shows how access to contract documents via `<contract name>.<contract document>` syntax (e.g. `tutorialContract.note`) can be enabled by passing a contract identity to the constructor. Please refer to the [Dash SDK documentation](https://dashevo.github.io/js-dash-sdk/#/getting-started/multiple-apps) for details.\"\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"title\": \"Wallet Operations\",\n  \"body\": \"Currently, the JavaScript SDK does not cache wallet information, and therefore, it re-syncs the entire Core chain for some wallet operations (e.g. `client.getWalletAccount()`). This can result in wait times of  5+ minutes. An upcoming release will add a persistence feature to cache wallet information during initial sync so that subsequent access is much faster.\"\n}\n[/block]\n\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"const Dash = require('dash');\\n\\nconst clientOpts = {\\n  network: 'testnet',\\n  wallet: {\\n    mnemonic: 'a Dash wallet mnemonic with funds goes here',\\n  },\\n  apps: {\\n    tutorialContract: {\\n      contractId: '6Ti3c7nvD1gDf4gFi8a3FfZVhVLiRsGLnQ7nCAF74osi',\\n    },\\n  },\\n};\\nconst client = new Dash.Client(clientOpts);\\n\\nconst submitNoteDocument = async () => {\\n  const platform = client.platform;\\n  const identity = await platform.identities.get('an identity ID goes here');\\n\\n  const docProperties = {\\n    message: 'Tutorial Test @ ' + new Date().toUTCString(),\\n  };\\n\\n  // Create the note document\\n  const noteDocument = await platform.documents.create(\\n    'tutorialContract.note',\\n    identity,\\n    docProperties,\\n  );\\n\\n  const documentBatch = {\\n    create: [noteDocument], // Document(s) to create\\n    replace: [],            // Document(s) to update\\n    delete: [],             // Document(s) to delete\\n  };\\n  // Sign and submit the document(s)\\n  return platform.documents.broadcast(documentBatch, identity);\\n};\\n\\nsubmitNoteDocument()\\n  .then((d) => console.log(d))\\n  .catch((e) => console.error('Something went wrong:\\\\n', e))\\n  .finally(() => client.disconnect());\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\n# What's happening\n\nAfter we initialize the Client, we create a document that matches the structure defined by the data contract of the application being referenced (e.g. a `note` document for the contract registered in the [data contract tutorial](tutorial-register-a-data-contract#section-code)). The `platform.documents.create` method takes three arguments: a document locator, an identity, and the document data. The document locator consists of an application name (e.g. `tutorialContract`) and the document type being created (e.g. `note`). The document data should contain values for each of the properties defined for it in the data contract (e.g. `message` for the tutorial contract's note).\n\nOnce the document has been created, we still need to submit it to [DAPI](explanation-dapi). Documents are submitted in batches that may contain multiple documents to be created, replaced, or deleted. In this example, a single document is being created. The `documentBatch` object defines the action to be completed for the document (the empty action arrays - `replace` and `delete` in this example - may be excluded and are shown for reference only here).\n\nThe `platform.documents.broadcast` method then takes the document batch and an identity parameter. Internally, it creates a [State Transition](explanation-platform-protocol-state-transition) containing the previously created document, signs the state transition, and submits the signed state transition to DAPI.", 
 "link_external": false, 
 "body_html": "<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-overview\"></div>Overview<a class=\"fa fa-anchor\" href=\"#section-overview\"></a></h1>\n<p>In this tutorial we will submit some data to an application on Dash Platform. Data is stored in the form of <a href=\"explanation-platform-protocol-document\">documents</a> which are encapsulated in a <a href=\"explanation-platform-protocol-state-transition\">state transition</a> before being submitted to DAPI. </p>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-prerequisites\"></div>Prerequisites<a class=\"fa fa-anchor\" href=\"#section-prerequisites\"></a></h2>\n<ul>\n<li ><a href=\"https://nodejs.org/en/\">node.js</a> (v12+)</li><li >Basic familiarity with JavaScript asychronous functions using <a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await\">async/await</a></li><li >The Dash JavaScript SDK is initialized (covered in <a href=\"tutorial-connecting-to-evonet\">Connecting to EvoNet</a>)</li></ul>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-code\"></div>Code<a class=\"fa fa-anchor\" href=\"#section-code\"></a></h1>\n\n</div>\n<div class=\"magic-block-callout type-info \">\n\t<h3><i title=\"Info\" class=\"fa fa-info-circle\"></i>Initializing the Client with a contract identity\n\t</h3>\n\t<div class=\"callout-body\"><p>The example below shows how access to contract documents via <code>&lt;contract name&gt;.&lt;contract document&gt;</code> syntax (e.g. <code>tutorialContract.note</code>) can be enabled by passing a contract identity to the constructor. Please refer to the <a href=\"https://dashevo.github.io/js-dash-sdk/#/getting-started/multiple-apps\">Dash SDK documentation</a> for details.</p>\n\n\t</div>\n</div>\n<div class=\"magic-block-callout type-warning \">\n\t<h3><i title=\"Warning\" class=\"fa fa-exclamation-circle\"></i>Wallet Operations\n\t</h3>\n\t<div class=\"callout-body\"><p>Currently, the JavaScript SDK does not cache wallet information, and therefore, it re-syncs the entire Core chain for some wallet operations (e.g. <code>client.getWalletAccount()</code>). This can result in wait times of  5+ minutes. An upcoming release will add a persistence feature to cache wallet information during initial sync so that subsequent access is much faster.</p>\n\n\t</div>\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">JavaScript</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(96)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-96\">const Dash = require('dash');\n\nconst clientOpts = {\n  network: 'testnet',\n  wallet: {\n    mnemonic: 'a Dash wallet mnemonic with funds goes here',\n  },\n  apps: {\n    tutorialContract: {\n      contractId: '6Ti3c7nvD1gDf4gFi8a3FfZVhVLiRsGLnQ7nCAF74osi',\n    },\n  },\n};\nconst client = new Dash.Client(clientOpts);\n\nconst submitNoteDocument = async () =&gt; {\n  const platform = client.platform;\n  const identity = await platform.identities.get('an identity ID goes here');\n\n  const docProperties = {\n    message: 'Tutorial Test @ ' + new Date().toUTCString(),\n  };\n\n  // Create the note document\n  const noteDocument = await platform.documents.create(\n    'tutorialContract.note',\n    identity,\n    docProperties,\n  );\n\n  const documentBatch = {\n    create: [noteDocument], // Document(s) to create\n    replace: [],            // Document(s) to update\n    delete: [],             // Document(s) to delete\n  };\n  // Sign and submit the document(s)\n  return platform.documents.broadcast(documentBatch, identity);\n};\n\nsubmitNoteDocument()\n  .then((d) =&gt; console.log(d))\n  .catch((e) =&gt; console.error('Something went wrong:\\n', e))\n  .finally(() =&gt; client.disconnect());</textarea>\n\t\t\t<pre id=\"code-96\"><code><span class='cm-s-neo'><span class=\"cm-keyword\">const</span> <span class=\"cm-def\">Dash</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">require</span>(<span class=\"cm-string\">'dash'</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">clientOpts</span> <span class=\"cm-operator\">=</span> {\n  <span class=\"cm-property\">network</span>: <span class=\"cm-string\">'testnet'</span>,\n  <span class=\"cm-property\">wallet</span>: {\n    <span class=\"cm-property\">mnemonic</span>: <span class=\"cm-string\">'a Dash wallet mnemonic with funds goes here'</span>,\n  },\n  <span class=\"cm-property\">apps</span>: {\n    <span class=\"cm-property\">tutorialContract</span>: {\n      <span class=\"cm-property\">contractId</span>: <span class=\"cm-string\">'6Ti3c7nvD1gDf4gFi8a3FfZVhVLiRsGLnQ7nCAF74osi'</span>,\n    },\n  },\n};\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">client</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">new</span> <span class=\"cm-variable\">Dash</span>.<span class=\"cm-property\">Client</span>(<span class=\"cm-variable\">clientOpts</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">submitNoteDocument</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">async</span> () <span class=\"cm-operator\">=&gt;</span> {\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">platform</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">platform</span>;\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">identity</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">identities</span>.<span class=\"cm-property\">get</span>(<span class=\"cm-string\">'an identity ID goes here'</span>);\n\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">docProperties</span> <span class=\"cm-operator\">=</span> {\n    <span class=\"cm-property\">message</span>: <span class=\"cm-string\">'Tutorial Test @ '</span> <span class=\"cm-operator\">+</span> <span class=\"cm-keyword\">new</span> <span class=\"cm-variable\">Date</span>().<span class=\"cm-property\">toUTCString</span>(),\n  };\n\n  <span class=\"cm-comment\">&#47;&#47; Create the note document</span>\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">noteDocument</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">documents</span>.<span class=\"cm-property\">create</span>(\n    <span class=\"cm-string\">'tutorialContract.note'</span>,\n    <span class=\"cm-variable-2\">identity</span>,\n    <span class=\"cm-variable-2\">docProperties</span>,\n  );\n\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">documentBatch</span> <span class=\"cm-operator\">=</span> {\n    <span class=\"cm-property\">create</span>: [<span class=\"cm-variable-2\">noteDocument</span>], <span class=\"cm-comment\">&#47;&#47; Document(s) to create</span>\n    <span class=\"cm-property\">replace</span>: [],            <span class=\"cm-comment\">&#47;&#47; Document(s) to update</span>\n    <span class=\"cm-property\">delete</span>: [],             <span class=\"cm-comment\">&#47;&#47; Document(s) to delete</span>\n  };\n  <span class=\"cm-comment\">&#47;&#47; Sign and submit the document(s)</span>\n  <span class=\"cm-keyword\">return</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">documents</span>.<span class=\"cm-property\">broadcast</span>(<span class=\"cm-variable-2\">documentBatch</span>, <span class=\"cm-variable-2\">identity</span>);\n};\n\n<span class=\"cm-variable\">submitNoteDocument</span>()\n  .<span class=\"cm-property\">then</span>((<span class=\"cm-def\">d</span>) <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-variable-2\">d</span>))\n  .<span class=\"cm-property\">catch</span>((<span class=\"cm-def\">e</span>) <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">error</span>(<span class=\"cm-string\">'Something went wrong:\\n'</span>, <span class=\"cm-variable-2\">e</span>))\n  .<span class=\"cm-property\">finally</span>(() <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">disconnect</span>());</span></code></pre></span>\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-whats-happening\"></div>What&#39;s happening<a class=\"fa fa-anchor\" href=\"#section-whats-happening\"></a></h1>\n<p>After we initialize the Client, we create a document that matches the structure defined by the data contract of the application being referenced (e.g. a <code>note</code> document for the contract registered in the <a href=\"tutorial-register-a-data-contract#section-code\">data contract tutorial</a>). The <code>platform.documents.create</code> method takes three arguments: a document locator, an identity, and the document data. The document locator consists of an application name (e.g. <code>tutorialContract</code>) and the document type being created (e.g. <code>note</code>). The document data should contain values for each of the properties defined for it in the data contract (e.g. <code>message</code> for the tutorial contract&#39;s note).</p>\n<p>Once the document has been created, we still need to submit it to <a href=\"explanation-dapi\">DAPI</a>. Documents are submitted in batches that may contain multiple documents to be created, replaced, or deleted. In this example, a single document is being created. The <code>documentBatch</code> object defines the action to be completed for the document (the empty action arrays - <code>replace</code> and <code>delete</code> in this example - may be excluded and are shown for reference only here).</p>\n<p>The <code>platform.documents.broadcast</code> method then takes the document batch and an identity parameter. Internally, it creates a <a href=\"explanation-platform-protocol-state-transition\">State Transition</a> containing the previously created document, signs the state transition, and submits the signed state transition to DAPI.</p>\n\n</div>", 
 "updates": [
  "5f2cffab41d4600404e71179", 
  "5f7222b3b3ba4e00265f3072"
 ], 
 "isReference": false, 
 "slug": "tutorial-submit-documents", 
 "link_url": "", 
 "project": "5bda01cad172e200499a20a9", 
 "__v": 3, 
 "_id": "5fd7ce777afee60053b2950a", 
 "order": 2, 
 "user": "5b8400d7185d5e00036dcc3b"
}