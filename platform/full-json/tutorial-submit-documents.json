{
 "parentDoc": null, 
 "excerpt": "", 
 "api": {
  "url": "", 
  "params": [], 
  "results": {
   "codes": [
    {
     "status": 200, 
     "code": "{}", 
     "name": "", 
     "language": "json"
    }, 
    {
     "status": 400, 
     "code": "{}", 
     "name": "", 
     "language": "json"
    }
   ]
  }, 
  "auth": "required", 
  "method": "get"
 }, 
 "updatedAt": "2020-01-27T16:54:06.798Z", 
 "sync_unique": "", 
 "id": "5dc17dd946fd680043714e6a", 
 "createdAt": "2019-11-05T13:49:13.604Z", 
 "category": "5d261b31d8f6ed004c24cbbe", 
 "title": "Submit Documents", 
 "next": {
  "pages": [
   {
    "category": "Tutorials", 
    "name": "Retrieve Documents", 
    "atwho_order": 9, 
    "type": "doc", 
    "slug": "tutorial-retrieve-documents", 
    "icon": "file-text-o"
   }
  ], 
  "description": ""
 }, 
 "version": "5d2374d8d238fb004e8f9243", 
 "hidden": false, 
 "type": "basic", 
 "metadata": {
  "image": [], 
  "description": "", 
  "title": ""
 }, 
 "body": "# Overview\n\nIn this tutorial we will submit some data to an application on Dash Platform. Data is stored in the form of [documents](explanation-platform-protocol-document) which are encapsulated in a [state transition](explanation-platform-state-transition) before being submitted to DAPI. \n\n## Prerequisites\n- [node.js](https://nodejs.org/en/)\n- Basic familiarity with JavaScript asychronous functions using [async/await](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await)\n- The DashJS SDK is initialized (covered in [Connecting to EvoNet](tutorial-connecting-to-evonet))\n\n# Code\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"The following code demonstrates submitting a DPNS preorder document for informational purposes. This represent the first step in the process of registering a DPNS name. To actually register a name, the SDK provides an easier way that can be found in the [name registration tutorial](tutorial-register-a-name-for-an-identity).\",\n  \"title\": \"Example Information\"\n}\n[/block]\n\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"const DashJS = require('dash');\\n\\nconst sdkOpts = {\\n  network: 'testnet',\\n  mnemonic: 'a Dash wallet mnemonic with evonet funds goes here',\\n};\\nconst sdk = new DashJS.SDK(sdkOpts);\\n\\nconst submitPreorderDocument = async function () {\\n  const platform = sdk.platform;\\n  await sdk.isReady();\\n\\n  try {\\n    const identity = await platform.identities.get('an identity ID goes here');\\n\\n    docProperties = {\\n      saltedDomainHash: 'a previously calculated hash'\\n    }\\n\\n    // Create the preorder document\\n    const preorderDocument = await platform.documents.create(\\n      'dpns.preorder',\\n      identity,\\n      docProperties,\\n    );\\n\\n    // Sign and submit the document\\n    await platform.documents.broadcast(preorderDocument, identity);\\n    \\n    // Retrieve the submitted document\\n    const retrievedPreorder = await platform.documents.get(\\n      'dpns.preorder',\\n      {\\n        where: [['saltedDomainHash', '==', docProperties.saltedDomainHash]]\\n      }\\n    );\\n    console.dir({retrievedPreorder}, {depth:10});\\n  } catch (e) {\\n    console.error('Something went wrong:', e);\\n  } finally {\\n    sdk.disconnect();\\n  }\\n};\\n\\nsubmitPreorderDocument();\\n\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\n# What's happening\n\nAfter we initialize the SDK, we create a document that matches the structure defined by the data contract of the application being referenced (e.g. a `preorder` document for the DPNS application). The `platform.documents.create` method takes three arguments: a document locator, an identity, and the document data. The document locator consists of an application name (e.g. `dpns`) and the document type being created (e.g. `preorder`). The document data should contain values for each of the properties defined for it in the data contract (e.g. `saltedDomainHash` for the DPNS preorder).\n\nOnce the document has been created, we still need to submit it to [DAPI](explanation-dapi). The `platform.documents.broadcast` method takes a document and an identity parameter. Internally, it creates a [State Transition](explanation-platform-protocol-state-transition) containing the previously created document, signs the state transition, and submits the signed state transition to DAPI.", 
 "link_external": false, 
 "body_html": "<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-overview\"></div>Overview<a class=\"fa fa-anchor\" href=\"#section-overview\"></a></h1>\n<p>In this tutorial we will submit some data to an application on Dash Platform. Data is stored in the form of <a href=\"explanation-platform-protocol-document\">documents</a> which are encapsulated in a <a href=\"explanation-platform-state-transition\">state transition</a> before being submitted to DAPI. </p>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-prerequisites\"></div>Prerequisites<a class=\"fa fa-anchor\" href=\"#section-prerequisites\"></a></h2>\n<ul>\n<li ><a href=\"https://nodejs.org/en/\">node.js</a></li><li >Basic familiarity with JavaScript asychronous functions using <a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await\">async/await</a></li><li >The DashJS SDK is initialized (covered in <a href=\"tutorial-connecting-to-evonet\">Connecting to EvoNet</a>)</li></ul>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-code\"></div>Code<a class=\"fa fa-anchor\" href=\"#section-code\"></a></h1>\n\n</div>\n<div class=\"magic-block-callout type-info \">\n\t<h3><i title=\"Info\" class=\"fa fa-info-circle\"></i>Example Information\n\t</h3>\n\t<div class=\"callout-body\"><p>The following code demonstrates submitting a DPNS preorder document for informational purposes. This represent the first step in the process of registering a DPNS name. To actually register a name, the SDK provides an easier way that can be found in the <a href=\"tutorial-register-a-name-for-an-identity\">name registration tutorial</a>.</p>\n\n\t</div>\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">JavaScript</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(696)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-696\">const DashJS = require('dash');\n\nconst sdkOpts = {\n  network: 'testnet',\n  mnemonic: 'a Dash wallet mnemonic with evonet funds goes here',\n};\nconst sdk = new DashJS.SDK(sdkOpts);\n\nconst submitPreorderDocument = async function () {\n  const platform = sdk.platform;\n  await sdk.isReady();\n\n  try {\n    const identity = await platform.identities.get('an identity ID goes here');\n\n    docProperties = {\n      saltedDomainHash: 'a previously calculated hash'\n    }\n\n    // Create the preorder document\n    const preorderDocument = await platform.documents.create(\n      'dpns.preorder',\n      identity,\n      docProperties,\n    );\n\n    // Sign and submit the document\n    await platform.documents.broadcast(preorderDocument, identity);\n    \n    // Retrieve the submitted document\n    const retrievedPreorder = await platform.documents.get(\n      'dpns.preorder',\n      {\n        where: [['saltedDomainHash', '==', docProperties.saltedDomainHash]]\n      }\n    );\n    console.dir({retrievedPreorder}, {depth:10});\n  } catch (e) {\n    console.error('Something went wrong:', e);\n  } finally {\n    sdk.disconnect();\n  }\n};\n\nsubmitPreorderDocument();\n</textarea>\n\t\t\t<pre id=\"code-696\"><code><span class='cm-s-neo'><span class=\"cm-keyword\">const</span> <span class=\"cm-def\">DashJS</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">require</span>(<span class=\"cm-string\">'dash'</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">sdkOpts</span> <span class=\"cm-operator\">=</span> {\n  <span class=\"cm-property\">network</span>: <span class=\"cm-string\">'testnet'</span>,\n  <span class=\"cm-property\">mnemonic</span>: <span class=\"cm-string\">'a Dash wallet mnemonic with evonet funds goes here'</span>,\n};\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">sdk</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">new</span> <span class=\"cm-variable\">DashJS</span>.<span class=\"cm-property\">SDK</span>(<span class=\"cm-variable\">sdkOpts</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">submitPreorderDocument</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">async</span> <span class=\"cm-keyword\">function</span> () {\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">platform</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">sdk</span>.<span class=\"cm-property\">platform</span>;\n  <span class=\"cm-keyword\">await</span> <span class=\"cm-variable\">sdk</span>.<span class=\"cm-property\">isReady</span>();\n\n  <span class=\"cm-keyword\">try</span> {\n    <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">identity</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">identities</span>.<span class=\"cm-property\">get</span>(<span class=\"cm-string\">'an identity ID goes here'</span>);\n\n    <span class=\"cm-variable\">docProperties</span> <span class=\"cm-operator\">=</span> {\n      <span class=\"cm-property\">saltedDomainHash</span>: <span class=\"cm-string\">'a previously calculated hash'</span>\n    }\n\n    <span class=\"cm-comment\">&#47;&#47; Create the preorder document</span>\n    <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">preorderDocument</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">documents</span>.<span class=\"cm-property\">create</span>(\n      <span class=\"cm-string\">'dpns.preorder'</span>,\n      <span class=\"cm-variable-2\">identity</span>,\n      <span class=\"cm-variable\">docProperties</span>,\n    );\n\n    <span class=\"cm-comment\">&#47;&#47; Sign and submit the document</span>\n    <span class=\"cm-keyword\">await</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">documents</span>.<span class=\"cm-property\">broadcast</span>(<span class=\"cm-variable-2\">preorderDocument</span>, <span class=\"cm-variable-2\">identity</span>);\n    \n    <span class=\"cm-comment\">&#47;&#47; Retrieve the submitted document</span>\n    <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">retrievedPreorder</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">documents</span>.<span class=\"cm-property\">get</span>(\n      <span class=\"cm-string\">'dpns.preorder'</span>,\n      {\n        <span class=\"cm-property\">where</span>: [[<span class=\"cm-string\">'saltedDomainHash'</span>, <span class=\"cm-string\">'=='</span>, <span class=\"cm-variable\">docProperties</span>.<span class=\"cm-property\">saltedDomainHash</span>]]\n      }\n    );\n    <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">dir</span>({<span class=\"cm-property\">retrievedPreorder</span>}, {<span class=\"cm-property\">depth</span>:<span class=\"cm-number\">10</span>});\n  } <span class=\"cm-keyword\">catch</span> (<span class=\"cm-def\">e</span>) {\n    <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">error</span>(<span class=\"cm-string\">'Something went wrong:'</span>, <span class=\"cm-variable-2\">e</span>);\n  } <span class=\"cm-keyword\">finally</span> {\n    <span class=\"cm-variable\">sdk</span>.<span class=\"cm-property\">disconnect</span>();\n  }\n};\n\n<span class=\"cm-variable\">submitPreorderDocument</span>();\n</span></code></pre></span>\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-whats-happening\"></div>What&#39;s happening<a class=\"fa fa-anchor\" href=\"#section-whats-happening\"></a></h1>\n<p>After we initialize the SDK, we create a document that matches the structure defined by the data contract of the application being referenced (e.g. a <code>preorder</code> document for the DPNS application). The <code>platform.documents.create</code> method takes three arguments: a document locator, an identity, and the document data. The document locator consists of an application name (e.g. <code>dpns</code>) and the document type being created (e.g. <code>preorder</code>). The document data should contain values for each of the properties defined for it in the data contract (e.g. <code>saltedDomainHash</code> for the DPNS preorder).</p>\n<p>Once the document has been created, we still need to submit it to <a href=\"explanation-dapi\">DAPI</a>. The <code>platform.documents.broadcast</code> method takes a document and an identity parameter. Internally, it creates a <a href=\"explanation-platform-protocol-state-transition\">State Transition</a> containing the previously created document, signs the state transition, and submits the signed state transition to DAPI.</p>\n\n</div>", 
 "user": "5b8400d7185d5e00036dcc3b", 
 "isReference": false, 
 "slug": "tutorial-submit-documents", 
 "link_url": "", 
 "isApi": false, 
 "project": "5bda01cad172e200499a20a9", 
 "__v": 1, 
 "_id": "5dc17dd946fd680043714e6a", 
 "order": 6, 
 "updates": []
}