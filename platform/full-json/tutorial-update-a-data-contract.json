{
 "metadata": {
  "image": [],
  "title": "",
  "description": ""
 },
 "api": {
  "method": "get",
  "url": "",
  "auth": "required",
  "results": {
   "codes": [
    {
     "name": "",
     "code": "{}",
     "language": "json",
     "status": 200
    },
    {
     "name": "",
     "code": "{}",
     "language": "json",
     "status": 400
    }
   ]
  },
  "params": []
 },
 "next": {
  "description": "",
  "pages": []
 },
 "title": "Update a Data Contract",
 "icon": "",
 "updates": [],
 "type": "basic",
 "slug": "tutorial-update-a-data-contract",
 "excerpt": "Update an existing Dash Platform data contract to add new features",
 "body": "# Overview\n\nSince Dash Platform v0.22, it is possible to update existing data contracts in certain backwards-compatible ways. This includes:\n - Adding new documents\n - Adding new optional properties to existing documents\n - Adding _non-unique_ indices for properties added in the update.\n\nIn this tutorial we will update an existing data contract. \n\n## Prerequisites\n- [General prerequisites](tutorials-introduction#prerequisites) (Node.js / Dash SDK installed)\n- A wallet mnemonic with some funds in it: [Tutorial: Create and Fund a Wallet](tutorial-create-and-fund-a-wallet)\n- A Dash Platform Identity: [Tutorial: Register an Identity](tutorial-register-an-identity)\n- A Dash Platform Contract ID: [Tutorial: Register a Data Contract](tutorial-register-a-data-contract) \n\n# Code\n\nThe following example demonstrates updating an existing contract to add a new property to an existing document:\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"const Dash = require('dash');\\n\\nconst clientOpts = {\\n  network: 'testnet',\\n  wallet: {\\n    mnemonic: 'a Dash wallet mnemonic with funds goes here',\\n    unsafeOptions: {\\n      skipSynchronizationBeforeHeight: 650000, // only sync from early-2022\\n    },    \\n  },\\n};\\nconst client = new Dash.Client(clientOpts);\\n\\nconst updateContract = async () => {\\n  const { platform } = client;\\n  const identity = await platform.identities.get('an identity ID goes here');\\n\\n  const existingDataContract = await platform.contracts.get('a contract ID goes here');\\n  const documents = existingDataContract.getDocuments();\\n\\n  documents.note.properties.author = {\\n    type: 'string',\\n  };\\n\\n  existingDataContract.setDocuments(documents);\\n\\n  // Make sure contract passes validation checks\\n  await platform.dpp.initialize();\\n  const validationResult = await platform.dpp.dataContract.validate(\\n    existingDataContract,\\n  );\\n\\n  if (validationResult.isValid()) {\\n    console.log('Validation passed, broadcasting contract..');\\n    // Sign and submit the data contract\\n    return platform.contracts.update(existingDataContract, identity);\\n  }\\n  console.error(validationResult); // An array of detailed validation errors\\n  throw validationResult.errors[0];\\n};\\n\\nupdateContract()\\n  .then((d) => console.log('Contract updated:\\\\n', d.toJSON()))\\n  .catch((e) => console.error('Something went wrong:\\\\n', e))\\n  .finally(() => client.disconnect());\",\n      \"language\": \"javascript\",\n      \"name\": \"JavaScript\"\n    }\n  ]\n}\n[/block]\n> \ud83d\udcd8\n>\n> Please refer to the [data contract reference page](reference-data-contracts) for more comprehensive details related to contracts and documents.\n\n# What's Happening\n\nAfter we initialize the Client, we retrieve an existing contract owned by our identity. We then get the contract's documents and modify a document (adding an `author` property to the `note` document in the example).The `setDocuments` method takes one argument: the object containing the updated document types.\n\nOnce the data contract has been updated, we still need to submit it to DAPI. The `platform.contracts.update` method takes a data contract and an identity parameter. Internally, it creates a State Transition containing the updated contract, signs the state transition, and submits the signed state transition to DAPI. A response will only be returned if an error is encountered.\n\n> \ud83d\udcd8Wallet Operations\n>\n> The JavaScript SDK does not cache wallet information. It re-syncs the entire Core chain for some wallet operations (e.g. `client.getWalletAccount()`) which can result in wait times of  5+ minutes. \n>\n> A future release will add caching so that access is much faster after the initial sync. For now, the `skipSynchronizationBeforeHeight` option can be used to sync the wallet starting at a certain block height.",
 "order": 2,
 "isReference": false,
 "deprecated": false,
 "hidden": false,
 "sync_unique": "",
 "link_url": "",
 "link_external": false,
 "pendingAlgoliaPublish": false,
 "previousSlug": "",
 "slugUpdatedAt": "2022-01-26T20:20:02.779Z",
 "revision": 2,
 "_id": "62b226d1fcc32e002300c571",
 "createdAt": "2022-01-27T17:12:04.140Z",
 "updatedAt": "2022-10-12T16:48:20.213Z",
 "user": "5b8400d7185d5e00036dcc3b",
 "parentDoc": "62b226d1fcc32e002300c562",
 "category": "62b226d1fcc32e002300c509",
 "project": "5bda01cad172e200499a20a9",
 "version": "62b226d1fcc32e002300c574",
 "__v": 0,
 "isApi": false,
 "id": "62b226d1fcc32e002300c571",
 "body_html": "<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-overview\"></div>Overview<a class=\"fa fa-anchor\" href=\"#section-overview\"></a></h1>\n<p>Since Dash Platform v0.22, it is possible to update existing data contracts in certain backwards-compatible ways. This includes:</p>\n<ul>\n<li >Adding new documents</li><li >Adding new optional properties to existing documents</li><li >Adding <em>non-unique</em> indices for properties added in the update.</li></ul>\n<p>In this tutorial we will update an existing data contract. </p>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-prerequisites\"></div>Prerequisites<a class=\"fa fa-anchor\" href=\"#section-prerequisites\"></a></h2>\n<ul>\n<li ><a href=\"tutorials-introduction#prerequisites\">General prerequisites</a> (Node.js / Dash SDK installed)</li><li >A wallet mnemonic with some funds in it: <a href=\"tutorial-create-and-fund-a-wallet\">Tutorial: Create and Fund a Wallet</a></li><li >A Dash Platform Identity: <a href=\"tutorial-register-an-identity\">Tutorial: Register an Identity</a></li><li >A Dash Platform Contract ID: <a href=\"tutorial-register-a-data-contract\">Tutorial: Register a Data Contract</a> </li></ul>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-code\"></div>Code<a class=\"fa fa-anchor\" href=\"#section-code\"></a></h1>\n<p>The following example demonstrates updating an existing contract to add a new property to an existing document:</p>\n\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">JavaScript</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(430)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-430\">const Dash = require('dash');\n\nconst clientOpts = {\n  network: 'testnet',\n  wallet: {\n    mnemonic: 'a Dash wallet mnemonic with funds goes here',\n    unsafeOptions: {\n      skipSynchronizationBeforeHeight: 650000, // only sync from early-2022\n    },    \n  },\n};\nconst client = new Dash.Client(clientOpts);\n\nconst updateContract = async () =&gt; {\n  const { platform } = client;\n  const identity = await platform.identities.get('an identity ID goes here');\n\n  const existingDataContract = await platform.contracts.get('a contract ID goes here');\n  const documents = existingDataContract.getDocuments();\n\n  documents.note.properties.author = {\n    type: 'string',\n  };\n\n  existingDataContract.setDocuments(documents);\n\n  // Make sure contract passes validation checks\n  await platform.dpp.initialize();\n  const validationResult = await platform.dpp.dataContract.validate(\n    existingDataContract,\n  );\n\n  if (validationResult.isValid()) {\n    console.log('Validation passed, broadcasting contract..');\n    // Sign and submit the data contract\n    return platform.contracts.update(existingDataContract, identity);\n  }\n  console.error(validationResult); // An array of detailed validation errors\n  throw validationResult.errors[0];\n};\n\nupdateContract()\n  .then((d) =&gt; console.log('Contract updated:\\n', d.toJSON()))\n  .catch((e) =&gt; console.error('Something went wrong:\\n', e))\n  .finally(() =&gt; client.disconnect());</textarea>\n\t\t\t<pre id=\"code-430\"><code><span class='cm-s-neo'><span class=\"cm-keyword\">const</span> <span class=\"cm-def\">Dash</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">require</span>(<span class=\"cm-string\">'dash'</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">clientOpts</span> <span class=\"cm-operator\">=</span> {\n  <span class=\"cm-property\">network</span>: <span class=\"cm-string\">'testnet'</span>,\n  <span class=\"cm-property\">wallet</span>: {\n    <span class=\"cm-property\">mnemonic</span>: <span class=\"cm-string\">'a Dash wallet mnemonic with funds goes here'</span>,\n    <span class=\"cm-property\">unsafeOptions</span>: {\n      <span class=\"cm-property\">skipSynchronizationBeforeHeight</span>: <span class=\"cm-number\">650000</span>, <span class=\"cm-comment\">&#47;&#47; only sync from early-2022</span>\n    },    \n  },\n};\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">client</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">new</span> <span class=\"cm-variable\">Dash</span>.<span class=\"cm-property\">Client</span>(<span class=\"cm-variable\">clientOpts</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">updateContract</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">async</span> () <span class=\"cm-operator\">=&gt;</span> {\n  <span class=\"cm-keyword\">const</span> { <span class=\"cm-def\">platform</span> } <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">client</span>;\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">identity</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">identities</span>.<span class=\"cm-property\">get</span>(<span class=\"cm-string\">'an identity ID goes here'</span>);\n\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">existingDataContract</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">contracts</span>.<span class=\"cm-property\">get</span>(<span class=\"cm-string\">'a contract ID goes here'</span>);\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">documents</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable-2\">existingDataContract</span>.<span class=\"cm-property\">getDocuments</span>();\n\n  <span class=\"cm-variable-2\">documents</span>.<span class=\"cm-property\">note</span>.<span class=\"cm-property\">properties</span>.<span class=\"cm-property\">author</span> <span class=\"cm-operator\">=</span> {\n    <span class=\"cm-property\">type</span>: <span class=\"cm-string\">'string'</span>,\n  };\n\n  <span class=\"cm-variable-2\">existingDataContract</span>.<span class=\"cm-property\">setDocuments</span>(<span class=\"cm-variable-2\">documents</span>);\n\n  <span class=\"cm-comment\">&#47;&#47; Make sure contract passes validation checks</span>\n  <span class=\"cm-keyword\">await</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">dpp</span>.<span class=\"cm-property\">initialize</span>();\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">validationResult</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">dpp</span>.<span class=\"cm-property\">dataContract</span>.<span class=\"cm-property\">validate</span>(\n    <span class=\"cm-variable-2\">existingDataContract</span>,\n  );\n\n  <span class=\"cm-keyword\">if</span> (<span class=\"cm-variable-2\">validationResult</span>.<span class=\"cm-property\">isValid</span>()) {\n    <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-string\">'Validation passed, broadcasting contract..'</span>);\n    <span class=\"cm-comment\">&#47;&#47; Sign and submit the data contract</span>\n    <span class=\"cm-keyword\">return</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">contracts</span>.<span class=\"cm-property\">update</span>(<span class=\"cm-variable-2\">existingDataContract</span>, <span class=\"cm-variable-2\">identity</span>);\n  }\n  <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">error</span>(<span class=\"cm-variable-2\">validationResult</span>); <span class=\"cm-comment\">&#47;&#47; An array of detailed validation errors</span>\n  <span class=\"cm-keyword\">throw</span> <span class=\"cm-variable-2\">validationResult</span>.<span class=\"cm-property\">errors</span>[<span class=\"cm-number\">0</span>];\n};\n\n<span class=\"cm-variable\">updateContract</span>()\n  .<span class=\"cm-property\">then</span>((<span class=\"cm-def\">d</span>) <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-string\">'Contract updated:\\n'</span>, <span class=\"cm-variable-2\">d</span>.<span class=\"cm-property\">toJSON</span>()))\n  .<span class=\"cm-property\">catch</span>((<span class=\"cm-def\">e</span>) <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">error</span>(<span class=\"cm-string\">'Something went wrong:\\n'</span>, <span class=\"cm-variable-2\">e</span>))\n  .<span class=\"cm-property\">finally</span>(() <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">disconnect</span>());</span></code></pre></span>\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><blockquote>\n<p>\ud83d\udcd8</p>\n<p>Please refer to the <a href=\"reference-data-contracts\">data contract reference page</a> for more comprehensive details related to contracts and documents.</p>\n</blockquote>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-whats-happening\"></div>What&#39;s Happening<a class=\"fa fa-anchor\" href=\"#section-whats-happening\"></a></h1>\n<p>After we initialize the Client, we retrieve an existing contract owned by our identity. We then get the contract&#39;s documents and modify a document (adding an <code>author</code> property to the <code>note</code> document in the example).The <code>setDocuments</code> method takes one argument: the object containing the updated document types.</p>\n<p>Once the data contract has been updated, we still need to submit it to DAPI. The <code>platform.contracts.update</code> method takes a data contract and an identity parameter. Internally, it creates a State Transition containing the updated contract, signs the state transition, and submits the signed state transition to DAPI. A response will only be returned if an error is encountered.</p>\n<blockquote>\n<p>\ud83d\udcd8Wallet Operations</p>\n<p>The JavaScript SDK does not cache wallet information. It re-syncs the entire Core chain for some wallet operations (e.g. <code>client.getWalletAccount()</code>) which can result in wait times of  5+ minutes. </p>\n<p>A future release will add caching so that access is much faster after the initial sync. For now, the <code>skipSynchronizationBeforeHeight</code> option can be used to sync the wallet starting at a certain block height.</p>\n</blockquote>\n\n</div>"
}