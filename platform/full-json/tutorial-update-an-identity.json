{
 "metadata": {
  "image": [],
  "title": "",
  "description": ""
 },
 "api": {
  "method": "get",
  "url": "",
  "auth": "required",
  "results": {
   "codes": [
    {
     "name": "",
     "code": "{}",
     "language": "json",
     "status": 200
    },
    {
     "name": "",
     "code": "{}",
     "language": "json",
     "status": 400
    }
   ]
  },
  "params": []
 },
 "next": {
  "description": "",
  "pages": []
 },
 "title": "Update an Identity",
 "icon": "",
 "updates": [],
 "type": "basic",
 "slug": "tutorial-update-an-identity",
 "excerpt": "Update the keys of an existing Identity",
 "body": "# Overview\n\nSince Dash Platform v0.23, it is possible to update identities to add new keys or disable existing ones. \n\n> \ud83d\udcd8\n>\n> Platform retains disabled keys so that any existing data they signed can still be verified while preventing them from signing new data.\n\n# Prerequisites\n\n- [General prerequisites](tutorials-introduction#prerequisites) (Node.js / Dash SDK installed)\n- A wallet mnemonic with some funds in it: [Tutorial: Create and Fund a Wallet](tutorial-create-and-fund-a-wallet)\n- A Dash Platform Identity: [Tutorial: Register an Identity](tutorial-register-an-identity)\n\n# Code\n\nThe two examples below demonstrate updating an existing identity to add a new key and disabling an existing key:\n\n> \ud83d\udea7\n>\n> The current SDK version signs all state transitions with public key id `1`. If it is disabled, the SDK will be unable to use the identity. Future SDK versions will provide a way to also sign using keys added in an identity update.\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"const Dash = require('dash');\\n\\nconst clientOpts = {\\n  network: 'testnet',\\n  wallet: {\\n    mnemonic: 'a Dash wallet mnemonic with funds goes here',\\n    unsafeOptions: {\\n      skipSynchronizationBeforeHeight: 650000, // only sync from early-2022\\n    },    \\n  },\\n};\\nconst client = new Dash.Client(clientOpts);\\n\\nconst updateIdentityDisableKey = async () => {\\n  const identityId = 'an identity ID goes here';\\n  const keyId = 'a public key ID goes here'; // One of the identity's public key IDs\\n\\n  // Retrieve the identity to be updated and the public key to disable\\n  const existingIdentity = await client.platform.identities.get(identityId);\\n  const publicKeyToDisable = existingIdentity.getPublicKeyById(keyId);\\n\\n  const updateDisable = {\\n    disable: [publicKeyToDisable],\\n  };\\n\\n  await client.platform.identities.update(existingIdentity, updateDisable);\\n  return client.platform.identities.get(identityId);\\n}\\n\\nupdateIdentityDisableKey()\\n  .then((d) => console.log('Identity updated:\\\\n', d.toJSON()))\\n  .catch((e) => console.error('Something went wrong:\\\\n', e))\\n  .finally(() => client.disconnect());\\n\",\n      \"language\": \"javascript\",\n      \"name\": \"Disable identity key\"\n    },\n    {\n      \"code\": \"const Dash = require('dash');\\nconst IdentityPublicKey = require('@dashevo/dpp/lib/identity/IdentityPublicKey');\\n\\nconst clientOpts = {\\n  network: 'testnet',\\n  wallet: {\\n    mnemonic: 'a Dash wallet mnemonic with funds goes here',\\n    unsafeOptions: {\\n      skipSynchronizationBeforeHeight: 650000, // only sync from early-2022\\n    },    \\n  },\\n};\\nconst client = new Dash.Client(clientOpts);\\n\\nconst updateIdentityAddKey = async () => {\\n  const identityId = 'an identity ID goes here';\\n  const existingIdentity = await client.platform.identities.get(identityId);\\n  const newKeyId = existingIdentity.toJSON().publicKeys.length;\\n\\n  // Get an unused identity index\\n  const account = await client.platform.client.getWalletAccount();\\n  const identityIndex = await account.getUnusedIdentityIndex();\\n\\n  // Get unused private key and construct new identity public key\\n  const { privateKey: identityPrivateKey } =\\n    account.identities.getIdentityHDKeyByIndex(identityIndex, 0);\\n\\n  const identityPublicKey = identityPrivateKey.toPublicKey().toBuffer();\\n\\n  const newPublicKey = new IdentityPublicKey({\\n    id: newKeyId,\\n    type: IdentityPublicKey.TYPES.ECDSA_SECP256K1,\\n    purpose: IdentityPublicKey.PURPOSES.AUTHENTICATION,\\n    securityLevel: IdentityPublicKey.SECURITY_LEVELS.HIGH,\\n    data: identityPublicKey,\\n    readOnly: false,\\n  });\\n\\n  const updateAdd = {\\n    add: [newPublicKey],\\n  };\\n\\n  // Submit the update signed with the new key\\n  await client.platform.identities.update(existingIdentity, updateAdd, {\\n    [newPublicKey.getId()]: identityPrivateKey,\\n  });\\n\\n  return client.platform.identities.get(identityId);};\\n};\\n\\nupdateIdentityAddKey()\\n  .then((d) => console.log('Identity updated:\\\\n', d.toJSON()))\\n  .catch((e) => console.error('Something went wrong:\\\\n', e))\\n  .finally(() => client.disconnect());\\n\",\n      \"language\": \"javascript\",\n      \"name\": \"Add identity key\"\n    }\n  ]\n}\n[/block]\n# What's Happening\n\n## Disabling keys\n\nAfter we initialize the Client, we retrieve our existing identity and provide the `id` of one (or more) of the identity keys to disable. The update is submitted to DAPI using the `platform.identities.update` method with two arguments:\n 1. An identity\n 1. An object containing the key(s) to be disabled\n\nInternally, the method creates a State Transition containing the updated identity, signs the state transition, and submits the signed state transition to DAPI. After the identity is updated, we output it to the console.\n\n## Adding keys\n\nAfter we initialize the Client, we retrieve our existing identity and set an `id` for the key to be added. Next, we get an unused private key from our wallet and use it to derive a public key to add to our identity. The update is submitted to DAPI using the `platform.identities.update` method with three arguments:\n 1. An identity\n 1. An object containing the key(s) to be added\n 1. An object containing the id and private key for each public key being added\n\n> \ud83d\udcd8\n>\n> When adding new public keys, they must be signed using the associated private key to prove ownership of the keys.\n\nInternally, the method creates a State Transition containing the updated identity, signs the state transition, and submits the signed state transition to DAPI. After the identity is updated, we output it to the console.",
 "order": 3,
 "isReference": false,
 "deprecated": false,
 "hidden": false,
 "sync_unique": "",
 "link_url": "",
 "link_external": false,
 "pendingAlgoliaPublish": false,
 "previousSlug": "",
 "slugUpdatedAt": "2022-08-10T19:44:06.646Z",
 "revision": 3,
 "_id": "62f504bdb261b800ab7449b3",
 "createdAt": "2022-08-11T13:31:41.348Z",
 "updatedAt": "2022-10-12T16:10:28.399Z",
 "user": "5b8400d7185d5e00036dcc3b",
 "parentDoc": "62b226d1fcc32e002300c563",
 "category": "62b226d1fcc32e002300c509",
 "project": "5bda01cad172e200499a20a9",
 "version": "62b226d1fcc32e002300c574",
 "__v": 0,
 "isApi": false,
 "id": "62f504bdb261b800ab7449b3",
 "body_html": "<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-overview\"></div>Overview<a class=\"fa fa-anchor\" href=\"#section-overview\"></a></h1>\n<p>Since Dash Platform v0.23, it is possible to update identities to add new keys or disable existing ones. </p>\n<blockquote>\n<p>\ud83d\udcd8</p>\n<p>Platform retains disabled keys so that any existing data they signed can still be verified while preventing them from signing new data.</p>\n</blockquote>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-prerequisites\"></div>Prerequisites<a class=\"fa fa-anchor\" href=\"#section-prerequisites\"></a></h1>\n<ul>\n<li ><a href=\"tutorials-introduction#prerequisites\">General prerequisites</a> (Node.js / Dash SDK installed)</li><li >A wallet mnemonic with some funds in it: <a href=\"tutorial-create-and-fund-a-wallet\">Tutorial: Create and Fund a Wallet</a></li><li >A Dash Platform Identity: <a href=\"tutorial-register-an-identity\">Tutorial: Register an Identity</a></li></ul>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-code\"></div>Code<a class=\"fa fa-anchor\" href=\"#section-code\"></a></h1>\n<p>The two examples below demonstrate updating an existing identity to add a new key and disabling an existing key:</p>\n<blockquote>\n<p>\ud83d\udea7</p>\n<p>The current SDK version signs all state transitions with public key id <code>1</code>. If it is disabled, the SDK will be unable to use the identity. Future SDK versions will provide a way to also sign using keys added in an identity update.</p>\n</blockquote>\n\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">Disable identity key</a></li>\n\t\t<li><a href=\"\" ng-click=\"showCode(1)\" ng-class=\"{active: (1 == tab)}\">Add identity key</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(775)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-775\">const Dash = require('dash');\n\nconst clientOpts = {\n  network: 'testnet',\n  wallet: {\n    mnemonic: 'a Dash wallet mnemonic with funds goes here',\n    unsafeOptions: {\n      skipSynchronizationBeforeHeight: 650000, // only sync from early-2022\n    },    \n  },\n};\nconst client = new Dash.Client(clientOpts);\n\nconst updateIdentityDisableKey = async () =&gt; {\n  const identityId = 'an identity ID goes here';\n  const keyId = 'a public key ID goes here'; // One of the identity's public key IDs\n\n  // Retrieve the identity to be updated and the public key to disable\n  const existingIdentity = await client.platform.identities.get(identityId);\n  const publicKeyToDisable = existingIdentity.getPublicKeyById(keyId);\n\n  const updateDisable = {\n    disable: [publicKeyToDisable],\n  };\n\n  await client.platform.identities.update(existingIdentity, updateDisable);\n  return client.platform.identities.get(identityId);\n}\n\nupdateIdentityDisableKey()\n  .then((d) =&gt; console.log('Identity updated:\\n', d.toJSON()))\n  .catch((e) =&gt; console.error('Something went wrong:\\n', e))\n  .finally(() =&gt; client.disconnect());\n</textarea>\n\t\t\t<pre id=\"code-775\"><code><span class='cm-s-neo'><span class=\"cm-keyword\">const</span> <span class=\"cm-def\">Dash</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">require</span>(<span class=\"cm-string\">'dash'</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">clientOpts</span> <span class=\"cm-operator\">=</span> {\n  <span class=\"cm-property\">network</span>: <span class=\"cm-string\">'testnet'</span>,\n  <span class=\"cm-property\">wallet</span>: {\n    <span class=\"cm-property\">mnemonic</span>: <span class=\"cm-string\">'a Dash wallet mnemonic with funds goes here'</span>,\n    <span class=\"cm-property\">unsafeOptions</span>: {\n      <span class=\"cm-property\">skipSynchronizationBeforeHeight</span>: <span class=\"cm-number\">650000</span>, <span class=\"cm-comment\">&#47;&#47; only sync from early-2022</span>\n    },    \n  },\n};\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">client</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">new</span> <span class=\"cm-variable\">Dash</span>.<span class=\"cm-property\">Client</span>(<span class=\"cm-variable\">clientOpts</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">updateIdentityDisableKey</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">async</span> () <span class=\"cm-operator\">=&gt;</span> {\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">identityId</span> <span class=\"cm-operator\">=</span> <span class=\"cm-string\">'an identity ID goes here'</span>;\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">keyId</span> <span class=\"cm-operator\">=</span> <span class=\"cm-string\">'a public key ID goes here'</span>; <span class=\"cm-comment\">&#47;&#47; One of the identity's public key IDs</span>\n\n  <span class=\"cm-comment\">&#47;&#47; Retrieve the identity to be updated and the public key to disable</span>\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">existingIdentity</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">platform</span>.<span class=\"cm-property\">identities</span>.<span class=\"cm-property\">get</span>(<span class=\"cm-variable-2\">identityId</span>);\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">publicKeyToDisable</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable-2\">existingIdentity</span>.<span class=\"cm-property\">getPublicKeyById</span>(<span class=\"cm-variable-2\">keyId</span>);\n\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">updateDisable</span> <span class=\"cm-operator\">=</span> {\n    <span class=\"cm-property\">disable</span>: [<span class=\"cm-variable-2\">publicKeyToDisable</span>],\n  };\n\n  <span class=\"cm-keyword\">await</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">platform</span>.<span class=\"cm-property\">identities</span>.<span class=\"cm-property\">update</span>(<span class=\"cm-variable-2\">existingIdentity</span>, <span class=\"cm-variable-2\">updateDisable</span>);\n  <span class=\"cm-keyword\">return</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">platform</span>.<span class=\"cm-property\">identities</span>.<span class=\"cm-property\">get</span>(<span class=\"cm-variable-2\">identityId</span>);\n}\n\n<span class=\"cm-variable\">updateIdentityDisableKey</span>()\n  .<span class=\"cm-property\">then</span>((<span class=\"cm-def\">d</span>) <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-string\">'Identity updated:\\n'</span>, <span class=\"cm-variable-2\">d</span>.<span class=\"cm-property\">toJSON</span>()))\n  .<span class=\"cm-property\">catch</span>((<span class=\"cm-def\">e</span>) <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">error</span>(<span class=\"cm-string\">'Something went wrong:\\n'</span>, <span class=\"cm-variable-2\">e</span>))\n  .<span class=\"cm-property\">finally</span>(() <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">disconnect</span>());\n</span></code></pre></span><span ng-if=\"tab == 1\">\n\t\t\t<button ng-click=\"copyCode(32)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-32\">const Dash = require('dash');\nconst IdentityPublicKey = require('@dashevo/dpp/lib/identity/IdentityPublicKey');\n\nconst clientOpts = {\n  network: 'testnet',\n  wallet: {\n    mnemonic: 'a Dash wallet mnemonic with funds goes here',\n    unsafeOptions: {\n      skipSynchronizationBeforeHeight: 650000, // only sync from early-2022\n    },    \n  },\n};\nconst client = new Dash.Client(clientOpts);\n\nconst updateIdentityAddKey = async () =&gt; {\n  const identityId = 'an identity ID goes here';\n  const existingIdentity = await client.platform.identities.get(identityId);\n  const newKeyId = existingIdentity.toJSON().publicKeys.length;\n\n  // Get an unused identity index\n  const account = await client.platform.client.getWalletAccount();\n  const identityIndex = await account.getUnusedIdentityIndex();\n\n  // Get unused private key and construct new identity public key\n  const { privateKey: identityPrivateKey } =\n    account.identities.getIdentityHDKeyByIndex(identityIndex, 0);\n\n  const identityPublicKey = identityPrivateKey.toPublicKey().toBuffer();\n\n  const newPublicKey = new IdentityPublicKey({\n    id: newKeyId,\n    type: IdentityPublicKey.TYPES.ECDSA_SECP256K1,\n    purpose: IdentityPublicKey.PURPOSES.AUTHENTICATION,\n    securityLevel: IdentityPublicKey.SECURITY_LEVELS.HIGH,\n    data: identityPublicKey,\n    readOnly: false,\n  });\n\n  const updateAdd = {\n    add: [newPublicKey],\n  };\n\n  // Submit the update signed with the new key\n  await client.platform.identities.update(existingIdentity, updateAdd, {\n    [newPublicKey.getId()]: identityPrivateKey,\n  });\n\n  return client.platform.identities.get(identityId);};\n};\n\nupdateIdentityAddKey()\n  .then((d) =&gt; console.log('Identity updated:\\n', d.toJSON()))\n  .catch((e) =&gt; console.error('Something went wrong:\\n', e))\n  .finally(() =&gt; client.disconnect());\n</textarea>\n\t\t\t<pre id=\"code-32\"><code><span class='cm-s-neo'><span class=\"cm-keyword\">const</span> <span class=\"cm-def\">Dash</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">require</span>(<span class=\"cm-string\">'dash'</span>);\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">IdentityPublicKey</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">require</span>(<span class=\"cm-string\">'@dashevo&#47;dpp&#47;lib&#47;identity&#47;IdentityPublicKey'</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">clientOpts</span> <span class=\"cm-operator\">=</span> {\n  <span class=\"cm-property\">network</span>: <span class=\"cm-string\">'testnet'</span>,\n  <span class=\"cm-property\">wallet</span>: {\n    <span class=\"cm-property\">mnemonic</span>: <span class=\"cm-string\">'a Dash wallet mnemonic with funds goes here'</span>,\n    <span class=\"cm-property\">unsafeOptions</span>: {\n      <span class=\"cm-property\">skipSynchronizationBeforeHeight</span>: <span class=\"cm-number\">650000</span>, <span class=\"cm-comment\">&#47;&#47; only sync from early-2022</span>\n    },    \n  },\n};\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">client</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">new</span> <span class=\"cm-variable\">Dash</span>.<span class=\"cm-property\">Client</span>(<span class=\"cm-variable\">clientOpts</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">updateIdentityAddKey</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">async</span> () <span class=\"cm-operator\">=&gt;</span> {\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">identityId</span> <span class=\"cm-operator\">=</span> <span class=\"cm-string\">'an identity ID goes here'</span>;\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">existingIdentity</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">platform</span>.<span class=\"cm-property\">identities</span>.<span class=\"cm-property\">get</span>(<span class=\"cm-variable-2\">identityId</span>);\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">newKeyId</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable-2\">existingIdentity</span>.<span class=\"cm-property\">toJSON</span>().<span class=\"cm-property\">publicKeys</span>.<span class=\"cm-property\">length</span>;\n\n  <span class=\"cm-comment\">&#47;&#47; Get an unused identity index</span>\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">account</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">platform</span>.<span class=\"cm-property\">client</span>.<span class=\"cm-property\">getWalletAccount</span>();\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">identityIndex</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable-2\">account</span>.<span class=\"cm-property\">getUnusedIdentityIndex</span>();\n\n  <span class=\"cm-comment\">&#47;&#47; Get unused private key and construct new identity public key</span>\n  <span class=\"cm-keyword\">const</span> { <span class=\"cm-property\">privateKey</span>: <span class=\"cm-def\">identityPrivateKey</span> } <span class=\"cm-operator\">=</span>\n    <span class=\"cm-variable-2\">account</span>.<span class=\"cm-property\">identities</span>.<span class=\"cm-property\">getIdentityHDKeyByIndex</span>(<span class=\"cm-variable-2\">identityIndex</span>, <span class=\"cm-number\">0</span>);\n\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">identityPublicKey</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable-2\">identityPrivateKey</span>.<span class=\"cm-property\">toPublicKey</span>().<span class=\"cm-property\">toBuffer</span>();\n\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">newPublicKey</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">new</span> <span class=\"cm-variable\">IdentityPublicKey</span>({\n    <span class=\"cm-property\">id</span>: <span class=\"cm-variable-2\">newKeyId</span>,\n    <span class=\"cm-property\">type</span>: <span class=\"cm-variable\">IdentityPublicKey</span>.<span class=\"cm-property\">TYPES</span>.<span class=\"cm-property\">ECDSA_SECP256K1</span>,\n    <span class=\"cm-property\">purpose</span>: <span class=\"cm-variable\">IdentityPublicKey</span>.<span class=\"cm-property\">PURPOSES</span>.<span class=\"cm-property\">AUTHENTICATION</span>,\n    <span class=\"cm-property\">securityLevel</span>: <span class=\"cm-variable\">IdentityPublicKey</span>.<span class=\"cm-property\">SECURITY_LEVELS</span>.<span class=\"cm-property\">HIGH</span>,\n    <span class=\"cm-property\">data</span>: <span class=\"cm-variable-2\">identityPublicKey</span>,\n    <span class=\"cm-property\">readOnly</span>: <span class=\"cm-atom\">false</span>,\n  });\n\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">updateAdd</span> <span class=\"cm-operator\">=</span> {\n    <span class=\"cm-property\">add</span>: [<span class=\"cm-variable-2\">newPublicKey</span>],\n  };\n\n  <span class=\"cm-comment\">&#47;&#47; Submit the update signed with the new key</span>\n  <span class=\"cm-keyword\">await</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">platform</span>.<span class=\"cm-property\">identities</span>.<span class=\"cm-property\">update</span>(<span class=\"cm-variable-2\">existingIdentity</span>, <span class=\"cm-variable-2\">updateAdd</span>, {\n    [<span class=\"cm-variable-2\">newPublicKey</span>.<span class=\"cm-property\">getId</span>()]: <span class=\"cm-variable-2\">identityPrivateKey</span>,\n  });\n\n  <span class=\"cm-keyword\">return</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">platform</span>.<span class=\"cm-property\">identities</span>.<span class=\"cm-property\">get</span>(<span class=\"cm-variable-2\">identityId</span>);};\n};\n\n<span class=\"cm-variable\">updateIdentityAddKey</span>()\n  .<span class=\"cm-property\">then</span>((<span class=\"cm-def\">d</span>) <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-string\">'Identity updated:\\n'</span>, <span class=\"cm-variable-2\">d</span>.<span class=\"cm-property\">toJSON</span>()))\n  .<span class=\"cm-property\">catch</span>((<span class=\"cm-def\">e</span>) <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">error</span>(<span class=\"cm-string\">'Something went wrong:\\n'</span>, <span class=\"cm-variable-2\">e</span>))\n  .<span class=\"cm-property\">finally</span>(() <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">disconnect</span>());\n</span></code></pre></span>\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-whats-happening\"></div>What&#39;s Happening<a class=\"fa fa-anchor\" href=\"#section-whats-happening\"></a></h1>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-disabling-keys\"></div>Disabling keys<a class=\"fa fa-anchor\" href=\"#section-disabling-keys\"></a></h2>\n<p>After we initialize the Client, we retrieve our existing identity and provide the <code>id</code> of one (or more) of the identity keys to disable. The update is submitted to DAPI using the <code>platform.identities.update</code> method with two arguments:</p>\n<ol>\n<li  value=\"1\">An identity</li><li  value=\"1\">An object containing the key(s) to be disabled</li></ol>\n<p>Internally, the method creates a State Transition containing the updated identity, signs the state transition, and submits the signed state transition to DAPI. After the identity is updated, we output it to the console.</p>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-adding-keys\"></div>Adding keys<a class=\"fa fa-anchor\" href=\"#section-adding-keys\"></a></h2>\n<p>After we initialize the Client, we retrieve our existing identity and set an <code>id</code> for the key to be added. Next, we get an unused private key from our wallet and use it to derive a public key to add to our identity. The update is submitted to DAPI using the <code>platform.identities.update</code> method with three arguments:</p>\n<ol>\n<li  value=\"1\">An identity</li><li  value=\"1\">An object containing the key(s) to be added</li><li  value=\"1\">An object containing the id and private key for each public key being added</li></ol>\n<blockquote>\n<p>\ud83d\udcd8</p>\n<p>When adding new public keys, they must be signed using the associated private key to prove ownership of the keys.</p>\n</blockquote>\n<p>Internally, the method creates a State Transition containing the updated identity, signs the state transition, and submits the signed state transition to DAPI. After the identity is updated, we output it to the console.</p>\n\n</div>"
}