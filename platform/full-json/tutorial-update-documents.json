{
 "metadata": {
  "image": [],
  "title": "",
  "description": ""
 },
 "api": {
  "method": "get",
  "url": "",
  "auth": "required",
  "results": {
   "codes": [
    {
     "status": 200,
     "language": "json",
     "code": "{}",
     "name": ""
    },
    {
     "status": 400,
     "language": "json",
     "code": "{}",
     "name": ""
    }
   ]
  },
  "params": []
 },
 "next": {
  "description": "",
  "pages": [
   {
    "type": "doc",
    "icon": "file-text-o",
    "name": "Delete Documents",
    "slug": "tutorial-delete-documents",
    "category": "Tutorials"
   }
  ]
 },
 "title": "Update Documents",
 "icon": "",
 "updates": [],
 "type": "basic",
 "slug": "tutorial-update-documents",
 "excerpt": "Update data stored on Dash Platform",
 "body": "# Overview\n\nIn this tutorial we will update existing data on Dash Platform. Data is stored in the form of [documents](explanation-platform-protocol-document) which are encapsulated in a [state transition](explanation-platform-protocol-state-transition) before being submitted to DAPI. \n\n## Prerequisites\n- [General prerequisites](tutorials-introduction#prerequisites) (Node.js / Dash SDK installed)\n- A wallet mnemonic with some funds in it: [Tutorial: Create and Fund a Wallet](tutorial-create-and-fund-a-wallet)\n- Access to a previously created document (e.g., one created using the [Submit Documents tutorial](tutorial-submit-documents))\n\n# Code\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"const Dash = require('dash');\\n\\nconst clientOpts = {\\n  network: 'testnet',\\n  wallet: {\\n    mnemonic: 'a Dash wallet mnemonic with funds goes here',\\n    unsafeOptions: {\\n      skipSynchronizationBeforeHeight: 650000, // only sync from early-2022\\n    },\\n  },\\n  apps: {\\n    tutorialContract: {\\n      contractId: '3iaEhdyAVbmSjd59CT6SCrqPjfAfMdPTc8ksydgqSaWE',\\n    },\\n  },\\n};\\nconst client = new Dash.Client(clientOpts);\\n\\nconst updateNoteDocument = async () => {\\n  const { platform } = client;\\n  const identity = await platform.identities.get('an identity ID goes here');\\n  const documentId = 'an existing document ID goes here';\\n\\n  // Retrieve the existing document\\n  const [document] = await client.platform.documents.get(\\n    'tutorialContract.note',\\n    { where: [['$id', '==', documentId]] },\\n  );\\n\\n  // Update document\\n  document.set('message', `Updated document @ ${new Date().toUTCString()}`);\\n\\n  // Sign and submit the document replace transition\\n  return platform.documents.broadcast({ replace: [document] }, identity);\\n};\\n\\nupdateNoteDocument()\\n  .then((d) => console.log('Document updated:\\\\n', d))\\n  .catch((e) => console.error('Something went wrong:\\\\n', e))\\n  .finally(() => client.disconnect());\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\n> \ud83d\udc4d Initializing the Client with a contract identity\n>\n> The example above shows how access to contract documents via `<contract name>.<contract document>` syntax (e.g. `tutorialContract.note`) can be enabled by passing a contract identity to the constructor. Please refer to the [Dash SDK documentation](https://github.com/dashevo/platform/blob/master/packages/js-dash-sdk/docs/getting-started/multiple-apps.md) for details.\n\n# What's happening\n\nAfter we initialize the Client, we retrieve the document to be updated via `platform.documents.get` using its `id`. Once the document has been retrieved, we must submit it to [DAPI](explanation-dapi) with the desired data updates. Documents are submitted in batches that may contain multiple documents to be created, replaced, or deleted. In this example, a single document is being updated.\n\nThe `platform.documents.broadcast` method then takes the document batch (e.g. `{replace: [noteDocument]}`) and an identity parameter. Internally, it creates a [State Transition](explanation-platform-protocol-state-transition) containing the previously created document, signs the state transition, and submits the signed state transition to DAPI.\n\n> \ud83d\udcd8Wallet Operations\n>\n> The JavaScript SDK does not cache wallet information. It re-syncs the entire Core chain for some wallet operations (e.g. `client.getWalletAccount()`) which can result in wait times of  5+ minutes. \n>\n> A future release will add caching so that access is much faster after the initial sync. For now, the `skipSynchronizationBeforeHeight` option can be used to sync the wallet starting at a certain block height.",
 "order": 5,
 "isReference": false,
 "deprecated": false,
 "hidden": false,
 "sync_unique": "",
 "link_url": "",
 "link_external": false,
 "pendingAlgoliaPublish": false,
 "previousSlug": "",
 "slugUpdatedAt": "2020-10-19T18:59:04.281Z",
 "revision": 2,
 "_id": "62b226d1fcc32e002300c55c",
 "createdAt": "2020-10-20T16:12:51.461Z",
 "updatedAt": "2022-10-12T16:48:51.346Z",
 "user": "5b8400d7185d5e00036dcc3b",
 "category": "62b226d1fcc32e002300c509",
 "project": "5bda01cad172e200499a20a9",
 "version": "62b226d1fcc32e002300c574",
 "__v": 1,
 "parentDoc": "62b226d1fcc32e002300c562",
 "isApi": false,
 "id": "62b226d1fcc32e002300c55c",
 "body_html": "<div class=\"magic-block-textarea\"><h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-overview\"></div>Overview<a class=\"fa fa-anchor\" href=\"#section-overview\"></a></h1>\n<p>In this tutorial we will update existing data on Dash Platform. Data is stored in the form of <a href=\"explanation-platform-protocol-document\">documents</a> which are encapsulated in a <a href=\"explanation-platform-protocol-state-transition\">state transition</a> before being submitted to DAPI. </p>\n<h2 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-prerequisites\"></div>Prerequisites<a class=\"fa fa-anchor\" href=\"#section-prerequisites\"></a></h2>\n<ul>\n<li ><a href=\"tutorials-introduction#prerequisites\">General prerequisites</a> (Node.js / Dash SDK installed)</li><li >A wallet mnemonic with some funds in it: <a href=\"tutorial-create-and-fund-a-wallet\">Tutorial: Create and Fund a Wallet</a></li><li >Access to a previously created document (e.g., one created using the <a href=\"tutorial-submit-documents\">Submit Documents tutorial</a>)</li></ul>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-code\"></div>Code<a class=\"fa fa-anchor\" href=\"#section-code\"></a></h1>\n\n</div>\n<div class=\"magic-block-code\">\n\t<ul class=\"block-code-header\">\n\t\t<li><a href=\"\" ng-click=\"showCode(0)\" ng-class=\"{active: (0 == tab)}\">JavaScript</a></li>\n\t</ul>\n\t<div class=\"block-code-code\"><span ng-if=\"tab == 0\">\n\t\t\t<button ng-click=\"copyCode(887)\" class=\"copy-code-button\"><span ng-show=\"!copied\" class=\"fa fa-clipboard\"></span><span ng-show=\"copied\" class=\"fa fa-check\"></span></button>\n\t\t\t<textarea ng-non-bindable=\"ng-non-bindable\" style=\"position: absolute; left: -10000px;\" id=\"text-code-887\">const Dash = require('dash');\n\nconst clientOpts = {\n  network: 'testnet',\n  wallet: {\n    mnemonic: 'a Dash wallet mnemonic with funds goes here',\n    unsafeOptions: {\n      skipSynchronizationBeforeHeight: 650000, // only sync from early-2022\n    },\n  },\n  apps: {\n    tutorialContract: {\n      contractId: '3iaEhdyAVbmSjd59CT6SCrqPjfAfMdPTc8ksydgqSaWE',\n    },\n  },\n};\nconst client = new Dash.Client(clientOpts);\n\nconst updateNoteDocument = async () =&gt; {\n  const { platform } = client;\n  const identity = await platform.identities.get('an identity ID goes here');\n  const documentId = 'an existing document ID goes here';\n\n  // Retrieve the existing document\n  const [document] = await client.platform.documents.get(\n    'tutorialContract.note',\n    { where: [['$id', '==', documentId]] },\n  );\n\n  // Update document\n  document.set('message', `Updated document @ ${new Date().toUTCString()}`);\n\n  // Sign and submit the document replace transition\n  return platform.documents.broadcast({ replace: [document] }, identity);\n};\n\nupdateNoteDocument()\n  .then((d) =&gt; console.log('Document updated:\\n', d))\n  .catch((e) =&gt; console.error('Something went wrong:\\n', e))\n  .finally(() =&gt; client.disconnect());</textarea>\n\t\t\t<pre id=\"code-887\"><code><span class='cm-s-neo'><span class=\"cm-keyword\">const</span> <span class=\"cm-def\">Dash</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">require</span>(<span class=\"cm-string\">'dash'</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">clientOpts</span> <span class=\"cm-operator\">=</span> {\n  <span class=\"cm-property\">network</span>: <span class=\"cm-string\">'testnet'</span>,\n  <span class=\"cm-property\">wallet</span>: {\n    <span class=\"cm-property\">mnemonic</span>: <span class=\"cm-string\">'a Dash wallet mnemonic with funds goes here'</span>,\n    <span class=\"cm-property\">unsafeOptions</span>: {\n      <span class=\"cm-property\">skipSynchronizationBeforeHeight</span>: <span class=\"cm-number\">650000</span>, <span class=\"cm-comment\">&#47;&#47; only sync from early-2022</span>\n    },\n  },\n  <span class=\"cm-property\">apps</span>: {\n    <span class=\"cm-property\">tutorialContract</span>: {\n      <span class=\"cm-property\">contractId</span>: <span class=\"cm-string\">'3iaEhdyAVbmSjd59CT6SCrqPjfAfMdPTc8ksydgqSaWE'</span>,\n    },\n  },\n};\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">client</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">new</span> <span class=\"cm-variable\">Dash</span>.<span class=\"cm-property\">Client</span>(<span class=\"cm-variable\">clientOpts</span>);\n\n<span class=\"cm-keyword\">const</span> <span class=\"cm-def\">updateNoteDocument</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">async</span> () <span class=\"cm-operator\">=&gt;</span> {\n  <span class=\"cm-keyword\">const</span> { <span class=\"cm-def\">platform</span> } <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">client</span>;\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">identity</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">identities</span>.<span class=\"cm-property\">get</span>(<span class=\"cm-string\">'an identity ID goes here'</span>);\n  <span class=\"cm-keyword\">const</span> <span class=\"cm-def\">documentId</span> <span class=\"cm-operator\">=</span> <span class=\"cm-string\">'an existing document ID goes here'</span>;\n\n  <span class=\"cm-comment\">&#47;&#47; Retrieve the existing document</span>\n  <span class=\"cm-keyword\">const</span> [<span class=\"cm-def\">document</span>] <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">await</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">platform</span>.<span class=\"cm-property\">documents</span>.<span class=\"cm-property\">get</span>(\n    <span class=\"cm-string\">'tutorialContract.note'</span>,\n    { <span class=\"cm-property\">where</span>: [[<span class=\"cm-string\">'$id'</span>, <span class=\"cm-string\">'=='</span>, <span class=\"cm-variable-2\">documentId</span>]] },\n  );\n\n  <span class=\"cm-comment\">&#47;&#47; Update document</span>\n  <span class=\"cm-variable-2\">document</span>.<span class=\"cm-property\">set</span>(<span class=\"cm-string\">'message'</span>, <span class=\"cm-string-2\">`Updated document @ ${</span><span class=\"cm-keyword\">new</span> <span class=\"cm-variable\">Date</span>().<span class=\"cm-property\">toUTCString</span>()<span class=\"cm-string-2\">}`</span>);\n\n  <span class=\"cm-comment\">&#47;&#47; Sign and submit the document replace transition</span>\n  <span class=\"cm-keyword\">return</span> <span class=\"cm-variable-2\">platform</span>.<span class=\"cm-property\">documents</span>.<span class=\"cm-property\">broadcast</span>({ <span class=\"cm-property\">replace</span>: [<span class=\"cm-variable-2\">document</span>] }, <span class=\"cm-variable-2\">identity</span>);\n};\n\n<span class=\"cm-variable\">updateNoteDocument</span>()\n  .<span class=\"cm-property\">then</span>((<span class=\"cm-def\">d</span>) <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-string\">'Document updated:\\n'</span>, <span class=\"cm-variable-2\">d</span>))\n  .<span class=\"cm-property\">catch</span>((<span class=\"cm-def\">e</span>) <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">error</span>(<span class=\"cm-string\">'Something went wrong:\\n'</span>, <span class=\"cm-variable-2\">e</span>))\n  .<span class=\"cm-property\">finally</span>(() <span class=\"cm-operator\">=&gt;</span> <span class=\"cm-variable\">client</span>.<span class=\"cm-property\">disconnect</span>());</span></code></pre></span>\n\t</div>\n</div>\n<div class=\"magic-block-textarea\"><blockquote>\n<p>\ud83d\udc4d Initializing the Client with a contract identity</p>\n<p>The example above shows how access to contract documents via <code>&lt;contract name&gt;.&lt;contract document&gt;</code> syntax (e.g. <code>tutorialContract.note</code>) can be enabled by passing a contract identity to the constructor. Please refer to the <a href=\"https://github.com/dashevo/platform/blob/master/packages/js-dash-sdk/docs/getting-started/multiple-apps.md\">Dash SDK documentation</a> for details.</p>\n</blockquote>\n<h1 class=\"header-scroll\"><div class=\"anchor waypoint\" id=\"section-whats-happening\"></div>What&#39;s happening<a class=\"fa fa-anchor\" href=\"#section-whats-happening\"></a></h1>\n<p>After we initialize the Client, we retrieve the document to be updated via <code>platform.documents.get</code> using its <code>id</code>. Once the document has been retrieved, we must submit it to <a href=\"explanation-dapi\">DAPI</a> with the desired data updates. Documents are submitted in batches that may contain multiple documents to be created, replaced, or deleted. In this example, a single document is being updated.</p>\n<p>The <code>platform.documents.broadcast</code> method then takes the document batch (e.g. <code>{replace: [noteDocument]}</code>) and an identity parameter. Internally, it creates a <a href=\"explanation-platform-protocol-state-transition\">State Transition</a> containing the previously created document, signs the state transition, and submits the signed state transition to DAPI.</p>\n<blockquote>\n<p>\ud83d\udcd8Wallet Operations</p>\n<p>The JavaScript SDK does not cache wallet information. It re-syncs the entire Core chain for some wallet operations (e.g. <code>client.getWalletAccount()</code>) which can result in wait times of  5+ minutes. </p>\n<p>A future release will add caching so that access is much faster after the initial sync. For now, the <code>skipSynchronizationBeforeHeight</code> option can be used to sync the wallet starting at a certain block height.</p>\n</blockquote>\n\n</div>"
}